
NucleoTestPrj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ade8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800aea8  0800aea8  0001aea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b308  0800b308  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b308  0800b308  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b308  0800b308  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b308  0800b308  0001b308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b30c  0800b30c  0001b30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800b310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  200001fc  0800b50c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c8  0800b50c  000209c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010aeb  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000263f  00000000  00000000  00030d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001058  00000000  00000000  00033350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  000343a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000e5c1  00000000  00000000  000352e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d62c  00000000  00000000  000438a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00056672  00000000  00000000  00050ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a753f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004680  00000000  00000000  000a75bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ae90 	.word	0x0800ae90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	0800ae90 	.word	0x0800ae90

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fb71 	bl	8001b10 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fac9 	bl	80019d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fb63 	bl	8001b10 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb59 	bl	8001b10 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 faeb 	bl	8001a48 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fae1 	bl	8001a48 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_f2uiz>:
 8000494:	219e      	movs	r1, #158	; 0x9e
 8000496:	b510      	push	{r4, lr}
 8000498:	05c9      	lsls	r1, r1, #23
 800049a:	1c04      	adds	r4, r0, #0
 800049c:	f002 fa9a 	bl	80029d4 <__aeabi_fcmpge>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d103      	bne.n	80004ac <__aeabi_f2uiz+0x18>
 80004a4:	1c20      	adds	r0, r4, #0
 80004a6:	f000 fc15 	bl	8000cd4 <__aeabi_f2iz>
 80004aa:	bd10      	pop	{r4, pc}
 80004ac:	219e      	movs	r1, #158	; 0x9e
 80004ae:	1c20      	adds	r0, r4, #0
 80004b0:	05c9      	lsls	r1, r1, #23
 80004b2:	f000 fa4b 	bl	800094c <__aeabi_fsub>
 80004b6:	f000 fc0d 	bl	8000cd4 <__aeabi_f2iz>
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	061b      	lsls	r3, r3, #24
 80004be:	469c      	mov	ip, r3
 80004c0:	4460      	add	r0, ip
 80004c2:	e7f2      	b.n	80004aa <__aeabi_f2uiz+0x16>

080004c4 <__aeabi_fdiv>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	4657      	mov	r7, sl
 80004c8:	464e      	mov	r6, r9
 80004ca:	4645      	mov	r5, r8
 80004cc:	46de      	mov	lr, fp
 80004ce:	0244      	lsls	r4, r0, #9
 80004d0:	b5e0      	push	{r5, r6, r7, lr}
 80004d2:	0046      	lsls	r6, r0, #1
 80004d4:	4688      	mov	r8, r1
 80004d6:	0a64      	lsrs	r4, r4, #9
 80004d8:	0e36      	lsrs	r6, r6, #24
 80004da:	0fc7      	lsrs	r7, r0, #31
 80004dc:	2e00      	cmp	r6, #0
 80004de:	d063      	beq.n	80005a8 <__aeabi_fdiv+0xe4>
 80004e0:	2eff      	cmp	r6, #255	; 0xff
 80004e2:	d024      	beq.n	800052e <__aeabi_fdiv+0x6a>
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	00e4      	lsls	r4, r4, #3
 80004e8:	04db      	lsls	r3, r3, #19
 80004ea:	431c      	orrs	r4, r3
 80004ec:	2300      	movs	r3, #0
 80004ee:	4699      	mov	r9, r3
 80004f0:	469b      	mov	fp, r3
 80004f2:	3e7f      	subs	r6, #127	; 0x7f
 80004f4:	4643      	mov	r3, r8
 80004f6:	4642      	mov	r2, r8
 80004f8:	025d      	lsls	r5, r3, #9
 80004fa:	0fd2      	lsrs	r2, r2, #31
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	0a6d      	lsrs	r5, r5, #9
 8000500:	0e1b      	lsrs	r3, r3, #24
 8000502:	4690      	mov	r8, r2
 8000504:	4692      	mov	sl, r2
 8000506:	d065      	beq.n	80005d4 <__aeabi_fdiv+0x110>
 8000508:	2bff      	cmp	r3, #255	; 0xff
 800050a:	d055      	beq.n	80005b8 <__aeabi_fdiv+0xf4>
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	2100      	movs	r1, #0
 8000510:	00ed      	lsls	r5, r5, #3
 8000512:	04d2      	lsls	r2, r2, #19
 8000514:	3b7f      	subs	r3, #127	; 0x7f
 8000516:	4315      	orrs	r5, r2
 8000518:	1af6      	subs	r6, r6, r3
 800051a:	4643      	mov	r3, r8
 800051c:	464a      	mov	r2, r9
 800051e:	407b      	eors	r3, r7
 8000520:	2a0f      	cmp	r2, #15
 8000522:	d900      	bls.n	8000526 <__aeabi_fdiv+0x62>
 8000524:	e08d      	b.n	8000642 <__aeabi_fdiv+0x17e>
 8000526:	486d      	ldr	r0, [pc, #436]	; (80006dc <__aeabi_fdiv+0x218>)
 8000528:	0092      	lsls	r2, r2, #2
 800052a:	5882      	ldr	r2, [r0, r2]
 800052c:	4697      	mov	pc, r2
 800052e:	2c00      	cmp	r4, #0
 8000530:	d154      	bne.n	80005dc <__aeabi_fdiv+0x118>
 8000532:	2308      	movs	r3, #8
 8000534:	4699      	mov	r9, r3
 8000536:	3b06      	subs	r3, #6
 8000538:	26ff      	movs	r6, #255	; 0xff
 800053a:	469b      	mov	fp, r3
 800053c:	e7da      	b.n	80004f4 <__aeabi_fdiv+0x30>
 800053e:	2500      	movs	r5, #0
 8000540:	4653      	mov	r3, sl
 8000542:	2902      	cmp	r1, #2
 8000544:	d01b      	beq.n	800057e <__aeabi_fdiv+0xba>
 8000546:	2903      	cmp	r1, #3
 8000548:	d100      	bne.n	800054c <__aeabi_fdiv+0x88>
 800054a:	e0bf      	b.n	80006cc <__aeabi_fdiv+0x208>
 800054c:	2901      	cmp	r1, #1
 800054e:	d028      	beq.n	80005a2 <__aeabi_fdiv+0xde>
 8000550:	0030      	movs	r0, r6
 8000552:	307f      	adds	r0, #127	; 0x7f
 8000554:	2800      	cmp	r0, #0
 8000556:	dd20      	ble.n	800059a <__aeabi_fdiv+0xd6>
 8000558:	076a      	lsls	r2, r5, #29
 800055a:	d004      	beq.n	8000566 <__aeabi_fdiv+0xa2>
 800055c:	220f      	movs	r2, #15
 800055e:	402a      	ands	r2, r5
 8000560:	2a04      	cmp	r2, #4
 8000562:	d000      	beq.n	8000566 <__aeabi_fdiv+0xa2>
 8000564:	3504      	adds	r5, #4
 8000566:	012a      	lsls	r2, r5, #4
 8000568:	d503      	bpl.n	8000572 <__aeabi_fdiv+0xae>
 800056a:	0030      	movs	r0, r6
 800056c:	4a5c      	ldr	r2, [pc, #368]	; (80006e0 <__aeabi_fdiv+0x21c>)
 800056e:	3080      	adds	r0, #128	; 0x80
 8000570:	4015      	ands	r5, r2
 8000572:	28fe      	cmp	r0, #254	; 0xfe
 8000574:	dc03      	bgt.n	800057e <__aeabi_fdiv+0xba>
 8000576:	01ac      	lsls	r4, r5, #6
 8000578:	0a64      	lsrs	r4, r4, #9
 800057a:	b2c2      	uxtb	r2, r0
 800057c:	e001      	b.n	8000582 <__aeabi_fdiv+0xbe>
 800057e:	22ff      	movs	r2, #255	; 0xff
 8000580:	2400      	movs	r4, #0
 8000582:	0264      	lsls	r4, r4, #9
 8000584:	05d2      	lsls	r2, r2, #23
 8000586:	0a60      	lsrs	r0, r4, #9
 8000588:	07db      	lsls	r3, r3, #31
 800058a:	4310      	orrs	r0, r2
 800058c:	4318      	orrs	r0, r3
 800058e:	bc3c      	pop	{r2, r3, r4, r5}
 8000590:	4690      	mov	r8, r2
 8000592:	4699      	mov	r9, r3
 8000594:	46a2      	mov	sl, r4
 8000596:	46ab      	mov	fp, r5
 8000598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059a:	2201      	movs	r2, #1
 800059c:	1a10      	subs	r0, r2, r0
 800059e:	281b      	cmp	r0, #27
 80005a0:	dd7c      	ble.n	800069c <__aeabi_fdiv+0x1d8>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2400      	movs	r4, #0
 80005a6:	e7ec      	b.n	8000582 <__aeabi_fdiv+0xbe>
 80005a8:	2c00      	cmp	r4, #0
 80005aa:	d11d      	bne.n	80005e8 <__aeabi_fdiv+0x124>
 80005ac:	2304      	movs	r3, #4
 80005ae:	4699      	mov	r9, r3
 80005b0:	3b03      	subs	r3, #3
 80005b2:	2600      	movs	r6, #0
 80005b4:	469b      	mov	fp, r3
 80005b6:	e79d      	b.n	80004f4 <__aeabi_fdiv+0x30>
 80005b8:	3eff      	subs	r6, #255	; 0xff
 80005ba:	2d00      	cmp	r5, #0
 80005bc:	d120      	bne.n	8000600 <__aeabi_fdiv+0x13c>
 80005be:	2102      	movs	r1, #2
 80005c0:	4643      	mov	r3, r8
 80005c2:	464a      	mov	r2, r9
 80005c4:	407b      	eors	r3, r7
 80005c6:	430a      	orrs	r2, r1
 80005c8:	2a0f      	cmp	r2, #15
 80005ca:	d8d8      	bhi.n	800057e <__aeabi_fdiv+0xba>
 80005cc:	4845      	ldr	r0, [pc, #276]	; (80006e4 <__aeabi_fdiv+0x220>)
 80005ce:	0092      	lsls	r2, r2, #2
 80005d0:	5882      	ldr	r2, [r0, r2]
 80005d2:	4697      	mov	pc, r2
 80005d4:	2d00      	cmp	r5, #0
 80005d6:	d119      	bne.n	800060c <__aeabi_fdiv+0x148>
 80005d8:	2101      	movs	r1, #1
 80005da:	e7f1      	b.n	80005c0 <__aeabi_fdiv+0xfc>
 80005dc:	230c      	movs	r3, #12
 80005de:	4699      	mov	r9, r3
 80005e0:	3b09      	subs	r3, #9
 80005e2:	26ff      	movs	r6, #255	; 0xff
 80005e4:	469b      	mov	fp, r3
 80005e6:	e785      	b.n	80004f4 <__aeabi_fdiv+0x30>
 80005e8:	0020      	movs	r0, r4
 80005ea:	f002 f9fd 	bl	80029e8 <__clzsi2>
 80005ee:	2676      	movs	r6, #118	; 0x76
 80005f0:	1f43      	subs	r3, r0, #5
 80005f2:	409c      	lsls	r4, r3
 80005f4:	2300      	movs	r3, #0
 80005f6:	4276      	negs	r6, r6
 80005f8:	1a36      	subs	r6, r6, r0
 80005fa:	4699      	mov	r9, r3
 80005fc:	469b      	mov	fp, r3
 80005fe:	e779      	b.n	80004f4 <__aeabi_fdiv+0x30>
 8000600:	464a      	mov	r2, r9
 8000602:	2303      	movs	r3, #3
 8000604:	431a      	orrs	r2, r3
 8000606:	4691      	mov	r9, r2
 8000608:	2103      	movs	r1, #3
 800060a:	e786      	b.n	800051a <__aeabi_fdiv+0x56>
 800060c:	0028      	movs	r0, r5
 800060e:	f002 f9eb 	bl	80029e8 <__clzsi2>
 8000612:	1f43      	subs	r3, r0, #5
 8000614:	1836      	adds	r6, r6, r0
 8000616:	409d      	lsls	r5, r3
 8000618:	3676      	adds	r6, #118	; 0x76
 800061a:	2100      	movs	r1, #0
 800061c:	e77d      	b.n	800051a <__aeabi_fdiv+0x56>
 800061e:	2480      	movs	r4, #128	; 0x80
 8000620:	2300      	movs	r3, #0
 8000622:	03e4      	lsls	r4, r4, #15
 8000624:	22ff      	movs	r2, #255	; 0xff
 8000626:	e7ac      	b.n	8000582 <__aeabi_fdiv+0xbe>
 8000628:	2500      	movs	r5, #0
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	03db      	lsls	r3, r3, #15
 800062e:	421c      	tst	r4, r3
 8000630:	d028      	beq.n	8000684 <__aeabi_fdiv+0x1c0>
 8000632:	421d      	tst	r5, r3
 8000634:	d126      	bne.n	8000684 <__aeabi_fdiv+0x1c0>
 8000636:	432b      	orrs	r3, r5
 8000638:	025c      	lsls	r4, r3, #9
 800063a:	0a64      	lsrs	r4, r4, #9
 800063c:	4643      	mov	r3, r8
 800063e:	22ff      	movs	r2, #255	; 0xff
 8000640:	e79f      	b.n	8000582 <__aeabi_fdiv+0xbe>
 8000642:	0162      	lsls	r2, r4, #5
 8000644:	016c      	lsls	r4, r5, #5
 8000646:	42a2      	cmp	r2, r4
 8000648:	d224      	bcs.n	8000694 <__aeabi_fdiv+0x1d0>
 800064a:	211b      	movs	r1, #27
 800064c:	2500      	movs	r5, #0
 800064e:	3e01      	subs	r6, #1
 8000650:	2701      	movs	r7, #1
 8000652:	0010      	movs	r0, r2
 8000654:	006d      	lsls	r5, r5, #1
 8000656:	0052      	lsls	r2, r2, #1
 8000658:	2800      	cmp	r0, #0
 800065a:	db01      	blt.n	8000660 <__aeabi_fdiv+0x19c>
 800065c:	4294      	cmp	r4, r2
 800065e:	d801      	bhi.n	8000664 <__aeabi_fdiv+0x1a0>
 8000660:	1b12      	subs	r2, r2, r4
 8000662:	433d      	orrs	r5, r7
 8000664:	3901      	subs	r1, #1
 8000666:	2900      	cmp	r1, #0
 8000668:	d1f3      	bne.n	8000652 <__aeabi_fdiv+0x18e>
 800066a:	0014      	movs	r4, r2
 800066c:	1e62      	subs	r2, r4, #1
 800066e:	4194      	sbcs	r4, r2
 8000670:	4325      	orrs	r5, r4
 8000672:	e76d      	b.n	8000550 <__aeabi_fdiv+0x8c>
 8000674:	46ba      	mov	sl, r7
 8000676:	4659      	mov	r1, fp
 8000678:	0025      	movs	r5, r4
 800067a:	4653      	mov	r3, sl
 800067c:	2902      	cmp	r1, #2
 800067e:	d000      	beq.n	8000682 <__aeabi_fdiv+0x1be>
 8000680:	e761      	b.n	8000546 <__aeabi_fdiv+0x82>
 8000682:	e77c      	b.n	800057e <__aeabi_fdiv+0xba>
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	03db      	lsls	r3, r3, #15
 8000688:	431c      	orrs	r4, r3
 800068a:	0264      	lsls	r4, r4, #9
 800068c:	0a64      	lsrs	r4, r4, #9
 800068e:	003b      	movs	r3, r7
 8000690:	22ff      	movs	r2, #255	; 0xff
 8000692:	e776      	b.n	8000582 <__aeabi_fdiv+0xbe>
 8000694:	1b12      	subs	r2, r2, r4
 8000696:	211a      	movs	r1, #26
 8000698:	2501      	movs	r5, #1
 800069a:	e7d9      	b.n	8000650 <__aeabi_fdiv+0x18c>
 800069c:	369e      	adds	r6, #158	; 0x9e
 800069e:	002a      	movs	r2, r5
 80006a0:	40b5      	lsls	r5, r6
 80006a2:	002c      	movs	r4, r5
 80006a4:	40c2      	lsrs	r2, r0
 80006a6:	1e65      	subs	r5, r4, #1
 80006a8:	41ac      	sbcs	r4, r5
 80006aa:	4314      	orrs	r4, r2
 80006ac:	0762      	lsls	r2, r4, #29
 80006ae:	d004      	beq.n	80006ba <__aeabi_fdiv+0x1f6>
 80006b0:	220f      	movs	r2, #15
 80006b2:	4022      	ands	r2, r4
 80006b4:	2a04      	cmp	r2, #4
 80006b6:	d000      	beq.n	80006ba <__aeabi_fdiv+0x1f6>
 80006b8:	3404      	adds	r4, #4
 80006ba:	0162      	lsls	r2, r4, #5
 80006bc:	d403      	bmi.n	80006c6 <__aeabi_fdiv+0x202>
 80006be:	01a4      	lsls	r4, r4, #6
 80006c0:	0a64      	lsrs	r4, r4, #9
 80006c2:	2200      	movs	r2, #0
 80006c4:	e75d      	b.n	8000582 <__aeabi_fdiv+0xbe>
 80006c6:	2201      	movs	r2, #1
 80006c8:	2400      	movs	r4, #0
 80006ca:	e75a      	b.n	8000582 <__aeabi_fdiv+0xbe>
 80006cc:	2480      	movs	r4, #128	; 0x80
 80006ce:	03e4      	lsls	r4, r4, #15
 80006d0:	432c      	orrs	r4, r5
 80006d2:	0264      	lsls	r4, r4, #9
 80006d4:	0a64      	lsrs	r4, r4, #9
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	e753      	b.n	8000582 <__aeabi_fdiv+0xbe>
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	0800af54 	.word	0x0800af54
 80006e0:	f7ffffff 	.word	0xf7ffffff
 80006e4:	0800af94 	.word	0x0800af94

080006e8 <__aeabi_fmul>:
 80006e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ea:	464e      	mov	r6, r9
 80006ec:	4657      	mov	r7, sl
 80006ee:	4645      	mov	r5, r8
 80006f0:	46de      	mov	lr, fp
 80006f2:	b5e0      	push	{r5, r6, r7, lr}
 80006f4:	0243      	lsls	r3, r0, #9
 80006f6:	0a5b      	lsrs	r3, r3, #9
 80006f8:	0045      	lsls	r5, r0, #1
 80006fa:	b083      	sub	sp, #12
 80006fc:	1c0f      	adds	r7, r1, #0
 80006fe:	4699      	mov	r9, r3
 8000700:	0e2d      	lsrs	r5, r5, #24
 8000702:	0fc6      	lsrs	r6, r0, #31
 8000704:	2d00      	cmp	r5, #0
 8000706:	d057      	beq.n	80007b8 <__aeabi_fmul+0xd0>
 8000708:	2dff      	cmp	r5, #255	; 0xff
 800070a:	d024      	beq.n	8000756 <__aeabi_fmul+0x6e>
 800070c:	2080      	movs	r0, #128	; 0x80
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	04c0      	lsls	r0, r0, #19
 8000712:	4318      	orrs	r0, r3
 8000714:	2300      	movs	r3, #0
 8000716:	4681      	mov	r9, r0
 8000718:	469a      	mov	sl, r3
 800071a:	469b      	mov	fp, r3
 800071c:	3d7f      	subs	r5, #127	; 0x7f
 800071e:	027c      	lsls	r4, r7, #9
 8000720:	007a      	lsls	r2, r7, #1
 8000722:	0ffb      	lsrs	r3, r7, #31
 8000724:	0a64      	lsrs	r4, r4, #9
 8000726:	0e12      	lsrs	r2, r2, #24
 8000728:	4698      	mov	r8, r3
 800072a:	d023      	beq.n	8000774 <__aeabi_fmul+0x8c>
 800072c:	2aff      	cmp	r2, #255	; 0xff
 800072e:	d04b      	beq.n	80007c8 <__aeabi_fmul+0xe0>
 8000730:	00e3      	lsls	r3, r4, #3
 8000732:	2480      	movs	r4, #128	; 0x80
 8000734:	2000      	movs	r0, #0
 8000736:	04e4      	lsls	r4, r4, #19
 8000738:	3a7f      	subs	r2, #127	; 0x7f
 800073a:	431c      	orrs	r4, r3
 800073c:	18ad      	adds	r5, r5, r2
 800073e:	1c6b      	adds	r3, r5, #1
 8000740:	4647      	mov	r7, r8
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	4653      	mov	r3, sl
 8000746:	4077      	eors	r7, r6
 8000748:	003a      	movs	r2, r7
 800074a:	2b0f      	cmp	r3, #15
 800074c:	d848      	bhi.n	80007e0 <__aeabi_fmul+0xf8>
 800074e:	497d      	ldr	r1, [pc, #500]	; (8000944 <__aeabi_fmul+0x25c>)
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	58cb      	ldr	r3, [r1, r3]
 8000754:	469f      	mov	pc, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d000      	beq.n	800075c <__aeabi_fmul+0x74>
 800075a:	e085      	b.n	8000868 <__aeabi_fmul+0x180>
 800075c:	3308      	adds	r3, #8
 800075e:	469a      	mov	sl, r3
 8000760:	3b06      	subs	r3, #6
 8000762:	469b      	mov	fp, r3
 8000764:	027c      	lsls	r4, r7, #9
 8000766:	007a      	lsls	r2, r7, #1
 8000768:	0ffb      	lsrs	r3, r7, #31
 800076a:	25ff      	movs	r5, #255	; 0xff
 800076c:	0a64      	lsrs	r4, r4, #9
 800076e:	0e12      	lsrs	r2, r2, #24
 8000770:	4698      	mov	r8, r3
 8000772:	d1db      	bne.n	800072c <__aeabi_fmul+0x44>
 8000774:	2c00      	cmp	r4, #0
 8000776:	d000      	beq.n	800077a <__aeabi_fmul+0x92>
 8000778:	e090      	b.n	800089c <__aeabi_fmul+0x1b4>
 800077a:	4652      	mov	r2, sl
 800077c:	2301      	movs	r3, #1
 800077e:	431a      	orrs	r2, r3
 8000780:	4692      	mov	sl, r2
 8000782:	2001      	movs	r0, #1
 8000784:	e7db      	b.n	800073e <__aeabi_fmul+0x56>
 8000786:	464c      	mov	r4, r9
 8000788:	4658      	mov	r0, fp
 800078a:	0017      	movs	r7, r2
 800078c:	2802      	cmp	r0, #2
 800078e:	d024      	beq.n	80007da <__aeabi_fmul+0xf2>
 8000790:	2803      	cmp	r0, #3
 8000792:	d100      	bne.n	8000796 <__aeabi_fmul+0xae>
 8000794:	e0cf      	b.n	8000936 <__aeabi_fmul+0x24e>
 8000796:	2200      	movs	r2, #0
 8000798:	2300      	movs	r3, #0
 800079a:	2801      	cmp	r0, #1
 800079c:	d14d      	bne.n	800083a <__aeabi_fmul+0x152>
 800079e:	0258      	lsls	r0, r3, #9
 80007a0:	05d2      	lsls	r2, r2, #23
 80007a2:	0a40      	lsrs	r0, r0, #9
 80007a4:	07ff      	lsls	r7, r7, #31
 80007a6:	4310      	orrs	r0, r2
 80007a8:	4338      	orrs	r0, r7
 80007aa:	b003      	add	sp, #12
 80007ac:	bc3c      	pop	{r2, r3, r4, r5}
 80007ae:	4690      	mov	r8, r2
 80007b0:	4699      	mov	r9, r3
 80007b2:	46a2      	mov	sl, r4
 80007b4:	46ab      	mov	fp, r5
 80007b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d15b      	bne.n	8000874 <__aeabi_fmul+0x18c>
 80007bc:	2304      	movs	r3, #4
 80007be:	469a      	mov	sl, r3
 80007c0:	3b03      	subs	r3, #3
 80007c2:	2500      	movs	r5, #0
 80007c4:	469b      	mov	fp, r3
 80007c6:	e7aa      	b.n	800071e <__aeabi_fmul+0x36>
 80007c8:	35ff      	adds	r5, #255	; 0xff
 80007ca:	2c00      	cmp	r4, #0
 80007cc:	d160      	bne.n	8000890 <__aeabi_fmul+0x1a8>
 80007ce:	4652      	mov	r2, sl
 80007d0:	2302      	movs	r3, #2
 80007d2:	431a      	orrs	r2, r3
 80007d4:	4692      	mov	sl, r2
 80007d6:	2002      	movs	r0, #2
 80007d8:	e7b1      	b.n	800073e <__aeabi_fmul+0x56>
 80007da:	22ff      	movs	r2, #255	; 0xff
 80007dc:	2300      	movs	r3, #0
 80007de:	e7de      	b.n	800079e <__aeabi_fmul+0xb6>
 80007e0:	464b      	mov	r3, r9
 80007e2:	0c1b      	lsrs	r3, r3, #16
 80007e4:	469c      	mov	ip, r3
 80007e6:	464b      	mov	r3, r9
 80007e8:	0426      	lsls	r6, r4, #16
 80007ea:	0c36      	lsrs	r6, r6, #16
 80007ec:	0418      	lsls	r0, r3, #16
 80007ee:	4661      	mov	r1, ip
 80007f0:	0033      	movs	r3, r6
 80007f2:	0c22      	lsrs	r2, r4, #16
 80007f4:	4664      	mov	r4, ip
 80007f6:	0c00      	lsrs	r0, r0, #16
 80007f8:	4343      	muls	r3, r0
 80007fa:	434e      	muls	r6, r1
 80007fc:	4350      	muls	r0, r2
 80007fe:	4354      	muls	r4, r2
 8000800:	1980      	adds	r0, r0, r6
 8000802:	0c1a      	lsrs	r2, r3, #16
 8000804:	1812      	adds	r2, r2, r0
 8000806:	4296      	cmp	r6, r2
 8000808:	d903      	bls.n	8000812 <__aeabi_fmul+0x12a>
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	0249      	lsls	r1, r1, #9
 800080e:	468c      	mov	ip, r1
 8000810:	4464      	add	r4, ip
 8000812:	041b      	lsls	r3, r3, #16
 8000814:	0c1b      	lsrs	r3, r3, #16
 8000816:	0410      	lsls	r0, r2, #16
 8000818:	18c0      	adds	r0, r0, r3
 800081a:	0183      	lsls	r3, r0, #6
 800081c:	1e5e      	subs	r6, r3, #1
 800081e:	41b3      	sbcs	r3, r6
 8000820:	0e80      	lsrs	r0, r0, #26
 8000822:	4318      	orrs	r0, r3
 8000824:	0c13      	lsrs	r3, r2, #16
 8000826:	191b      	adds	r3, r3, r4
 8000828:	019b      	lsls	r3, r3, #6
 800082a:	4303      	orrs	r3, r0
 800082c:	001c      	movs	r4, r3
 800082e:	0123      	lsls	r3, r4, #4
 8000830:	d579      	bpl.n	8000926 <__aeabi_fmul+0x23e>
 8000832:	2301      	movs	r3, #1
 8000834:	0862      	lsrs	r2, r4, #1
 8000836:	401c      	ands	r4, r3
 8000838:	4314      	orrs	r4, r2
 800083a:	9a01      	ldr	r2, [sp, #4]
 800083c:	327f      	adds	r2, #127	; 0x7f
 800083e:	2a00      	cmp	r2, #0
 8000840:	dd4d      	ble.n	80008de <__aeabi_fmul+0x1f6>
 8000842:	0763      	lsls	r3, r4, #29
 8000844:	d004      	beq.n	8000850 <__aeabi_fmul+0x168>
 8000846:	230f      	movs	r3, #15
 8000848:	4023      	ands	r3, r4
 800084a:	2b04      	cmp	r3, #4
 800084c:	d000      	beq.n	8000850 <__aeabi_fmul+0x168>
 800084e:	3404      	adds	r4, #4
 8000850:	0123      	lsls	r3, r4, #4
 8000852:	d503      	bpl.n	800085c <__aeabi_fmul+0x174>
 8000854:	4b3c      	ldr	r3, [pc, #240]	; (8000948 <__aeabi_fmul+0x260>)
 8000856:	9a01      	ldr	r2, [sp, #4]
 8000858:	401c      	ands	r4, r3
 800085a:	3280      	adds	r2, #128	; 0x80
 800085c:	2afe      	cmp	r2, #254	; 0xfe
 800085e:	dcbc      	bgt.n	80007da <__aeabi_fmul+0xf2>
 8000860:	01a3      	lsls	r3, r4, #6
 8000862:	0a5b      	lsrs	r3, r3, #9
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	e79a      	b.n	800079e <__aeabi_fmul+0xb6>
 8000868:	230c      	movs	r3, #12
 800086a:	469a      	mov	sl, r3
 800086c:	3b09      	subs	r3, #9
 800086e:	25ff      	movs	r5, #255	; 0xff
 8000870:	469b      	mov	fp, r3
 8000872:	e754      	b.n	800071e <__aeabi_fmul+0x36>
 8000874:	0018      	movs	r0, r3
 8000876:	f002 f8b7 	bl	80029e8 <__clzsi2>
 800087a:	464a      	mov	r2, r9
 800087c:	1f43      	subs	r3, r0, #5
 800087e:	2576      	movs	r5, #118	; 0x76
 8000880:	409a      	lsls	r2, r3
 8000882:	2300      	movs	r3, #0
 8000884:	426d      	negs	r5, r5
 8000886:	4691      	mov	r9, r2
 8000888:	1a2d      	subs	r5, r5, r0
 800088a:	469a      	mov	sl, r3
 800088c:	469b      	mov	fp, r3
 800088e:	e746      	b.n	800071e <__aeabi_fmul+0x36>
 8000890:	4652      	mov	r2, sl
 8000892:	2303      	movs	r3, #3
 8000894:	431a      	orrs	r2, r3
 8000896:	4692      	mov	sl, r2
 8000898:	2003      	movs	r0, #3
 800089a:	e750      	b.n	800073e <__aeabi_fmul+0x56>
 800089c:	0020      	movs	r0, r4
 800089e:	f002 f8a3 	bl	80029e8 <__clzsi2>
 80008a2:	1f43      	subs	r3, r0, #5
 80008a4:	1a2d      	subs	r5, r5, r0
 80008a6:	409c      	lsls	r4, r3
 80008a8:	3d76      	subs	r5, #118	; 0x76
 80008aa:	2000      	movs	r0, #0
 80008ac:	e747      	b.n	800073e <__aeabi_fmul+0x56>
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	2700      	movs	r7, #0
 80008b2:	03db      	lsls	r3, r3, #15
 80008b4:	22ff      	movs	r2, #255	; 0xff
 80008b6:	e772      	b.n	800079e <__aeabi_fmul+0xb6>
 80008b8:	4642      	mov	r2, r8
 80008ba:	e766      	b.n	800078a <__aeabi_fmul+0xa2>
 80008bc:	464c      	mov	r4, r9
 80008be:	0032      	movs	r2, r6
 80008c0:	4658      	mov	r0, fp
 80008c2:	e762      	b.n	800078a <__aeabi_fmul+0xa2>
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	464a      	mov	r2, r9
 80008c8:	03db      	lsls	r3, r3, #15
 80008ca:	421a      	tst	r2, r3
 80008cc:	d022      	beq.n	8000914 <__aeabi_fmul+0x22c>
 80008ce:	421c      	tst	r4, r3
 80008d0:	d120      	bne.n	8000914 <__aeabi_fmul+0x22c>
 80008d2:	4323      	orrs	r3, r4
 80008d4:	025b      	lsls	r3, r3, #9
 80008d6:	0a5b      	lsrs	r3, r3, #9
 80008d8:	4647      	mov	r7, r8
 80008da:	22ff      	movs	r2, #255	; 0xff
 80008dc:	e75f      	b.n	800079e <__aeabi_fmul+0xb6>
 80008de:	2301      	movs	r3, #1
 80008e0:	1a9a      	subs	r2, r3, r2
 80008e2:	2a1b      	cmp	r2, #27
 80008e4:	dc21      	bgt.n	800092a <__aeabi_fmul+0x242>
 80008e6:	0023      	movs	r3, r4
 80008e8:	9901      	ldr	r1, [sp, #4]
 80008ea:	40d3      	lsrs	r3, r2
 80008ec:	319e      	adds	r1, #158	; 0x9e
 80008ee:	408c      	lsls	r4, r1
 80008f0:	001a      	movs	r2, r3
 80008f2:	0023      	movs	r3, r4
 80008f4:	1e5c      	subs	r4, r3, #1
 80008f6:	41a3      	sbcs	r3, r4
 80008f8:	4313      	orrs	r3, r2
 80008fa:	075a      	lsls	r2, r3, #29
 80008fc:	d004      	beq.n	8000908 <__aeabi_fmul+0x220>
 80008fe:	220f      	movs	r2, #15
 8000900:	401a      	ands	r2, r3
 8000902:	2a04      	cmp	r2, #4
 8000904:	d000      	beq.n	8000908 <__aeabi_fmul+0x220>
 8000906:	3304      	adds	r3, #4
 8000908:	015a      	lsls	r2, r3, #5
 800090a:	d411      	bmi.n	8000930 <__aeabi_fmul+0x248>
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	0a5b      	lsrs	r3, r3, #9
 8000910:	2200      	movs	r2, #0
 8000912:	e744      	b.n	800079e <__aeabi_fmul+0xb6>
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	464a      	mov	r2, r9
 8000918:	03db      	lsls	r3, r3, #15
 800091a:	4313      	orrs	r3, r2
 800091c:	025b      	lsls	r3, r3, #9
 800091e:	0a5b      	lsrs	r3, r3, #9
 8000920:	0037      	movs	r7, r6
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	e73b      	b.n	800079e <__aeabi_fmul+0xb6>
 8000926:	9501      	str	r5, [sp, #4]
 8000928:	e787      	b.n	800083a <__aeabi_fmul+0x152>
 800092a:	2200      	movs	r2, #0
 800092c:	2300      	movs	r3, #0
 800092e:	e736      	b.n	800079e <__aeabi_fmul+0xb6>
 8000930:	2201      	movs	r2, #1
 8000932:	2300      	movs	r3, #0
 8000934:	e733      	b.n	800079e <__aeabi_fmul+0xb6>
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	03db      	lsls	r3, r3, #15
 800093a:	4323      	orrs	r3, r4
 800093c:	025b      	lsls	r3, r3, #9
 800093e:	0a5b      	lsrs	r3, r3, #9
 8000940:	22ff      	movs	r2, #255	; 0xff
 8000942:	e72c      	b.n	800079e <__aeabi_fmul+0xb6>
 8000944:	0800afd4 	.word	0x0800afd4
 8000948:	f7ffffff 	.word	0xf7ffffff

0800094c <__aeabi_fsub>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	4647      	mov	r7, r8
 8000950:	46ce      	mov	lr, r9
 8000952:	0044      	lsls	r4, r0, #1
 8000954:	0fc2      	lsrs	r2, r0, #31
 8000956:	b580      	push	{r7, lr}
 8000958:	0247      	lsls	r7, r0, #9
 800095a:	0248      	lsls	r0, r1, #9
 800095c:	0a40      	lsrs	r0, r0, #9
 800095e:	4684      	mov	ip, r0
 8000960:	4666      	mov	r6, ip
 8000962:	0048      	lsls	r0, r1, #1
 8000964:	0a7f      	lsrs	r7, r7, #9
 8000966:	0e24      	lsrs	r4, r4, #24
 8000968:	00f6      	lsls	r6, r6, #3
 800096a:	0025      	movs	r5, r4
 800096c:	4690      	mov	r8, r2
 800096e:	00fb      	lsls	r3, r7, #3
 8000970:	0e00      	lsrs	r0, r0, #24
 8000972:	0fc9      	lsrs	r1, r1, #31
 8000974:	46b1      	mov	r9, r6
 8000976:	28ff      	cmp	r0, #255	; 0xff
 8000978:	d100      	bne.n	800097c <__aeabi_fsub+0x30>
 800097a:	e085      	b.n	8000a88 <__aeabi_fsub+0x13c>
 800097c:	2601      	movs	r6, #1
 800097e:	4071      	eors	r1, r6
 8000980:	1a26      	subs	r6, r4, r0
 8000982:	4291      	cmp	r1, r2
 8000984:	d057      	beq.n	8000a36 <__aeabi_fsub+0xea>
 8000986:	2e00      	cmp	r6, #0
 8000988:	dd43      	ble.n	8000a12 <__aeabi_fsub+0xc6>
 800098a:	2800      	cmp	r0, #0
 800098c:	d000      	beq.n	8000990 <__aeabi_fsub+0x44>
 800098e:	e07f      	b.n	8000a90 <__aeabi_fsub+0x144>
 8000990:	4649      	mov	r1, r9
 8000992:	2900      	cmp	r1, #0
 8000994:	d100      	bne.n	8000998 <__aeabi_fsub+0x4c>
 8000996:	e0aa      	b.n	8000aee <__aeabi_fsub+0x1a2>
 8000998:	3e01      	subs	r6, #1
 800099a:	2e00      	cmp	r6, #0
 800099c:	d000      	beq.n	80009a0 <__aeabi_fsub+0x54>
 800099e:	e0f7      	b.n	8000b90 <__aeabi_fsub+0x244>
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	015a      	lsls	r2, r3, #5
 80009a4:	d400      	bmi.n	80009a8 <__aeabi_fsub+0x5c>
 80009a6:	e08b      	b.n	8000ac0 <__aeabi_fsub+0x174>
 80009a8:	019b      	lsls	r3, r3, #6
 80009aa:	099c      	lsrs	r4, r3, #6
 80009ac:	0020      	movs	r0, r4
 80009ae:	f002 f81b 	bl	80029e8 <__clzsi2>
 80009b2:	3805      	subs	r0, #5
 80009b4:	4084      	lsls	r4, r0
 80009b6:	4285      	cmp	r5, r0
 80009b8:	dd00      	ble.n	80009bc <__aeabi_fsub+0x70>
 80009ba:	e0d3      	b.n	8000b64 <__aeabi_fsub+0x218>
 80009bc:	1b45      	subs	r5, r0, r5
 80009be:	0023      	movs	r3, r4
 80009c0:	2020      	movs	r0, #32
 80009c2:	3501      	adds	r5, #1
 80009c4:	40eb      	lsrs	r3, r5
 80009c6:	1b45      	subs	r5, r0, r5
 80009c8:	40ac      	lsls	r4, r5
 80009ca:	1e62      	subs	r2, r4, #1
 80009cc:	4194      	sbcs	r4, r2
 80009ce:	4323      	orrs	r3, r4
 80009d0:	2407      	movs	r4, #7
 80009d2:	2500      	movs	r5, #0
 80009d4:	401c      	ands	r4, r3
 80009d6:	2201      	movs	r2, #1
 80009d8:	4641      	mov	r1, r8
 80009da:	400a      	ands	r2, r1
 80009dc:	2c00      	cmp	r4, #0
 80009de:	d004      	beq.n	80009ea <__aeabi_fsub+0x9e>
 80009e0:	210f      	movs	r1, #15
 80009e2:	4019      	ands	r1, r3
 80009e4:	2904      	cmp	r1, #4
 80009e6:	d000      	beq.n	80009ea <__aeabi_fsub+0x9e>
 80009e8:	3304      	adds	r3, #4
 80009ea:	0159      	lsls	r1, r3, #5
 80009ec:	d400      	bmi.n	80009f0 <__aeabi_fsub+0xa4>
 80009ee:	e080      	b.n	8000af2 <__aeabi_fsub+0x1a6>
 80009f0:	3501      	adds	r5, #1
 80009f2:	b2ec      	uxtb	r4, r5
 80009f4:	2dff      	cmp	r5, #255	; 0xff
 80009f6:	d000      	beq.n	80009fa <__aeabi_fsub+0xae>
 80009f8:	e0a3      	b.n	8000b42 <__aeabi_fsub+0x1f6>
 80009fa:	24ff      	movs	r4, #255	; 0xff
 80009fc:	2300      	movs	r3, #0
 80009fe:	025b      	lsls	r3, r3, #9
 8000a00:	05e4      	lsls	r4, r4, #23
 8000a02:	0a58      	lsrs	r0, r3, #9
 8000a04:	07d2      	lsls	r2, r2, #31
 8000a06:	4320      	orrs	r0, r4
 8000a08:	4310      	orrs	r0, r2
 8000a0a:	bc0c      	pop	{r2, r3}
 8000a0c:	4690      	mov	r8, r2
 8000a0e:	4699      	mov	r9, r3
 8000a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d174      	bne.n	8000b00 <__aeabi_fsub+0x1b4>
 8000a16:	1c60      	adds	r0, r4, #1
 8000a18:	b2c0      	uxtb	r0, r0
 8000a1a:	2801      	cmp	r0, #1
 8000a1c:	dc00      	bgt.n	8000a20 <__aeabi_fsub+0xd4>
 8000a1e:	e0a7      	b.n	8000b70 <__aeabi_fsub+0x224>
 8000a20:	464a      	mov	r2, r9
 8000a22:	1a9c      	subs	r4, r3, r2
 8000a24:	0162      	lsls	r2, r4, #5
 8000a26:	d500      	bpl.n	8000a2a <__aeabi_fsub+0xde>
 8000a28:	e0b6      	b.n	8000b98 <__aeabi_fsub+0x24c>
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d1be      	bne.n	80009ac <__aeabi_fsub+0x60>
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2400      	movs	r4, #0
 8000a32:	2300      	movs	r3, #0
 8000a34:	e7e3      	b.n	80009fe <__aeabi_fsub+0xb2>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	dc00      	bgt.n	8000a3c <__aeabi_fsub+0xf0>
 8000a3a:	e085      	b.n	8000b48 <__aeabi_fsub+0x1fc>
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d046      	beq.n	8000ace <__aeabi_fsub+0x182>
 8000a40:	2cff      	cmp	r4, #255	; 0xff
 8000a42:	d049      	beq.n	8000ad8 <__aeabi_fsub+0x18c>
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	4648      	mov	r0, r9
 8000a48:	04d2      	lsls	r2, r2, #19
 8000a4a:	4310      	orrs	r0, r2
 8000a4c:	4681      	mov	r9, r0
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2e1b      	cmp	r6, #27
 8000a52:	dc09      	bgt.n	8000a68 <__aeabi_fsub+0x11c>
 8000a54:	2020      	movs	r0, #32
 8000a56:	464c      	mov	r4, r9
 8000a58:	1b80      	subs	r0, r0, r6
 8000a5a:	4084      	lsls	r4, r0
 8000a5c:	464a      	mov	r2, r9
 8000a5e:	0020      	movs	r0, r4
 8000a60:	40f2      	lsrs	r2, r6
 8000a62:	1e44      	subs	r4, r0, #1
 8000a64:	41a0      	sbcs	r0, r4
 8000a66:	4302      	orrs	r2, r0
 8000a68:	189b      	adds	r3, r3, r2
 8000a6a:	015a      	lsls	r2, r3, #5
 8000a6c:	d528      	bpl.n	8000ac0 <__aeabi_fsub+0x174>
 8000a6e:	3501      	adds	r5, #1
 8000a70:	2dff      	cmp	r5, #255	; 0xff
 8000a72:	d100      	bne.n	8000a76 <__aeabi_fsub+0x12a>
 8000a74:	e0a8      	b.n	8000bc8 <__aeabi_fsub+0x27c>
 8000a76:	2201      	movs	r2, #1
 8000a78:	2407      	movs	r4, #7
 8000a7a:	4994      	ldr	r1, [pc, #592]	; (8000ccc <__aeabi_fsub+0x380>)
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	085b      	lsrs	r3, r3, #1
 8000a80:	400b      	ands	r3, r1
 8000a82:	4313      	orrs	r3, r2
 8000a84:	401c      	ands	r4, r3
 8000a86:	e7a6      	b.n	80009d6 <__aeabi_fsub+0x8a>
 8000a88:	2e00      	cmp	r6, #0
 8000a8a:	d000      	beq.n	8000a8e <__aeabi_fsub+0x142>
 8000a8c:	e778      	b.n	8000980 <__aeabi_fsub+0x34>
 8000a8e:	e775      	b.n	800097c <__aeabi_fsub+0x30>
 8000a90:	2cff      	cmp	r4, #255	; 0xff
 8000a92:	d054      	beq.n	8000b3e <__aeabi_fsub+0x1f2>
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	4649      	mov	r1, r9
 8000a98:	04d2      	lsls	r2, r2, #19
 8000a9a:	4311      	orrs	r1, r2
 8000a9c:	4689      	mov	r9, r1
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2e1b      	cmp	r6, #27
 8000aa2:	dc09      	bgt.n	8000ab8 <__aeabi_fsub+0x16c>
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	4648      	mov	r0, r9
 8000aa8:	1b89      	subs	r1, r1, r6
 8000aaa:	4088      	lsls	r0, r1
 8000aac:	464a      	mov	r2, r9
 8000aae:	0001      	movs	r1, r0
 8000ab0:	40f2      	lsrs	r2, r6
 8000ab2:	1e48      	subs	r0, r1, #1
 8000ab4:	4181      	sbcs	r1, r0
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	1a9b      	subs	r3, r3, r2
 8000aba:	015a      	lsls	r2, r3, #5
 8000abc:	d500      	bpl.n	8000ac0 <__aeabi_fsub+0x174>
 8000abe:	e773      	b.n	80009a8 <__aeabi_fsub+0x5c>
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4641      	mov	r1, r8
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	0759      	lsls	r1, r3, #29
 8000ac8:	d000      	beq.n	8000acc <__aeabi_fsub+0x180>
 8000aca:	e789      	b.n	80009e0 <__aeabi_fsub+0x94>
 8000acc:	e011      	b.n	8000af2 <__aeabi_fsub+0x1a6>
 8000ace:	4648      	mov	r0, r9
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d158      	bne.n	8000b86 <__aeabi_fsub+0x23a>
 8000ad4:	2cff      	cmp	r4, #255	; 0xff
 8000ad6:	d10c      	bne.n	8000af2 <__aeabi_fsub+0x1a6>
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fsub+0x194>
 8000ade:	e78c      	b.n	80009fa <__aeabi_fsub+0xae>
 8000ae0:	2080      	movs	r0, #128	; 0x80
 8000ae2:	03c0      	lsls	r0, r0, #15
 8000ae4:	4303      	orrs	r3, r0
 8000ae6:	025b      	lsls	r3, r3, #9
 8000ae8:	0a5b      	lsrs	r3, r3, #9
 8000aea:	24ff      	movs	r4, #255	; 0xff
 8000aec:	e787      	b.n	80009fe <__aeabi_fsub+0xb2>
 8000aee:	2cff      	cmp	r4, #255	; 0xff
 8000af0:	d025      	beq.n	8000b3e <__aeabi_fsub+0x1f2>
 8000af2:	08db      	lsrs	r3, r3, #3
 8000af4:	2dff      	cmp	r5, #255	; 0xff
 8000af6:	d0f0      	beq.n	8000ada <__aeabi_fsub+0x18e>
 8000af8:	025b      	lsls	r3, r3, #9
 8000afa:	0a5b      	lsrs	r3, r3, #9
 8000afc:	b2ec      	uxtb	r4, r5
 8000afe:	e77e      	b.n	80009fe <__aeabi_fsub+0xb2>
 8000b00:	2c00      	cmp	r4, #0
 8000b02:	d04d      	beq.n	8000ba0 <__aeabi_fsub+0x254>
 8000b04:	28ff      	cmp	r0, #255	; 0xff
 8000b06:	d018      	beq.n	8000b3a <__aeabi_fsub+0x1ee>
 8000b08:	2480      	movs	r4, #128	; 0x80
 8000b0a:	04e4      	lsls	r4, r4, #19
 8000b0c:	4272      	negs	r2, r6
 8000b0e:	4323      	orrs	r3, r4
 8000b10:	2a1b      	cmp	r2, #27
 8000b12:	dd00      	ble.n	8000b16 <__aeabi_fsub+0x1ca>
 8000b14:	e0c4      	b.n	8000ca0 <__aeabi_fsub+0x354>
 8000b16:	001c      	movs	r4, r3
 8000b18:	2520      	movs	r5, #32
 8000b1a:	40d4      	lsrs	r4, r2
 8000b1c:	1aaa      	subs	r2, r5, r2
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	1e5a      	subs	r2, r3, #1
 8000b22:	4193      	sbcs	r3, r2
 8000b24:	4323      	orrs	r3, r4
 8000b26:	464a      	mov	r2, r9
 8000b28:	0005      	movs	r5, r0
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	4688      	mov	r8, r1
 8000b2e:	e738      	b.n	80009a2 <__aeabi_fsub+0x56>
 8000b30:	1c72      	adds	r2, r6, #1
 8000b32:	d0f8      	beq.n	8000b26 <__aeabi_fsub+0x1da>
 8000b34:	43f2      	mvns	r2, r6
 8000b36:	28ff      	cmp	r0, #255	; 0xff
 8000b38:	d1ea      	bne.n	8000b10 <__aeabi_fsub+0x1c4>
 8000b3a:	000a      	movs	r2, r1
 8000b3c:	464b      	mov	r3, r9
 8000b3e:	25ff      	movs	r5, #255	; 0xff
 8000b40:	e7d7      	b.n	8000af2 <__aeabi_fsub+0x1a6>
 8000b42:	019b      	lsls	r3, r3, #6
 8000b44:	0a5b      	lsrs	r3, r3, #9
 8000b46:	e75a      	b.n	80009fe <__aeabi_fsub+0xb2>
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d141      	bne.n	8000bd0 <__aeabi_fsub+0x284>
 8000b4c:	1c65      	adds	r5, r4, #1
 8000b4e:	b2e9      	uxtb	r1, r5
 8000b50:	2901      	cmp	r1, #1
 8000b52:	dd45      	ble.n	8000be0 <__aeabi_fsub+0x294>
 8000b54:	2dff      	cmp	r5, #255	; 0xff
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fsub+0x20e>
 8000b58:	e74f      	b.n	80009fa <__aeabi_fsub+0xae>
 8000b5a:	2407      	movs	r4, #7
 8000b5c:	444b      	add	r3, r9
 8000b5e:	085b      	lsrs	r3, r3, #1
 8000b60:	401c      	ands	r4, r3
 8000b62:	e738      	b.n	80009d6 <__aeabi_fsub+0x8a>
 8000b64:	2207      	movs	r2, #7
 8000b66:	4b5a      	ldr	r3, [pc, #360]	; (8000cd0 <__aeabi_fsub+0x384>)
 8000b68:	1a2d      	subs	r5, r5, r0
 8000b6a:	4023      	ands	r3, r4
 8000b6c:	4014      	ands	r4, r2
 8000b6e:	e732      	b.n	80009d6 <__aeabi_fsub+0x8a>
 8000b70:	2c00      	cmp	r4, #0
 8000b72:	d11d      	bne.n	8000bb0 <__aeabi_fsub+0x264>
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d17a      	bne.n	8000c6e <__aeabi_fsub+0x322>
 8000b78:	464b      	mov	r3, r9
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fsub+0x234>
 8000b7e:	e091      	b.n	8000ca4 <__aeabi_fsub+0x358>
 8000b80:	000a      	movs	r2, r1
 8000b82:	2500      	movs	r5, #0
 8000b84:	e7b5      	b.n	8000af2 <__aeabi_fsub+0x1a6>
 8000b86:	3e01      	subs	r6, #1
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d119      	bne.n	8000bc0 <__aeabi_fsub+0x274>
 8000b8c:	444b      	add	r3, r9
 8000b8e:	e76c      	b.n	8000a6a <__aeabi_fsub+0x11e>
 8000b90:	2cff      	cmp	r4, #255	; 0xff
 8000b92:	d184      	bne.n	8000a9e <__aeabi_fsub+0x152>
 8000b94:	25ff      	movs	r5, #255	; 0xff
 8000b96:	e7ac      	b.n	8000af2 <__aeabi_fsub+0x1a6>
 8000b98:	464a      	mov	r2, r9
 8000b9a:	4688      	mov	r8, r1
 8000b9c:	1ad4      	subs	r4, r2, r3
 8000b9e:	e705      	b.n	80009ac <__aeabi_fsub+0x60>
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1c5      	bne.n	8000b30 <__aeabi_fsub+0x1e4>
 8000ba4:	000a      	movs	r2, r1
 8000ba6:	28ff      	cmp	r0, #255	; 0xff
 8000ba8:	d0c8      	beq.n	8000b3c <__aeabi_fsub+0x1f0>
 8000baa:	0005      	movs	r5, r0
 8000bac:	464b      	mov	r3, r9
 8000bae:	e7a0      	b.n	8000af2 <__aeabi_fsub+0x1a6>
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d149      	bne.n	8000c48 <__aeabi_fsub+0x2fc>
 8000bb4:	464b      	mov	r3, r9
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d077      	beq.n	8000caa <__aeabi_fsub+0x35e>
 8000bba:	000a      	movs	r2, r1
 8000bbc:	25ff      	movs	r5, #255	; 0xff
 8000bbe:	e798      	b.n	8000af2 <__aeabi_fsub+0x1a6>
 8000bc0:	2cff      	cmp	r4, #255	; 0xff
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_fsub+0x27a>
 8000bc4:	e743      	b.n	8000a4e <__aeabi_fsub+0x102>
 8000bc6:	e787      	b.n	8000ad8 <__aeabi_fsub+0x18c>
 8000bc8:	000a      	movs	r2, r1
 8000bca:	24ff      	movs	r4, #255	; 0xff
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e716      	b.n	80009fe <__aeabi_fsub+0xb2>
 8000bd0:	2c00      	cmp	r4, #0
 8000bd2:	d115      	bne.n	8000c00 <__aeabi_fsub+0x2b4>
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d157      	bne.n	8000c88 <__aeabi_fsub+0x33c>
 8000bd8:	28ff      	cmp	r0, #255	; 0xff
 8000bda:	d1e6      	bne.n	8000baa <__aeabi_fsub+0x25e>
 8000bdc:	464b      	mov	r3, r9
 8000bde:	e77b      	b.n	8000ad8 <__aeabi_fsub+0x18c>
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d120      	bne.n	8000c26 <__aeabi_fsub+0x2da>
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d057      	beq.n	8000c98 <__aeabi_fsub+0x34c>
 8000be8:	4649      	mov	r1, r9
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d053      	beq.n	8000c96 <__aeabi_fsub+0x34a>
 8000bee:	444b      	add	r3, r9
 8000bf0:	015a      	lsls	r2, r3, #5
 8000bf2:	d568      	bpl.n	8000cc6 <__aeabi_fsub+0x37a>
 8000bf4:	2407      	movs	r4, #7
 8000bf6:	4a36      	ldr	r2, [pc, #216]	; (8000cd0 <__aeabi_fsub+0x384>)
 8000bf8:	401c      	ands	r4, r3
 8000bfa:	2501      	movs	r5, #1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	e6ea      	b.n	80009d6 <__aeabi_fsub+0x8a>
 8000c00:	28ff      	cmp	r0, #255	; 0xff
 8000c02:	d0eb      	beq.n	8000bdc <__aeabi_fsub+0x290>
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	04d2      	lsls	r2, r2, #19
 8000c08:	4276      	negs	r6, r6
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	2e1b      	cmp	r6, #27
 8000c0e:	dc53      	bgt.n	8000cb8 <__aeabi_fsub+0x36c>
 8000c10:	2520      	movs	r5, #32
 8000c12:	1bad      	subs	r5, r5, r6
 8000c14:	001a      	movs	r2, r3
 8000c16:	40ab      	lsls	r3, r5
 8000c18:	40f2      	lsrs	r2, r6
 8000c1a:	1e5c      	subs	r4, r3, #1
 8000c1c:	41a3      	sbcs	r3, r4
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	444b      	add	r3, r9
 8000c22:	0005      	movs	r5, r0
 8000c24:	e721      	b.n	8000a6a <__aeabi_fsub+0x11e>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0d8      	beq.n	8000bdc <__aeabi_fsub+0x290>
 8000c2a:	4649      	mov	r1, r9
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_fsub+0x2e6>
 8000c30:	e752      	b.n	8000ad8 <__aeabi_fsub+0x18c>
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	03c9      	lsls	r1, r1, #15
 8000c36:	420f      	tst	r7, r1
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fsub+0x2f0>
 8000c3a:	e74d      	b.n	8000ad8 <__aeabi_fsub+0x18c>
 8000c3c:	4660      	mov	r0, ip
 8000c3e:	4208      	tst	r0, r1
 8000c40:	d000      	beq.n	8000c44 <__aeabi_fsub+0x2f8>
 8000c42:	e749      	b.n	8000ad8 <__aeabi_fsub+0x18c>
 8000c44:	464b      	mov	r3, r9
 8000c46:	e747      	b.n	8000ad8 <__aeabi_fsub+0x18c>
 8000c48:	4648      	mov	r0, r9
 8000c4a:	25ff      	movs	r5, #255	; 0xff
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fsub+0x306>
 8000c50:	e74f      	b.n	8000af2 <__aeabi_fsub+0x1a6>
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4217      	tst	r7, r2
 8000c58:	d004      	beq.n	8000c64 <__aeabi_fsub+0x318>
 8000c5a:	4660      	mov	r0, ip
 8000c5c:	4210      	tst	r0, r2
 8000c5e:	d101      	bne.n	8000c64 <__aeabi_fsub+0x318>
 8000c60:	464b      	mov	r3, r9
 8000c62:	4688      	mov	r8, r1
 8000c64:	2201      	movs	r2, #1
 8000c66:	4641      	mov	r1, r8
 8000c68:	25ff      	movs	r5, #255	; 0xff
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	e741      	b.n	8000af2 <__aeabi_fsub+0x1a6>
 8000c6e:	4648      	mov	r0, r9
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d01f      	beq.n	8000cb4 <__aeabi_fsub+0x368>
 8000c74:	1a1a      	subs	r2, r3, r0
 8000c76:	0150      	lsls	r0, r2, #5
 8000c78:	d520      	bpl.n	8000cbc <__aeabi_fsub+0x370>
 8000c7a:	464a      	mov	r2, r9
 8000c7c:	2407      	movs	r4, #7
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	401c      	ands	r4, r3
 8000c82:	4688      	mov	r8, r1
 8000c84:	2500      	movs	r5, #0
 8000c86:	e6a6      	b.n	80009d6 <__aeabi_fsub+0x8a>
 8000c88:	1c74      	adds	r4, r6, #1
 8000c8a:	d0c9      	beq.n	8000c20 <__aeabi_fsub+0x2d4>
 8000c8c:	43f6      	mvns	r6, r6
 8000c8e:	28ff      	cmp	r0, #255	; 0xff
 8000c90:	d1bc      	bne.n	8000c0c <__aeabi_fsub+0x2c0>
 8000c92:	464b      	mov	r3, r9
 8000c94:	e720      	b.n	8000ad8 <__aeabi_fsub+0x18c>
 8000c96:	4699      	mov	r9, r3
 8000c98:	464b      	mov	r3, r9
 8000c9a:	2500      	movs	r5, #0
 8000c9c:	08db      	lsrs	r3, r3, #3
 8000c9e:	e72b      	b.n	8000af8 <__aeabi_fsub+0x1ac>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e740      	b.n	8000b26 <__aeabi_fsub+0x1da>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e6a9      	b.n	80009fe <__aeabi_fsub+0xb2>
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	2200      	movs	r2, #0
 8000cae:	03db      	lsls	r3, r3, #15
 8000cb0:	24ff      	movs	r4, #255	; 0xff
 8000cb2:	e6a4      	b.n	80009fe <__aeabi_fsub+0xb2>
 8000cb4:	2500      	movs	r5, #0
 8000cb6:	e71c      	b.n	8000af2 <__aeabi_fsub+0x1a6>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e7b1      	b.n	8000c20 <__aeabi_fsub+0x2d4>
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	d0f1      	beq.n	8000ca4 <__aeabi_fsub+0x358>
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	e6fc      	b.n	8000ac0 <__aeabi_fsub+0x174>
 8000cc6:	2500      	movs	r5, #0
 8000cc8:	e6fa      	b.n	8000ac0 <__aeabi_fsub+0x174>
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	7dffffff 	.word	0x7dffffff
 8000cd0:	fbffffff 	.word	0xfbffffff

08000cd4 <__aeabi_f2iz>:
 8000cd4:	0241      	lsls	r1, r0, #9
 8000cd6:	0042      	lsls	r2, r0, #1
 8000cd8:	0fc3      	lsrs	r3, r0, #31
 8000cda:	0a49      	lsrs	r1, r1, #9
 8000cdc:	0e12      	lsrs	r2, r2, #24
 8000cde:	2000      	movs	r0, #0
 8000ce0:	2a7e      	cmp	r2, #126	; 0x7e
 8000ce2:	d90d      	bls.n	8000d00 <__aeabi_f2iz+0x2c>
 8000ce4:	2a9d      	cmp	r2, #157	; 0x9d
 8000ce6:	d80c      	bhi.n	8000d02 <__aeabi_f2iz+0x2e>
 8000ce8:	2080      	movs	r0, #128	; 0x80
 8000cea:	0400      	lsls	r0, r0, #16
 8000cec:	4301      	orrs	r1, r0
 8000cee:	2a95      	cmp	r2, #149	; 0x95
 8000cf0:	dc0a      	bgt.n	8000d08 <__aeabi_f2iz+0x34>
 8000cf2:	2096      	movs	r0, #150	; 0x96
 8000cf4:	1a82      	subs	r2, r0, r2
 8000cf6:	40d1      	lsrs	r1, r2
 8000cf8:	4248      	negs	r0, r1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_f2iz+0x2c>
 8000cfe:	0008      	movs	r0, r1
 8000d00:	4770      	bx	lr
 8000d02:	4a03      	ldr	r2, [pc, #12]	; (8000d10 <__aeabi_f2iz+0x3c>)
 8000d04:	1898      	adds	r0, r3, r2
 8000d06:	e7fb      	b.n	8000d00 <__aeabi_f2iz+0x2c>
 8000d08:	3a96      	subs	r2, #150	; 0x96
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	e7f4      	b.n	8000cf8 <__aeabi_f2iz+0x24>
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	7fffffff 	.word	0x7fffffff

08000d14 <__aeabi_ui2f>:
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	1e04      	subs	r4, r0, #0
 8000d18:	d034      	beq.n	8000d84 <__aeabi_ui2f+0x70>
 8000d1a:	f001 fe65 	bl	80029e8 <__clzsi2>
 8000d1e:	229e      	movs	r2, #158	; 0x9e
 8000d20:	1a12      	subs	r2, r2, r0
 8000d22:	2a96      	cmp	r2, #150	; 0x96
 8000d24:	dc07      	bgt.n	8000d36 <__aeabi_ui2f+0x22>
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	2808      	cmp	r0, #8
 8000d2a:	dd2e      	ble.n	8000d8a <__aeabi_ui2f+0x76>
 8000d2c:	3808      	subs	r0, #8
 8000d2e:	4084      	lsls	r4, r0
 8000d30:	0260      	lsls	r0, r4, #9
 8000d32:	0a40      	lsrs	r0, r0, #9
 8000d34:	e021      	b.n	8000d7a <__aeabi_ui2f+0x66>
 8000d36:	2a99      	cmp	r2, #153	; 0x99
 8000d38:	dd09      	ble.n	8000d4e <__aeabi_ui2f+0x3a>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	0021      	movs	r1, r4
 8000d3e:	331b      	adds	r3, #27
 8000d40:	4099      	lsls	r1, r3
 8000d42:	1e4b      	subs	r3, r1, #1
 8000d44:	4199      	sbcs	r1, r3
 8000d46:	2305      	movs	r3, #5
 8000d48:	1a1b      	subs	r3, r3, r0
 8000d4a:	40dc      	lsrs	r4, r3
 8000d4c:	430c      	orrs	r4, r1
 8000d4e:	2805      	cmp	r0, #5
 8000d50:	dd01      	ble.n	8000d56 <__aeabi_ui2f+0x42>
 8000d52:	1f43      	subs	r3, r0, #5
 8000d54:	409c      	lsls	r4, r3
 8000d56:	0023      	movs	r3, r4
 8000d58:	490d      	ldr	r1, [pc, #52]	; (8000d90 <__aeabi_ui2f+0x7c>)
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	0765      	lsls	r5, r4, #29
 8000d5e:	d009      	beq.n	8000d74 <__aeabi_ui2f+0x60>
 8000d60:	250f      	movs	r5, #15
 8000d62:	402c      	ands	r4, r5
 8000d64:	2c04      	cmp	r4, #4
 8000d66:	d005      	beq.n	8000d74 <__aeabi_ui2f+0x60>
 8000d68:	3304      	adds	r3, #4
 8000d6a:	015c      	lsls	r4, r3, #5
 8000d6c:	d502      	bpl.n	8000d74 <__aeabi_ui2f+0x60>
 8000d6e:	229f      	movs	r2, #159	; 0x9f
 8000d70:	400b      	ands	r3, r1
 8000d72:	1a12      	subs	r2, r2, r0
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	0a58      	lsrs	r0, r3, #9
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	0240      	lsls	r0, r0, #9
 8000d7c:	05d2      	lsls	r2, r2, #23
 8000d7e:	0a40      	lsrs	r0, r0, #9
 8000d80:	4310      	orrs	r0, r2
 8000d82:	bd70      	pop	{r4, r5, r6, pc}
 8000d84:	2200      	movs	r2, #0
 8000d86:	2000      	movs	r0, #0
 8000d88:	e7f7      	b.n	8000d7a <__aeabi_ui2f+0x66>
 8000d8a:	0260      	lsls	r0, r4, #9
 8000d8c:	0a40      	lsrs	r0, r0, #9
 8000d8e:	e7f4      	b.n	8000d7a <__aeabi_ui2f+0x66>
 8000d90:	fbffffff 	.word	0xfbffffff

08000d94 <__aeabi_dadd>:
 8000d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d96:	464f      	mov	r7, r9
 8000d98:	4646      	mov	r6, r8
 8000d9a:	46d6      	mov	lr, sl
 8000d9c:	000c      	movs	r4, r1
 8000d9e:	0309      	lsls	r1, r1, #12
 8000da0:	b5c0      	push	{r6, r7, lr}
 8000da2:	0a49      	lsrs	r1, r1, #9
 8000da4:	0f47      	lsrs	r7, r0, #29
 8000da6:	005e      	lsls	r6, r3, #1
 8000da8:	4339      	orrs	r1, r7
 8000daa:	031f      	lsls	r7, r3, #12
 8000dac:	0fdb      	lsrs	r3, r3, #31
 8000dae:	469c      	mov	ip, r3
 8000db0:	0065      	lsls	r5, r4, #1
 8000db2:	0a7b      	lsrs	r3, r7, #9
 8000db4:	0f57      	lsrs	r7, r2, #29
 8000db6:	431f      	orrs	r7, r3
 8000db8:	0d6d      	lsrs	r5, r5, #21
 8000dba:	0fe4      	lsrs	r4, r4, #31
 8000dbc:	0d76      	lsrs	r6, r6, #21
 8000dbe:	46a1      	mov	r9, r4
 8000dc0:	00c0      	lsls	r0, r0, #3
 8000dc2:	46b8      	mov	r8, r7
 8000dc4:	00d2      	lsls	r2, r2, #3
 8000dc6:	1bab      	subs	r3, r5, r6
 8000dc8:	4564      	cmp	r4, ip
 8000dca:	d07b      	beq.n	8000ec4 <__aeabi_dadd+0x130>
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	dd5f      	ble.n	8000e90 <__aeabi_dadd+0xfc>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dadd+0x42>
 8000dd4:	e0a4      	b.n	8000f20 <__aeabi_dadd+0x18c>
 8000dd6:	003e      	movs	r6, r7
 8000dd8:	4316      	orrs	r6, r2
 8000dda:	d100      	bne.n	8000dde <__aeabi_dadd+0x4a>
 8000ddc:	e112      	b.n	8001004 <__aeabi_dadd+0x270>
 8000dde:	1e5e      	subs	r6, r3, #1
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d000      	beq.n	8000de6 <__aeabi_dadd+0x52>
 8000de4:	e19e      	b.n	8001124 <__aeabi_dadd+0x390>
 8000de6:	1a87      	subs	r7, r0, r2
 8000de8:	4643      	mov	r3, r8
 8000dea:	42b8      	cmp	r0, r7
 8000dec:	4180      	sbcs	r0, r0
 8000dee:	2501      	movs	r5, #1
 8000df0:	1ac9      	subs	r1, r1, r3
 8000df2:	4240      	negs	r0, r0
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	020b      	lsls	r3, r1, #8
 8000df8:	d400      	bmi.n	8000dfc <__aeabi_dadd+0x68>
 8000dfa:	e131      	b.n	8001060 <__aeabi_dadd+0x2cc>
 8000dfc:	0249      	lsls	r1, r1, #9
 8000dfe:	0a4e      	lsrs	r6, r1, #9
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x72>
 8000e04:	e16e      	b.n	80010e4 <__aeabi_dadd+0x350>
 8000e06:	0030      	movs	r0, r6
 8000e08:	f001 fdee 	bl	80029e8 <__clzsi2>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	3b08      	subs	r3, #8
 8000e10:	2b1f      	cmp	r3, #31
 8000e12:	dd00      	ble.n	8000e16 <__aeabi_dadd+0x82>
 8000e14:	e161      	b.n	80010da <__aeabi_dadd+0x346>
 8000e16:	2220      	movs	r2, #32
 8000e18:	0039      	movs	r1, r7
 8000e1a:	1ad2      	subs	r2, r2, r3
 8000e1c:	409e      	lsls	r6, r3
 8000e1e:	40d1      	lsrs	r1, r2
 8000e20:	409f      	lsls	r7, r3
 8000e22:	430e      	orrs	r6, r1
 8000e24:	429d      	cmp	r5, r3
 8000e26:	dd00      	ble.n	8000e2a <__aeabi_dadd+0x96>
 8000e28:	e151      	b.n	80010ce <__aeabi_dadd+0x33a>
 8000e2a:	1b5d      	subs	r5, r3, r5
 8000e2c:	1c6b      	adds	r3, r5, #1
 8000e2e:	2b1f      	cmp	r3, #31
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_dadd+0xa0>
 8000e32:	e17c      	b.n	800112e <__aeabi_dadd+0x39a>
 8000e34:	2120      	movs	r1, #32
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	003d      	movs	r5, r7
 8000e3a:	0030      	movs	r0, r6
 8000e3c:	408f      	lsls	r7, r1
 8000e3e:	4088      	lsls	r0, r1
 8000e40:	40dd      	lsrs	r5, r3
 8000e42:	1e79      	subs	r1, r7, #1
 8000e44:	418f      	sbcs	r7, r1
 8000e46:	0031      	movs	r1, r6
 8000e48:	2207      	movs	r2, #7
 8000e4a:	4328      	orrs	r0, r5
 8000e4c:	40d9      	lsrs	r1, r3
 8000e4e:	2500      	movs	r5, #0
 8000e50:	4307      	orrs	r7, r0
 8000e52:	403a      	ands	r2, r7
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d009      	beq.n	8000e6c <__aeabi_dadd+0xd8>
 8000e58:	230f      	movs	r3, #15
 8000e5a:	403b      	ands	r3, r7
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d005      	beq.n	8000e6c <__aeabi_dadd+0xd8>
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	42bb      	cmp	r3, r7
 8000e64:	41bf      	sbcs	r7, r7
 8000e66:	427f      	negs	r7, r7
 8000e68:	19c9      	adds	r1, r1, r7
 8000e6a:	001f      	movs	r7, r3
 8000e6c:	020b      	lsls	r3, r1, #8
 8000e6e:	d400      	bmi.n	8000e72 <__aeabi_dadd+0xde>
 8000e70:	e226      	b.n	80012c0 <__aeabi_dadd+0x52c>
 8000e72:	1c6a      	adds	r2, r5, #1
 8000e74:	4bc6      	ldr	r3, [pc, #792]	; (8001190 <__aeabi_dadd+0x3fc>)
 8000e76:	0555      	lsls	r5, r2, #21
 8000e78:	0d6d      	lsrs	r5, r5, #21
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dadd+0xec>
 8000e7e:	e106      	b.n	800108e <__aeabi_dadd+0x2fa>
 8000e80:	4ac4      	ldr	r2, [pc, #784]	; (8001194 <__aeabi_dadd+0x400>)
 8000e82:	08ff      	lsrs	r7, r7, #3
 8000e84:	400a      	ands	r2, r1
 8000e86:	0753      	lsls	r3, r2, #29
 8000e88:	0252      	lsls	r2, r2, #9
 8000e8a:	433b      	orrs	r3, r7
 8000e8c:	0b12      	lsrs	r2, r2, #12
 8000e8e:	e08e      	b.n	8000fae <__aeabi_dadd+0x21a>
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d000      	beq.n	8000e96 <__aeabi_dadd+0x102>
 8000e94:	e0b8      	b.n	8001008 <__aeabi_dadd+0x274>
 8000e96:	1c6b      	adds	r3, r5, #1
 8000e98:	055b      	lsls	r3, r3, #21
 8000e9a:	0d5b      	lsrs	r3, r3, #21
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	dc00      	bgt.n	8000ea2 <__aeabi_dadd+0x10e>
 8000ea0:	e130      	b.n	8001104 <__aeabi_dadd+0x370>
 8000ea2:	1a87      	subs	r7, r0, r2
 8000ea4:	4643      	mov	r3, r8
 8000ea6:	42b8      	cmp	r0, r7
 8000ea8:	41b6      	sbcs	r6, r6
 8000eaa:	1acb      	subs	r3, r1, r3
 8000eac:	4276      	negs	r6, r6
 8000eae:	1b9e      	subs	r6, r3, r6
 8000eb0:	0233      	lsls	r3, r6, #8
 8000eb2:	d500      	bpl.n	8000eb6 <__aeabi_dadd+0x122>
 8000eb4:	e14c      	b.n	8001150 <__aeabi_dadd+0x3bc>
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	4333      	orrs	r3, r6
 8000eba:	d1a1      	bne.n	8000e00 <__aeabi_dadd+0x6c>
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	2500      	movs	r5, #0
 8000ec2:	e070      	b.n	8000fa6 <__aeabi_dadd+0x212>
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dc00      	bgt.n	8000eca <__aeabi_dadd+0x136>
 8000ec8:	e0e5      	b.n	8001096 <__aeabi_dadd+0x302>
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_dadd+0x13c>
 8000ece:	e083      	b.n	8000fd8 <__aeabi_dadd+0x244>
 8000ed0:	4eaf      	ldr	r6, [pc, #700]	; (8001190 <__aeabi_dadd+0x3fc>)
 8000ed2:	42b5      	cmp	r5, r6
 8000ed4:	d060      	beq.n	8000f98 <__aeabi_dadd+0x204>
 8000ed6:	2680      	movs	r6, #128	; 0x80
 8000ed8:	0436      	lsls	r6, r6, #16
 8000eda:	4337      	orrs	r7, r6
 8000edc:	46b8      	mov	r8, r7
 8000ede:	2b38      	cmp	r3, #56	; 0x38
 8000ee0:	dc00      	bgt.n	8000ee4 <__aeabi_dadd+0x150>
 8000ee2:	e13e      	b.n	8001162 <__aeabi_dadd+0x3ce>
 8000ee4:	4643      	mov	r3, r8
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	001f      	movs	r7, r3
 8000eea:	1e7a      	subs	r2, r7, #1
 8000eec:	4197      	sbcs	r7, r2
 8000eee:	183f      	adds	r7, r7, r0
 8000ef0:	4287      	cmp	r7, r0
 8000ef2:	4180      	sbcs	r0, r0
 8000ef4:	4240      	negs	r0, r0
 8000ef6:	1809      	adds	r1, r1, r0
 8000ef8:	020b      	lsls	r3, r1, #8
 8000efa:	d400      	bmi.n	8000efe <__aeabi_dadd+0x16a>
 8000efc:	e0b0      	b.n	8001060 <__aeabi_dadd+0x2cc>
 8000efe:	4ba4      	ldr	r3, [pc, #656]	; (8001190 <__aeabi_dadd+0x3fc>)
 8000f00:	3501      	adds	r5, #1
 8000f02:	429d      	cmp	r5, r3
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dadd+0x174>
 8000f06:	e0c3      	b.n	8001090 <__aeabi_dadd+0x2fc>
 8000f08:	4aa2      	ldr	r2, [pc, #648]	; (8001194 <__aeabi_dadd+0x400>)
 8000f0a:	087b      	lsrs	r3, r7, #1
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	2101      	movs	r1, #1
 8000f10:	400f      	ands	r7, r1
 8000f12:	431f      	orrs	r7, r3
 8000f14:	0851      	lsrs	r1, r2, #1
 8000f16:	07d3      	lsls	r3, r2, #31
 8000f18:	2207      	movs	r2, #7
 8000f1a:	431f      	orrs	r7, r3
 8000f1c:	403a      	ands	r2, r7
 8000f1e:	e799      	b.n	8000e54 <__aeabi_dadd+0xc0>
 8000f20:	4e9b      	ldr	r6, [pc, #620]	; (8001190 <__aeabi_dadd+0x3fc>)
 8000f22:	42b5      	cmp	r5, r6
 8000f24:	d038      	beq.n	8000f98 <__aeabi_dadd+0x204>
 8000f26:	2680      	movs	r6, #128	; 0x80
 8000f28:	0436      	lsls	r6, r6, #16
 8000f2a:	4337      	orrs	r7, r6
 8000f2c:	46b8      	mov	r8, r7
 8000f2e:	2b38      	cmp	r3, #56	; 0x38
 8000f30:	dd00      	ble.n	8000f34 <__aeabi_dadd+0x1a0>
 8000f32:	e0dc      	b.n	80010ee <__aeabi_dadd+0x35a>
 8000f34:	2b1f      	cmp	r3, #31
 8000f36:	dc00      	bgt.n	8000f3a <__aeabi_dadd+0x1a6>
 8000f38:	e130      	b.n	800119c <__aeabi_dadd+0x408>
 8000f3a:	001e      	movs	r6, r3
 8000f3c:	4647      	mov	r7, r8
 8000f3e:	3e20      	subs	r6, #32
 8000f40:	40f7      	lsrs	r7, r6
 8000f42:	46bc      	mov	ip, r7
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d004      	beq.n	8000f52 <__aeabi_dadd+0x1be>
 8000f48:	2640      	movs	r6, #64	; 0x40
 8000f4a:	1af3      	subs	r3, r6, r3
 8000f4c:	4646      	mov	r6, r8
 8000f4e:	409e      	lsls	r6, r3
 8000f50:	4332      	orrs	r2, r6
 8000f52:	0017      	movs	r7, r2
 8000f54:	4663      	mov	r3, ip
 8000f56:	1e7a      	subs	r2, r7, #1
 8000f58:	4197      	sbcs	r7, r2
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	e0cc      	b.n	80010f8 <__aeabi_dadd+0x364>
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_dadd+0x1d0>
 8000f62:	e204      	b.n	800136e <__aeabi_dadd+0x5da>
 8000f64:	4643      	mov	r3, r8
 8000f66:	4313      	orrs	r3, r2
 8000f68:	d100      	bne.n	8000f6c <__aeabi_dadd+0x1d8>
 8000f6a:	e159      	b.n	8001220 <__aeabi_dadd+0x48c>
 8000f6c:	074b      	lsls	r3, r1, #29
 8000f6e:	08c0      	lsrs	r0, r0, #3
 8000f70:	4318      	orrs	r0, r3
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	08c9      	lsrs	r1, r1, #3
 8000f76:	031b      	lsls	r3, r3, #12
 8000f78:	4219      	tst	r1, r3
 8000f7a:	d008      	beq.n	8000f8e <__aeabi_dadd+0x1fa>
 8000f7c:	4645      	mov	r5, r8
 8000f7e:	08ed      	lsrs	r5, r5, #3
 8000f80:	421d      	tst	r5, r3
 8000f82:	d104      	bne.n	8000f8e <__aeabi_dadd+0x1fa>
 8000f84:	4643      	mov	r3, r8
 8000f86:	08d0      	lsrs	r0, r2, #3
 8000f88:	0759      	lsls	r1, r3, #29
 8000f8a:	4308      	orrs	r0, r1
 8000f8c:	0029      	movs	r1, r5
 8000f8e:	0f42      	lsrs	r2, r0, #29
 8000f90:	00c9      	lsls	r1, r1, #3
 8000f92:	4d7f      	ldr	r5, [pc, #508]	; (8001190 <__aeabi_dadd+0x3fc>)
 8000f94:	4311      	orrs	r1, r2
 8000f96:	00c0      	lsls	r0, r0, #3
 8000f98:	074b      	lsls	r3, r1, #29
 8000f9a:	08ca      	lsrs	r2, r1, #3
 8000f9c:	497c      	ldr	r1, [pc, #496]	; (8001190 <__aeabi_dadd+0x3fc>)
 8000f9e:	08c0      	lsrs	r0, r0, #3
 8000fa0:	4303      	orrs	r3, r0
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	d068      	beq.n	8001078 <__aeabi_dadd+0x2e4>
 8000fa6:	0312      	lsls	r2, r2, #12
 8000fa8:	056d      	lsls	r5, r5, #21
 8000faa:	0b12      	lsrs	r2, r2, #12
 8000fac:	0d6d      	lsrs	r5, r5, #21
 8000fae:	2100      	movs	r1, #0
 8000fb0:	0312      	lsls	r2, r2, #12
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	0b13      	lsrs	r3, r2, #12
 8000fb6:	0d0a      	lsrs	r2, r1, #20
 8000fb8:	0512      	lsls	r2, r2, #20
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4b76      	ldr	r3, [pc, #472]	; (8001198 <__aeabi_dadd+0x404>)
 8000fbe:	052d      	lsls	r5, r5, #20
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	432b      	orrs	r3, r5
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	07e4      	lsls	r4, r4, #31
 8000fc8:	085b      	lsrs	r3, r3, #1
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	0019      	movs	r1, r3
 8000fce:	bc1c      	pop	{r2, r3, r4}
 8000fd0:	4690      	mov	r8, r2
 8000fd2:	4699      	mov	r9, r3
 8000fd4:	46a2      	mov	sl, r4
 8000fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd8:	003e      	movs	r6, r7
 8000fda:	4316      	orrs	r6, r2
 8000fdc:	d012      	beq.n	8001004 <__aeabi_dadd+0x270>
 8000fde:	1e5e      	subs	r6, r3, #1
 8000fe0:	2e00      	cmp	r6, #0
 8000fe2:	d000      	beq.n	8000fe6 <__aeabi_dadd+0x252>
 8000fe4:	e100      	b.n	80011e8 <__aeabi_dadd+0x454>
 8000fe6:	1887      	adds	r7, r0, r2
 8000fe8:	4287      	cmp	r7, r0
 8000fea:	4180      	sbcs	r0, r0
 8000fec:	4441      	add	r1, r8
 8000fee:	4240      	negs	r0, r0
 8000ff0:	1809      	adds	r1, r1, r0
 8000ff2:	2501      	movs	r5, #1
 8000ff4:	020b      	lsls	r3, r1, #8
 8000ff6:	d533      	bpl.n	8001060 <__aeabi_dadd+0x2cc>
 8000ff8:	2502      	movs	r5, #2
 8000ffa:	e785      	b.n	8000f08 <__aeabi_dadd+0x174>
 8000ffc:	4664      	mov	r4, ip
 8000ffe:	0033      	movs	r3, r6
 8001000:	4641      	mov	r1, r8
 8001002:	0010      	movs	r0, r2
 8001004:	001d      	movs	r5, r3
 8001006:	e7c7      	b.n	8000f98 <__aeabi_dadd+0x204>
 8001008:	2d00      	cmp	r5, #0
 800100a:	d000      	beq.n	800100e <__aeabi_dadd+0x27a>
 800100c:	e0da      	b.n	80011c4 <__aeabi_dadd+0x430>
 800100e:	000c      	movs	r4, r1
 8001010:	4304      	orrs	r4, r0
 8001012:	d0f3      	beq.n	8000ffc <__aeabi_dadd+0x268>
 8001014:	1c5c      	adds	r4, r3, #1
 8001016:	d100      	bne.n	800101a <__aeabi_dadd+0x286>
 8001018:	e19f      	b.n	800135a <__aeabi_dadd+0x5c6>
 800101a:	4c5d      	ldr	r4, [pc, #372]	; (8001190 <__aeabi_dadd+0x3fc>)
 800101c:	42a6      	cmp	r6, r4
 800101e:	d100      	bne.n	8001022 <__aeabi_dadd+0x28e>
 8001020:	e12f      	b.n	8001282 <__aeabi_dadd+0x4ee>
 8001022:	43db      	mvns	r3, r3
 8001024:	2b38      	cmp	r3, #56	; 0x38
 8001026:	dd00      	ble.n	800102a <__aeabi_dadd+0x296>
 8001028:	e166      	b.n	80012f8 <__aeabi_dadd+0x564>
 800102a:	2b1f      	cmp	r3, #31
 800102c:	dd00      	ble.n	8001030 <__aeabi_dadd+0x29c>
 800102e:	e183      	b.n	8001338 <__aeabi_dadd+0x5a4>
 8001030:	2420      	movs	r4, #32
 8001032:	0005      	movs	r5, r0
 8001034:	1ae4      	subs	r4, r4, r3
 8001036:	000f      	movs	r7, r1
 8001038:	40dd      	lsrs	r5, r3
 800103a:	40d9      	lsrs	r1, r3
 800103c:	40a0      	lsls	r0, r4
 800103e:	4643      	mov	r3, r8
 8001040:	40a7      	lsls	r7, r4
 8001042:	1a5b      	subs	r3, r3, r1
 8001044:	1e44      	subs	r4, r0, #1
 8001046:	41a0      	sbcs	r0, r4
 8001048:	4698      	mov	r8, r3
 800104a:	432f      	orrs	r7, r5
 800104c:	4338      	orrs	r0, r7
 800104e:	1a17      	subs	r7, r2, r0
 8001050:	42ba      	cmp	r2, r7
 8001052:	4192      	sbcs	r2, r2
 8001054:	4643      	mov	r3, r8
 8001056:	4252      	negs	r2, r2
 8001058:	1a99      	subs	r1, r3, r2
 800105a:	4664      	mov	r4, ip
 800105c:	0035      	movs	r5, r6
 800105e:	e6ca      	b.n	8000df6 <__aeabi_dadd+0x62>
 8001060:	2207      	movs	r2, #7
 8001062:	403a      	ands	r2, r7
 8001064:	2a00      	cmp	r2, #0
 8001066:	d000      	beq.n	800106a <__aeabi_dadd+0x2d6>
 8001068:	e6f6      	b.n	8000e58 <__aeabi_dadd+0xc4>
 800106a:	074b      	lsls	r3, r1, #29
 800106c:	08ca      	lsrs	r2, r1, #3
 800106e:	4948      	ldr	r1, [pc, #288]	; (8001190 <__aeabi_dadd+0x3fc>)
 8001070:	08ff      	lsrs	r7, r7, #3
 8001072:	433b      	orrs	r3, r7
 8001074:	428d      	cmp	r5, r1
 8001076:	d196      	bne.n	8000fa6 <__aeabi_dadd+0x212>
 8001078:	0019      	movs	r1, r3
 800107a:	4311      	orrs	r1, r2
 800107c:	d100      	bne.n	8001080 <__aeabi_dadd+0x2ec>
 800107e:	e19e      	b.n	80013be <__aeabi_dadd+0x62a>
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	0309      	lsls	r1, r1, #12
 8001084:	430a      	orrs	r2, r1
 8001086:	0312      	lsls	r2, r2, #12
 8001088:	0b12      	lsrs	r2, r2, #12
 800108a:	4d41      	ldr	r5, [pc, #260]	; (8001190 <__aeabi_dadd+0x3fc>)
 800108c:	e78f      	b.n	8000fae <__aeabi_dadd+0x21a>
 800108e:	0015      	movs	r5, r2
 8001090:	2200      	movs	r2, #0
 8001092:	2300      	movs	r3, #0
 8001094:	e78b      	b.n	8000fae <__aeabi_dadd+0x21a>
 8001096:	2b00      	cmp	r3, #0
 8001098:	d000      	beq.n	800109c <__aeabi_dadd+0x308>
 800109a:	e0c7      	b.n	800122c <__aeabi_dadd+0x498>
 800109c:	1c6b      	adds	r3, r5, #1
 800109e:	055f      	lsls	r7, r3, #21
 80010a0:	0d7f      	lsrs	r7, r7, #21
 80010a2:	2f01      	cmp	r7, #1
 80010a4:	dc00      	bgt.n	80010a8 <__aeabi_dadd+0x314>
 80010a6:	e0f1      	b.n	800128c <__aeabi_dadd+0x4f8>
 80010a8:	4d39      	ldr	r5, [pc, #228]	; (8001190 <__aeabi_dadd+0x3fc>)
 80010aa:	42ab      	cmp	r3, r5
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dadd+0x31c>
 80010ae:	e0b9      	b.n	8001224 <__aeabi_dadd+0x490>
 80010b0:	1885      	adds	r5, r0, r2
 80010b2:	000a      	movs	r2, r1
 80010b4:	4285      	cmp	r5, r0
 80010b6:	4189      	sbcs	r1, r1
 80010b8:	4442      	add	r2, r8
 80010ba:	4249      	negs	r1, r1
 80010bc:	1851      	adds	r1, r2, r1
 80010be:	2207      	movs	r2, #7
 80010c0:	07cf      	lsls	r7, r1, #31
 80010c2:	086d      	lsrs	r5, r5, #1
 80010c4:	432f      	orrs	r7, r5
 80010c6:	0849      	lsrs	r1, r1, #1
 80010c8:	403a      	ands	r2, r7
 80010ca:	001d      	movs	r5, r3
 80010cc:	e6c2      	b.n	8000e54 <__aeabi_dadd+0xc0>
 80010ce:	2207      	movs	r2, #7
 80010d0:	4930      	ldr	r1, [pc, #192]	; (8001194 <__aeabi_dadd+0x400>)
 80010d2:	1aed      	subs	r5, r5, r3
 80010d4:	4031      	ands	r1, r6
 80010d6:	403a      	ands	r2, r7
 80010d8:	e6bc      	b.n	8000e54 <__aeabi_dadd+0xc0>
 80010da:	003e      	movs	r6, r7
 80010dc:	3828      	subs	r0, #40	; 0x28
 80010de:	4086      	lsls	r6, r0
 80010e0:	2700      	movs	r7, #0
 80010e2:	e69f      	b.n	8000e24 <__aeabi_dadd+0x90>
 80010e4:	0038      	movs	r0, r7
 80010e6:	f001 fc7f 	bl	80029e8 <__clzsi2>
 80010ea:	3020      	adds	r0, #32
 80010ec:	e68e      	b.n	8000e0c <__aeabi_dadd+0x78>
 80010ee:	4643      	mov	r3, r8
 80010f0:	4313      	orrs	r3, r2
 80010f2:	001f      	movs	r7, r3
 80010f4:	1e7a      	subs	r2, r7, #1
 80010f6:	4197      	sbcs	r7, r2
 80010f8:	1bc7      	subs	r7, r0, r7
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	4180      	sbcs	r0, r0
 80010fe:	4240      	negs	r0, r0
 8001100:	1a09      	subs	r1, r1, r0
 8001102:	e678      	b.n	8000df6 <__aeabi_dadd+0x62>
 8001104:	000e      	movs	r6, r1
 8001106:	003b      	movs	r3, r7
 8001108:	4306      	orrs	r6, r0
 800110a:	4313      	orrs	r3, r2
 800110c:	2d00      	cmp	r5, #0
 800110e:	d161      	bne.n	80011d4 <__aeabi_dadd+0x440>
 8001110:	2e00      	cmp	r6, #0
 8001112:	d000      	beq.n	8001116 <__aeabi_dadd+0x382>
 8001114:	e0f4      	b.n	8001300 <__aeabi_dadd+0x56c>
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <__aeabi_dadd+0x388>
 800111a:	e11b      	b.n	8001354 <__aeabi_dadd+0x5c0>
 800111c:	4664      	mov	r4, ip
 800111e:	0039      	movs	r1, r7
 8001120:	0010      	movs	r0, r2
 8001122:	e739      	b.n	8000f98 <__aeabi_dadd+0x204>
 8001124:	4f1a      	ldr	r7, [pc, #104]	; (8001190 <__aeabi_dadd+0x3fc>)
 8001126:	42bb      	cmp	r3, r7
 8001128:	d07a      	beq.n	8001220 <__aeabi_dadd+0x48c>
 800112a:	0033      	movs	r3, r6
 800112c:	e6ff      	b.n	8000f2e <__aeabi_dadd+0x19a>
 800112e:	0030      	movs	r0, r6
 8001130:	3d1f      	subs	r5, #31
 8001132:	40e8      	lsrs	r0, r5
 8001134:	2b20      	cmp	r3, #32
 8001136:	d003      	beq.n	8001140 <__aeabi_dadd+0x3ac>
 8001138:	2140      	movs	r1, #64	; 0x40
 800113a:	1acb      	subs	r3, r1, r3
 800113c:	409e      	lsls	r6, r3
 800113e:	4337      	orrs	r7, r6
 8001140:	1e7b      	subs	r3, r7, #1
 8001142:	419f      	sbcs	r7, r3
 8001144:	2207      	movs	r2, #7
 8001146:	4307      	orrs	r7, r0
 8001148:	403a      	ands	r2, r7
 800114a:	2100      	movs	r1, #0
 800114c:	2500      	movs	r5, #0
 800114e:	e789      	b.n	8001064 <__aeabi_dadd+0x2d0>
 8001150:	1a17      	subs	r7, r2, r0
 8001152:	4643      	mov	r3, r8
 8001154:	42ba      	cmp	r2, r7
 8001156:	41b6      	sbcs	r6, r6
 8001158:	1a59      	subs	r1, r3, r1
 800115a:	4276      	negs	r6, r6
 800115c:	1b8e      	subs	r6, r1, r6
 800115e:	4664      	mov	r4, ip
 8001160:	e64e      	b.n	8000e00 <__aeabi_dadd+0x6c>
 8001162:	2b1f      	cmp	r3, #31
 8001164:	dd00      	ble.n	8001168 <__aeabi_dadd+0x3d4>
 8001166:	e0ad      	b.n	80012c4 <__aeabi_dadd+0x530>
 8001168:	2620      	movs	r6, #32
 800116a:	4647      	mov	r7, r8
 800116c:	1af6      	subs	r6, r6, r3
 800116e:	40b7      	lsls	r7, r6
 8001170:	46b9      	mov	r9, r7
 8001172:	0017      	movs	r7, r2
 8001174:	46b2      	mov	sl, r6
 8001176:	40df      	lsrs	r7, r3
 8001178:	464e      	mov	r6, r9
 800117a:	433e      	orrs	r6, r7
 800117c:	0037      	movs	r7, r6
 800117e:	4656      	mov	r6, sl
 8001180:	40b2      	lsls	r2, r6
 8001182:	1e56      	subs	r6, r2, #1
 8001184:	41b2      	sbcs	r2, r6
 8001186:	4317      	orrs	r7, r2
 8001188:	4642      	mov	r2, r8
 800118a:	40da      	lsrs	r2, r3
 800118c:	1889      	adds	r1, r1, r2
 800118e:	e6ae      	b.n	8000eee <__aeabi_dadd+0x15a>
 8001190:	000007ff 	.word	0x000007ff
 8001194:	ff7fffff 	.word	0xff7fffff
 8001198:	800fffff 	.word	0x800fffff
 800119c:	2620      	movs	r6, #32
 800119e:	4647      	mov	r7, r8
 80011a0:	1af6      	subs	r6, r6, r3
 80011a2:	40b7      	lsls	r7, r6
 80011a4:	46b9      	mov	r9, r7
 80011a6:	0017      	movs	r7, r2
 80011a8:	46b2      	mov	sl, r6
 80011aa:	40df      	lsrs	r7, r3
 80011ac:	464e      	mov	r6, r9
 80011ae:	433e      	orrs	r6, r7
 80011b0:	0037      	movs	r7, r6
 80011b2:	4656      	mov	r6, sl
 80011b4:	40b2      	lsls	r2, r6
 80011b6:	1e56      	subs	r6, r2, #1
 80011b8:	41b2      	sbcs	r2, r6
 80011ba:	4317      	orrs	r7, r2
 80011bc:	4642      	mov	r2, r8
 80011be:	40da      	lsrs	r2, r3
 80011c0:	1a89      	subs	r1, r1, r2
 80011c2:	e799      	b.n	80010f8 <__aeabi_dadd+0x364>
 80011c4:	4c7f      	ldr	r4, [pc, #508]	; (80013c4 <__aeabi_dadd+0x630>)
 80011c6:	42a6      	cmp	r6, r4
 80011c8:	d05b      	beq.n	8001282 <__aeabi_dadd+0x4ee>
 80011ca:	2480      	movs	r4, #128	; 0x80
 80011cc:	0424      	lsls	r4, r4, #16
 80011ce:	425b      	negs	r3, r3
 80011d0:	4321      	orrs	r1, r4
 80011d2:	e727      	b.n	8001024 <__aeabi_dadd+0x290>
 80011d4:	2e00      	cmp	r6, #0
 80011d6:	d10c      	bne.n	80011f2 <__aeabi_dadd+0x45e>
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d100      	bne.n	80011de <__aeabi_dadd+0x44a>
 80011dc:	e0cb      	b.n	8001376 <__aeabi_dadd+0x5e2>
 80011de:	4664      	mov	r4, ip
 80011e0:	0039      	movs	r1, r7
 80011e2:	0010      	movs	r0, r2
 80011e4:	4d77      	ldr	r5, [pc, #476]	; (80013c4 <__aeabi_dadd+0x630>)
 80011e6:	e6d7      	b.n	8000f98 <__aeabi_dadd+0x204>
 80011e8:	4f76      	ldr	r7, [pc, #472]	; (80013c4 <__aeabi_dadd+0x630>)
 80011ea:	42bb      	cmp	r3, r7
 80011ec:	d018      	beq.n	8001220 <__aeabi_dadd+0x48c>
 80011ee:	0033      	movs	r3, r6
 80011f0:	e675      	b.n	8000ede <__aeabi_dadd+0x14a>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d014      	beq.n	8001220 <__aeabi_dadd+0x48c>
 80011f6:	074b      	lsls	r3, r1, #29
 80011f8:	08c0      	lsrs	r0, r0, #3
 80011fa:	4318      	orrs	r0, r3
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	08c9      	lsrs	r1, r1, #3
 8001200:	031b      	lsls	r3, r3, #12
 8001202:	4219      	tst	r1, r3
 8001204:	d007      	beq.n	8001216 <__aeabi_dadd+0x482>
 8001206:	08fc      	lsrs	r4, r7, #3
 8001208:	421c      	tst	r4, r3
 800120a:	d104      	bne.n	8001216 <__aeabi_dadd+0x482>
 800120c:	0779      	lsls	r1, r7, #29
 800120e:	08d0      	lsrs	r0, r2, #3
 8001210:	4308      	orrs	r0, r1
 8001212:	46e1      	mov	r9, ip
 8001214:	0021      	movs	r1, r4
 8001216:	464c      	mov	r4, r9
 8001218:	0f42      	lsrs	r2, r0, #29
 800121a:	00c9      	lsls	r1, r1, #3
 800121c:	4311      	orrs	r1, r2
 800121e:	00c0      	lsls	r0, r0, #3
 8001220:	4d68      	ldr	r5, [pc, #416]	; (80013c4 <__aeabi_dadd+0x630>)
 8001222:	e6b9      	b.n	8000f98 <__aeabi_dadd+0x204>
 8001224:	001d      	movs	r5, r3
 8001226:	2200      	movs	r2, #0
 8001228:	2300      	movs	r3, #0
 800122a:	e6c0      	b.n	8000fae <__aeabi_dadd+0x21a>
 800122c:	2d00      	cmp	r5, #0
 800122e:	d15b      	bne.n	80012e8 <__aeabi_dadd+0x554>
 8001230:	000d      	movs	r5, r1
 8001232:	4305      	orrs	r5, r0
 8001234:	d100      	bne.n	8001238 <__aeabi_dadd+0x4a4>
 8001236:	e6e2      	b.n	8000ffe <__aeabi_dadd+0x26a>
 8001238:	1c5d      	adds	r5, r3, #1
 800123a:	d100      	bne.n	800123e <__aeabi_dadd+0x4aa>
 800123c:	e0b0      	b.n	80013a0 <__aeabi_dadd+0x60c>
 800123e:	4d61      	ldr	r5, [pc, #388]	; (80013c4 <__aeabi_dadd+0x630>)
 8001240:	42ae      	cmp	r6, r5
 8001242:	d01f      	beq.n	8001284 <__aeabi_dadd+0x4f0>
 8001244:	43db      	mvns	r3, r3
 8001246:	2b38      	cmp	r3, #56	; 0x38
 8001248:	dc71      	bgt.n	800132e <__aeabi_dadd+0x59a>
 800124a:	2b1f      	cmp	r3, #31
 800124c:	dd00      	ble.n	8001250 <__aeabi_dadd+0x4bc>
 800124e:	e096      	b.n	800137e <__aeabi_dadd+0x5ea>
 8001250:	2520      	movs	r5, #32
 8001252:	000f      	movs	r7, r1
 8001254:	1aed      	subs	r5, r5, r3
 8001256:	40af      	lsls	r7, r5
 8001258:	46b9      	mov	r9, r7
 800125a:	0007      	movs	r7, r0
 800125c:	46aa      	mov	sl, r5
 800125e:	40df      	lsrs	r7, r3
 8001260:	464d      	mov	r5, r9
 8001262:	433d      	orrs	r5, r7
 8001264:	002f      	movs	r7, r5
 8001266:	4655      	mov	r5, sl
 8001268:	40a8      	lsls	r0, r5
 800126a:	40d9      	lsrs	r1, r3
 800126c:	1e45      	subs	r5, r0, #1
 800126e:	41a8      	sbcs	r0, r5
 8001270:	4488      	add	r8, r1
 8001272:	4307      	orrs	r7, r0
 8001274:	18bf      	adds	r7, r7, r2
 8001276:	4297      	cmp	r7, r2
 8001278:	4192      	sbcs	r2, r2
 800127a:	4251      	negs	r1, r2
 800127c:	4441      	add	r1, r8
 800127e:	0035      	movs	r5, r6
 8001280:	e63a      	b.n	8000ef8 <__aeabi_dadd+0x164>
 8001282:	4664      	mov	r4, ip
 8001284:	0035      	movs	r5, r6
 8001286:	4641      	mov	r1, r8
 8001288:	0010      	movs	r0, r2
 800128a:	e685      	b.n	8000f98 <__aeabi_dadd+0x204>
 800128c:	000b      	movs	r3, r1
 800128e:	4303      	orrs	r3, r0
 8001290:	2d00      	cmp	r5, #0
 8001292:	d000      	beq.n	8001296 <__aeabi_dadd+0x502>
 8001294:	e663      	b.n	8000f5e <__aeabi_dadd+0x1ca>
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f5      	beq.n	8001286 <__aeabi_dadd+0x4f2>
 800129a:	4643      	mov	r3, r8
 800129c:	4313      	orrs	r3, r2
 800129e:	d100      	bne.n	80012a2 <__aeabi_dadd+0x50e>
 80012a0:	e67a      	b.n	8000f98 <__aeabi_dadd+0x204>
 80012a2:	1887      	adds	r7, r0, r2
 80012a4:	4287      	cmp	r7, r0
 80012a6:	4180      	sbcs	r0, r0
 80012a8:	2207      	movs	r2, #7
 80012aa:	4441      	add	r1, r8
 80012ac:	4240      	negs	r0, r0
 80012ae:	1809      	adds	r1, r1, r0
 80012b0:	403a      	ands	r2, r7
 80012b2:	020b      	lsls	r3, r1, #8
 80012b4:	d400      	bmi.n	80012b8 <__aeabi_dadd+0x524>
 80012b6:	e6d5      	b.n	8001064 <__aeabi_dadd+0x2d0>
 80012b8:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <__aeabi_dadd+0x634>)
 80012ba:	3501      	adds	r5, #1
 80012bc:	4019      	ands	r1, r3
 80012be:	e5c9      	b.n	8000e54 <__aeabi_dadd+0xc0>
 80012c0:	0038      	movs	r0, r7
 80012c2:	e669      	b.n	8000f98 <__aeabi_dadd+0x204>
 80012c4:	001e      	movs	r6, r3
 80012c6:	4647      	mov	r7, r8
 80012c8:	3e20      	subs	r6, #32
 80012ca:	40f7      	lsrs	r7, r6
 80012cc:	46bc      	mov	ip, r7
 80012ce:	2b20      	cmp	r3, #32
 80012d0:	d004      	beq.n	80012dc <__aeabi_dadd+0x548>
 80012d2:	2640      	movs	r6, #64	; 0x40
 80012d4:	1af3      	subs	r3, r6, r3
 80012d6:	4646      	mov	r6, r8
 80012d8:	409e      	lsls	r6, r3
 80012da:	4332      	orrs	r2, r6
 80012dc:	0017      	movs	r7, r2
 80012de:	4663      	mov	r3, ip
 80012e0:	1e7a      	subs	r2, r7, #1
 80012e2:	4197      	sbcs	r7, r2
 80012e4:	431f      	orrs	r7, r3
 80012e6:	e602      	b.n	8000eee <__aeabi_dadd+0x15a>
 80012e8:	4d36      	ldr	r5, [pc, #216]	; (80013c4 <__aeabi_dadd+0x630>)
 80012ea:	42ae      	cmp	r6, r5
 80012ec:	d0ca      	beq.n	8001284 <__aeabi_dadd+0x4f0>
 80012ee:	2580      	movs	r5, #128	; 0x80
 80012f0:	042d      	lsls	r5, r5, #16
 80012f2:	425b      	negs	r3, r3
 80012f4:	4329      	orrs	r1, r5
 80012f6:	e7a6      	b.n	8001246 <__aeabi_dadd+0x4b2>
 80012f8:	4308      	orrs	r0, r1
 80012fa:	1e41      	subs	r1, r0, #1
 80012fc:	4188      	sbcs	r0, r1
 80012fe:	e6a6      	b.n	800104e <__aeabi_dadd+0x2ba>
 8001300:	2b00      	cmp	r3, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x572>
 8001304:	e648      	b.n	8000f98 <__aeabi_dadd+0x204>
 8001306:	1a87      	subs	r7, r0, r2
 8001308:	4643      	mov	r3, r8
 800130a:	42b8      	cmp	r0, r7
 800130c:	41b6      	sbcs	r6, r6
 800130e:	1acb      	subs	r3, r1, r3
 8001310:	4276      	negs	r6, r6
 8001312:	1b9e      	subs	r6, r3, r6
 8001314:	0233      	lsls	r3, r6, #8
 8001316:	d54b      	bpl.n	80013b0 <__aeabi_dadd+0x61c>
 8001318:	1a17      	subs	r7, r2, r0
 800131a:	4643      	mov	r3, r8
 800131c:	42ba      	cmp	r2, r7
 800131e:	4192      	sbcs	r2, r2
 8001320:	1a59      	subs	r1, r3, r1
 8001322:	4252      	negs	r2, r2
 8001324:	1a89      	subs	r1, r1, r2
 8001326:	2207      	movs	r2, #7
 8001328:	4664      	mov	r4, ip
 800132a:	403a      	ands	r2, r7
 800132c:	e592      	b.n	8000e54 <__aeabi_dadd+0xc0>
 800132e:	4301      	orrs	r1, r0
 8001330:	000f      	movs	r7, r1
 8001332:	1e79      	subs	r1, r7, #1
 8001334:	418f      	sbcs	r7, r1
 8001336:	e79d      	b.n	8001274 <__aeabi_dadd+0x4e0>
 8001338:	001c      	movs	r4, r3
 800133a:	000f      	movs	r7, r1
 800133c:	3c20      	subs	r4, #32
 800133e:	40e7      	lsrs	r7, r4
 8001340:	2b20      	cmp	r3, #32
 8001342:	d003      	beq.n	800134c <__aeabi_dadd+0x5b8>
 8001344:	2440      	movs	r4, #64	; 0x40
 8001346:	1ae3      	subs	r3, r4, r3
 8001348:	4099      	lsls	r1, r3
 800134a:	4308      	orrs	r0, r1
 800134c:	1e41      	subs	r1, r0, #1
 800134e:	4188      	sbcs	r0, r1
 8001350:	4338      	orrs	r0, r7
 8001352:	e67c      	b.n	800104e <__aeabi_dadd+0x2ba>
 8001354:	2200      	movs	r2, #0
 8001356:	2400      	movs	r4, #0
 8001358:	e625      	b.n	8000fa6 <__aeabi_dadd+0x212>
 800135a:	1a17      	subs	r7, r2, r0
 800135c:	4643      	mov	r3, r8
 800135e:	42ba      	cmp	r2, r7
 8001360:	4192      	sbcs	r2, r2
 8001362:	1a59      	subs	r1, r3, r1
 8001364:	4252      	negs	r2, r2
 8001366:	1a89      	subs	r1, r1, r2
 8001368:	4664      	mov	r4, ip
 800136a:	0035      	movs	r5, r6
 800136c:	e543      	b.n	8000df6 <__aeabi_dadd+0x62>
 800136e:	4641      	mov	r1, r8
 8001370:	0010      	movs	r0, r2
 8001372:	4d14      	ldr	r5, [pc, #80]	; (80013c4 <__aeabi_dadd+0x630>)
 8001374:	e610      	b.n	8000f98 <__aeabi_dadd+0x204>
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	2400      	movs	r4, #0
 800137a:	0312      	lsls	r2, r2, #12
 800137c:	e680      	b.n	8001080 <__aeabi_dadd+0x2ec>
 800137e:	001d      	movs	r5, r3
 8001380:	000f      	movs	r7, r1
 8001382:	3d20      	subs	r5, #32
 8001384:	40ef      	lsrs	r7, r5
 8001386:	46bc      	mov	ip, r7
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x600>
 800138c:	2540      	movs	r5, #64	; 0x40
 800138e:	1aeb      	subs	r3, r5, r3
 8001390:	4099      	lsls	r1, r3
 8001392:	4308      	orrs	r0, r1
 8001394:	0007      	movs	r7, r0
 8001396:	4663      	mov	r3, ip
 8001398:	1e78      	subs	r0, r7, #1
 800139a:	4187      	sbcs	r7, r0
 800139c:	431f      	orrs	r7, r3
 800139e:	e769      	b.n	8001274 <__aeabi_dadd+0x4e0>
 80013a0:	1887      	adds	r7, r0, r2
 80013a2:	4297      	cmp	r7, r2
 80013a4:	419b      	sbcs	r3, r3
 80013a6:	4441      	add	r1, r8
 80013a8:	425b      	negs	r3, r3
 80013aa:	18c9      	adds	r1, r1, r3
 80013ac:	0035      	movs	r5, r6
 80013ae:	e5a3      	b.n	8000ef8 <__aeabi_dadd+0x164>
 80013b0:	003b      	movs	r3, r7
 80013b2:	4333      	orrs	r3, r6
 80013b4:	d0ce      	beq.n	8001354 <__aeabi_dadd+0x5c0>
 80013b6:	2207      	movs	r2, #7
 80013b8:	0031      	movs	r1, r6
 80013ba:	403a      	ands	r2, r7
 80013bc:	e652      	b.n	8001064 <__aeabi_dadd+0x2d0>
 80013be:	2300      	movs	r3, #0
 80013c0:	001a      	movs	r2, r3
 80013c2:	e5f4      	b.n	8000fae <__aeabi_dadd+0x21a>
 80013c4:	000007ff 	.word	0x000007ff
 80013c8:	ff7fffff 	.word	0xff7fffff

080013cc <__aeabi_ddiv>:
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	4657      	mov	r7, sl
 80013d0:	46de      	mov	lr, fp
 80013d2:	464e      	mov	r6, r9
 80013d4:	4645      	mov	r5, r8
 80013d6:	b5e0      	push	{r5, r6, r7, lr}
 80013d8:	4683      	mov	fp, r0
 80013da:	0007      	movs	r7, r0
 80013dc:	030e      	lsls	r6, r1, #12
 80013de:	0048      	lsls	r0, r1, #1
 80013e0:	b085      	sub	sp, #20
 80013e2:	4692      	mov	sl, r2
 80013e4:	001c      	movs	r4, r3
 80013e6:	0b36      	lsrs	r6, r6, #12
 80013e8:	0d40      	lsrs	r0, r0, #21
 80013ea:	0fcd      	lsrs	r5, r1, #31
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_ddiv+0x26>
 80013f0:	e09d      	b.n	800152e <__aeabi_ddiv+0x162>
 80013f2:	4b95      	ldr	r3, [pc, #596]	; (8001648 <__aeabi_ddiv+0x27c>)
 80013f4:	4298      	cmp	r0, r3
 80013f6:	d039      	beq.n	800146c <__aeabi_ddiv+0xa0>
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	00f6      	lsls	r6, r6, #3
 80013fc:	041b      	lsls	r3, r3, #16
 80013fe:	431e      	orrs	r6, r3
 8001400:	4a92      	ldr	r2, [pc, #584]	; (800164c <__aeabi_ddiv+0x280>)
 8001402:	0f7b      	lsrs	r3, r7, #29
 8001404:	4333      	orrs	r3, r6
 8001406:	4699      	mov	r9, r3
 8001408:	4694      	mov	ip, r2
 800140a:	0003      	movs	r3, r0
 800140c:	4463      	add	r3, ip
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2300      	movs	r3, #0
 8001412:	2600      	movs	r6, #0
 8001414:	00ff      	lsls	r7, r7, #3
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	0323      	lsls	r3, r4, #12
 800141a:	0b1b      	lsrs	r3, r3, #12
 800141c:	4698      	mov	r8, r3
 800141e:	0063      	lsls	r3, r4, #1
 8001420:	0fe4      	lsrs	r4, r4, #31
 8001422:	4652      	mov	r2, sl
 8001424:	0d5b      	lsrs	r3, r3, #21
 8001426:	9401      	str	r4, [sp, #4]
 8001428:	d100      	bne.n	800142c <__aeabi_ddiv+0x60>
 800142a:	e0b3      	b.n	8001594 <__aeabi_ddiv+0x1c8>
 800142c:	4986      	ldr	r1, [pc, #536]	; (8001648 <__aeabi_ddiv+0x27c>)
 800142e:	428b      	cmp	r3, r1
 8001430:	d100      	bne.n	8001434 <__aeabi_ddiv+0x68>
 8001432:	e09e      	b.n	8001572 <__aeabi_ddiv+0x1a6>
 8001434:	4642      	mov	r2, r8
 8001436:	00d1      	lsls	r1, r2, #3
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	0412      	lsls	r2, r2, #16
 800143c:	430a      	orrs	r2, r1
 800143e:	4651      	mov	r1, sl
 8001440:	0f49      	lsrs	r1, r1, #29
 8001442:	4311      	orrs	r1, r2
 8001444:	468b      	mov	fp, r1
 8001446:	4981      	ldr	r1, [pc, #516]	; (800164c <__aeabi_ddiv+0x280>)
 8001448:	4652      	mov	r2, sl
 800144a:	468c      	mov	ip, r1
 800144c:	9900      	ldr	r1, [sp, #0]
 800144e:	4463      	add	r3, ip
 8001450:	1acb      	subs	r3, r1, r3
 8001452:	2100      	movs	r1, #0
 8001454:	00d2      	lsls	r2, r2, #3
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	002b      	movs	r3, r5
 800145a:	4063      	eors	r3, r4
 800145c:	469a      	mov	sl, r3
 800145e:	2e0f      	cmp	r6, #15
 8001460:	d900      	bls.n	8001464 <__aeabi_ddiv+0x98>
 8001462:	e105      	b.n	8001670 <__aeabi_ddiv+0x2a4>
 8001464:	4b7a      	ldr	r3, [pc, #488]	; (8001650 <__aeabi_ddiv+0x284>)
 8001466:	00b6      	lsls	r6, r6, #2
 8001468:	599b      	ldr	r3, [r3, r6]
 800146a:	469f      	mov	pc, r3
 800146c:	465b      	mov	r3, fp
 800146e:	4333      	orrs	r3, r6
 8001470:	4699      	mov	r9, r3
 8001472:	d000      	beq.n	8001476 <__aeabi_ddiv+0xaa>
 8001474:	e0b8      	b.n	80015e8 <__aeabi_ddiv+0x21c>
 8001476:	2302      	movs	r3, #2
 8001478:	2608      	movs	r6, #8
 800147a:	2700      	movs	r7, #0
 800147c:	9000      	str	r0, [sp, #0]
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	e7ca      	b.n	8001418 <__aeabi_ddiv+0x4c>
 8001482:	46cb      	mov	fp, r9
 8001484:	003a      	movs	r2, r7
 8001486:	9902      	ldr	r1, [sp, #8]
 8001488:	9501      	str	r5, [sp, #4]
 800148a:	9b01      	ldr	r3, [sp, #4]
 800148c:	469a      	mov	sl, r3
 800148e:	2902      	cmp	r1, #2
 8001490:	d027      	beq.n	80014e2 <__aeabi_ddiv+0x116>
 8001492:	2903      	cmp	r1, #3
 8001494:	d100      	bne.n	8001498 <__aeabi_ddiv+0xcc>
 8001496:	e280      	b.n	800199a <__aeabi_ddiv+0x5ce>
 8001498:	2901      	cmp	r1, #1
 800149a:	d044      	beq.n	8001526 <__aeabi_ddiv+0x15a>
 800149c:	496d      	ldr	r1, [pc, #436]	; (8001654 <__aeabi_ddiv+0x288>)
 800149e:	9b00      	ldr	r3, [sp, #0]
 80014a0:	468c      	mov	ip, r1
 80014a2:	4463      	add	r3, ip
 80014a4:	001c      	movs	r4, r3
 80014a6:	2c00      	cmp	r4, #0
 80014a8:	dd38      	ble.n	800151c <__aeabi_ddiv+0x150>
 80014aa:	0753      	lsls	r3, r2, #29
 80014ac:	d000      	beq.n	80014b0 <__aeabi_ddiv+0xe4>
 80014ae:	e213      	b.n	80018d8 <__aeabi_ddiv+0x50c>
 80014b0:	08d2      	lsrs	r2, r2, #3
 80014b2:	465b      	mov	r3, fp
 80014b4:	01db      	lsls	r3, r3, #7
 80014b6:	d509      	bpl.n	80014cc <__aeabi_ddiv+0x100>
 80014b8:	4659      	mov	r1, fp
 80014ba:	4b67      	ldr	r3, [pc, #412]	; (8001658 <__aeabi_ddiv+0x28c>)
 80014bc:	4019      	ands	r1, r3
 80014be:	468b      	mov	fp, r1
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	00c9      	lsls	r1, r1, #3
 80014c4:	468c      	mov	ip, r1
 80014c6:	9b00      	ldr	r3, [sp, #0]
 80014c8:	4463      	add	r3, ip
 80014ca:	001c      	movs	r4, r3
 80014cc:	4b63      	ldr	r3, [pc, #396]	; (800165c <__aeabi_ddiv+0x290>)
 80014ce:	429c      	cmp	r4, r3
 80014d0:	dc07      	bgt.n	80014e2 <__aeabi_ddiv+0x116>
 80014d2:	465b      	mov	r3, fp
 80014d4:	0564      	lsls	r4, r4, #21
 80014d6:	075f      	lsls	r7, r3, #29
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	4317      	orrs	r7, r2
 80014dc:	0b1b      	lsrs	r3, r3, #12
 80014de:	0d62      	lsrs	r2, r4, #21
 80014e0:	e002      	b.n	80014e8 <__aeabi_ddiv+0x11c>
 80014e2:	2300      	movs	r3, #0
 80014e4:	2700      	movs	r7, #0
 80014e6:	4a58      	ldr	r2, [pc, #352]	; (8001648 <__aeabi_ddiv+0x27c>)
 80014e8:	2100      	movs	r1, #0
 80014ea:	031b      	lsls	r3, r3, #12
 80014ec:	0b1c      	lsrs	r4, r3, #12
 80014ee:	0d0b      	lsrs	r3, r1, #20
 80014f0:	051b      	lsls	r3, r3, #20
 80014f2:	4323      	orrs	r3, r4
 80014f4:	0514      	lsls	r4, r2, #20
 80014f6:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <__aeabi_ddiv+0x294>)
 80014f8:	0038      	movs	r0, r7
 80014fa:	4013      	ands	r3, r2
 80014fc:	431c      	orrs	r4, r3
 80014fe:	4653      	mov	r3, sl
 8001500:	0064      	lsls	r4, r4, #1
 8001502:	07db      	lsls	r3, r3, #31
 8001504:	0864      	lsrs	r4, r4, #1
 8001506:	431c      	orrs	r4, r3
 8001508:	0021      	movs	r1, r4
 800150a:	b005      	add	sp, #20
 800150c:	bc3c      	pop	{r2, r3, r4, r5}
 800150e:	4690      	mov	r8, r2
 8001510:	4699      	mov	r9, r3
 8001512:	46a2      	mov	sl, r4
 8001514:	46ab      	mov	fp, r5
 8001516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001518:	2201      	movs	r2, #1
 800151a:	4252      	negs	r2, r2
 800151c:	2301      	movs	r3, #1
 800151e:	1b1b      	subs	r3, r3, r4
 8001520:	2b38      	cmp	r3, #56	; 0x38
 8001522:	dc00      	bgt.n	8001526 <__aeabi_ddiv+0x15a>
 8001524:	e1ad      	b.n	8001882 <__aeabi_ddiv+0x4b6>
 8001526:	2200      	movs	r2, #0
 8001528:	2300      	movs	r3, #0
 800152a:	2700      	movs	r7, #0
 800152c:	e7dc      	b.n	80014e8 <__aeabi_ddiv+0x11c>
 800152e:	465b      	mov	r3, fp
 8001530:	4333      	orrs	r3, r6
 8001532:	4699      	mov	r9, r3
 8001534:	d05e      	beq.n	80015f4 <__aeabi_ddiv+0x228>
 8001536:	2e00      	cmp	r6, #0
 8001538:	d100      	bne.n	800153c <__aeabi_ddiv+0x170>
 800153a:	e18a      	b.n	8001852 <__aeabi_ddiv+0x486>
 800153c:	0030      	movs	r0, r6
 800153e:	f001 fa53 	bl	80029e8 <__clzsi2>
 8001542:	0003      	movs	r3, r0
 8001544:	3b0b      	subs	r3, #11
 8001546:	2b1c      	cmp	r3, #28
 8001548:	dd00      	ble.n	800154c <__aeabi_ddiv+0x180>
 800154a:	e17b      	b.n	8001844 <__aeabi_ddiv+0x478>
 800154c:	221d      	movs	r2, #29
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	465a      	mov	r2, fp
 8001552:	0001      	movs	r1, r0
 8001554:	40da      	lsrs	r2, r3
 8001556:	3908      	subs	r1, #8
 8001558:	408e      	lsls	r6, r1
 800155a:	0013      	movs	r3, r2
 800155c:	465f      	mov	r7, fp
 800155e:	4333      	orrs	r3, r6
 8001560:	4699      	mov	r9, r3
 8001562:	408f      	lsls	r7, r1
 8001564:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <__aeabi_ddiv+0x298>)
 8001566:	2600      	movs	r6, #0
 8001568:	1a1b      	subs	r3, r3, r0
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2300      	movs	r3, #0
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	e752      	b.n	8001418 <__aeabi_ddiv+0x4c>
 8001572:	4641      	mov	r1, r8
 8001574:	4653      	mov	r3, sl
 8001576:	430b      	orrs	r3, r1
 8001578:	493b      	ldr	r1, [pc, #236]	; (8001668 <__aeabi_ddiv+0x29c>)
 800157a:	469b      	mov	fp, r3
 800157c:	468c      	mov	ip, r1
 800157e:	9b00      	ldr	r3, [sp, #0]
 8001580:	4463      	add	r3, ip
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	465b      	mov	r3, fp
 8001586:	2b00      	cmp	r3, #0
 8001588:	d13b      	bne.n	8001602 <__aeabi_ddiv+0x236>
 800158a:	2302      	movs	r3, #2
 800158c:	2200      	movs	r2, #0
 800158e:	431e      	orrs	r6, r3
 8001590:	2102      	movs	r1, #2
 8001592:	e761      	b.n	8001458 <__aeabi_ddiv+0x8c>
 8001594:	4643      	mov	r3, r8
 8001596:	4313      	orrs	r3, r2
 8001598:	469b      	mov	fp, r3
 800159a:	d037      	beq.n	800160c <__aeabi_ddiv+0x240>
 800159c:	4643      	mov	r3, r8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d100      	bne.n	80015a4 <__aeabi_ddiv+0x1d8>
 80015a2:	e162      	b.n	800186a <__aeabi_ddiv+0x49e>
 80015a4:	4640      	mov	r0, r8
 80015a6:	f001 fa1f 	bl	80029e8 <__clzsi2>
 80015aa:	0003      	movs	r3, r0
 80015ac:	3b0b      	subs	r3, #11
 80015ae:	2b1c      	cmp	r3, #28
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_ddiv+0x1e8>
 80015b2:	e153      	b.n	800185c <__aeabi_ddiv+0x490>
 80015b4:	0002      	movs	r2, r0
 80015b6:	4641      	mov	r1, r8
 80015b8:	3a08      	subs	r2, #8
 80015ba:	4091      	lsls	r1, r2
 80015bc:	4688      	mov	r8, r1
 80015be:	211d      	movs	r1, #29
 80015c0:	1acb      	subs	r3, r1, r3
 80015c2:	4651      	mov	r1, sl
 80015c4:	40d9      	lsrs	r1, r3
 80015c6:	000b      	movs	r3, r1
 80015c8:	4641      	mov	r1, r8
 80015ca:	430b      	orrs	r3, r1
 80015cc:	469b      	mov	fp, r3
 80015ce:	4653      	mov	r3, sl
 80015d0:	4093      	lsls	r3, r2
 80015d2:	001a      	movs	r2, r3
 80015d4:	9b00      	ldr	r3, [sp, #0]
 80015d6:	4925      	ldr	r1, [pc, #148]	; (800166c <__aeabi_ddiv+0x2a0>)
 80015d8:	469c      	mov	ip, r3
 80015da:	4460      	add	r0, ip
 80015dc:	0003      	movs	r3, r0
 80015de:	468c      	mov	ip, r1
 80015e0:	4463      	add	r3, ip
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2100      	movs	r1, #0
 80015e6:	e737      	b.n	8001458 <__aeabi_ddiv+0x8c>
 80015e8:	2303      	movs	r3, #3
 80015ea:	46b1      	mov	r9, r6
 80015ec:	9000      	str	r0, [sp, #0]
 80015ee:	260c      	movs	r6, #12
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	e711      	b.n	8001418 <__aeabi_ddiv+0x4c>
 80015f4:	2300      	movs	r3, #0
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	2604      	movs	r6, #4
 80015fc:	2700      	movs	r7, #0
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	e70a      	b.n	8001418 <__aeabi_ddiv+0x4c>
 8001602:	2303      	movs	r3, #3
 8001604:	46c3      	mov	fp, r8
 8001606:	431e      	orrs	r6, r3
 8001608:	2103      	movs	r1, #3
 800160a:	e725      	b.n	8001458 <__aeabi_ddiv+0x8c>
 800160c:	3301      	adds	r3, #1
 800160e:	431e      	orrs	r6, r3
 8001610:	2200      	movs	r2, #0
 8001612:	2101      	movs	r1, #1
 8001614:	e720      	b.n	8001458 <__aeabi_ddiv+0x8c>
 8001616:	2300      	movs	r3, #0
 8001618:	469a      	mov	sl, r3
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	2700      	movs	r7, #0
 800161e:	031b      	lsls	r3, r3, #12
 8001620:	4a09      	ldr	r2, [pc, #36]	; (8001648 <__aeabi_ddiv+0x27c>)
 8001622:	e761      	b.n	80014e8 <__aeabi_ddiv+0x11c>
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	4649      	mov	r1, r9
 8001628:	031b      	lsls	r3, r3, #12
 800162a:	4219      	tst	r1, r3
 800162c:	d100      	bne.n	8001630 <__aeabi_ddiv+0x264>
 800162e:	e0e2      	b.n	80017f6 <__aeabi_ddiv+0x42a>
 8001630:	4659      	mov	r1, fp
 8001632:	4219      	tst	r1, r3
 8001634:	d000      	beq.n	8001638 <__aeabi_ddiv+0x26c>
 8001636:	e0de      	b.n	80017f6 <__aeabi_ddiv+0x42a>
 8001638:	430b      	orrs	r3, r1
 800163a:	031b      	lsls	r3, r3, #12
 800163c:	0017      	movs	r7, r2
 800163e:	0b1b      	lsrs	r3, r3, #12
 8001640:	46a2      	mov	sl, r4
 8001642:	4a01      	ldr	r2, [pc, #4]	; (8001648 <__aeabi_ddiv+0x27c>)
 8001644:	e750      	b.n	80014e8 <__aeabi_ddiv+0x11c>
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	000007ff 	.word	0x000007ff
 800164c:	fffffc01 	.word	0xfffffc01
 8001650:	0800b014 	.word	0x0800b014
 8001654:	000003ff 	.word	0x000003ff
 8001658:	feffffff 	.word	0xfeffffff
 800165c:	000007fe 	.word	0x000007fe
 8001660:	800fffff 	.word	0x800fffff
 8001664:	fffffc0d 	.word	0xfffffc0d
 8001668:	fffff801 	.word	0xfffff801
 800166c:	000003f3 	.word	0x000003f3
 8001670:	45d9      	cmp	r9, fp
 8001672:	d900      	bls.n	8001676 <__aeabi_ddiv+0x2aa>
 8001674:	e0cb      	b.n	800180e <__aeabi_ddiv+0x442>
 8001676:	d100      	bne.n	800167a <__aeabi_ddiv+0x2ae>
 8001678:	e0c6      	b.n	8001808 <__aeabi_ddiv+0x43c>
 800167a:	003c      	movs	r4, r7
 800167c:	4648      	mov	r0, r9
 800167e:	2700      	movs	r7, #0
 8001680:	9b00      	ldr	r3, [sp, #0]
 8001682:	3b01      	subs	r3, #1
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	465b      	mov	r3, fp
 8001688:	0e16      	lsrs	r6, r2, #24
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	431e      	orrs	r6, r3
 800168e:	0213      	lsls	r3, r2, #8
 8001690:	4698      	mov	r8, r3
 8001692:	0433      	lsls	r3, r6, #16
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	4699      	mov	r9, r3
 8001698:	0c31      	lsrs	r1, r6, #16
 800169a:	9101      	str	r1, [sp, #4]
 800169c:	f7fe fdcc 	bl	8000238 <__aeabi_uidivmod>
 80016a0:	464a      	mov	r2, r9
 80016a2:	4342      	muls	r2, r0
 80016a4:	040b      	lsls	r3, r1, #16
 80016a6:	0c21      	lsrs	r1, r4, #16
 80016a8:	0005      	movs	r5, r0
 80016aa:	4319      	orrs	r1, r3
 80016ac:	428a      	cmp	r2, r1
 80016ae:	d907      	bls.n	80016c0 <__aeabi_ddiv+0x2f4>
 80016b0:	1989      	adds	r1, r1, r6
 80016b2:	3d01      	subs	r5, #1
 80016b4:	428e      	cmp	r6, r1
 80016b6:	d803      	bhi.n	80016c0 <__aeabi_ddiv+0x2f4>
 80016b8:	428a      	cmp	r2, r1
 80016ba:	d901      	bls.n	80016c0 <__aeabi_ddiv+0x2f4>
 80016bc:	1e85      	subs	r5, r0, #2
 80016be:	1989      	adds	r1, r1, r6
 80016c0:	1a88      	subs	r0, r1, r2
 80016c2:	9901      	ldr	r1, [sp, #4]
 80016c4:	f7fe fdb8 	bl	8000238 <__aeabi_uidivmod>
 80016c8:	0409      	lsls	r1, r1, #16
 80016ca:	468c      	mov	ip, r1
 80016cc:	464a      	mov	r2, r9
 80016ce:	0421      	lsls	r1, r4, #16
 80016d0:	4664      	mov	r4, ip
 80016d2:	4342      	muls	r2, r0
 80016d4:	0c09      	lsrs	r1, r1, #16
 80016d6:	0003      	movs	r3, r0
 80016d8:	4321      	orrs	r1, r4
 80016da:	428a      	cmp	r2, r1
 80016dc:	d904      	bls.n	80016e8 <__aeabi_ddiv+0x31c>
 80016de:	1989      	adds	r1, r1, r6
 80016e0:	3b01      	subs	r3, #1
 80016e2:	428e      	cmp	r6, r1
 80016e4:	d800      	bhi.n	80016e8 <__aeabi_ddiv+0x31c>
 80016e6:	e0f1      	b.n	80018cc <__aeabi_ddiv+0x500>
 80016e8:	042d      	lsls	r5, r5, #16
 80016ea:	431d      	orrs	r5, r3
 80016ec:	46ab      	mov	fp, r5
 80016ee:	4643      	mov	r3, r8
 80016f0:	1a89      	subs	r1, r1, r2
 80016f2:	4642      	mov	r2, r8
 80016f4:	0c28      	lsrs	r0, r5, #16
 80016f6:	0412      	lsls	r2, r2, #16
 80016f8:	0c1d      	lsrs	r5, r3, #16
 80016fa:	465b      	mov	r3, fp
 80016fc:	0c14      	lsrs	r4, r2, #16
 80016fe:	0022      	movs	r2, r4
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	0c1b      	lsrs	r3, r3, #16
 8001704:	435a      	muls	r2, r3
 8001706:	9403      	str	r4, [sp, #12]
 8001708:	436b      	muls	r3, r5
 800170a:	4344      	muls	r4, r0
 800170c:	9502      	str	r5, [sp, #8]
 800170e:	4368      	muls	r0, r5
 8001710:	191b      	adds	r3, r3, r4
 8001712:	0c15      	lsrs	r5, r2, #16
 8001714:	18eb      	adds	r3, r5, r3
 8001716:	429c      	cmp	r4, r3
 8001718:	d903      	bls.n	8001722 <__aeabi_ddiv+0x356>
 800171a:	2480      	movs	r4, #128	; 0x80
 800171c:	0264      	lsls	r4, r4, #9
 800171e:	46a4      	mov	ip, r4
 8001720:	4460      	add	r0, ip
 8001722:	0c1c      	lsrs	r4, r3, #16
 8001724:	0415      	lsls	r5, r2, #16
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	0c2d      	lsrs	r5, r5, #16
 800172a:	1820      	adds	r0, r4, r0
 800172c:	195d      	adds	r5, r3, r5
 800172e:	4281      	cmp	r1, r0
 8001730:	d377      	bcc.n	8001822 <__aeabi_ddiv+0x456>
 8001732:	d073      	beq.n	800181c <__aeabi_ddiv+0x450>
 8001734:	1a0c      	subs	r4, r1, r0
 8001736:	4aa2      	ldr	r2, [pc, #648]	; (80019c0 <__aeabi_ddiv+0x5f4>)
 8001738:	1b7d      	subs	r5, r7, r5
 800173a:	42af      	cmp	r7, r5
 800173c:	41bf      	sbcs	r7, r7
 800173e:	4694      	mov	ip, r2
 8001740:	9b00      	ldr	r3, [sp, #0]
 8001742:	427f      	negs	r7, r7
 8001744:	4463      	add	r3, ip
 8001746:	1be0      	subs	r0, r4, r7
 8001748:	001c      	movs	r4, r3
 800174a:	4286      	cmp	r6, r0
 800174c:	d100      	bne.n	8001750 <__aeabi_ddiv+0x384>
 800174e:	e0db      	b.n	8001908 <__aeabi_ddiv+0x53c>
 8001750:	9901      	ldr	r1, [sp, #4]
 8001752:	f7fe fd71 	bl	8000238 <__aeabi_uidivmod>
 8001756:	464a      	mov	r2, r9
 8001758:	4342      	muls	r2, r0
 800175a:	040b      	lsls	r3, r1, #16
 800175c:	0c29      	lsrs	r1, r5, #16
 800175e:	0007      	movs	r7, r0
 8001760:	4319      	orrs	r1, r3
 8001762:	428a      	cmp	r2, r1
 8001764:	d907      	bls.n	8001776 <__aeabi_ddiv+0x3aa>
 8001766:	1989      	adds	r1, r1, r6
 8001768:	3f01      	subs	r7, #1
 800176a:	428e      	cmp	r6, r1
 800176c:	d803      	bhi.n	8001776 <__aeabi_ddiv+0x3aa>
 800176e:	428a      	cmp	r2, r1
 8001770:	d901      	bls.n	8001776 <__aeabi_ddiv+0x3aa>
 8001772:	1e87      	subs	r7, r0, #2
 8001774:	1989      	adds	r1, r1, r6
 8001776:	1a88      	subs	r0, r1, r2
 8001778:	9901      	ldr	r1, [sp, #4]
 800177a:	f7fe fd5d 	bl	8000238 <__aeabi_uidivmod>
 800177e:	0409      	lsls	r1, r1, #16
 8001780:	464a      	mov	r2, r9
 8001782:	4689      	mov	r9, r1
 8001784:	0429      	lsls	r1, r5, #16
 8001786:	464d      	mov	r5, r9
 8001788:	4342      	muls	r2, r0
 800178a:	0c09      	lsrs	r1, r1, #16
 800178c:	0003      	movs	r3, r0
 800178e:	4329      	orrs	r1, r5
 8001790:	428a      	cmp	r2, r1
 8001792:	d907      	bls.n	80017a4 <__aeabi_ddiv+0x3d8>
 8001794:	1989      	adds	r1, r1, r6
 8001796:	3b01      	subs	r3, #1
 8001798:	428e      	cmp	r6, r1
 800179a:	d803      	bhi.n	80017a4 <__aeabi_ddiv+0x3d8>
 800179c:	428a      	cmp	r2, r1
 800179e:	d901      	bls.n	80017a4 <__aeabi_ddiv+0x3d8>
 80017a0:	1e83      	subs	r3, r0, #2
 80017a2:	1989      	adds	r1, r1, r6
 80017a4:	043f      	lsls	r7, r7, #16
 80017a6:	1a89      	subs	r1, r1, r2
 80017a8:	003a      	movs	r2, r7
 80017aa:	9f03      	ldr	r7, [sp, #12]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	0038      	movs	r0, r7
 80017b0:	0413      	lsls	r3, r2, #16
 80017b2:	0c1b      	lsrs	r3, r3, #16
 80017b4:	4358      	muls	r0, r3
 80017b6:	4681      	mov	r9, r0
 80017b8:	9802      	ldr	r0, [sp, #8]
 80017ba:	0c15      	lsrs	r5, r2, #16
 80017bc:	436f      	muls	r7, r5
 80017be:	4343      	muls	r3, r0
 80017c0:	4345      	muls	r5, r0
 80017c2:	4648      	mov	r0, r9
 80017c4:	0c00      	lsrs	r0, r0, #16
 80017c6:	4684      	mov	ip, r0
 80017c8:	19db      	adds	r3, r3, r7
 80017ca:	4463      	add	r3, ip
 80017cc:	429f      	cmp	r7, r3
 80017ce:	d903      	bls.n	80017d8 <__aeabi_ddiv+0x40c>
 80017d0:	2080      	movs	r0, #128	; 0x80
 80017d2:	0240      	lsls	r0, r0, #9
 80017d4:	4684      	mov	ip, r0
 80017d6:	4465      	add	r5, ip
 80017d8:	4648      	mov	r0, r9
 80017da:	0c1f      	lsrs	r7, r3, #16
 80017dc:	0400      	lsls	r0, r0, #16
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	0c00      	lsrs	r0, r0, #16
 80017e2:	197d      	adds	r5, r7, r5
 80017e4:	1818      	adds	r0, r3, r0
 80017e6:	42a9      	cmp	r1, r5
 80017e8:	d200      	bcs.n	80017ec <__aeabi_ddiv+0x420>
 80017ea:	e084      	b.n	80018f6 <__aeabi_ddiv+0x52a>
 80017ec:	d100      	bne.n	80017f0 <__aeabi_ddiv+0x424>
 80017ee:	e07f      	b.n	80018f0 <__aeabi_ddiv+0x524>
 80017f0:	2301      	movs	r3, #1
 80017f2:	431a      	orrs	r2, r3
 80017f4:	e657      	b.n	80014a6 <__aeabi_ddiv+0xda>
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	464a      	mov	r2, r9
 80017fa:	031b      	lsls	r3, r3, #12
 80017fc:	4313      	orrs	r3, r2
 80017fe:	031b      	lsls	r3, r3, #12
 8001800:	0b1b      	lsrs	r3, r3, #12
 8001802:	46aa      	mov	sl, r5
 8001804:	4a6f      	ldr	r2, [pc, #444]	; (80019c4 <__aeabi_ddiv+0x5f8>)
 8001806:	e66f      	b.n	80014e8 <__aeabi_ddiv+0x11c>
 8001808:	42ba      	cmp	r2, r7
 800180a:	d900      	bls.n	800180e <__aeabi_ddiv+0x442>
 800180c:	e735      	b.n	800167a <__aeabi_ddiv+0x2ae>
 800180e:	464b      	mov	r3, r9
 8001810:	07dc      	lsls	r4, r3, #31
 8001812:	0858      	lsrs	r0, r3, #1
 8001814:	087b      	lsrs	r3, r7, #1
 8001816:	431c      	orrs	r4, r3
 8001818:	07ff      	lsls	r7, r7, #31
 800181a:	e734      	b.n	8001686 <__aeabi_ddiv+0x2ba>
 800181c:	2400      	movs	r4, #0
 800181e:	42af      	cmp	r7, r5
 8001820:	d289      	bcs.n	8001736 <__aeabi_ddiv+0x36a>
 8001822:	4447      	add	r7, r8
 8001824:	4547      	cmp	r7, r8
 8001826:	41a4      	sbcs	r4, r4
 8001828:	465b      	mov	r3, fp
 800182a:	4264      	negs	r4, r4
 800182c:	19a4      	adds	r4, r4, r6
 800182e:	1864      	adds	r4, r4, r1
 8001830:	3b01      	subs	r3, #1
 8001832:	42a6      	cmp	r6, r4
 8001834:	d21e      	bcs.n	8001874 <__aeabi_ddiv+0x4a8>
 8001836:	42a0      	cmp	r0, r4
 8001838:	d86d      	bhi.n	8001916 <__aeabi_ddiv+0x54a>
 800183a:	d100      	bne.n	800183e <__aeabi_ddiv+0x472>
 800183c:	e0b6      	b.n	80019ac <__aeabi_ddiv+0x5e0>
 800183e:	1a24      	subs	r4, r4, r0
 8001840:	469b      	mov	fp, r3
 8001842:	e778      	b.n	8001736 <__aeabi_ddiv+0x36a>
 8001844:	0003      	movs	r3, r0
 8001846:	465a      	mov	r2, fp
 8001848:	3b28      	subs	r3, #40	; 0x28
 800184a:	409a      	lsls	r2, r3
 800184c:	2700      	movs	r7, #0
 800184e:	4691      	mov	r9, r2
 8001850:	e688      	b.n	8001564 <__aeabi_ddiv+0x198>
 8001852:	4658      	mov	r0, fp
 8001854:	f001 f8c8 	bl	80029e8 <__clzsi2>
 8001858:	3020      	adds	r0, #32
 800185a:	e672      	b.n	8001542 <__aeabi_ddiv+0x176>
 800185c:	0003      	movs	r3, r0
 800185e:	4652      	mov	r2, sl
 8001860:	3b28      	subs	r3, #40	; 0x28
 8001862:	409a      	lsls	r2, r3
 8001864:	4693      	mov	fp, r2
 8001866:	2200      	movs	r2, #0
 8001868:	e6b4      	b.n	80015d4 <__aeabi_ddiv+0x208>
 800186a:	4650      	mov	r0, sl
 800186c:	f001 f8bc 	bl	80029e8 <__clzsi2>
 8001870:	3020      	adds	r0, #32
 8001872:	e69a      	b.n	80015aa <__aeabi_ddiv+0x1de>
 8001874:	42a6      	cmp	r6, r4
 8001876:	d1e2      	bne.n	800183e <__aeabi_ddiv+0x472>
 8001878:	45b8      	cmp	r8, r7
 800187a:	d9dc      	bls.n	8001836 <__aeabi_ddiv+0x46a>
 800187c:	1a34      	subs	r4, r6, r0
 800187e:	469b      	mov	fp, r3
 8001880:	e759      	b.n	8001736 <__aeabi_ddiv+0x36a>
 8001882:	2b1f      	cmp	r3, #31
 8001884:	dc65      	bgt.n	8001952 <__aeabi_ddiv+0x586>
 8001886:	4c50      	ldr	r4, [pc, #320]	; (80019c8 <__aeabi_ddiv+0x5fc>)
 8001888:	9900      	ldr	r1, [sp, #0]
 800188a:	46a4      	mov	ip, r4
 800188c:	465c      	mov	r4, fp
 800188e:	4461      	add	r1, ip
 8001890:	0008      	movs	r0, r1
 8001892:	408c      	lsls	r4, r1
 8001894:	0011      	movs	r1, r2
 8001896:	4082      	lsls	r2, r0
 8001898:	40d9      	lsrs	r1, r3
 800189a:	1e50      	subs	r0, r2, #1
 800189c:	4182      	sbcs	r2, r0
 800189e:	430c      	orrs	r4, r1
 80018a0:	4314      	orrs	r4, r2
 80018a2:	465a      	mov	r2, fp
 80018a4:	40da      	lsrs	r2, r3
 80018a6:	0013      	movs	r3, r2
 80018a8:	0762      	lsls	r2, r4, #29
 80018aa:	d009      	beq.n	80018c0 <__aeabi_ddiv+0x4f4>
 80018ac:	220f      	movs	r2, #15
 80018ae:	4022      	ands	r2, r4
 80018b0:	2a04      	cmp	r2, #4
 80018b2:	d005      	beq.n	80018c0 <__aeabi_ddiv+0x4f4>
 80018b4:	0022      	movs	r2, r4
 80018b6:	1d14      	adds	r4, r2, #4
 80018b8:	4294      	cmp	r4, r2
 80018ba:	4189      	sbcs	r1, r1
 80018bc:	4249      	negs	r1, r1
 80018be:	185b      	adds	r3, r3, r1
 80018c0:	021a      	lsls	r2, r3, #8
 80018c2:	d562      	bpl.n	800198a <__aeabi_ddiv+0x5be>
 80018c4:	2201      	movs	r2, #1
 80018c6:	2300      	movs	r3, #0
 80018c8:	2700      	movs	r7, #0
 80018ca:	e60d      	b.n	80014e8 <__aeabi_ddiv+0x11c>
 80018cc:	428a      	cmp	r2, r1
 80018ce:	d800      	bhi.n	80018d2 <__aeabi_ddiv+0x506>
 80018d0:	e70a      	b.n	80016e8 <__aeabi_ddiv+0x31c>
 80018d2:	1e83      	subs	r3, r0, #2
 80018d4:	1989      	adds	r1, r1, r6
 80018d6:	e707      	b.n	80016e8 <__aeabi_ddiv+0x31c>
 80018d8:	230f      	movs	r3, #15
 80018da:	4013      	ands	r3, r2
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d100      	bne.n	80018e2 <__aeabi_ddiv+0x516>
 80018e0:	e5e6      	b.n	80014b0 <__aeabi_ddiv+0xe4>
 80018e2:	1d17      	adds	r7, r2, #4
 80018e4:	4297      	cmp	r7, r2
 80018e6:	4192      	sbcs	r2, r2
 80018e8:	4253      	negs	r3, r2
 80018ea:	449b      	add	fp, r3
 80018ec:	08fa      	lsrs	r2, r7, #3
 80018ee:	e5e0      	b.n	80014b2 <__aeabi_ddiv+0xe6>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d100      	bne.n	80018f6 <__aeabi_ddiv+0x52a>
 80018f4:	e5d7      	b.n	80014a6 <__aeabi_ddiv+0xda>
 80018f6:	1871      	adds	r1, r6, r1
 80018f8:	1e53      	subs	r3, r2, #1
 80018fa:	42b1      	cmp	r1, r6
 80018fc:	d327      	bcc.n	800194e <__aeabi_ddiv+0x582>
 80018fe:	42a9      	cmp	r1, r5
 8001900:	d315      	bcc.n	800192e <__aeabi_ddiv+0x562>
 8001902:	d058      	beq.n	80019b6 <__aeabi_ddiv+0x5ea>
 8001904:	001a      	movs	r2, r3
 8001906:	e773      	b.n	80017f0 <__aeabi_ddiv+0x424>
 8001908:	2b00      	cmp	r3, #0
 800190a:	dc00      	bgt.n	800190e <__aeabi_ddiv+0x542>
 800190c:	e604      	b.n	8001518 <__aeabi_ddiv+0x14c>
 800190e:	2301      	movs	r3, #1
 8001910:	2200      	movs	r2, #0
 8001912:	449b      	add	fp, r3
 8001914:	e5cd      	b.n	80014b2 <__aeabi_ddiv+0xe6>
 8001916:	2302      	movs	r3, #2
 8001918:	4447      	add	r7, r8
 800191a:	4547      	cmp	r7, r8
 800191c:	4189      	sbcs	r1, r1
 800191e:	425b      	negs	r3, r3
 8001920:	469c      	mov	ip, r3
 8001922:	4249      	negs	r1, r1
 8001924:	1989      	adds	r1, r1, r6
 8001926:	190c      	adds	r4, r1, r4
 8001928:	44e3      	add	fp, ip
 800192a:	1a24      	subs	r4, r4, r0
 800192c:	e703      	b.n	8001736 <__aeabi_ddiv+0x36a>
 800192e:	4643      	mov	r3, r8
 8001930:	005f      	lsls	r7, r3, #1
 8001932:	4547      	cmp	r7, r8
 8001934:	419b      	sbcs	r3, r3
 8001936:	46b8      	mov	r8, r7
 8001938:	425b      	negs	r3, r3
 800193a:	199e      	adds	r6, r3, r6
 800193c:	3a02      	subs	r2, #2
 800193e:	1989      	adds	r1, r1, r6
 8001940:	42a9      	cmp	r1, r5
 8001942:	d000      	beq.n	8001946 <__aeabi_ddiv+0x57a>
 8001944:	e754      	b.n	80017f0 <__aeabi_ddiv+0x424>
 8001946:	4540      	cmp	r0, r8
 8001948:	d000      	beq.n	800194c <__aeabi_ddiv+0x580>
 800194a:	e751      	b.n	80017f0 <__aeabi_ddiv+0x424>
 800194c:	e5ab      	b.n	80014a6 <__aeabi_ddiv+0xda>
 800194e:	001a      	movs	r2, r3
 8001950:	e7f6      	b.n	8001940 <__aeabi_ddiv+0x574>
 8001952:	211f      	movs	r1, #31
 8001954:	465f      	mov	r7, fp
 8001956:	4249      	negs	r1, r1
 8001958:	1b0c      	subs	r4, r1, r4
 800195a:	40e7      	lsrs	r7, r4
 800195c:	2b20      	cmp	r3, #32
 800195e:	d007      	beq.n	8001970 <__aeabi_ddiv+0x5a4>
 8001960:	491a      	ldr	r1, [pc, #104]	; (80019cc <__aeabi_ddiv+0x600>)
 8001962:	9b00      	ldr	r3, [sp, #0]
 8001964:	468c      	mov	ip, r1
 8001966:	4463      	add	r3, ip
 8001968:	0018      	movs	r0, r3
 800196a:	465b      	mov	r3, fp
 800196c:	4083      	lsls	r3, r0
 800196e:	431a      	orrs	r2, r3
 8001970:	1e50      	subs	r0, r2, #1
 8001972:	4182      	sbcs	r2, r0
 8001974:	433a      	orrs	r2, r7
 8001976:	2707      	movs	r7, #7
 8001978:	2300      	movs	r3, #0
 800197a:	4017      	ands	r7, r2
 800197c:	d009      	beq.n	8001992 <__aeabi_ddiv+0x5c6>
 800197e:	210f      	movs	r1, #15
 8001980:	2300      	movs	r3, #0
 8001982:	4011      	ands	r1, r2
 8001984:	0014      	movs	r4, r2
 8001986:	2904      	cmp	r1, #4
 8001988:	d195      	bne.n	80018b6 <__aeabi_ddiv+0x4ea>
 800198a:	0022      	movs	r2, r4
 800198c:	075f      	lsls	r7, r3, #29
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	0b1b      	lsrs	r3, r3, #12
 8001992:	08d2      	lsrs	r2, r2, #3
 8001994:	4317      	orrs	r7, r2
 8001996:	2200      	movs	r2, #0
 8001998:	e5a6      	b.n	80014e8 <__aeabi_ddiv+0x11c>
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	4659      	mov	r1, fp
 800199e:	031b      	lsls	r3, r3, #12
 80019a0:	430b      	orrs	r3, r1
 80019a2:	031b      	lsls	r3, r3, #12
 80019a4:	0017      	movs	r7, r2
 80019a6:	0b1b      	lsrs	r3, r3, #12
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <__aeabi_ddiv+0x5f8>)
 80019aa:	e59d      	b.n	80014e8 <__aeabi_ddiv+0x11c>
 80019ac:	42bd      	cmp	r5, r7
 80019ae:	d8b2      	bhi.n	8001916 <__aeabi_ddiv+0x54a>
 80019b0:	469b      	mov	fp, r3
 80019b2:	2400      	movs	r4, #0
 80019b4:	e6bf      	b.n	8001736 <__aeabi_ddiv+0x36a>
 80019b6:	4580      	cmp	r8, r0
 80019b8:	d3b9      	bcc.n	800192e <__aeabi_ddiv+0x562>
 80019ba:	001a      	movs	r2, r3
 80019bc:	e7c3      	b.n	8001946 <__aeabi_ddiv+0x57a>
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	000003ff 	.word	0x000003ff
 80019c4:	000007ff 	.word	0x000007ff
 80019c8:	0000041e 	.word	0x0000041e
 80019cc:	0000043e 	.word	0x0000043e

080019d0 <__eqdf2>:
 80019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d2:	464f      	mov	r7, r9
 80019d4:	4646      	mov	r6, r8
 80019d6:	46d6      	mov	lr, sl
 80019d8:	4684      	mov	ip, r0
 80019da:	b5c0      	push	{r6, r7, lr}
 80019dc:	4680      	mov	r8, r0
 80019de:	4e19      	ldr	r6, [pc, #100]	; (8001a44 <__eqdf2+0x74>)
 80019e0:	0318      	lsls	r0, r3, #12
 80019e2:	030f      	lsls	r7, r1, #12
 80019e4:	004d      	lsls	r5, r1, #1
 80019e6:	0b00      	lsrs	r0, r0, #12
 80019e8:	005c      	lsls	r4, r3, #1
 80019ea:	4682      	mov	sl, r0
 80019ec:	0b3f      	lsrs	r7, r7, #12
 80019ee:	0d6d      	lsrs	r5, r5, #21
 80019f0:	0fc9      	lsrs	r1, r1, #31
 80019f2:	4691      	mov	r9, r2
 80019f4:	0d64      	lsrs	r4, r4, #21
 80019f6:	0fdb      	lsrs	r3, r3, #31
 80019f8:	2001      	movs	r0, #1
 80019fa:	42b5      	cmp	r5, r6
 80019fc:	d00a      	beq.n	8001a14 <__eqdf2+0x44>
 80019fe:	42b4      	cmp	r4, r6
 8001a00:	d003      	beq.n	8001a0a <__eqdf2+0x3a>
 8001a02:	42a5      	cmp	r5, r4
 8001a04:	d101      	bne.n	8001a0a <__eqdf2+0x3a>
 8001a06:	4557      	cmp	r7, sl
 8001a08:	d00c      	beq.n	8001a24 <__eqdf2+0x54>
 8001a0a:	bc1c      	pop	{r2, r3, r4}
 8001a0c:	4690      	mov	r8, r2
 8001a0e:	4699      	mov	r9, r3
 8001a10:	46a2      	mov	sl, r4
 8001a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a14:	4666      	mov	r6, ip
 8001a16:	433e      	orrs	r6, r7
 8001a18:	d1f7      	bne.n	8001a0a <__eqdf2+0x3a>
 8001a1a:	42ac      	cmp	r4, r5
 8001a1c:	d1f5      	bne.n	8001a0a <__eqdf2+0x3a>
 8001a1e:	4654      	mov	r4, sl
 8001a20:	4314      	orrs	r4, r2
 8001a22:	d1f2      	bne.n	8001a0a <__eqdf2+0x3a>
 8001a24:	2001      	movs	r0, #1
 8001a26:	45c8      	cmp	r8, r9
 8001a28:	d1ef      	bne.n	8001a0a <__eqdf2+0x3a>
 8001a2a:	4299      	cmp	r1, r3
 8001a2c:	d007      	beq.n	8001a3e <__eqdf2+0x6e>
 8001a2e:	2d00      	cmp	r5, #0
 8001a30:	d1eb      	bne.n	8001a0a <__eqdf2+0x3a>
 8001a32:	4663      	mov	r3, ip
 8001a34:	431f      	orrs	r7, r3
 8001a36:	0038      	movs	r0, r7
 8001a38:	1e47      	subs	r7, r0, #1
 8001a3a:	41b8      	sbcs	r0, r7
 8001a3c:	e7e5      	b.n	8001a0a <__eqdf2+0x3a>
 8001a3e:	2000      	movs	r0, #0
 8001a40:	e7e3      	b.n	8001a0a <__eqdf2+0x3a>
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	000007ff 	.word	0x000007ff

08001a48 <__gedf2>:
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4a:	464f      	mov	r7, r9
 8001a4c:	4646      	mov	r6, r8
 8001a4e:	46d6      	mov	lr, sl
 8001a50:	004d      	lsls	r5, r1, #1
 8001a52:	b5c0      	push	{r6, r7, lr}
 8001a54:	030e      	lsls	r6, r1, #12
 8001a56:	0fc9      	lsrs	r1, r1, #31
 8001a58:	468a      	mov	sl, r1
 8001a5a:	492c      	ldr	r1, [pc, #176]	; (8001b0c <__gedf2+0xc4>)
 8001a5c:	031f      	lsls	r7, r3, #12
 8001a5e:	005c      	lsls	r4, r3, #1
 8001a60:	4680      	mov	r8, r0
 8001a62:	0b36      	lsrs	r6, r6, #12
 8001a64:	0d6d      	lsrs	r5, r5, #21
 8001a66:	4691      	mov	r9, r2
 8001a68:	0b3f      	lsrs	r7, r7, #12
 8001a6a:	0d64      	lsrs	r4, r4, #21
 8001a6c:	0fdb      	lsrs	r3, r3, #31
 8001a6e:	428d      	cmp	r5, r1
 8001a70:	d01e      	beq.n	8001ab0 <__gedf2+0x68>
 8001a72:	428c      	cmp	r4, r1
 8001a74:	d016      	beq.n	8001aa4 <__gedf2+0x5c>
 8001a76:	2d00      	cmp	r5, #0
 8001a78:	d11e      	bne.n	8001ab8 <__gedf2+0x70>
 8001a7a:	4330      	orrs	r0, r6
 8001a7c:	4684      	mov	ip, r0
 8001a7e:	2c00      	cmp	r4, #0
 8001a80:	d101      	bne.n	8001a86 <__gedf2+0x3e>
 8001a82:	433a      	orrs	r2, r7
 8001a84:	d023      	beq.n	8001ace <__gedf2+0x86>
 8001a86:	4662      	mov	r2, ip
 8001a88:	2a00      	cmp	r2, #0
 8001a8a:	d01a      	beq.n	8001ac2 <__gedf2+0x7a>
 8001a8c:	459a      	cmp	sl, r3
 8001a8e:	d029      	beq.n	8001ae4 <__gedf2+0x9c>
 8001a90:	4651      	mov	r1, sl
 8001a92:	2002      	movs	r0, #2
 8001a94:	3901      	subs	r1, #1
 8001a96:	4008      	ands	r0, r1
 8001a98:	3801      	subs	r0, #1
 8001a9a:	bc1c      	pop	{r2, r3, r4}
 8001a9c:	4690      	mov	r8, r2
 8001a9e:	4699      	mov	r9, r3
 8001aa0:	46a2      	mov	sl, r4
 8001aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa4:	0039      	movs	r1, r7
 8001aa6:	4311      	orrs	r1, r2
 8001aa8:	d0e5      	beq.n	8001a76 <__gedf2+0x2e>
 8001aaa:	2002      	movs	r0, #2
 8001aac:	4240      	negs	r0, r0
 8001aae:	e7f4      	b.n	8001a9a <__gedf2+0x52>
 8001ab0:	4330      	orrs	r0, r6
 8001ab2:	d1fa      	bne.n	8001aaa <__gedf2+0x62>
 8001ab4:	42ac      	cmp	r4, r5
 8001ab6:	d00f      	beq.n	8001ad8 <__gedf2+0x90>
 8001ab8:	2c00      	cmp	r4, #0
 8001aba:	d10f      	bne.n	8001adc <__gedf2+0x94>
 8001abc:	433a      	orrs	r2, r7
 8001abe:	d0e7      	beq.n	8001a90 <__gedf2+0x48>
 8001ac0:	e00c      	b.n	8001adc <__gedf2+0x94>
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	4393      	bics	r3, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	3001      	adds	r0, #1
 8001acc:	e7e5      	b.n	8001a9a <__gedf2+0x52>
 8001ace:	4663      	mov	r3, ip
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0e1      	beq.n	8001a9a <__gedf2+0x52>
 8001ad6:	e7db      	b.n	8001a90 <__gedf2+0x48>
 8001ad8:	433a      	orrs	r2, r7
 8001ada:	d1e6      	bne.n	8001aaa <__gedf2+0x62>
 8001adc:	459a      	cmp	sl, r3
 8001ade:	d1d7      	bne.n	8001a90 <__gedf2+0x48>
 8001ae0:	42a5      	cmp	r5, r4
 8001ae2:	dcd5      	bgt.n	8001a90 <__gedf2+0x48>
 8001ae4:	42a5      	cmp	r5, r4
 8001ae6:	db05      	blt.n	8001af4 <__gedf2+0xac>
 8001ae8:	42be      	cmp	r6, r7
 8001aea:	d8d1      	bhi.n	8001a90 <__gedf2+0x48>
 8001aec:	d008      	beq.n	8001b00 <__gedf2+0xb8>
 8001aee:	2000      	movs	r0, #0
 8001af0:	42be      	cmp	r6, r7
 8001af2:	d2d2      	bcs.n	8001a9a <__gedf2+0x52>
 8001af4:	4650      	mov	r0, sl
 8001af6:	2301      	movs	r3, #1
 8001af8:	3801      	subs	r0, #1
 8001afa:	4398      	bics	r0, r3
 8001afc:	3001      	adds	r0, #1
 8001afe:	e7cc      	b.n	8001a9a <__gedf2+0x52>
 8001b00:	45c8      	cmp	r8, r9
 8001b02:	d8c5      	bhi.n	8001a90 <__gedf2+0x48>
 8001b04:	2000      	movs	r0, #0
 8001b06:	45c8      	cmp	r8, r9
 8001b08:	d3f4      	bcc.n	8001af4 <__gedf2+0xac>
 8001b0a:	e7c6      	b.n	8001a9a <__gedf2+0x52>
 8001b0c:	000007ff 	.word	0x000007ff

08001b10 <__ledf2>:
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	464f      	mov	r7, r9
 8001b14:	4646      	mov	r6, r8
 8001b16:	46d6      	mov	lr, sl
 8001b18:	004d      	lsls	r5, r1, #1
 8001b1a:	b5c0      	push	{r6, r7, lr}
 8001b1c:	030e      	lsls	r6, r1, #12
 8001b1e:	0fc9      	lsrs	r1, r1, #31
 8001b20:	468a      	mov	sl, r1
 8001b22:	492e      	ldr	r1, [pc, #184]	; (8001bdc <__ledf2+0xcc>)
 8001b24:	031f      	lsls	r7, r3, #12
 8001b26:	005c      	lsls	r4, r3, #1
 8001b28:	4680      	mov	r8, r0
 8001b2a:	0b36      	lsrs	r6, r6, #12
 8001b2c:	0d6d      	lsrs	r5, r5, #21
 8001b2e:	4691      	mov	r9, r2
 8001b30:	0b3f      	lsrs	r7, r7, #12
 8001b32:	0d64      	lsrs	r4, r4, #21
 8001b34:	0fdb      	lsrs	r3, r3, #31
 8001b36:	428d      	cmp	r5, r1
 8001b38:	d018      	beq.n	8001b6c <__ledf2+0x5c>
 8001b3a:	428c      	cmp	r4, r1
 8001b3c:	d011      	beq.n	8001b62 <__ledf2+0x52>
 8001b3e:	2d00      	cmp	r5, #0
 8001b40:	d118      	bne.n	8001b74 <__ledf2+0x64>
 8001b42:	4330      	orrs	r0, r6
 8001b44:	4684      	mov	ip, r0
 8001b46:	2c00      	cmp	r4, #0
 8001b48:	d11e      	bne.n	8001b88 <__ledf2+0x78>
 8001b4a:	433a      	orrs	r2, r7
 8001b4c:	d11c      	bne.n	8001b88 <__ledf2+0x78>
 8001b4e:	4663      	mov	r3, ip
 8001b50:	2000      	movs	r0, #0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d030      	beq.n	8001bb8 <__ledf2+0xa8>
 8001b56:	4651      	mov	r1, sl
 8001b58:	2002      	movs	r0, #2
 8001b5a:	3901      	subs	r1, #1
 8001b5c:	4008      	ands	r0, r1
 8001b5e:	3801      	subs	r0, #1
 8001b60:	e02a      	b.n	8001bb8 <__ledf2+0xa8>
 8001b62:	0039      	movs	r1, r7
 8001b64:	4311      	orrs	r1, r2
 8001b66:	d0ea      	beq.n	8001b3e <__ledf2+0x2e>
 8001b68:	2002      	movs	r0, #2
 8001b6a:	e025      	b.n	8001bb8 <__ledf2+0xa8>
 8001b6c:	4330      	orrs	r0, r6
 8001b6e:	d1fb      	bne.n	8001b68 <__ledf2+0x58>
 8001b70:	42ac      	cmp	r4, r5
 8001b72:	d026      	beq.n	8001bc2 <__ledf2+0xb2>
 8001b74:	2c00      	cmp	r4, #0
 8001b76:	d126      	bne.n	8001bc6 <__ledf2+0xb6>
 8001b78:	433a      	orrs	r2, r7
 8001b7a:	d124      	bne.n	8001bc6 <__ledf2+0xb6>
 8001b7c:	4651      	mov	r1, sl
 8001b7e:	2002      	movs	r0, #2
 8001b80:	3901      	subs	r1, #1
 8001b82:	4008      	ands	r0, r1
 8001b84:	3801      	subs	r0, #1
 8001b86:	e017      	b.n	8001bb8 <__ledf2+0xa8>
 8001b88:	4662      	mov	r2, ip
 8001b8a:	2a00      	cmp	r2, #0
 8001b8c:	d00f      	beq.n	8001bae <__ledf2+0x9e>
 8001b8e:	459a      	cmp	sl, r3
 8001b90:	d1e1      	bne.n	8001b56 <__ledf2+0x46>
 8001b92:	42a5      	cmp	r5, r4
 8001b94:	db05      	blt.n	8001ba2 <__ledf2+0x92>
 8001b96:	42be      	cmp	r6, r7
 8001b98:	d8dd      	bhi.n	8001b56 <__ledf2+0x46>
 8001b9a:	d019      	beq.n	8001bd0 <__ledf2+0xc0>
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	42be      	cmp	r6, r7
 8001ba0:	d20a      	bcs.n	8001bb8 <__ledf2+0xa8>
 8001ba2:	4650      	mov	r0, sl
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	3801      	subs	r0, #1
 8001ba8:	4398      	bics	r0, r3
 8001baa:	3001      	adds	r0, #1
 8001bac:	e004      	b.n	8001bb8 <__ledf2+0xa8>
 8001bae:	2201      	movs	r2, #1
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	3001      	adds	r0, #1
 8001bb8:	bc1c      	pop	{r2, r3, r4}
 8001bba:	4690      	mov	r8, r2
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	46a2      	mov	sl, r4
 8001bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc2:	433a      	orrs	r2, r7
 8001bc4:	d1d0      	bne.n	8001b68 <__ledf2+0x58>
 8001bc6:	459a      	cmp	sl, r3
 8001bc8:	d1c5      	bne.n	8001b56 <__ledf2+0x46>
 8001bca:	42a5      	cmp	r5, r4
 8001bcc:	dcc3      	bgt.n	8001b56 <__ledf2+0x46>
 8001bce:	e7e0      	b.n	8001b92 <__ledf2+0x82>
 8001bd0:	45c8      	cmp	r8, r9
 8001bd2:	d8c0      	bhi.n	8001b56 <__ledf2+0x46>
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	45c8      	cmp	r8, r9
 8001bd8:	d3e3      	bcc.n	8001ba2 <__ledf2+0x92>
 8001bda:	e7ed      	b.n	8001bb8 <__ledf2+0xa8>
 8001bdc:	000007ff 	.word	0x000007ff

08001be0 <__aeabi_dmul>:
 8001be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be2:	4657      	mov	r7, sl
 8001be4:	46de      	mov	lr, fp
 8001be6:	464e      	mov	r6, r9
 8001be8:	4645      	mov	r5, r8
 8001bea:	b5e0      	push	{r5, r6, r7, lr}
 8001bec:	4683      	mov	fp, r0
 8001bee:	0006      	movs	r6, r0
 8001bf0:	030f      	lsls	r7, r1, #12
 8001bf2:	0048      	lsls	r0, r1, #1
 8001bf4:	b087      	sub	sp, #28
 8001bf6:	4692      	mov	sl, r2
 8001bf8:	001d      	movs	r5, r3
 8001bfa:	0b3f      	lsrs	r7, r7, #12
 8001bfc:	0d40      	lsrs	r0, r0, #21
 8001bfe:	0fcc      	lsrs	r4, r1, #31
 8001c00:	2800      	cmp	r0, #0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dmul+0x26>
 8001c04:	e06f      	b.n	8001ce6 <__aeabi_dmul+0x106>
 8001c06:	4bde      	ldr	r3, [pc, #888]	; (8001f80 <__aeabi_dmul+0x3a0>)
 8001c08:	4298      	cmp	r0, r3
 8001c0a:	d038      	beq.n	8001c7e <__aeabi_dmul+0x9e>
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	00ff      	lsls	r7, r7, #3
 8001c10:	041b      	lsls	r3, r3, #16
 8001c12:	431f      	orrs	r7, r3
 8001c14:	0f73      	lsrs	r3, r6, #29
 8001c16:	433b      	orrs	r3, r7
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	4bda      	ldr	r3, [pc, #872]	; (8001f84 <__aeabi_dmul+0x3a4>)
 8001c1c:	2700      	movs	r7, #0
 8001c1e:	4699      	mov	r9, r3
 8001c20:	2300      	movs	r3, #0
 8001c22:	469b      	mov	fp, r3
 8001c24:	00f6      	lsls	r6, r6, #3
 8001c26:	4481      	add	r9, r0
 8001c28:	032b      	lsls	r3, r5, #12
 8001c2a:	0069      	lsls	r1, r5, #1
 8001c2c:	0b1b      	lsrs	r3, r3, #12
 8001c2e:	4652      	mov	r2, sl
 8001c30:	4698      	mov	r8, r3
 8001c32:	0d49      	lsrs	r1, r1, #21
 8001c34:	0fed      	lsrs	r5, r5, #31
 8001c36:	2900      	cmp	r1, #0
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dmul+0x5c>
 8001c3a:	e085      	b.n	8001d48 <__aeabi_dmul+0x168>
 8001c3c:	4bd0      	ldr	r3, [pc, #832]	; (8001f80 <__aeabi_dmul+0x3a0>)
 8001c3e:	4299      	cmp	r1, r3
 8001c40:	d100      	bne.n	8001c44 <__aeabi_dmul+0x64>
 8001c42:	e073      	b.n	8001d2c <__aeabi_dmul+0x14c>
 8001c44:	4643      	mov	r3, r8
 8001c46:	00da      	lsls	r2, r3, #3
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	041b      	lsls	r3, r3, #16
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	4652      	mov	r2, sl
 8001c50:	48cc      	ldr	r0, [pc, #816]	; (8001f84 <__aeabi_dmul+0x3a4>)
 8001c52:	0f52      	lsrs	r2, r2, #29
 8001c54:	4684      	mov	ip, r0
 8001c56:	4313      	orrs	r3, r2
 8001c58:	4652      	mov	r2, sl
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	4461      	add	r1, ip
 8001c5e:	00d2      	lsls	r2, r2, #3
 8001c60:	4489      	add	r9, r1
 8001c62:	0021      	movs	r1, r4
 8001c64:	4069      	eors	r1, r5
 8001c66:	9100      	str	r1, [sp, #0]
 8001c68:	468c      	mov	ip, r1
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	4449      	add	r1, r9
 8001c6e:	468a      	mov	sl, r1
 8001c70:	2f0f      	cmp	r7, #15
 8001c72:	d900      	bls.n	8001c76 <__aeabi_dmul+0x96>
 8001c74:	e090      	b.n	8001d98 <__aeabi_dmul+0x1b8>
 8001c76:	49c4      	ldr	r1, [pc, #784]	; (8001f88 <__aeabi_dmul+0x3a8>)
 8001c78:	00bf      	lsls	r7, r7, #2
 8001c7a:	59cf      	ldr	r7, [r1, r7]
 8001c7c:	46bf      	mov	pc, r7
 8001c7e:	465b      	mov	r3, fp
 8001c80:	433b      	orrs	r3, r7
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	d000      	beq.n	8001c88 <__aeabi_dmul+0xa8>
 8001c86:	e16a      	b.n	8001f5e <__aeabi_dmul+0x37e>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	2708      	movs	r7, #8
 8001c8c:	2600      	movs	r6, #0
 8001c8e:	4681      	mov	r9, r0
 8001c90:	469b      	mov	fp, r3
 8001c92:	e7c9      	b.n	8001c28 <__aeabi_dmul+0x48>
 8001c94:	0032      	movs	r2, r6
 8001c96:	4658      	mov	r0, fp
 8001c98:	9b01      	ldr	r3, [sp, #4]
 8001c9a:	4661      	mov	r1, ip
 8001c9c:	9100      	str	r1, [sp, #0]
 8001c9e:	2802      	cmp	r0, #2
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dmul+0xc4>
 8001ca2:	e075      	b.n	8001d90 <__aeabi_dmul+0x1b0>
 8001ca4:	2803      	cmp	r0, #3
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dmul+0xca>
 8001ca8:	e1fe      	b.n	80020a8 <__aeabi_dmul+0x4c8>
 8001caa:	2801      	cmp	r0, #1
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_dmul+0xd0>
 8001cae:	e12c      	b.n	8001f0a <__aeabi_dmul+0x32a>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2700      	movs	r7, #0
 8001cb4:	2600      	movs	r6, #0
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	033f      	lsls	r7, r7, #12
 8001cba:	0d2a      	lsrs	r2, r5, #20
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	48b3      	ldr	r0, [pc, #716]	; (8001f8c <__aeabi_dmul+0x3ac>)
 8001cc0:	0512      	lsls	r2, r2, #20
 8001cc2:	433a      	orrs	r2, r7
 8001cc4:	4002      	ands	r2, r0
 8001cc6:	051b      	lsls	r3, r3, #20
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	9a00      	ldr	r2, [sp, #0]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	07d1      	lsls	r1, r2, #31
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	0030      	movs	r0, r6
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	b007      	add	sp, #28
 8001cda:	bc3c      	pop	{r2, r3, r4, r5}
 8001cdc:	4690      	mov	r8, r2
 8001cde:	4699      	mov	r9, r3
 8001ce0:	46a2      	mov	sl, r4
 8001ce2:	46ab      	mov	fp, r5
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce6:	465b      	mov	r3, fp
 8001ce8:	433b      	orrs	r3, r7
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dmul+0x110>
 8001cee:	e12f      	b.n	8001f50 <__aeabi_dmul+0x370>
 8001cf0:	2f00      	cmp	r7, #0
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dmul+0x116>
 8001cf4:	e1a5      	b.n	8002042 <__aeabi_dmul+0x462>
 8001cf6:	0038      	movs	r0, r7
 8001cf8:	f000 fe76 	bl	80029e8 <__clzsi2>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	3b0b      	subs	r3, #11
 8001d00:	2b1c      	cmp	r3, #28
 8001d02:	dd00      	ble.n	8001d06 <__aeabi_dmul+0x126>
 8001d04:	e196      	b.n	8002034 <__aeabi_dmul+0x454>
 8001d06:	221d      	movs	r2, #29
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	465a      	mov	r2, fp
 8001d0c:	0001      	movs	r1, r0
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	465e      	mov	r6, fp
 8001d12:	3908      	subs	r1, #8
 8001d14:	408f      	lsls	r7, r1
 8001d16:	0013      	movs	r3, r2
 8001d18:	408e      	lsls	r6, r1
 8001d1a:	433b      	orrs	r3, r7
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	4b9c      	ldr	r3, [pc, #624]	; (8001f90 <__aeabi_dmul+0x3b0>)
 8001d20:	2700      	movs	r7, #0
 8001d22:	1a1b      	subs	r3, r3, r0
 8001d24:	4699      	mov	r9, r3
 8001d26:	2300      	movs	r3, #0
 8001d28:	469b      	mov	fp, r3
 8001d2a:	e77d      	b.n	8001c28 <__aeabi_dmul+0x48>
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	4653      	mov	r3, sl
 8001d30:	430b      	orrs	r3, r1
 8001d32:	4993      	ldr	r1, [pc, #588]	; (8001f80 <__aeabi_dmul+0x3a0>)
 8001d34:	468c      	mov	ip, r1
 8001d36:	44e1      	add	r9, ip
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d000      	beq.n	8001d3e <__aeabi_dmul+0x15e>
 8001d3c:	e11a      	b.n	8001f74 <__aeabi_dmul+0x394>
 8001d3e:	2202      	movs	r2, #2
 8001d40:	2002      	movs	r0, #2
 8001d42:	4317      	orrs	r7, r2
 8001d44:	2200      	movs	r2, #0
 8001d46:	e78c      	b.n	8001c62 <__aeabi_dmul+0x82>
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dmul+0x16e>
 8001d4c:	e10d      	b.n	8001f6a <__aeabi_dmul+0x38a>
 8001d4e:	4643      	mov	r3, r8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dmul+0x176>
 8001d54:	e181      	b.n	800205a <__aeabi_dmul+0x47a>
 8001d56:	4640      	mov	r0, r8
 8001d58:	f000 fe46 	bl	80029e8 <__clzsi2>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	3a0b      	subs	r2, #11
 8001d60:	2a1c      	cmp	r2, #28
 8001d62:	dd00      	ble.n	8001d66 <__aeabi_dmul+0x186>
 8001d64:	e172      	b.n	800204c <__aeabi_dmul+0x46c>
 8001d66:	0001      	movs	r1, r0
 8001d68:	4643      	mov	r3, r8
 8001d6a:	3908      	subs	r1, #8
 8001d6c:	408b      	lsls	r3, r1
 8001d6e:	4698      	mov	r8, r3
 8001d70:	231d      	movs	r3, #29
 8001d72:	1a9a      	subs	r2, r3, r2
 8001d74:	4653      	mov	r3, sl
 8001d76:	40d3      	lsrs	r3, r2
 8001d78:	001a      	movs	r2, r3
 8001d7a:	4643      	mov	r3, r8
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	4652      	mov	r2, sl
 8001d80:	408a      	lsls	r2, r1
 8001d82:	4649      	mov	r1, r9
 8001d84:	1a08      	subs	r0, r1, r0
 8001d86:	4982      	ldr	r1, [pc, #520]	; (8001f90 <__aeabi_dmul+0x3b0>)
 8001d88:	4689      	mov	r9, r1
 8001d8a:	4481      	add	r9, r0
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	e768      	b.n	8001c62 <__aeabi_dmul+0x82>
 8001d90:	4b7b      	ldr	r3, [pc, #492]	; (8001f80 <__aeabi_dmul+0x3a0>)
 8001d92:	2700      	movs	r7, #0
 8001d94:	2600      	movs	r6, #0
 8001d96:	e78e      	b.n	8001cb6 <__aeabi_dmul+0xd6>
 8001d98:	0c14      	lsrs	r4, r2, #16
 8001d9a:	0412      	lsls	r2, r2, #16
 8001d9c:	0c12      	lsrs	r2, r2, #16
 8001d9e:	0011      	movs	r1, r2
 8001da0:	0c37      	lsrs	r7, r6, #16
 8001da2:	0436      	lsls	r6, r6, #16
 8001da4:	0c35      	lsrs	r5, r6, #16
 8001da6:	4379      	muls	r1, r7
 8001da8:	0028      	movs	r0, r5
 8001daa:	468c      	mov	ip, r1
 8001dac:	002e      	movs	r6, r5
 8001dae:	4360      	muls	r0, r4
 8001db0:	4460      	add	r0, ip
 8001db2:	4683      	mov	fp, r0
 8001db4:	4356      	muls	r6, r2
 8001db6:	0021      	movs	r1, r4
 8001db8:	0c30      	lsrs	r0, r6, #16
 8001dba:	4680      	mov	r8, r0
 8001dbc:	4658      	mov	r0, fp
 8001dbe:	4379      	muls	r1, r7
 8001dc0:	4440      	add	r0, r8
 8001dc2:	9102      	str	r1, [sp, #8]
 8001dc4:	4584      	cmp	ip, r0
 8001dc6:	d906      	bls.n	8001dd6 <__aeabi_dmul+0x1f6>
 8001dc8:	4688      	mov	r8, r1
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	0249      	lsls	r1, r1, #9
 8001dce:	468c      	mov	ip, r1
 8001dd0:	44e0      	add	r8, ip
 8001dd2:	4641      	mov	r1, r8
 8001dd4:	9102      	str	r1, [sp, #8]
 8001dd6:	0436      	lsls	r6, r6, #16
 8001dd8:	0c01      	lsrs	r1, r0, #16
 8001dda:	0c36      	lsrs	r6, r6, #16
 8001ddc:	0400      	lsls	r0, r0, #16
 8001dde:	468b      	mov	fp, r1
 8001de0:	1981      	adds	r1, r0, r6
 8001de2:	0c1e      	lsrs	r6, r3, #16
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	0c1b      	lsrs	r3, r3, #16
 8001de8:	9103      	str	r1, [sp, #12]
 8001dea:	0019      	movs	r1, r3
 8001dec:	4379      	muls	r1, r7
 8001dee:	468c      	mov	ip, r1
 8001df0:	0028      	movs	r0, r5
 8001df2:	4375      	muls	r5, r6
 8001df4:	4465      	add	r5, ip
 8001df6:	46a8      	mov	r8, r5
 8001df8:	4358      	muls	r0, r3
 8001dfa:	0c05      	lsrs	r5, r0, #16
 8001dfc:	4445      	add	r5, r8
 8001dfe:	4377      	muls	r7, r6
 8001e00:	42a9      	cmp	r1, r5
 8001e02:	d903      	bls.n	8001e0c <__aeabi_dmul+0x22c>
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	0249      	lsls	r1, r1, #9
 8001e08:	468c      	mov	ip, r1
 8001e0a:	4467      	add	r7, ip
 8001e0c:	0c29      	lsrs	r1, r5, #16
 8001e0e:	468c      	mov	ip, r1
 8001e10:	0039      	movs	r1, r7
 8001e12:	0400      	lsls	r0, r0, #16
 8001e14:	0c00      	lsrs	r0, r0, #16
 8001e16:	042d      	lsls	r5, r5, #16
 8001e18:	182d      	adds	r5, r5, r0
 8001e1a:	4461      	add	r1, ip
 8001e1c:	44ab      	add	fp, r5
 8001e1e:	9105      	str	r1, [sp, #20]
 8001e20:	4659      	mov	r1, fp
 8001e22:	9104      	str	r1, [sp, #16]
 8001e24:	9901      	ldr	r1, [sp, #4]
 8001e26:	040f      	lsls	r7, r1, #16
 8001e28:	0c3f      	lsrs	r7, r7, #16
 8001e2a:	0c08      	lsrs	r0, r1, #16
 8001e2c:	0039      	movs	r1, r7
 8001e2e:	4351      	muls	r1, r2
 8001e30:	4342      	muls	r2, r0
 8001e32:	4690      	mov	r8, r2
 8001e34:	0002      	movs	r2, r0
 8001e36:	468c      	mov	ip, r1
 8001e38:	0c09      	lsrs	r1, r1, #16
 8001e3a:	468b      	mov	fp, r1
 8001e3c:	4362      	muls	r2, r4
 8001e3e:	437c      	muls	r4, r7
 8001e40:	4444      	add	r4, r8
 8001e42:	445c      	add	r4, fp
 8001e44:	45a0      	cmp	r8, r4
 8001e46:	d903      	bls.n	8001e50 <__aeabi_dmul+0x270>
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	0249      	lsls	r1, r1, #9
 8001e4c:	4688      	mov	r8, r1
 8001e4e:	4442      	add	r2, r8
 8001e50:	0c21      	lsrs	r1, r4, #16
 8001e52:	4688      	mov	r8, r1
 8001e54:	4661      	mov	r1, ip
 8001e56:	0409      	lsls	r1, r1, #16
 8001e58:	0c09      	lsrs	r1, r1, #16
 8001e5a:	468c      	mov	ip, r1
 8001e5c:	0039      	movs	r1, r7
 8001e5e:	4359      	muls	r1, r3
 8001e60:	4343      	muls	r3, r0
 8001e62:	4370      	muls	r0, r6
 8001e64:	437e      	muls	r6, r7
 8001e66:	0c0f      	lsrs	r7, r1, #16
 8001e68:	18f6      	adds	r6, r6, r3
 8001e6a:	0424      	lsls	r4, r4, #16
 8001e6c:	19be      	adds	r6, r7, r6
 8001e6e:	4464      	add	r4, ip
 8001e70:	4442      	add	r2, r8
 8001e72:	468c      	mov	ip, r1
 8001e74:	42b3      	cmp	r3, r6
 8001e76:	d903      	bls.n	8001e80 <__aeabi_dmul+0x2a0>
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	025b      	lsls	r3, r3, #9
 8001e7c:	4698      	mov	r8, r3
 8001e7e:	4440      	add	r0, r8
 8001e80:	9b02      	ldr	r3, [sp, #8]
 8001e82:	4661      	mov	r1, ip
 8001e84:	4698      	mov	r8, r3
 8001e86:	9b04      	ldr	r3, [sp, #16]
 8001e88:	0437      	lsls	r7, r6, #16
 8001e8a:	4443      	add	r3, r8
 8001e8c:	469b      	mov	fp, r3
 8001e8e:	45ab      	cmp	fp, r5
 8001e90:	41ad      	sbcs	r5, r5
 8001e92:	426b      	negs	r3, r5
 8001e94:	040d      	lsls	r5, r1, #16
 8001e96:	9905      	ldr	r1, [sp, #20]
 8001e98:	0c2d      	lsrs	r5, r5, #16
 8001e9a:	468c      	mov	ip, r1
 8001e9c:	197f      	adds	r7, r7, r5
 8001e9e:	4467      	add	r7, ip
 8001ea0:	18fd      	adds	r5, r7, r3
 8001ea2:	46a8      	mov	r8, r5
 8001ea4:	465d      	mov	r5, fp
 8001ea6:	192d      	adds	r5, r5, r4
 8001ea8:	42a5      	cmp	r5, r4
 8001eaa:	41a4      	sbcs	r4, r4
 8001eac:	4693      	mov	fp, r2
 8001eae:	4264      	negs	r4, r4
 8001eb0:	46a4      	mov	ip, r4
 8001eb2:	44c3      	add	fp, r8
 8001eb4:	44dc      	add	ip, fp
 8001eb6:	428f      	cmp	r7, r1
 8001eb8:	41bf      	sbcs	r7, r7
 8001eba:	4598      	cmp	r8, r3
 8001ebc:	419b      	sbcs	r3, r3
 8001ebe:	4593      	cmp	fp, r2
 8001ec0:	4192      	sbcs	r2, r2
 8001ec2:	45a4      	cmp	ip, r4
 8001ec4:	41a4      	sbcs	r4, r4
 8001ec6:	425b      	negs	r3, r3
 8001ec8:	427f      	negs	r7, r7
 8001eca:	431f      	orrs	r7, r3
 8001ecc:	0c36      	lsrs	r6, r6, #16
 8001ece:	4252      	negs	r2, r2
 8001ed0:	4264      	negs	r4, r4
 8001ed2:	19bf      	adds	r7, r7, r6
 8001ed4:	4322      	orrs	r2, r4
 8001ed6:	18bf      	adds	r7, r7, r2
 8001ed8:	4662      	mov	r2, ip
 8001eda:	1838      	adds	r0, r7, r0
 8001edc:	0243      	lsls	r3, r0, #9
 8001ede:	0dd2      	lsrs	r2, r2, #23
 8001ee0:	9903      	ldr	r1, [sp, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	026a      	lsls	r2, r5, #9
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	1e50      	subs	r0, r2, #1
 8001eea:	4182      	sbcs	r2, r0
 8001eec:	4661      	mov	r1, ip
 8001eee:	0ded      	lsrs	r5, r5, #23
 8001ef0:	432a      	orrs	r2, r5
 8001ef2:	024e      	lsls	r6, r1, #9
 8001ef4:	4332      	orrs	r2, r6
 8001ef6:	01d9      	lsls	r1, r3, #7
 8001ef8:	d400      	bmi.n	8001efc <__aeabi_dmul+0x31c>
 8001efa:	e0b3      	b.n	8002064 <__aeabi_dmul+0x484>
 8001efc:	2601      	movs	r6, #1
 8001efe:	0850      	lsrs	r0, r2, #1
 8001f00:	4032      	ands	r2, r6
 8001f02:	4302      	orrs	r2, r0
 8001f04:	07de      	lsls	r6, r3, #31
 8001f06:	4332      	orrs	r2, r6
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	4c22      	ldr	r4, [pc, #136]	; (8001f94 <__aeabi_dmul+0x3b4>)
 8001f0c:	4454      	add	r4, sl
 8001f0e:	2c00      	cmp	r4, #0
 8001f10:	dd62      	ble.n	8001fd8 <__aeabi_dmul+0x3f8>
 8001f12:	0751      	lsls	r1, r2, #29
 8001f14:	d009      	beq.n	8001f2a <__aeabi_dmul+0x34a>
 8001f16:	200f      	movs	r0, #15
 8001f18:	4010      	ands	r0, r2
 8001f1a:	2804      	cmp	r0, #4
 8001f1c:	d005      	beq.n	8001f2a <__aeabi_dmul+0x34a>
 8001f1e:	1d10      	adds	r0, r2, #4
 8001f20:	4290      	cmp	r0, r2
 8001f22:	4192      	sbcs	r2, r2
 8001f24:	4252      	negs	r2, r2
 8001f26:	189b      	adds	r3, r3, r2
 8001f28:	0002      	movs	r2, r0
 8001f2a:	01d9      	lsls	r1, r3, #7
 8001f2c:	d504      	bpl.n	8001f38 <__aeabi_dmul+0x358>
 8001f2e:	2480      	movs	r4, #128	; 0x80
 8001f30:	4819      	ldr	r0, [pc, #100]	; (8001f98 <__aeabi_dmul+0x3b8>)
 8001f32:	00e4      	lsls	r4, r4, #3
 8001f34:	4003      	ands	r3, r0
 8001f36:	4454      	add	r4, sl
 8001f38:	4818      	ldr	r0, [pc, #96]	; (8001f9c <__aeabi_dmul+0x3bc>)
 8001f3a:	4284      	cmp	r4, r0
 8001f3c:	dd00      	ble.n	8001f40 <__aeabi_dmul+0x360>
 8001f3e:	e727      	b.n	8001d90 <__aeabi_dmul+0x1b0>
 8001f40:	075e      	lsls	r6, r3, #29
 8001f42:	025b      	lsls	r3, r3, #9
 8001f44:	08d2      	lsrs	r2, r2, #3
 8001f46:	0b1f      	lsrs	r7, r3, #12
 8001f48:	0563      	lsls	r3, r4, #21
 8001f4a:	4316      	orrs	r6, r2
 8001f4c:	0d5b      	lsrs	r3, r3, #21
 8001f4e:	e6b2      	b.n	8001cb6 <__aeabi_dmul+0xd6>
 8001f50:	2300      	movs	r3, #0
 8001f52:	4699      	mov	r9, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	2704      	movs	r7, #4
 8001f58:	2600      	movs	r6, #0
 8001f5a:	469b      	mov	fp, r3
 8001f5c:	e664      	b.n	8001c28 <__aeabi_dmul+0x48>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	9701      	str	r7, [sp, #4]
 8001f62:	4681      	mov	r9, r0
 8001f64:	270c      	movs	r7, #12
 8001f66:	469b      	mov	fp, r3
 8001f68:	e65e      	b.n	8001c28 <__aeabi_dmul+0x48>
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	2200      	movs	r2, #0
 8001f72:	e676      	b.n	8001c62 <__aeabi_dmul+0x82>
 8001f74:	2303      	movs	r3, #3
 8001f76:	2003      	movs	r0, #3
 8001f78:	431f      	orrs	r7, r3
 8001f7a:	4643      	mov	r3, r8
 8001f7c:	e671      	b.n	8001c62 <__aeabi_dmul+0x82>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	000007ff 	.word	0x000007ff
 8001f84:	fffffc01 	.word	0xfffffc01
 8001f88:	0800b054 	.word	0x0800b054
 8001f8c:	800fffff 	.word	0x800fffff
 8001f90:	fffffc0d 	.word	0xfffffc0d
 8001f94:	000003ff 	.word	0x000003ff
 8001f98:	feffffff 	.word	0xfeffffff
 8001f9c:	000007fe 	.word	0x000007fe
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2780      	movs	r7, #128	; 0x80
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	033f      	lsls	r7, r7, #12
 8001fa8:	2600      	movs	r6, #0
 8001faa:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <__aeabi_dmul+0x4d8>)
 8001fac:	e683      	b.n	8001cb6 <__aeabi_dmul+0xd6>
 8001fae:	9b01      	ldr	r3, [sp, #4]
 8001fb0:	0032      	movs	r2, r6
 8001fb2:	46a4      	mov	ip, r4
 8001fb4:	4658      	mov	r0, fp
 8001fb6:	e670      	b.n	8001c9a <__aeabi_dmul+0xba>
 8001fb8:	46ac      	mov	ip, r5
 8001fba:	e66e      	b.n	8001c9a <__aeabi_dmul+0xba>
 8001fbc:	2780      	movs	r7, #128	; 0x80
 8001fbe:	9901      	ldr	r1, [sp, #4]
 8001fc0:	033f      	lsls	r7, r7, #12
 8001fc2:	4239      	tst	r1, r7
 8001fc4:	d02d      	beq.n	8002022 <__aeabi_dmul+0x442>
 8001fc6:	423b      	tst	r3, r7
 8001fc8:	d12b      	bne.n	8002022 <__aeabi_dmul+0x442>
 8001fca:	431f      	orrs	r7, r3
 8001fcc:	033f      	lsls	r7, r7, #12
 8001fce:	0b3f      	lsrs	r7, r7, #12
 8001fd0:	9500      	str	r5, [sp, #0]
 8001fd2:	0016      	movs	r6, r2
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <__aeabi_dmul+0x4d8>)
 8001fd6:	e66e      	b.n	8001cb6 <__aeabi_dmul+0xd6>
 8001fd8:	2501      	movs	r5, #1
 8001fda:	1b2d      	subs	r5, r5, r4
 8001fdc:	2d38      	cmp	r5, #56	; 0x38
 8001fde:	dd00      	ble.n	8001fe2 <__aeabi_dmul+0x402>
 8001fe0:	e666      	b.n	8001cb0 <__aeabi_dmul+0xd0>
 8001fe2:	2d1f      	cmp	r5, #31
 8001fe4:	dc40      	bgt.n	8002068 <__aeabi_dmul+0x488>
 8001fe6:	4835      	ldr	r0, [pc, #212]	; (80020bc <__aeabi_dmul+0x4dc>)
 8001fe8:	001c      	movs	r4, r3
 8001fea:	4450      	add	r0, sl
 8001fec:	0016      	movs	r6, r2
 8001fee:	4082      	lsls	r2, r0
 8001ff0:	4084      	lsls	r4, r0
 8001ff2:	40ee      	lsrs	r6, r5
 8001ff4:	1e50      	subs	r0, r2, #1
 8001ff6:	4182      	sbcs	r2, r0
 8001ff8:	4334      	orrs	r4, r6
 8001ffa:	4314      	orrs	r4, r2
 8001ffc:	40eb      	lsrs	r3, r5
 8001ffe:	0762      	lsls	r2, r4, #29
 8002000:	d009      	beq.n	8002016 <__aeabi_dmul+0x436>
 8002002:	220f      	movs	r2, #15
 8002004:	4022      	ands	r2, r4
 8002006:	2a04      	cmp	r2, #4
 8002008:	d005      	beq.n	8002016 <__aeabi_dmul+0x436>
 800200a:	0022      	movs	r2, r4
 800200c:	1d14      	adds	r4, r2, #4
 800200e:	4294      	cmp	r4, r2
 8002010:	4180      	sbcs	r0, r0
 8002012:	4240      	negs	r0, r0
 8002014:	181b      	adds	r3, r3, r0
 8002016:	021a      	lsls	r2, r3, #8
 8002018:	d53e      	bpl.n	8002098 <__aeabi_dmul+0x4b8>
 800201a:	2301      	movs	r3, #1
 800201c:	2700      	movs	r7, #0
 800201e:	2600      	movs	r6, #0
 8002020:	e649      	b.n	8001cb6 <__aeabi_dmul+0xd6>
 8002022:	2780      	movs	r7, #128	; 0x80
 8002024:	9b01      	ldr	r3, [sp, #4]
 8002026:	033f      	lsls	r7, r7, #12
 8002028:	431f      	orrs	r7, r3
 800202a:	033f      	lsls	r7, r7, #12
 800202c:	0b3f      	lsrs	r7, r7, #12
 800202e:	9400      	str	r4, [sp, #0]
 8002030:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <__aeabi_dmul+0x4d8>)
 8002032:	e640      	b.n	8001cb6 <__aeabi_dmul+0xd6>
 8002034:	0003      	movs	r3, r0
 8002036:	465a      	mov	r2, fp
 8002038:	3b28      	subs	r3, #40	; 0x28
 800203a:	409a      	lsls	r2, r3
 800203c:	2600      	movs	r6, #0
 800203e:	9201      	str	r2, [sp, #4]
 8002040:	e66d      	b.n	8001d1e <__aeabi_dmul+0x13e>
 8002042:	4658      	mov	r0, fp
 8002044:	f000 fcd0 	bl	80029e8 <__clzsi2>
 8002048:	3020      	adds	r0, #32
 800204a:	e657      	b.n	8001cfc <__aeabi_dmul+0x11c>
 800204c:	0003      	movs	r3, r0
 800204e:	4652      	mov	r2, sl
 8002050:	3b28      	subs	r3, #40	; 0x28
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	2200      	movs	r2, #0
 8002058:	e693      	b.n	8001d82 <__aeabi_dmul+0x1a2>
 800205a:	4650      	mov	r0, sl
 800205c:	f000 fcc4 	bl	80029e8 <__clzsi2>
 8002060:	3020      	adds	r0, #32
 8002062:	e67b      	b.n	8001d5c <__aeabi_dmul+0x17c>
 8002064:	46ca      	mov	sl, r9
 8002066:	e750      	b.n	8001f0a <__aeabi_dmul+0x32a>
 8002068:	201f      	movs	r0, #31
 800206a:	001e      	movs	r6, r3
 800206c:	4240      	negs	r0, r0
 800206e:	1b04      	subs	r4, r0, r4
 8002070:	40e6      	lsrs	r6, r4
 8002072:	2d20      	cmp	r5, #32
 8002074:	d003      	beq.n	800207e <__aeabi_dmul+0x49e>
 8002076:	4c12      	ldr	r4, [pc, #72]	; (80020c0 <__aeabi_dmul+0x4e0>)
 8002078:	4454      	add	r4, sl
 800207a:	40a3      	lsls	r3, r4
 800207c:	431a      	orrs	r2, r3
 800207e:	1e50      	subs	r0, r2, #1
 8002080:	4182      	sbcs	r2, r0
 8002082:	4332      	orrs	r2, r6
 8002084:	2607      	movs	r6, #7
 8002086:	2700      	movs	r7, #0
 8002088:	4016      	ands	r6, r2
 800208a:	d009      	beq.n	80020a0 <__aeabi_dmul+0x4c0>
 800208c:	200f      	movs	r0, #15
 800208e:	2300      	movs	r3, #0
 8002090:	4010      	ands	r0, r2
 8002092:	0014      	movs	r4, r2
 8002094:	2804      	cmp	r0, #4
 8002096:	d1b9      	bne.n	800200c <__aeabi_dmul+0x42c>
 8002098:	0022      	movs	r2, r4
 800209a:	075e      	lsls	r6, r3, #29
 800209c:	025b      	lsls	r3, r3, #9
 800209e:	0b1f      	lsrs	r7, r3, #12
 80020a0:	08d2      	lsrs	r2, r2, #3
 80020a2:	4316      	orrs	r6, r2
 80020a4:	2300      	movs	r3, #0
 80020a6:	e606      	b.n	8001cb6 <__aeabi_dmul+0xd6>
 80020a8:	2780      	movs	r7, #128	; 0x80
 80020aa:	033f      	lsls	r7, r7, #12
 80020ac:	431f      	orrs	r7, r3
 80020ae:	033f      	lsls	r7, r7, #12
 80020b0:	0b3f      	lsrs	r7, r7, #12
 80020b2:	0016      	movs	r6, r2
 80020b4:	4b00      	ldr	r3, [pc, #0]	; (80020b8 <__aeabi_dmul+0x4d8>)
 80020b6:	e5fe      	b.n	8001cb6 <__aeabi_dmul+0xd6>
 80020b8:	000007ff 	.word	0x000007ff
 80020bc:	0000041e 	.word	0x0000041e
 80020c0:	0000043e 	.word	0x0000043e

080020c4 <__aeabi_dsub>:
 80020c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c6:	4657      	mov	r7, sl
 80020c8:	464e      	mov	r6, r9
 80020ca:	4645      	mov	r5, r8
 80020cc:	46de      	mov	lr, fp
 80020ce:	000c      	movs	r4, r1
 80020d0:	0309      	lsls	r1, r1, #12
 80020d2:	b5e0      	push	{r5, r6, r7, lr}
 80020d4:	0a49      	lsrs	r1, r1, #9
 80020d6:	0f46      	lsrs	r6, r0, #29
 80020d8:	005f      	lsls	r7, r3, #1
 80020da:	4331      	orrs	r1, r6
 80020dc:	031e      	lsls	r6, r3, #12
 80020de:	0fdb      	lsrs	r3, r3, #31
 80020e0:	0a76      	lsrs	r6, r6, #9
 80020e2:	469b      	mov	fp, r3
 80020e4:	0f53      	lsrs	r3, r2, #29
 80020e6:	4333      	orrs	r3, r6
 80020e8:	4ec8      	ldr	r6, [pc, #800]	; (800240c <__aeabi_dsub+0x348>)
 80020ea:	0065      	lsls	r5, r4, #1
 80020ec:	00c0      	lsls	r0, r0, #3
 80020ee:	0fe4      	lsrs	r4, r4, #31
 80020f0:	00d2      	lsls	r2, r2, #3
 80020f2:	0d6d      	lsrs	r5, r5, #21
 80020f4:	46a2      	mov	sl, r4
 80020f6:	4681      	mov	r9, r0
 80020f8:	0d7f      	lsrs	r7, r7, #21
 80020fa:	469c      	mov	ip, r3
 80020fc:	4690      	mov	r8, r2
 80020fe:	42b7      	cmp	r7, r6
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x40>
 8002102:	e0b9      	b.n	8002278 <__aeabi_dsub+0x1b4>
 8002104:	465b      	mov	r3, fp
 8002106:	2601      	movs	r6, #1
 8002108:	4073      	eors	r3, r6
 800210a:	469b      	mov	fp, r3
 800210c:	1bee      	subs	r6, r5, r7
 800210e:	45a3      	cmp	fp, r4
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x50>
 8002112:	e083      	b.n	800221c <__aeabi_dsub+0x158>
 8002114:	2e00      	cmp	r6, #0
 8002116:	dd63      	ble.n	80021e0 <__aeabi_dsub+0x11c>
 8002118:	2f00      	cmp	r7, #0
 800211a:	d000      	beq.n	800211e <__aeabi_dsub+0x5a>
 800211c:	e0b1      	b.n	8002282 <__aeabi_dsub+0x1be>
 800211e:	4663      	mov	r3, ip
 8002120:	4313      	orrs	r3, r2
 8002122:	d100      	bne.n	8002126 <__aeabi_dsub+0x62>
 8002124:	e123      	b.n	800236e <__aeabi_dsub+0x2aa>
 8002126:	1e73      	subs	r3, r6, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d000      	beq.n	800212e <__aeabi_dsub+0x6a>
 800212c:	e1ba      	b.n	80024a4 <__aeabi_dsub+0x3e0>
 800212e:	1a86      	subs	r6, r0, r2
 8002130:	4663      	mov	r3, ip
 8002132:	42b0      	cmp	r0, r6
 8002134:	4180      	sbcs	r0, r0
 8002136:	2501      	movs	r5, #1
 8002138:	1ac9      	subs	r1, r1, r3
 800213a:	4240      	negs	r0, r0
 800213c:	1a09      	subs	r1, r1, r0
 800213e:	020b      	lsls	r3, r1, #8
 8002140:	d400      	bmi.n	8002144 <__aeabi_dsub+0x80>
 8002142:	e147      	b.n	80023d4 <__aeabi_dsub+0x310>
 8002144:	0249      	lsls	r1, r1, #9
 8002146:	0a4b      	lsrs	r3, r1, #9
 8002148:	4698      	mov	r8, r3
 800214a:	4643      	mov	r3, r8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0x8e>
 8002150:	e189      	b.n	8002466 <__aeabi_dsub+0x3a2>
 8002152:	4640      	mov	r0, r8
 8002154:	f000 fc48 	bl	80029e8 <__clzsi2>
 8002158:	0003      	movs	r3, r0
 800215a:	3b08      	subs	r3, #8
 800215c:	2b1f      	cmp	r3, #31
 800215e:	dd00      	ble.n	8002162 <__aeabi_dsub+0x9e>
 8002160:	e17c      	b.n	800245c <__aeabi_dsub+0x398>
 8002162:	2220      	movs	r2, #32
 8002164:	0030      	movs	r0, r6
 8002166:	1ad2      	subs	r2, r2, r3
 8002168:	4641      	mov	r1, r8
 800216a:	40d0      	lsrs	r0, r2
 800216c:	4099      	lsls	r1, r3
 800216e:	0002      	movs	r2, r0
 8002170:	409e      	lsls	r6, r3
 8002172:	430a      	orrs	r2, r1
 8002174:	429d      	cmp	r5, r3
 8002176:	dd00      	ble.n	800217a <__aeabi_dsub+0xb6>
 8002178:	e16a      	b.n	8002450 <__aeabi_dsub+0x38c>
 800217a:	1b5d      	subs	r5, r3, r5
 800217c:	1c6b      	adds	r3, r5, #1
 800217e:	2b1f      	cmp	r3, #31
 8002180:	dd00      	ble.n	8002184 <__aeabi_dsub+0xc0>
 8002182:	e194      	b.n	80024ae <__aeabi_dsub+0x3ea>
 8002184:	2120      	movs	r1, #32
 8002186:	0010      	movs	r0, r2
 8002188:	0035      	movs	r5, r6
 800218a:	1ac9      	subs	r1, r1, r3
 800218c:	408e      	lsls	r6, r1
 800218e:	40da      	lsrs	r2, r3
 8002190:	4088      	lsls	r0, r1
 8002192:	40dd      	lsrs	r5, r3
 8002194:	1e71      	subs	r1, r6, #1
 8002196:	418e      	sbcs	r6, r1
 8002198:	0011      	movs	r1, r2
 800219a:	2207      	movs	r2, #7
 800219c:	4328      	orrs	r0, r5
 800219e:	2500      	movs	r5, #0
 80021a0:	4306      	orrs	r6, r0
 80021a2:	4032      	ands	r2, r6
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	d009      	beq.n	80021bc <__aeabi_dsub+0xf8>
 80021a8:	230f      	movs	r3, #15
 80021aa:	4033      	ands	r3, r6
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d005      	beq.n	80021bc <__aeabi_dsub+0xf8>
 80021b0:	1d33      	adds	r3, r6, #4
 80021b2:	42b3      	cmp	r3, r6
 80021b4:	41b6      	sbcs	r6, r6
 80021b6:	4276      	negs	r6, r6
 80021b8:	1989      	adds	r1, r1, r6
 80021ba:	001e      	movs	r6, r3
 80021bc:	020b      	lsls	r3, r1, #8
 80021be:	d400      	bmi.n	80021c2 <__aeabi_dsub+0xfe>
 80021c0:	e23d      	b.n	800263e <__aeabi_dsub+0x57a>
 80021c2:	1c6a      	adds	r2, r5, #1
 80021c4:	4b91      	ldr	r3, [pc, #580]	; (800240c <__aeabi_dsub+0x348>)
 80021c6:	0555      	lsls	r5, r2, #21
 80021c8:	0d6d      	lsrs	r5, r5, #21
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d100      	bne.n	80021d0 <__aeabi_dsub+0x10c>
 80021ce:	e119      	b.n	8002404 <__aeabi_dsub+0x340>
 80021d0:	4a8f      	ldr	r2, [pc, #572]	; (8002410 <__aeabi_dsub+0x34c>)
 80021d2:	08f6      	lsrs	r6, r6, #3
 80021d4:	400a      	ands	r2, r1
 80021d6:	0757      	lsls	r7, r2, #29
 80021d8:	0252      	lsls	r2, r2, #9
 80021da:	4337      	orrs	r7, r6
 80021dc:	0b12      	lsrs	r2, r2, #12
 80021de:	e09b      	b.n	8002318 <__aeabi_dsub+0x254>
 80021e0:	2e00      	cmp	r6, #0
 80021e2:	d000      	beq.n	80021e6 <__aeabi_dsub+0x122>
 80021e4:	e0c5      	b.n	8002372 <__aeabi_dsub+0x2ae>
 80021e6:	1c6e      	adds	r6, r5, #1
 80021e8:	0576      	lsls	r6, r6, #21
 80021ea:	0d76      	lsrs	r6, r6, #21
 80021ec:	2e01      	cmp	r6, #1
 80021ee:	dc00      	bgt.n	80021f2 <__aeabi_dsub+0x12e>
 80021f0:	e148      	b.n	8002484 <__aeabi_dsub+0x3c0>
 80021f2:	4667      	mov	r7, ip
 80021f4:	1a86      	subs	r6, r0, r2
 80021f6:	1bcb      	subs	r3, r1, r7
 80021f8:	42b0      	cmp	r0, r6
 80021fa:	41bf      	sbcs	r7, r7
 80021fc:	427f      	negs	r7, r7
 80021fe:	46b8      	mov	r8, r7
 8002200:	001f      	movs	r7, r3
 8002202:	4643      	mov	r3, r8
 8002204:	1aff      	subs	r7, r7, r3
 8002206:	003b      	movs	r3, r7
 8002208:	46b8      	mov	r8, r7
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	d500      	bpl.n	8002210 <__aeabi_dsub+0x14c>
 800220e:	e15f      	b.n	80024d0 <__aeabi_dsub+0x40c>
 8002210:	4337      	orrs	r7, r6
 8002212:	d19a      	bne.n	800214a <__aeabi_dsub+0x86>
 8002214:	2200      	movs	r2, #0
 8002216:	2400      	movs	r4, #0
 8002218:	2500      	movs	r5, #0
 800221a:	e079      	b.n	8002310 <__aeabi_dsub+0x24c>
 800221c:	2e00      	cmp	r6, #0
 800221e:	dc00      	bgt.n	8002222 <__aeabi_dsub+0x15e>
 8002220:	e0fa      	b.n	8002418 <__aeabi_dsub+0x354>
 8002222:	2f00      	cmp	r7, #0
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x164>
 8002226:	e08d      	b.n	8002344 <__aeabi_dsub+0x280>
 8002228:	4b78      	ldr	r3, [pc, #480]	; (800240c <__aeabi_dsub+0x348>)
 800222a:	429d      	cmp	r5, r3
 800222c:	d067      	beq.n	80022fe <__aeabi_dsub+0x23a>
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	4667      	mov	r7, ip
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	431f      	orrs	r7, r3
 8002236:	46bc      	mov	ip, r7
 8002238:	2e38      	cmp	r6, #56	; 0x38
 800223a:	dc00      	bgt.n	800223e <__aeabi_dsub+0x17a>
 800223c:	e152      	b.n	80024e4 <__aeabi_dsub+0x420>
 800223e:	4663      	mov	r3, ip
 8002240:	4313      	orrs	r3, r2
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	4193      	sbcs	r3, r2
 8002246:	181e      	adds	r6, r3, r0
 8002248:	4286      	cmp	r6, r0
 800224a:	4180      	sbcs	r0, r0
 800224c:	4240      	negs	r0, r0
 800224e:	1809      	adds	r1, r1, r0
 8002250:	020b      	lsls	r3, r1, #8
 8002252:	d400      	bmi.n	8002256 <__aeabi_dsub+0x192>
 8002254:	e0be      	b.n	80023d4 <__aeabi_dsub+0x310>
 8002256:	4b6d      	ldr	r3, [pc, #436]	; (800240c <__aeabi_dsub+0x348>)
 8002258:	3501      	adds	r5, #1
 800225a:	429d      	cmp	r5, r3
 800225c:	d100      	bne.n	8002260 <__aeabi_dsub+0x19c>
 800225e:	e0d2      	b.n	8002406 <__aeabi_dsub+0x342>
 8002260:	4a6b      	ldr	r2, [pc, #428]	; (8002410 <__aeabi_dsub+0x34c>)
 8002262:	0873      	lsrs	r3, r6, #1
 8002264:	400a      	ands	r2, r1
 8002266:	2101      	movs	r1, #1
 8002268:	400e      	ands	r6, r1
 800226a:	431e      	orrs	r6, r3
 800226c:	0851      	lsrs	r1, r2, #1
 800226e:	07d3      	lsls	r3, r2, #31
 8002270:	2207      	movs	r2, #7
 8002272:	431e      	orrs	r6, r3
 8002274:	4032      	ands	r2, r6
 8002276:	e795      	b.n	80021a4 <__aeabi_dsub+0xe0>
 8002278:	001e      	movs	r6, r3
 800227a:	4316      	orrs	r6, r2
 800227c:	d000      	beq.n	8002280 <__aeabi_dsub+0x1bc>
 800227e:	e745      	b.n	800210c <__aeabi_dsub+0x48>
 8002280:	e740      	b.n	8002104 <__aeabi_dsub+0x40>
 8002282:	4b62      	ldr	r3, [pc, #392]	; (800240c <__aeabi_dsub+0x348>)
 8002284:	429d      	cmp	r5, r3
 8002286:	d03a      	beq.n	80022fe <__aeabi_dsub+0x23a>
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	4667      	mov	r7, ip
 800228c:	041b      	lsls	r3, r3, #16
 800228e:	431f      	orrs	r7, r3
 8002290:	46bc      	mov	ip, r7
 8002292:	2e38      	cmp	r6, #56	; 0x38
 8002294:	dd00      	ble.n	8002298 <__aeabi_dsub+0x1d4>
 8002296:	e0eb      	b.n	8002470 <__aeabi_dsub+0x3ac>
 8002298:	2e1f      	cmp	r6, #31
 800229a:	dc00      	bgt.n	800229e <__aeabi_dsub+0x1da>
 800229c:	e13a      	b.n	8002514 <__aeabi_dsub+0x450>
 800229e:	0033      	movs	r3, r6
 80022a0:	4667      	mov	r7, ip
 80022a2:	3b20      	subs	r3, #32
 80022a4:	40df      	lsrs	r7, r3
 80022a6:	003b      	movs	r3, r7
 80022a8:	2e20      	cmp	r6, #32
 80022aa:	d005      	beq.n	80022b8 <__aeabi_dsub+0x1f4>
 80022ac:	2740      	movs	r7, #64	; 0x40
 80022ae:	1bbf      	subs	r7, r7, r6
 80022b0:	4666      	mov	r6, ip
 80022b2:	40be      	lsls	r6, r7
 80022b4:	4332      	orrs	r2, r6
 80022b6:	4690      	mov	r8, r2
 80022b8:	4646      	mov	r6, r8
 80022ba:	1e72      	subs	r2, r6, #1
 80022bc:	4196      	sbcs	r6, r2
 80022be:	4333      	orrs	r3, r6
 80022c0:	e0da      	b.n	8002478 <__aeabi_dsub+0x3b4>
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d100      	bne.n	80022c8 <__aeabi_dsub+0x204>
 80022c6:	e214      	b.n	80026f2 <__aeabi_dsub+0x62e>
 80022c8:	4663      	mov	r3, ip
 80022ca:	4313      	orrs	r3, r2
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x20c>
 80022ce:	e168      	b.n	80025a2 <__aeabi_dsub+0x4de>
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	074e      	lsls	r6, r1, #29
 80022d4:	08c0      	lsrs	r0, r0, #3
 80022d6:	08c9      	lsrs	r1, r1, #3
 80022d8:	031b      	lsls	r3, r3, #12
 80022da:	4306      	orrs	r6, r0
 80022dc:	4219      	tst	r1, r3
 80022de:	d008      	beq.n	80022f2 <__aeabi_dsub+0x22e>
 80022e0:	4660      	mov	r0, ip
 80022e2:	08c0      	lsrs	r0, r0, #3
 80022e4:	4218      	tst	r0, r3
 80022e6:	d104      	bne.n	80022f2 <__aeabi_dsub+0x22e>
 80022e8:	4663      	mov	r3, ip
 80022ea:	0001      	movs	r1, r0
 80022ec:	08d2      	lsrs	r2, r2, #3
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	4316      	orrs	r6, r2
 80022f2:	00f3      	lsls	r3, r6, #3
 80022f4:	4699      	mov	r9, r3
 80022f6:	00c9      	lsls	r1, r1, #3
 80022f8:	0f72      	lsrs	r2, r6, #29
 80022fa:	4d44      	ldr	r5, [pc, #272]	; (800240c <__aeabi_dsub+0x348>)
 80022fc:	4311      	orrs	r1, r2
 80022fe:	464b      	mov	r3, r9
 8002300:	08de      	lsrs	r6, r3, #3
 8002302:	4b42      	ldr	r3, [pc, #264]	; (800240c <__aeabi_dsub+0x348>)
 8002304:	074f      	lsls	r7, r1, #29
 8002306:	4337      	orrs	r7, r6
 8002308:	08ca      	lsrs	r2, r1, #3
 800230a:	429d      	cmp	r5, r3
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x24c>
 800230e:	e06e      	b.n	80023ee <__aeabi_dsub+0x32a>
 8002310:	0312      	lsls	r2, r2, #12
 8002312:	056d      	lsls	r5, r5, #21
 8002314:	0b12      	lsrs	r2, r2, #12
 8002316:	0d6d      	lsrs	r5, r5, #21
 8002318:	2100      	movs	r1, #0
 800231a:	0312      	lsls	r2, r2, #12
 800231c:	0b13      	lsrs	r3, r2, #12
 800231e:	0d0a      	lsrs	r2, r1, #20
 8002320:	0512      	lsls	r2, r2, #20
 8002322:	431a      	orrs	r2, r3
 8002324:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <__aeabi_dsub+0x350>)
 8002326:	052d      	lsls	r5, r5, #20
 8002328:	4013      	ands	r3, r2
 800232a:	432b      	orrs	r3, r5
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	07e4      	lsls	r4, r4, #31
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	4323      	orrs	r3, r4
 8002334:	0038      	movs	r0, r7
 8002336:	0019      	movs	r1, r3
 8002338:	bc3c      	pop	{r2, r3, r4, r5}
 800233a:	4690      	mov	r8, r2
 800233c:	4699      	mov	r9, r3
 800233e:	46a2      	mov	sl, r4
 8002340:	46ab      	mov	fp, r5
 8002342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002344:	4663      	mov	r3, ip
 8002346:	4313      	orrs	r3, r2
 8002348:	d011      	beq.n	800236e <__aeabi_dsub+0x2aa>
 800234a:	1e73      	subs	r3, r6, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d000      	beq.n	8002352 <__aeabi_dsub+0x28e>
 8002350:	e107      	b.n	8002562 <__aeabi_dsub+0x49e>
 8002352:	1886      	adds	r6, r0, r2
 8002354:	4286      	cmp	r6, r0
 8002356:	4180      	sbcs	r0, r0
 8002358:	4461      	add	r1, ip
 800235a:	4240      	negs	r0, r0
 800235c:	1809      	adds	r1, r1, r0
 800235e:	2501      	movs	r5, #1
 8002360:	020b      	lsls	r3, r1, #8
 8002362:	d537      	bpl.n	80023d4 <__aeabi_dsub+0x310>
 8002364:	2502      	movs	r5, #2
 8002366:	e77b      	b.n	8002260 <__aeabi_dsub+0x19c>
 8002368:	003e      	movs	r6, r7
 800236a:	4661      	mov	r1, ip
 800236c:	4691      	mov	r9, r2
 800236e:	0035      	movs	r5, r6
 8002370:	e7c5      	b.n	80022fe <__aeabi_dsub+0x23a>
 8002372:	465c      	mov	r4, fp
 8002374:	2d00      	cmp	r5, #0
 8002376:	d000      	beq.n	800237a <__aeabi_dsub+0x2b6>
 8002378:	e0e1      	b.n	800253e <__aeabi_dsub+0x47a>
 800237a:	000b      	movs	r3, r1
 800237c:	4303      	orrs	r3, r0
 800237e:	d0f3      	beq.n	8002368 <__aeabi_dsub+0x2a4>
 8002380:	1c73      	adds	r3, r6, #1
 8002382:	d100      	bne.n	8002386 <__aeabi_dsub+0x2c2>
 8002384:	e1ac      	b.n	80026e0 <__aeabi_dsub+0x61c>
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <__aeabi_dsub+0x348>)
 8002388:	429f      	cmp	r7, r3
 800238a:	d100      	bne.n	800238e <__aeabi_dsub+0x2ca>
 800238c:	e13a      	b.n	8002604 <__aeabi_dsub+0x540>
 800238e:	43f3      	mvns	r3, r6
 8002390:	2b38      	cmp	r3, #56	; 0x38
 8002392:	dd00      	ble.n	8002396 <__aeabi_dsub+0x2d2>
 8002394:	e16f      	b.n	8002676 <__aeabi_dsub+0x5b2>
 8002396:	2b1f      	cmp	r3, #31
 8002398:	dd00      	ble.n	800239c <__aeabi_dsub+0x2d8>
 800239a:	e18c      	b.n	80026b6 <__aeabi_dsub+0x5f2>
 800239c:	2520      	movs	r5, #32
 800239e:	000e      	movs	r6, r1
 80023a0:	1aed      	subs	r5, r5, r3
 80023a2:	40ae      	lsls	r6, r5
 80023a4:	46b0      	mov	r8, r6
 80023a6:	0006      	movs	r6, r0
 80023a8:	46aa      	mov	sl, r5
 80023aa:	40de      	lsrs	r6, r3
 80023ac:	4645      	mov	r5, r8
 80023ae:	4335      	orrs	r5, r6
 80023b0:	002e      	movs	r6, r5
 80023b2:	4655      	mov	r5, sl
 80023b4:	40d9      	lsrs	r1, r3
 80023b6:	40a8      	lsls	r0, r5
 80023b8:	4663      	mov	r3, ip
 80023ba:	1e45      	subs	r5, r0, #1
 80023bc:	41a8      	sbcs	r0, r5
 80023be:	1a5b      	subs	r3, r3, r1
 80023c0:	469c      	mov	ip, r3
 80023c2:	4330      	orrs	r0, r6
 80023c4:	1a16      	subs	r6, r2, r0
 80023c6:	42b2      	cmp	r2, r6
 80023c8:	4192      	sbcs	r2, r2
 80023ca:	4663      	mov	r3, ip
 80023cc:	4252      	negs	r2, r2
 80023ce:	1a99      	subs	r1, r3, r2
 80023d0:	003d      	movs	r5, r7
 80023d2:	e6b4      	b.n	800213e <__aeabi_dsub+0x7a>
 80023d4:	2207      	movs	r2, #7
 80023d6:	4032      	ands	r2, r6
 80023d8:	2a00      	cmp	r2, #0
 80023da:	d000      	beq.n	80023de <__aeabi_dsub+0x31a>
 80023dc:	e6e4      	b.n	80021a8 <__aeabi_dsub+0xe4>
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <__aeabi_dsub+0x348>)
 80023e0:	08f6      	lsrs	r6, r6, #3
 80023e2:	074f      	lsls	r7, r1, #29
 80023e4:	4337      	orrs	r7, r6
 80023e6:	08ca      	lsrs	r2, r1, #3
 80023e8:	429d      	cmp	r5, r3
 80023ea:	d000      	beq.n	80023ee <__aeabi_dsub+0x32a>
 80023ec:	e790      	b.n	8002310 <__aeabi_dsub+0x24c>
 80023ee:	003b      	movs	r3, r7
 80023f0:	4313      	orrs	r3, r2
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x332>
 80023f4:	e1a6      	b.n	8002744 <__aeabi_dsub+0x680>
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	031b      	lsls	r3, r3, #12
 80023fa:	431a      	orrs	r2, r3
 80023fc:	0312      	lsls	r2, r2, #12
 80023fe:	0b12      	lsrs	r2, r2, #12
 8002400:	4d02      	ldr	r5, [pc, #8]	; (800240c <__aeabi_dsub+0x348>)
 8002402:	e789      	b.n	8002318 <__aeabi_dsub+0x254>
 8002404:	0015      	movs	r5, r2
 8002406:	2200      	movs	r2, #0
 8002408:	2700      	movs	r7, #0
 800240a:	e785      	b.n	8002318 <__aeabi_dsub+0x254>
 800240c:	000007ff 	.word	0x000007ff
 8002410:	ff7fffff 	.word	0xff7fffff
 8002414:	800fffff 	.word	0x800fffff
 8002418:	2e00      	cmp	r6, #0
 800241a:	d000      	beq.n	800241e <__aeabi_dsub+0x35a>
 800241c:	e0c7      	b.n	80025ae <__aeabi_dsub+0x4ea>
 800241e:	1c6b      	adds	r3, r5, #1
 8002420:	055e      	lsls	r6, r3, #21
 8002422:	0d76      	lsrs	r6, r6, #21
 8002424:	2e01      	cmp	r6, #1
 8002426:	dc00      	bgt.n	800242a <__aeabi_dsub+0x366>
 8002428:	e0f0      	b.n	800260c <__aeabi_dsub+0x548>
 800242a:	4dc8      	ldr	r5, [pc, #800]	; (800274c <__aeabi_dsub+0x688>)
 800242c:	42ab      	cmp	r3, r5
 800242e:	d100      	bne.n	8002432 <__aeabi_dsub+0x36e>
 8002430:	e0b9      	b.n	80025a6 <__aeabi_dsub+0x4e2>
 8002432:	1885      	adds	r5, r0, r2
 8002434:	000a      	movs	r2, r1
 8002436:	4285      	cmp	r5, r0
 8002438:	4189      	sbcs	r1, r1
 800243a:	4462      	add	r2, ip
 800243c:	4249      	negs	r1, r1
 800243e:	1851      	adds	r1, r2, r1
 8002440:	2207      	movs	r2, #7
 8002442:	07ce      	lsls	r6, r1, #31
 8002444:	086d      	lsrs	r5, r5, #1
 8002446:	432e      	orrs	r6, r5
 8002448:	0849      	lsrs	r1, r1, #1
 800244a:	4032      	ands	r2, r6
 800244c:	001d      	movs	r5, r3
 800244e:	e6a9      	b.n	80021a4 <__aeabi_dsub+0xe0>
 8002450:	49bf      	ldr	r1, [pc, #764]	; (8002750 <__aeabi_dsub+0x68c>)
 8002452:	1aed      	subs	r5, r5, r3
 8002454:	4011      	ands	r1, r2
 8002456:	2207      	movs	r2, #7
 8002458:	4032      	ands	r2, r6
 800245a:	e6a3      	b.n	80021a4 <__aeabi_dsub+0xe0>
 800245c:	0032      	movs	r2, r6
 800245e:	3828      	subs	r0, #40	; 0x28
 8002460:	4082      	lsls	r2, r0
 8002462:	2600      	movs	r6, #0
 8002464:	e686      	b.n	8002174 <__aeabi_dsub+0xb0>
 8002466:	0030      	movs	r0, r6
 8002468:	f000 fabe 	bl	80029e8 <__clzsi2>
 800246c:	3020      	adds	r0, #32
 800246e:	e673      	b.n	8002158 <__aeabi_dsub+0x94>
 8002470:	4663      	mov	r3, ip
 8002472:	4313      	orrs	r3, r2
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	4193      	sbcs	r3, r2
 8002478:	1ac6      	subs	r6, r0, r3
 800247a:	42b0      	cmp	r0, r6
 800247c:	4180      	sbcs	r0, r0
 800247e:	4240      	negs	r0, r0
 8002480:	1a09      	subs	r1, r1, r0
 8002482:	e65c      	b.n	800213e <__aeabi_dsub+0x7a>
 8002484:	000e      	movs	r6, r1
 8002486:	4667      	mov	r7, ip
 8002488:	4306      	orrs	r6, r0
 800248a:	4317      	orrs	r7, r2
 800248c:	2d00      	cmp	r5, #0
 800248e:	d15e      	bne.n	800254e <__aeabi_dsub+0x48a>
 8002490:	2e00      	cmp	r6, #0
 8002492:	d000      	beq.n	8002496 <__aeabi_dsub+0x3d2>
 8002494:	e0f3      	b.n	800267e <__aeabi_dsub+0x5ba>
 8002496:	2f00      	cmp	r7, #0
 8002498:	d100      	bne.n	800249c <__aeabi_dsub+0x3d8>
 800249a:	e11e      	b.n	80026da <__aeabi_dsub+0x616>
 800249c:	465c      	mov	r4, fp
 800249e:	4661      	mov	r1, ip
 80024a0:	4691      	mov	r9, r2
 80024a2:	e72c      	b.n	80022fe <__aeabi_dsub+0x23a>
 80024a4:	4fa9      	ldr	r7, [pc, #676]	; (800274c <__aeabi_dsub+0x688>)
 80024a6:	42be      	cmp	r6, r7
 80024a8:	d07b      	beq.n	80025a2 <__aeabi_dsub+0x4de>
 80024aa:	001e      	movs	r6, r3
 80024ac:	e6f1      	b.n	8002292 <__aeabi_dsub+0x1ce>
 80024ae:	0010      	movs	r0, r2
 80024b0:	3d1f      	subs	r5, #31
 80024b2:	40e8      	lsrs	r0, r5
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d003      	beq.n	80024c0 <__aeabi_dsub+0x3fc>
 80024b8:	2140      	movs	r1, #64	; 0x40
 80024ba:	1acb      	subs	r3, r1, r3
 80024bc:	409a      	lsls	r2, r3
 80024be:	4316      	orrs	r6, r2
 80024c0:	1e73      	subs	r3, r6, #1
 80024c2:	419e      	sbcs	r6, r3
 80024c4:	2207      	movs	r2, #7
 80024c6:	4306      	orrs	r6, r0
 80024c8:	4032      	ands	r2, r6
 80024ca:	2100      	movs	r1, #0
 80024cc:	2500      	movs	r5, #0
 80024ce:	e783      	b.n	80023d8 <__aeabi_dsub+0x314>
 80024d0:	1a16      	subs	r6, r2, r0
 80024d2:	4663      	mov	r3, ip
 80024d4:	42b2      	cmp	r2, r6
 80024d6:	4180      	sbcs	r0, r0
 80024d8:	1a59      	subs	r1, r3, r1
 80024da:	4240      	negs	r0, r0
 80024dc:	1a0b      	subs	r3, r1, r0
 80024de:	4698      	mov	r8, r3
 80024e0:	465c      	mov	r4, fp
 80024e2:	e632      	b.n	800214a <__aeabi_dsub+0x86>
 80024e4:	2e1f      	cmp	r6, #31
 80024e6:	dd00      	ble.n	80024ea <__aeabi_dsub+0x426>
 80024e8:	e0ab      	b.n	8002642 <__aeabi_dsub+0x57e>
 80024ea:	2720      	movs	r7, #32
 80024ec:	1bbb      	subs	r3, r7, r6
 80024ee:	469a      	mov	sl, r3
 80024f0:	4663      	mov	r3, ip
 80024f2:	4657      	mov	r7, sl
 80024f4:	40bb      	lsls	r3, r7
 80024f6:	4699      	mov	r9, r3
 80024f8:	0013      	movs	r3, r2
 80024fa:	464f      	mov	r7, r9
 80024fc:	40f3      	lsrs	r3, r6
 80024fe:	431f      	orrs	r7, r3
 8002500:	003b      	movs	r3, r7
 8002502:	4657      	mov	r7, sl
 8002504:	40ba      	lsls	r2, r7
 8002506:	1e57      	subs	r7, r2, #1
 8002508:	41ba      	sbcs	r2, r7
 800250a:	4313      	orrs	r3, r2
 800250c:	4662      	mov	r2, ip
 800250e:	40f2      	lsrs	r2, r6
 8002510:	1889      	adds	r1, r1, r2
 8002512:	e698      	b.n	8002246 <__aeabi_dsub+0x182>
 8002514:	2720      	movs	r7, #32
 8002516:	1bbb      	subs	r3, r7, r6
 8002518:	469a      	mov	sl, r3
 800251a:	4663      	mov	r3, ip
 800251c:	4657      	mov	r7, sl
 800251e:	40bb      	lsls	r3, r7
 8002520:	4699      	mov	r9, r3
 8002522:	0013      	movs	r3, r2
 8002524:	464f      	mov	r7, r9
 8002526:	40f3      	lsrs	r3, r6
 8002528:	431f      	orrs	r7, r3
 800252a:	003b      	movs	r3, r7
 800252c:	4657      	mov	r7, sl
 800252e:	40ba      	lsls	r2, r7
 8002530:	1e57      	subs	r7, r2, #1
 8002532:	41ba      	sbcs	r2, r7
 8002534:	4313      	orrs	r3, r2
 8002536:	4662      	mov	r2, ip
 8002538:	40f2      	lsrs	r2, r6
 800253a:	1a89      	subs	r1, r1, r2
 800253c:	e79c      	b.n	8002478 <__aeabi_dsub+0x3b4>
 800253e:	4b83      	ldr	r3, [pc, #524]	; (800274c <__aeabi_dsub+0x688>)
 8002540:	429f      	cmp	r7, r3
 8002542:	d05f      	beq.n	8002604 <__aeabi_dsub+0x540>
 8002544:	2580      	movs	r5, #128	; 0x80
 8002546:	042d      	lsls	r5, r5, #16
 8002548:	4273      	negs	r3, r6
 800254a:	4329      	orrs	r1, r5
 800254c:	e720      	b.n	8002390 <__aeabi_dsub+0x2cc>
 800254e:	2e00      	cmp	r6, #0
 8002550:	d10c      	bne.n	800256c <__aeabi_dsub+0x4a8>
 8002552:	2f00      	cmp	r7, #0
 8002554:	d100      	bne.n	8002558 <__aeabi_dsub+0x494>
 8002556:	e0d0      	b.n	80026fa <__aeabi_dsub+0x636>
 8002558:	465c      	mov	r4, fp
 800255a:	4661      	mov	r1, ip
 800255c:	4691      	mov	r9, r2
 800255e:	4d7b      	ldr	r5, [pc, #492]	; (800274c <__aeabi_dsub+0x688>)
 8002560:	e6cd      	b.n	80022fe <__aeabi_dsub+0x23a>
 8002562:	4f7a      	ldr	r7, [pc, #488]	; (800274c <__aeabi_dsub+0x688>)
 8002564:	42be      	cmp	r6, r7
 8002566:	d01c      	beq.n	80025a2 <__aeabi_dsub+0x4de>
 8002568:	001e      	movs	r6, r3
 800256a:	e665      	b.n	8002238 <__aeabi_dsub+0x174>
 800256c:	2f00      	cmp	r7, #0
 800256e:	d018      	beq.n	80025a2 <__aeabi_dsub+0x4de>
 8002570:	08c0      	lsrs	r0, r0, #3
 8002572:	074e      	lsls	r6, r1, #29
 8002574:	4306      	orrs	r6, r0
 8002576:	2080      	movs	r0, #128	; 0x80
 8002578:	08c9      	lsrs	r1, r1, #3
 800257a:	0300      	lsls	r0, r0, #12
 800257c:	4201      	tst	r1, r0
 800257e:	d008      	beq.n	8002592 <__aeabi_dsub+0x4ce>
 8002580:	4663      	mov	r3, ip
 8002582:	08dc      	lsrs	r4, r3, #3
 8002584:	4204      	tst	r4, r0
 8002586:	d104      	bne.n	8002592 <__aeabi_dsub+0x4ce>
 8002588:	0021      	movs	r1, r4
 800258a:	46da      	mov	sl, fp
 800258c:	08d2      	lsrs	r2, r2, #3
 800258e:	075e      	lsls	r6, r3, #29
 8002590:	4316      	orrs	r6, r2
 8002592:	00f3      	lsls	r3, r6, #3
 8002594:	4699      	mov	r9, r3
 8002596:	2401      	movs	r4, #1
 8002598:	4653      	mov	r3, sl
 800259a:	00c9      	lsls	r1, r1, #3
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	4311      	orrs	r1, r2
 80025a0:	401c      	ands	r4, r3
 80025a2:	4d6a      	ldr	r5, [pc, #424]	; (800274c <__aeabi_dsub+0x688>)
 80025a4:	e6ab      	b.n	80022fe <__aeabi_dsub+0x23a>
 80025a6:	001d      	movs	r5, r3
 80025a8:	2200      	movs	r2, #0
 80025aa:	2700      	movs	r7, #0
 80025ac:	e6b4      	b.n	8002318 <__aeabi_dsub+0x254>
 80025ae:	2d00      	cmp	r5, #0
 80025b0:	d159      	bne.n	8002666 <__aeabi_dsub+0x5a2>
 80025b2:	000b      	movs	r3, r1
 80025b4:	4303      	orrs	r3, r0
 80025b6:	d100      	bne.n	80025ba <__aeabi_dsub+0x4f6>
 80025b8:	e6d6      	b.n	8002368 <__aeabi_dsub+0x2a4>
 80025ba:	1c73      	adds	r3, r6, #1
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x4fc>
 80025be:	e0b2      	b.n	8002726 <__aeabi_dsub+0x662>
 80025c0:	4b62      	ldr	r3, [pc, #392]	; (800274c <__aeabi_dsub+0x688>)
 80025c2:	429f      	cmp	r7, r3
 80025c4:	d01e      	beq.n	8002604 <__aeabi_dsub+0x540>
 80025c6:	43f3      	mvns	r3, r6
 80025c8:	2b38      	cmp	r3, #56	; 0x38
 80025ca:	dc6f      	bgt.n	80026ac <__aeabi_dsub+0x5e8>
 80025cc:	2b1f      	cmp	r3, #31
 80025ce:	dd00      	ble.n	80025d2 <__aeabi_dsub+0x50e>
 80025d0:	e097      	b.n	8002702 <__aeabi_dsub+0x63e>
 80025d2:	2520      	movs	r5, #32
 80025d4:	000e      	movs	r6, r1
 80025d6:	1aed      	subs	r5, r5, r3
 80025d8:	40ae      	lsls	r6, r5
 80025da:	46b0      	mov	r8, r6
 80025dc:	0006      	movs	r6, r0
 80025de:	46aa      	mov	sl, r5
 80025e0:	40de      	lsrs	r6, r3
 80025e2:	4645      	mov	r5, r8
 80025e4:	4335      	orrs	r5, r6
 80025e6:	002e      	movs	r6, r5
 80025e8:	4655      	mov	r5, sl
 80025ea:	40a8      	lsls	r0, r5
 80025ec:	40d9      	lsrs	r1, r3
 80025ee:	1e45      	subs	r5, r0, #1
 80025f0:	41a8      	sbcs	r0, r5
 80025f2:	448c      	add	ip, r1
 80025f4:	4306      	orrs	r6, r0
 80025f6:	18b6      	adds	r6, r6, r2
 80025f8:	4296      	cmp	r6, r2
 80025fa:	4192      	sbcs	r2, r2
 80025fc:	4251      	negs	r1, r2
 80025fe:	4461      	add	r1, ip
 8002600:	003d      	movs	r5, r7
 8002602:	e625      	b.n	8002250 <__aeabi_dsub+0x18c>
 8002604:	003d      	movs	r5, r7
 8002606:	4661      	mov	r1, ip
 8002608:	4691      	mov	r9, r2
 800260a:	e678      	b.n	80022fe <__aeabi_dsub+0x23a>
 800260c:	000b      	movs	r3, r1
 800260e:	4303      	orrs	r3, r0
 8002610:	2d00      	cmp	r5, #0
 8002612:	d000      	beq.n	8002616 <__aeabi_dsub+0x552>
 8002614:	e655      	b.n	80022c2 <__aeabi_dsub+0x1fe>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f5      	beq.n	8002606 <__aeabi_dsub+0x542>
 800261a:	4663      	mov	r3, ip
 800261c:	4313      	orrs	r3, r2
 800261e:	d100      	bne.n	8002622 <__aeabi_dsub+0x55e>
 8002620:	e66d      	b.n	80022fe <__aeabi_dsub+0x23a>
 8002622:	1886      	adds	r6, r0, r2
 8002624:	4286      	cmp	r6, r0
 8002626:	4180      	sbcs	r0, r0
 8002628:	4461      	add	r1, ip
 800262a:	4240      	negs	r0, r0
 800262c:	1809      	adds	r1, r1, r0
 800262e:	2200      	movs	r2, #0
 8002630:	020b      	lsls	r3, r1, #8
 8002632:	d400      	bmi.n	8002636 <__aeabi_dsub+0x572>
 8002634:	e6d0      	b.n	80023d8 <__aeabi_dsub+0x314>
 8002636:	4b46      	ldr	r3, [pc, #280]	; (8002750 <__aeabi_dsub+0x68c>)
 8002638:	3501      	adds	r5, #1
 800263a:	4019      	ands	r1, r3
 800263c:	e5b2      	b.n	80021a4 <__aeabi_dsub+0xe0>
 800263e:	46b1      	mov	r9, r6
 8002640:	e65d      	b.n	80022fe <__aeabi_dsub+0x23a>
 8002642:	0033      	movs	r3, r6
 8002644:	4667      	mov	r7, ip
 8002646:	3b20      	subs	r3, #32
 8002648:	40df      	lsrs	r7, r3
 800264a:	003b      	movs	r3, r7
 800264c:	2e20      	cmp	r6, #32
 800264e:	d005      	beq.n	800265c <__aeabi_dsub+0x598>
 8002650:	2740      	movs	r7, #64	; 0x40
 8002652:	1bbf      	subs	r7, r7, r6
 8002654:	4666      	mov	r6, ip
 8002656:	40be      	lsls	r6, r7
 8002658:	4332      	orrs	r2, r6
 800265a:	4690      	mov	r8, r2
 800265c:	4646      	mov	r6, r8
 800265e:	1e72      	subs	r2, r6, #1
 8002660:	4196      	sbcs	r6, r2
 8002662:	4333      	orrs	r3, r6
 8002664:	e5ef      	b.n	8002246 <__aeabi_dsub+0x182>
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <__aeabi_dsub+0x688>)
 8002668:	429f      	cmp	r7, r3
 800266a:	d0cb      	beq.n	8002604 <__aeabi_dsub+0x540>
 800266c:	2580      	movs	r5, #128	; 0x80
 800266e:	042d      	lsls	r5, r5, #16
 8002670:	4273      	negs	r3, r6
 8002672:	4329      	orrs	r1, r5
 8002674:	e7a8      	b.n	80025c8 <__aeabi_dsub+0x504>
 8002676:	4308      	orrs	r0, r1
 8002678:	1e41      	subs	r1, r0, #1
 800267a:	4188      	sbcs	r0, r1
 800267c:	e6a2      	b.n	80023c4 <__aeabi_dsub+0x300>
 800267e:	2f00      	cmp	r7, #0
 8002680:	d100      	bne.n	8002684 <__aeabi_dsub+0x5c0>
 8002682:	e63c      	b.n	80022fe <__aeabi_dsub+0x23a>
 8002684:	4663      	mov	r3, ip
 8002686:	1a86      	subs	r6, r0, r2
 8002688:	1acf      	subs	r7, r1, r3
 800268a:	42b0      	cmp	r0, r6
 800268c:	419b      	sbcs	r3, r3
 800268e:	425b      	negs	r3, r3
 8002690:	1afb      	subs	r3, r7, r3
 8002692:	4698      	mov	r8, r3
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	d54e      	bpl.n	8002736 <__aeabi_dsub+0x672>
 8002698:	1a16      	subs	r6, r2, r0
 800269a:	4663      	mov	r3, ip
 800269c:	42b2      	cmp	r2, r6
 800269e:	4192      	sbcs	r2, r2
 80026a0:	1a59      	subs	r1, r3, r1
 80026a2:	4252      	negs	r2, r2
 80026a4:	1a89      	subs	r1, r1, r2
 80026a6:	465c      	mov	r4, fp
 80026a8:	2200      	movs	r2, #0
 80026aa:	e57b      	b.n	80021a4 <__aeabi_dsub+0xe0>
 80026ac:	4301      	orrs	r1, r0
 80026ae:	000e      	movs	r6, r1
 80026b0:	1e71      	subs	r1, r6, #1
 80026b2:	418e      	sbcs	r6, r1
 80026b4:	e79f      	b.n	80025f6 <__aeabi_dsub+0x532>
 80026b6:	001d      	movs	r5, r3
 80026b8:	000e      	movs	r6, r1
 80026ba:	3d20      	subs	r5, #32
 80026bc:	40ee      	lsrs	r6, r5
 80026be:	46b0      	mov	r8, r6
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d004      	beq.n	80026ce <__aeabi_dsub+0x60a>
 80026c4:	2540      	movs	r5, #64	; 0x40
 80026c6:	1aeb      	subs	r3, r5, r3
 80026c8:	4099      	lsls	r1, r3
 80026ca:	4308      	orrs	r0, r1
 80026cc:	4681      	mov	r9, r0
 80026ce:	4648      	mov	r0, r9
 80026d0:	4643      	mov	r3, r8
 80026d2:	1e41      	subs	r1, r0, #1
 80026d4:	4188      	sbcs	r0, r1
 80026d6:	4318      	orrs	r0, r3
 80026d8:	e674      	b.n	80023c4 <__aeabi_dsub+0x300>
 80026da:	2200      	movs	r2, #0
 80026dc:	2400      	movs	r4, #0
 80026de:	e617      	b.n	8002310 <__aeabi_dsub+0x24c>
 80026e0:	1a16      	subs	r6, r2, r0
 80026e2:	4663      	mov	r3, ip
 80026e4:	42b2      	cmp	r2, r6
 80026e6:	4192      	sbcs	r2, r2
 80026e8:	1a59      	subs	r1, r3, r1
 80026ea:	4252      	negs	r2, r2
 80026ec:	1a89      	subs	r1, r1, r2
 80026ee:	003d      	movs	r5, r7
 80026f0:	e525      	b.n	800213e <__aeabi_dsub+0x7a>
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	4d15      	ldr	r5, [pc, #84]	; (800274c <__aeabi_dsub+0x688>)
 80026f8:	e601      	b.n	80022fe <__aeabi_dsub+0x23a>
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	2400      	movs	r4, #0
 80026fe:	0312      	lsls	r2, r2, #12
 8002700:	e679      	b.n	80023f6 <__aeabi_dsub+0x332>
 8002702:	001d      	movs	r5, r3
 8002704:	000e      	movs	r6, r1
 8002706:	3d20      	subs	r5, #32
 8002708:	40ee      	lsrs	r6, r5
 800270a:	46b0      	mov	r8, r6
 800270c:	2b20      	cmp	r3, #32
 800270e:	d004      	beq.n	800271a <__aeabi_dsub+0x656>
 8002710:	2540      	movs	r5, #64	; 0x40
 8002712:	1aeb      	subs	r3, r5, r3
 8002714:	4099      	lsls	r1, r3
 8002716:	4308      	orrs	r0, r1
 8002718:	4681      	mov	r9, r0
 800271a:	464e      	mov	r6, r9
 800271c:	4643      	mov	r3, r8
 800271e:	1e71      	subs	r1, r6, #1
 8002720:	418e      	sbcs	r6, r1
 8002722:	431e      	orrs	r6, r3
 8002724:	e767      	b.n	80025f6 <__aeabi_dsub+0x532>
 8002726:	1886      	adds	r6, r0, r2
 8002728:	4296      	cmp	r6, r2
 800272a:	419b      	sbcs	r3, r3
 800272c:	4461      	add	r1, ip
 800272e:	425b      	negs	r3, r3
 8002730:	18c9      	adds	r1, r1, r3
 8002732:	003d      	movs	r5, r7
 8002734:	e58c      	b.n	8002250 <__aeabi_dsub+0x18c>
 8002736:	4647      	mov	r7, r8
 8002738:	4337      	orrs	r7, r6
 800273a:	d0ce      	beq.n	80026da <__aeabi_dsub+0x616>
 800273c:	2207      	movs	r2, #7
 800273e:	4641      	mov	r1, r8
 8002740:	4032      	ands	r2, r6
 8002742:	e649      	b.n	80023d8 <__aeabi_dsub+0x314>
 8002744:	2700      	movs	r7, #0
 8002746:	003a      	movs	r2, r7
 8002748:	e5e6      	b.n	8002318 <__aeabi_dsub+0x254>
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	000007ff 	.word	0x000007ff
 8002750:	ff7fffff 	.word	0xff7fffff

08002754 <__aeabi_dcmpun>:
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	4e0c      	ldr	r6, [pc, #48]	; (8002788 <__aeabi_dcmpun+0x34>)
 8002758:	030d      	lsls	r5, r1, #12
 800275a:	031c      	lsls	r4, r3, #12
 800275c:	0049      	lsls	r1, r1, #1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	0b2d      	lsrs	r5, r5, #12
 8002762:	0d49      	lsrs	r1, r1, #21
 8002764:	0b24      	lsrs	r4, r4, #12
 8002766:	0d5b      	lsrs	r3, r3, #21
 8002768:	42b1      	cmp	r1, r6
 800276a:	d008      	beq.n	800277e <__aeabi_dcmpun+0x2a>
 800276c:	4906      	ldr	r1, [pc, #24]	; (8002788 <__aeabi_dcmpun+0x34>)
 800276e:	2000      	movs	r0, #0
 8002770:	428b      	cmp	r3, r1
 8002772:	d103      	bne.n	800277c <__aeabi_dcmpun+0x28>
 8002774:	4314      	orrs	r4, r2
 8002776:	0020      	movs	r0, r4
 8002778:	1e44      	subs	r4, r0, #1
 800277a:	41a0      	sbcs	r0, r4
 800277c:	bd70      	pop	{r4, r5, r6, pc}
 800277e:	4305      	orrs	r5, r0
 8002780:	2001      	movs	r0, #1
 8002782:	2d00      	cmp	r5, #0
 8002784:	d1fa      	bne.n	800277c <__aeabi_dcmpun+0x28>
 8002786:	e7f1      	b.n	800276c <__aeabi_dcmpun+0x18>
 8002788:	000007ff 	.word	0x000007ff

0800278c <__aeabi_d2iz>:
 800278c:	b530      	push	{r4, r5, lr}
 800278e:	4d14      	ldr	r5, [pc, #80]	; (80027e0 <__aeabi_d2iz+0x54>)
 8002790:	030a      	lsls	r2, r1, #12
 8002792:	004b      	lsls	r3, r1, #1
 8002794:	0b12      	lsrs	r2, r2, #12
 8002796:	0d5b      	lsrs	r3, r3, #21
 8002798:	0fc9      	lsrs	r1, r1, #31
 800279a:	2400      	movs	r4, #0
 800279c:	42ab      	cmp	r3, r5
 800279e:	dd11      	ble.n	80027c4 <__aeabi_d2iz+0x38>
 80027a0:	4c10      	ldr	r4, [pc, #64]	; (80027e4 <__aeabi_d2iz+0x58>)
 80027a2:	42a3      	cmp	r3, r4
 80027a4:	dc10      	bgt.n	80027c8 <__aeabi_d2iz+0x3c>
 80027a6:	2480      	movs	r4, #128	; 0x80
 80027a8:	0364      	lsls	r4, r4, #13
 80027aa:	4322      	orrs	r2, r4
 80027ac:	4c0e      	ldr	r4, [pc, #56]	; (80027e8 <__aeabi_d2iz+0x5c>)
 80027ae:	1ae4      	subs	r4, r4, r3
 80027b0:	2c1f      	cmp	r4, #31
 80027b2:	dd0c      	ble.n	80027ce <__aeabi_d2iz+0x42>
 80027b4:	480d      	ldr	r0, [pc, #52]	; (80027ec <__aeabi_d2iz+0x60>)
 80027b6:	1ac3      	subs	r3, r0, r3
 80027b8:	40da      	lsrs	r2, r3
 80027ba:	0013      	movs	r3, r2
 80027bc:	425c      	negs	r4, r3
 80027be:	2900      	cmp	r1, #0
 80027c0:	d100      	bne.n	80027c4 <__aeabi_d2iz+0x38>
 80027c2:	001c      	movs	r4, r3
 80027c4:	0020      	movs	r0, r4
 80027c6:	bd30      	pop	{r4, r5, pc}
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <__aeabi_d2iz+0x64>)
 80027ca:	18cc      	adds	r4, r1, r3
 80027cc:	e7fa      	b.n	80027c4 <__aeabi_d2iz+0x38>
 80027ce:	4d09      	ldr	r5, [pc, #36]	; (80027f4 <__aeabi_d2iz+0x68>)
 80027d0:	40e0      	lsrs	r0, r4
 80027d2:	46ac      	mov	ip, r5
 80027d4:	4463      	add	r3, ip
 80027d6:	409a      	lsls	r2, r3
 80027d8:	0013      	movs	r3, r2
 80027da:	4303      	orrs	r3, r0
 80027dc:	e7ee      	b.n	80027bc <__aeabi_d2iz+0x30>
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	000003fe 	.word	0x000003fe
 80027e4:	0000041d 	.word	0x0000041d
 80027e8:	00000433 	.word	0x00000433
 80027ec:	00000413 	.word	0x00000413
 80027f0:	7fffffff 	.word	0x7fffffff
 80027f4:	fffffbed 	.word	0xfffffbed

080027f8 <__aeabi_i2d>:
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	2800      	cmp	r0, #0
 80027fc:	d02d      	beq.n	800285a <__aeabi_i2d+0x62>
 80027fe:	17c3      	asrs	r3, r0, #31
 8002800:	18c5      	adds	r5, r0, r3
 8002802:	405d      	eors	r5, r3
 8002804:	0fc4      	lsrs	r4, r0, #31
 8002806:	0028      	movs	r0, r5
 8002808:	f000 f8ee 	bl	80029e8 <__clzsi2>
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <__aeabi_i2d+0x6c>)
 800280e:	1a1b      	subs	r3, r3, r0
 8002810:	055b      	lsls	r3, r3, #21
 8002812:	0d5b      	lsrs	r3, r3, #21
 8002814:	280a      	cmp	r0, #10
 8002816:	dd15      	ble.n	8002844 <__aeabi_i2d+0x4c>
 8002818:	380b      	subs	r0, #11
 800281a:	4085      	lsls	r5, r0
 800281c:	2200      	movs	r2, #0
 800281e:	032d      	lsls	r5, r5, #12
 8002820:	0b2d      	lsrs	r5, r5, #12
 8002822:	2100      	movs	r1, #0
 8002824:	0010      	movs	r0, r2
 8002826:	032d      	lsls	r5, r5, #12
 8002828:	0d0a      	lsrs	r2, r1, #20
 800282a:	0b2d      	lsrs	r5, r5, #12
 800282c:	0512      	lsls	r2, r2, #20
 800282e:	432a      	orrs	r2, r5
 8002830:	4d0d      	ldr	r5, [pc, #52]	; (8002868 <__aeabi_i2d+0x70>)
 8002832:	051b      	lsls	r3, r3, #20
 8002834:	402a      	ands	r2, r5
 8002836:	4313      	orrs	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	07e4      	lsls	r4, r4, #31
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	4323      	orrs	r3, r4
 8002840:	0019      	movs	r1, r3
 8002842:	bd70      	pop	{r4, r5, r6, pc}
 8002844:	0002      	movs	r2, r0
 8002846:	0029      	movs	r1, r5
 8002848:	3215      	adds	r2, #21
 800284a:	4091      	lsls	r1, r2
 800284c:	000a      	movs	r2, r1
 800284e:	210b      	movs	r1, #11
 8002850:	1a08      	subs	r0, r1, r0
 8002852:	40c5      	lsrs	r5, r0
 8002854:	032d      	lsls	r5, r5, #12
 8002856:	0b2d      	lsrs	r5, r5, #12
 8002858:	e7e3      	b.n	8002822 <__aeabi_i2d+0x2a>
 800285a:	2400      	movs	r4, #0
 800285c:	2300      	movs	r3, #0
 800285e:	2500      	movs	r5, #0
 8002860:	2200      	movs	r2, #0
 8002862:	e7de      	b.n	8002822 <__aeabi_i2d+0x2a>
 8002864:	0000041e 	.word	0x0000041e
 8002868:	800fffff 	.word	0x800fffff

0800286c <__aeabi_ui2d>:
 800286c:	b510      	push	{r4, lr}
 800286e:	1e04      	subs	r4, r0, #0
 8002870:	d025      	beq.n	80028be <__aeabi_ui2d+0x52>
 8002872:	f000 f8b9 	bl	80029e8 <__clzsi2>
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <__aeabi_ui2d+0x5c>)
 8002878:	1a1b      	subs	r3, r3, r0
 800287a:	055b      	lsls	r3, r3, #21
 800287c:	0d5b      	lsrs	r3, r3, #21
 800287e:	280a      	cmp	r0, #10
 8002880:	dd12      	ble.n	80028a8 <__aeabi_ui2d+0x3c>
 8002882:	380b      	subs	r0, #11
 8002884:	4084      	lsls	r4, r0
 8002886:	2200      	movs	r2, #0
 8002888:	0324      	lsls	r4, r4, #12
 800288a:	0b24      	lsrs	r4, r4, #12
 800288c:	2100      	movs	r1, #0
 800288e:	0010      	movs	r0, r2
 8002890:	0324      	lsls	r4, r4, #12
 8002892:	0d0a      	lsrs	r2, r1, #20
 8002894:	0b24      	lsrs	r4, r4, #12
 8002896:	0512      	lsls	r2, r2, #20
 8002898:	4322      	orrs	r2, r4
 800289a:	4c0c      	ldr	r4, [pc, #48]	; (80028cc <__aeabi_ui2d+0x60>)
 800289c:	051b      	lsls	r3, r3, #20
 800289e:	4022      	ands	r2, r4
 80028a0:	4313      	orrs	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	0859      	lsrs	r1, r3, #1
 80028a6:	bd10      	pop	{r4, pc}
 80028a8:	0002      	movs	r2, r0
 80028aa:	0021      	movs	r1, r4
 80028ac:	3215      	adds	r2, #21
 80028ae:	4091      	lsls	r1, r2
 80028b0:	000a      	movs	r2, r1
 80028b2:	210b      	movs	r1, #11
 80028b4:	1a08      	subs	r0, r1, r0
 80028b6:	40c4      	lsrs	r4, r0
 80028b8:	0324      	lsls	r4, r4, #12
 80028ba:	0b24      	lsrs	r4, r4, #12
 80028bc:	e7e6      	b.n	800288c <__aeabi_ui2d+0x20>
 80028be:	2300      	movs	r3, #0
 80028c0:	2400      	movs	r4, #0
 80028c2:	2200      	movs	r2, #0
 80028c4:	e7e2      	b.n	800288c <__aeabi_ui2d+0x20>
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	0000041e 	.word	0x0000041e
 80028cc:	800fffff 	.word	0x800fffff

080028d0 <__aeabi_f2d>:
 80028d0:	0041      	lsls	r1, r0, #1
 80028d2:	0e09      	lsrs	r1, r1, #24
 80028d4:	1c4b      	adds	r3, r1, #1
 80028d6:	b570      	push	{r4, r5, r6, lr}
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	0246      	lsls	r6, r0, #9
 80028dc:	0a75      	lsrs	r5, r6, #9
 80028de:	0fc4      	lsrs	r4, r0, #31
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	dd14      	ble.n	800290e <__aeabi_f2d+0x3e>
 80028e4:	23e0      	movs	r3, #224	; 0xe0
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	076d      	lsls	r5, r5, #29
 80028ea:	0b36      	lsrs	r6, r6, #12
 80028ec:	18cb      	adds	r3, r1, r3
 80028ee:	2100      	movs	r1, #0
 80028f0:	0d0a      	lsrs	r2, r1, #20
 80028f2:	0028      	movs	r0, r5
 80028f4:	0512      	lsls	r2, r2, #20
 80028f6:	4d1c      	ldr	r5, [pc, #112]	; (8002968 <__aeabi_f2d+0x98>)
 80028f8:	4332      	orrs	r2, r6
 80028fa:	055b      	lsls	r3, r3, #21
 80028fc:	402a      	ands	r2, r5
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	4313      	orrs	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	07e4      	lsls	r4, r4, #31
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	4323      	orrs	r3, r4
 800290a:	0019      	movs	r1, r3
 800290c:	bd70      	pop	{r4, r5, r6, pc}
 800290e:	2900      	cmp	r1, #0
 8002910:	d114      	bne.n	800293c <__aeabi_f2d+0x6c>
 8002912:	2d00      	cmp	r5, #0
 8002914:	d01e      	beq.n	8002954 <__aeabi_f2d+0x84>
 8002916:	0028      	movs	r0, r5
 8002918:	f000 f866 	bl	80029e8 <__clzsi2>
 800291c:	280a      	cmp	r0, #10
 800291e:	dc1c      	bgt.n	800295a <__aeabi_f2d+0x8a>
 8002920:	230b      	movs	r3, #11
 8002922:	002a      	movs	r2, r5
 8002924:	1a1b      	subs	r3, r3, r0
 8002926:	40da      	lsrs	r2, r3
 8002928:	0003      	movs	r3, r0
 800292a:	3315      	adds	r3, #21
 800292c:	409d      	lsls	r5, r3
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <__aeabi_f2d+0x9c>)
 8002930:	0312      	lsls	r2, r2, #12
 8002932:	1a1b      	subs	r3, r3, r0
 8002934:	055b      	lsls	r3, r3, #21
 8002936:	0b16      	lsrs	r6, r2, #12
 8002938:	0d5b      	lsrs	r3, r3, #21
 800293a:	e7d8      	b.n	80028ee <__aeabi_f2d+0x1e>
 800293c:	2d00      	cmp	r5, #0
 800293e:	d006      	beq.n	800294e <__aeabi_f2d+0x7e>
 8002940:	0b32      	lsrs	r2, r6, #12
 8002942:	2680      	movs	r6, #128	; 0x80
 8002944:	0336      	lsls	r6, r6, #12
 8002946:	076d      	lsls	r5, r5, #29
 8002948:	4316      	orrs	r6, r2
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <__aeabi_f2d+0xa0>)
 800294c:	e7cf      	b.n	80028ee <__aeabi_f2d+0x1e>
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <__aeabi_f2d+0xa0>)
 8002950:	2600      	movs	r6, #0
 8002952:	e7cc      	b.n	80028ee <__aeabi_f2d+0x1e>
 8002954:	2300      	movs	r3, #0
 8002956:	2600      	movs	r6, #0
 8002958:	e7c9      	b.n	80028ee <__aeabi_f2d+0x1e>
 800295a:	0003      	movs	r3, r0
 800295c:	002a      	movs	r2, r5
 800295e:	3b0b      	subs	r3, #11
 8002960:	409a      	lsls	r2, r3
 8002962:	2500      	movs	r5, #0
 8002964:	e7e3      	b.n	800292e <__aeabi_f2d+0x5e>
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	800fffff 	.word	0x800fffff
 800296c:	00000389 	.word	0x00000389
 8002970:	000007ff 	.word	0x000007ff

08002974 <__aeabi_cfrcmple>:
 8002974:	4684      	mov	ip, r0
 8002976:	1c08      	adds	r0, r1, #0
 8002978:	4661      	mov	r1, ip
 800297a:	e7ff      	b.n	800297c <__aeabi_cfcmpeq>

0800297c <__aeabi_cfcmpeq>:
 800297c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800297e:	f000 f8c7 	bl	8002b10 <__lesf2>
 8002982:	2800      	cmp	r0, #0
 8002984:	d401      	bmi.n	800298a <__aeabi_cfcmpeq+0xe>
 8002986:	2100      	movs	r1, #0
 8002988:	42c8      	cmn	r0, r1
 800298a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800298c <__aeabi_fcmpeq>:
 800298c:	b510      	push	{r4, lr}
 800298e:	f000 f849 	bl	8002a24 <__eqsf2>
 8002992:	4240      	negs	r0, r0
 8002994:	3001      	adds	r0, #1
 8002996:	bd10      	pop	{r4, pc}

08002998 <__aeabi_fcmplt>:
 8002998:	b510      	push	{r4, lr}
 800299a:	f000 f8b9 	bl	8002b10 <__lesf2>
 800299e:	2800      	cmp	r0, #0
 80029a0:	db01      	blt.n	80029a6 <__aeabi_fcmplt+0xe>
 80029a2:	2000      	movs	r0, #0
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	2001      	movs	r0, #1
 80029a8:	bd10      	pop	{r4, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)

080029ac <__aeabi_fcmple>:
 80029ac:	b510      	push	{r4, lr}
 80029ae:	f000 f8af 	bl	8002b10 <__lesf2>
 80029b2:	2800      	cmp	r0, #0
 80029b4:	dd01      	ble.n	80029ba <__aeabi_fcmple+0xe>
 80029b6:	2000      	movs	r0, #0
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	2001      	movs	r0, #1
 80029bc:	bd10      	pop	{r4, pc}
 80029be:	46c0      	nop			; (mov r8, r8)

080029c0 <__aeabi_fcmpgt>:
 80029c0:	b510      	push	{r4, lr}
 80029c2:	f000 f857 	bl	8002a74 <__gesf2>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	dc01      	bgt.n	80029ce <__aeabi_fcmpgt+0xe>
 80029ca:	2000      	movs	r0, #0
 80029cc:	bd10      	pop	{r4, pc}
 80029ce:	2001      	movs	r0, #1
 80029d0:	bd10      	pop	{r4, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)

080029d4 <__aeabi_fcmpge>:
 80029d4:	b510      	push	{r4, lr}
 80029d6:	f000 f84d 	bl	8002a74 <__gesf2>
 80029da:	2800      	cmp	r0, #0
 80029dc:	da01      	bge.n	80029e2 <__aeabi_fcmpge+0xe>
 80029de:	2000      	movs	r0, #0
 80029e0:	bd10      	pop	{r4, pc}
 80029e2:	2001      	movs	r0, #1
 80029e4:	bd10      	pop	{r4, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)

080029e8 <__clzsi2>:
 80029e8:	211c      	movs	r1, #28
 80029ea:	2301      	movs	r3, #1
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	4298      	cmp	r0, r3
 80029f0:	d301      	bcc.n	80029f6 <__clzsi2+0xe>
 80029f2:	0c00      	lsrs	r0, r0, #16
 80029f4:	3910      	subs	r1, #16
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	4298      	cmp	r0, r3
 80029fa:	d301      	bcc.n	8002a00 <__clzsi2+0x18>
 80029fc:	0a00      	lsrs	r0, r0, #8
 80029fe:	3908      	subs	r1, #8
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	4298      	cmp	r0, r3
 8002a04:	d301      	bcc.n	8002a0a <__clzsi2+0x22>
 8002a06:	0900      	lsrs	r0, r0, #4
 8002a08:	3904      	subs	r1, #4
 8002a0a:	a202      	add	r2, pc, #8	; (adr r2, 8002a14 <__clzsi2+0x2c>)
 8002a0c:	5c10      	ldrb	r0, [r2, r0]
 8002a0e:	1840      	adds	r0, r0, r1
 8002a10:	4770      	bx	lr
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	02020304 	.word	0x02020304
 8002a18:	01010101 	.word	0x01010101
	...

08002a24 <__eqsf2>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	0042      	lsls	r2, r0, #1
 8002a28:	024e      	lsls	r6, r1, #9
 8002a2a:	004c      	lsls	r4, r1, #1
 8002a2c:	0245      	lsls	r5, r0, #9
 8002a2e:	0a6d      	lsrs	r5, r5, #9
 8002a30:	0e12      	lsrs	r2, r2, #24
 8002a32:	0fc3      	lsrs	r3, r0, #31
 8002a34:	0a76      	lsrs	r6, r6, #9
 8002a36:	0e24      	lsrs	r4, r4, #24
 8002a38:	0fc9      	lsrs	r1, r1, #31
 8002a3a:	2aff      	cmp	r2, #255	; 0xff
 8002a3c:	d00f      	beq.n	8002a5e <__eqsf2+0x3a>
 8002a3e:	2cff      	cmp	r4, #255	; 0xff
 8002a40:	d011      	beq.n	8002a66 <__eqsf2+0x42>
 8002a42:	2001      	movs	r0, #1
 8002a44:	42a2      	cmp	r2, r4
 8002a46:	d000      	beq.n	8002a4a <__eqsf2+0x26>
 8002a48:	bd70      	pop	{r4, r5, r6, pc}
 8002a4a:	42b5      	cmp	r5, r6
 8002a4c:	d1fc      	bne.n	8002a48 <__eqsf2+0x24>
 8002a4e:	428b      	cmp	r3, r1
 8002a50:	d00d      	beq.n	8002a6e <__eqsf2+0x4a>
 8002a52:	2a00      	cmp	r2, #0
 8002a54:	d1f8      	bne.n	8002a48 <__eqsf2+0x24>
 8002a56:	0028      	movs	r0, r5
 8002a58:	1e45      	subs	r5, r0, #1
 8002a5a:	41a8      	sbcs	r0, r5
 8002a5c:	e7f4      	b.n	8002a48 <__eqsf2+0x24>
 8002a5e:	2001      	movs	r0, #1
 8002a60:	2d00      	cmp	r5, #0
 8002a62:	d1f1      	bne.n	8002a48 <__eqsf2+0x24>
 8002a64:	e7eb      	b.n	8002a3e <__eqsf2+0x1a>
 8002a66:	2001      	movs	r0, #1
 8002a68:	2e00      	cmp	r6, #0
 8002a6a:	d1ed      	bne.n	8002a48 <__eqsf2+0x24>
 8002a6c:	e7e9      	b.n	8002a42 <__eqsf2+0x1e>
 8002a6e:	2000      	movs	r0, #0
 8002a70:	e7ea      	b.n	8002a48 <__eqsf2+0x24>
 8002a72:	46c0      	nop			; (mov r8, r8)

08002a74 <__gesf2>:
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	004a      	lsls	r2, r1, #1
 8002a78:	024e      	lsls	r6, r1, #9
 8002a7a:	0245      	lsls	r5, r0, #9
 8002a7c:	0044      	lsls	r4, r0, #1
 8002a7e:	0a6d      	lsrs	r5, r5, #9
 8002a80:	0e24      	lsrs	r4, r4, #24
 8002a82:	0fc3      	lsrs	r3, r0, #31
 8002a84:	0a76      	lsrs	r6, r6, #9
 8002a86:	0e12      	lsrs	r2, r2, #24
 8002a88:	0fc9      	lsrs	r1, r1, #31
 8002a8a:	2cff      	cmp	r4, #255	; 0xff
 8002a8c:	d015      	beq.n	8002aba <__gesf2+0x46>
 8002a8e:	2aff      	cmp	r2, #255	; 0xff
 8002a90:	d00e      	beq.n	8002ab0 <__gesf2+0x3c>
 8002a92:	2c00      	cmp	r4, #0
 8002a94:	d115      	bne.n	8002ac2 <__gesf2+0x4e>
 8002a96:	2a00      	cmp	r2, #0
 8002a98:	d101      	bne.n	8002a9e <__gesf2+0x2a>
 8002a9a:	2e00      	cmp	r6, #0
 8002a9c:	d01c      	beq.n	8002ad8 <__gesf2+0x64>
 8002a9e:	2d00      	cmp	r5, #0
 8002aa0:	d014      	beq.n	8002acc <__gesf2+0x58>
 8002aa2:	428b      	cmp	r3, r1
 8002aa4:	d027      	beq.n	8002af6 <__gesf2+0x82>
 8002aa6:	2002      	movs	r0, #2
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	4018      	ands	r0, r3
 8002aac:	3801      	subs	r0, #1
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
 8002ab0:	2e00      	cmp	r6, #0
 8002ab2:	d0ee      	beq.n	8002a92 <__gesf2+0x1e>
 8002ab4:	2002      	movs	r0, #2
 8002ab6:	4240      	negs	r0, r0
 8002ab8:	e7f9      	b.n	8002aae <__gesf2+0x3a>
 8002aba:	2d00      	cmp	r5, #0
 8002abc:	d1fa      	bne.n	8002ab4 <__gesf2+0x40>
 8002abe:	2aff      	cmp	r2, #255	; 0xff
 8002ac0:	d00e      	beq.n	8002ae0 <__gesf2+0x6c>
 8002ac2:	2a00      	cmp	r2, #0
 8002ac4:	d10e      	bne.n	8002ae4 <__gesf2+0x70>
 8002ac6:	2e00      	cmp	r6, #0
 8002ac8:	d0ed      	beq.n	8002aa6 <__gesf2+0x32>
 8002aca:	e00b      	b.n	8002ae4 <__gesf2+0x70>
 8002acc:	2301      	movs	r3, #1
 8002ace:	3901      	subs	r1, #1
 8002ad0:	4399      	bics	r1, r3
 8002ad2:	0008      	movs	r0, r1
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	e7ea      	b.n	8002aae <__gesf2+0x3a>
 8002ad8:	2000      	movs	r0, #0
 8002ada:	2d00      	cmp	r5, #0
 8002adc:	d0e7      	beq.n	8002aae <__gesf2+0x3a>
 8002ade:	e7e2      	b.n	8002aa6 <__gesf2+0x32>
 8002ae0:	2e00      	cmp	r6, #0
 8002ae2:	d1e7      	bne.n	8002ab4 <__gesf2+0x40>
 8002ae4:	428b      	cmp	r3, r1
 8002ae6:	d1de      	bne.n	8002aa6 <__gesf2+0x32>
 8002ae8:	4294      	cmp	r4, r2
 8002aea:	dd05      	ble.n	8002af8 <__gesf2+0x84>
 8002aec:	2102      	movs	r1, #2
 8002aee:	1e58      	subs	r0, r3, #1
 8002af0:	4008      	ands	r0, r1
 8002af2:	3801      	subs	r0, #1
 8002af4:	e7db      	b.n	8002aae <__gesf2+0x3a>
 8002af6:	2400      	movs	r4, #0
 8002af8:	42a2      	cmp	r2, r4
 8002afa:	dc04      	bgt.n	8002b06 <__gesf2+0x92>
 8002afc:	42b5      	cmp	r5, r6
 8002afe:	d8d2      	bhi.n	8002aa6 <__gesf2+0x32>
 8002b00:	2000      	movs	r0, #0
 8002b02:	42b5      	cmp	r5, r6
 8002b04:	d2d3      	bcs.n	8002aae <__gesf2+0x3a>
 8002b06:	1e58      	subs	r0, r3, #1
 8002b08:	2301      	movs	r3, #1
 8002b0a:	4398      	bics	r0, r3
 8002b0c:	3001      	adds	r0, #1
 8002b0e:	e7ce      	b.n	8002aae <__gesf2+0x3a>

08002b10 <__lesf2>:
 8002b10:	b530      	push	{r4, r5, lr}
 8002b12:	0042      	lsls	r2, r0, #1
 8002b14:	0244      	lsls	r4, r0, #9
 8002b16:	024d      	lsls	r5, r1, #9
 8002b18:	0fc3      	lsrs	r3, r0, #31
 8002b1a:	0048      	lsls	r0, r1, #1
 8002b1c:	0a64      	lsrs	r4, r4, #9
 8002b1e:	0e12      	lsrs	r2, r2, #24
 8002b20:	0a6d      	lsrs	r5, r5, #9
 8002b22:	0e00      	lsrs	r0, r0, #24
 8002b24:	0fc9      	lsrs	r1, r1, #31
 8002b26:	2aff      	cmp	r2, #255	; 0xff
 8002b28:	d012      	beq.n	8002b50 <__lesf2+0x40>
 8002b2a:	28ff      	cmp	r0, #255	; 0xff
 8002b2c:	d00c      	beq.n	8002b48 <__lesf2+0x38>
 8002b2e:	2a00      	cmp	r2, #0
 8002b30:	d112      	bne.n	8002b58 <__lesf2+0x48>
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d119      	bne.n	8002b6a <__lesf2+0x5a>
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	d117      	bne.n	8002b6a <__lesf2+0x5a>
 8002b3a:	2c00      	cmp	r4, #0
 8002b3c:	d02b      	beq.n	8002b96 <__lesf2+0x86>
 8002b3e:	2002      	movs	r0, #2
 8002b40:	3b01      	subs	r3, #1
 8002b42:	4018      	ands	r0, r3
 8002b44:	3801      	subs	r0, #1
 8002b46:	e026      	b.n	8002b96 <__lesf2+0x86>
 8002b48:	2d00      	cmp	r5, #0
 8002b4a:	d0f0      	beq.n	8002b2e <__lesf2+0x1e>
 8002b4c:	2002      	movs	r0, #2
 8002b4e:	e022      	b.n	8002b96 <__lesf2+0x86>
 8002b50:	2c00      	cmp	r4, #0
 8002b52:	d1fb      	bne.n	8002b4c <__lesf2+0x3c>
 8002b54:	28ff      	cmp	r0, #255	; 0xff
 8002b56:	d01f      	beq.n	8002b98 <__lesf2+0x88>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d11f      	bne.n	8002b9c <__lesf2+0x8c>
 8002b5c:	2d00      	cmp	r5, #0
 8002b5e:	d11d      	bne.n	8002b9c <__lesf2+0x8c>
 8002b60:	2002      	movs	r0, #2
 8002b62:	3b01      	subs	r3, #1
 8002b64:	4018      	ands	r0, r3
 8002b66:	3801      	subs	r0, #1
 8002b68:	e015      	b.n	8002b96 <__lesf2+0x86>
 8002b6a:	2c00      	cmp	r4, #0
 8002b6c:	d00e      	beq.n	8002b8c <__lesf2+0x7c>
 8002b6e:	428b      	cmp	r3, r1
 8002b70:	d1e5      	bne.n	8002b3e <__lesf2+0x2e>
 8002b72:	2200      	movs	r2, #0
 8002b74:	4290      	cmp	r0, r2
 8002b76:	dc04      	bgt.n	8002b82 <__lesf2+0x72>
 8002b78:	42ac      	cmp	r4, r5
 8002b7a:	d8e0      	bhi.n	8002b3e <__lesf2+0x2e>
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	42ac      	cmp	r4, r5
 8002b80:	d209      	bcs.n	8002b96 <__lesf2+0x86>
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	2301      	movs	r3, #1
 8002b86:	4398      	bics	r0, r3
 8002b88:	3001      	adds	r0, #1
 8002b8a:	e004      	b.n	8002b96 <__lesf2+0x86>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	3901      	subs	r1, #1
 8002b90:	4399      	bics	r1, r3
 8002b92:	0008      	movs	r0, r1
 8002b94:	3001      	adds	r0, #1
 8002b96:	bd30      	pop	{r4, r5, pc}
 8002b98:	2d00      	cmp	r5, #0
 8002b9a:	d1d7      	bne.n	8002b4c <__lesf2+0x3c>
 8002b9c:	428b      	cmp	r3, r1
 8002b9e:	d1ce      	bne.n	8002b3e <__lesf2+0x2e>
 8002ba0:	4282      	cmp	r2, r0
 8002ba2:	dde7      	ble.n	8002b74 <__lesf2+0x64>
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	4008      	ands	r0, r1
 8002baa:	3801      	subs	r0, #1
 8002bac:	e7f3      	b.n	8002b96 <__lesf2+0x86>
 8002bae:	46c0      	nop			; (mov r8, r8)

08002bb0 <HAL_SPI_TxCpltCallback>:

static bool checkIfConnectedRpi(void);

// This is called when SPI transmit is done
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	if (SPI2 == hspi->Instance)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_SPI_TxCpltCallback+0x20>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d102      	bne.n	8002bc8 <HAL_SPI_TxCpltCallback+0x18>
	{
		spi_tx_done = true;
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <HAL_SPI_TxCpltCallback+0x24>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
	}
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40003800 	.word	0x40003800
 8002bd4:	20000232 	.word	0x20000232

08002bd8 <HAL_SPI_RxCpltCallback>:

// This is called when SPI receive is done
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	if (SPI2 == hspi->Instance)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <HAL_SPI_RxCpltCallback+0x20>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d102      	bne.n	8002bf0 <HAL_SPI_RxCpltCallback+0x18>
	{
		spi_rx_done = true;
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_SPI_RxCpltCallback+0x24>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
	}
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40003800 	.word	0x40003800
 8002bfc:	20000233 	.word	0x20000233

08002c00 <SPI_getState>:

SPI_State SPI_getState()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	return SPI_SM_State;
 8002c04:	4b02      	ldr	r3, [pc, #8]	; (8002c10 <SPI_getState+0x10>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
}
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	20000218 	.word	0x20000218

08002c14 <SPI_Config>:

bool SPI_Config()
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
	bool spi_config_success = false;
 8002c1a:	231f      	movs	r3, #31
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
	if (SPI_OFF == SPI_SM_State)
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <SPI_Config+0x10c>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d172      	bne.n	8002d10 <SPI_Config+0xfc>
	{
		//SPI2 CLK ENABLE
		__HAL_RCC_SPI2_CLK_ENABLE();
 8002c2a:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <SPI_Config+0x110>)
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <SPI_Config+0x110>)
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	01c9      	lsls	r1, r1, #7
 8002c34:	430a      	orrs	r2, r1
 8002c36:	61da      	str	r2, [r3, #28]
 8002c38:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <SPI_Config+0x110>)
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	01db      	lsls	r3, r3, #7
 8002c40:	4013      	ands	r3, r2
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]

		//SCLK, MOSI
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <SPI_Config+0x110>)
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <SPI_Config+0x110>)
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	02c9      	lsls	r1, r1, #11
 8002c50:	430a      	orrs	r2, r1
 8002c52:	615a      	str	r2, [r3, #20]
 8002c54:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <SPI_Config+0x110>)
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	02db      	lsls	r3, r3, #11
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]

		GPIO_InitTypeDef gpio;
		gpio.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; //SCLK, MISO, MOSI
 8002c62:	2108      	movs	r1, #8
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	22e0      	movs	r2, #224	; 0xe0
 8002c68:	0212      	lsls	r2, r2, #8
 8002c6a:	601a      	str	r2, [r3, #0]
		gpio.Mode = GPIO_MODE_AF_PP;
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	2202      	movs	r2, #2
 8002c70:	605a      	str	r2, [r3, #4]
		gpio.Pull = GPIO_NOPULL;
 8002c72:	187b      	adds	r3, r7, r1
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
		gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	60da      	str	r2, [r3, #12]
		gpio.Alternate = GPIO_AF0_SPI2;
 8002c7e:	187b      	adds	r3, r7, r1
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOB, &gpio);
 8002c84:	187b      	adds	r3, r7, r1
 8002c86:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <SPI_Config+0x114>)
 8002c88:	0019      	movs	r1, r3
 8002c8a:	0010      	movs	r0, r2
 8002c8c:	f002 fa66 	bl	800515c <HAL_GPIO_Init>


		//SPI configuration
		hspi2.Instance = SPI2;
 8002c90:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <SPI_Config+0x118>)
 8002c92:	4a27      	ldr	r2, [pc, #156]	; (8002d30 <SPI_Config+0x11c>)
 8002c94:	601a      	str	r2, [r3, #0]
		hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002c96:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <SPI_Config+0x118>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	605a      	str	r2, [r3, #4]
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <SPI_Config+0x118>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
		hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <SPI_Config+0x118>)
 8002ca4:	22e0      	movs	r2, #224	; 0xe0
 8002ca6:	00d2      	lsls	r2, r2, #3
 8002ca8:	60da      	str	r2, [r3, #12]
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <SPI_Config+0x118>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
		hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <SPI_Config+0x118>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	615a      	str	r2, [r3, #20]
		hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <SPI_Config+0x118>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;// 1.5MHz
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <SPI_Config+0x118>)
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	61da      	str	r2, [r3, #28]
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <SPI_Config+0x118>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	621a      	str	r2, [r3, #32]
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <SPI_Config+0x118>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <SPI_Config+0x118>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
		hspi2.Init.CRCPolynomial = 7;
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <SPI_Config+0x118>)
 8002cd6:	2207      	movs	r2, #7
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c
		hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <SPI_Config+0x118>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
		hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <SPI_Config+0x118>)
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	635a      	str	r2, [r3, #52]	; 0x34

		/* SPI2 interrupt Init */
		HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2101      	movs	r1, #1
 8002cea:	201a      	movs	r0, #26
 8002cec:	f002 f826 	bl	8004d3c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002cf0:	201a      	movs	r0, #26
 8002cf2:	f002 f838 	bl	8004d66 <HAL_NVIC_EnableIRQ>

		if (HAL_SPI_Init(&hspi2) == HAL_OK)
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <SPI_Config+0x118>)
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f003 fc91 	bl	8006620 <HAL_SPI_Init>
 8002cfe:	1e03      	subs	r3, r0, #0
 8002d00:	d106      	bne.n	8002d10 <SPI_Config+0xfc>
		{
			SPI_SM_State = SPI_INIT;
 8002d02:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <SPI_Config+0x10c>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
			spi_config_success = true;
 8002d08:	231f      	movs	r3, #31
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	701a      	strb	r2, [r3, #0]
		}
	}
	return spi_config_success;
 8002d10:	231f      	movs	r3, #31
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	781b      	ldrb	r3, [r3, #0]
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b008      	add	sp, #32
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	20000218 	.word	0x20000218
 8002d24:	40021000 	.word	0x40021000
 8002d28:	48000400 	.word	0x48000400
 8002d2c:	200002b8 	.word	0x200002b8
 8002d30:	40003800 	.word	0x40003800

08002d34 <SPI_Init>:

void SPI_Init()
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
	if (!spi_commEstablished)
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <SPI_Init+0x2c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4053      	eors	r3, r2
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <SPI_Init+0x24>
	{
		SPI_SM_State = SPI_RX;
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <SPI_Init+0x30>)
 8002d48:	2203      	movs	r2, #3
 8002d4a:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Receive_IT(&hspi2, spi_rx_buff, SPI_RX_BUFF_SIZE);
 8002d4c:	4906      	ldr	r1, [pc, #24]	; (8002d68 <SPI_Init+0x34>)
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <SPI_Init+0x38>)
 8002d50:	220a      	movs	r2, #10
 8002d52:	0018      	movs	r0, r3
 8002d54:	f003 fd98 	bl	8006888 <HAL_SPI_Receive_IT>
	}
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	20000234 	.word	0x20000234
 8002d64:	20000218 	.word	0x20000218
 8002d68:	20000228 	.word	0x20000228
 8002d6c:	200002b8 	.word	0x200002b8

08002d70 <SPI_PrepareSensorDataTransmit>:

bool SPI_PrepareSensorDataTransmit(SPI_TxSensorData *txData)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	if (SPI_SM_State == SPI_IDLE && spi_commEstablished)
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <SPI_PrepareSensorDataTransmit+0x44>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d114      	bne.n	8002daa <SPI_PrepareSensorDataTransmit+0x3a>
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <SPI_PrepareSensorDataTransmit+0x48>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <SPI_PrepareSensorDataTransmit+0x3a>
	{
		memcpy((uint8_t*)txData, spi_tx_buff, sizeof(SPI_TxSensorData));
 8002d88:	490c      	ldr	r1, [pc, #48]	; (8002dbc <SPI_PrepareSensorDataTransmit+0x4c>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2205      	movs	r2, #5
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f005 ffe4 	bl	8008d5c <memcpy>
		SPI_SM_State = SPI_TX;
 8002d94:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <SPI_PrepareSensorDataTransmit+0x44>)
 8002d96:	2205      	movs	r2, #5
 8002d98:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_IT(&hspi2, spi_tx_buff, SPI_TX_BUFF_SIZE);
 8002d9a:	4908      	ldr	r1, [pc, #32]	; (8002dbc <SPI_PrepareSensorDataTransmit+0x4c>)
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <SPI_PrepareSensorDataTransmit+0x50>)
 8002d9e:	220a      	movs	r2, #10
 8002da0:	0018      	movs	r0, r3
 8002da2:	f003 fcdf 	bl	8006764 <HAL_SPI_Transmit_IT>
		return true;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <SPI_PrepareSensorDataTransmit+0x3c>
	}
	return false;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000218 	.word	0x20000218
 8002db8:	20000234 	.word	0x20000234
 8002dbc:	2000021c 	.word	0x2000021c
 8002dc0:	200002b8 	.word	0x200002b8

08002dc4 <SPI_ReadTransmitData>:
	}
	return false;
}

bool SPI_ReadTransmitData(SPI_RxDateTime *rxData)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	if (SPI_SM_State == SPI_RX_DATA_AVAILABLE)
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <SPI_ReadTransmitData+0x30>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d10a      	bne.n	8002dea <SPI_ReadTransmitData+0x26>
	{
		memcpy((uint8_t*)rxData, spi_rx_buff, sizeof(SPI_RxDateTime));
 8002dd4:	4908      	ldr	r1, [pc, #32]	; (8002df8 <SPI_ReadTransmitData+0x34>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2208      	movs	r2, #8
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f005 ffbe 	bl	8008d5c <memcpy>
		//only after data was read the state changes to idle again and enables starting next read
		SPI_SM_State = SPI_IDLE;
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <SPI_ReadTransmitData+0x30>)
 8002de2:	2202      	movs	r2, #2
 8002de4:	701a      	strb	r2, [r3, #0]
		return true;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <SPI_ReadTransmitData+0x28>
	}
	return false;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b002      	add	sp, #8
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000218 	.word	0x20000218
 8002df8:	20000228 	.word	0x20000228

08002dfc <SPI_RequestDateTimeFromRpi>:

bool SPI_RequestDateTimeFromRpi()
{
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
	if (SPI_SM_State == SPI_IDLE && spi_commEstablished)
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <SPI_RequestDateTimeFromRpi+0x4c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d11b      	bne.n	8002e40 <SPI_RequestDateTimeFromRpi+0x44>
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <SPI_RequestDateTimeFromRpi+0x50>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d017      	beq.n	8002e40 <SPI_RequestDateTimeFromRpi+0x44>
	{
		memcpy(spi_commands[RPI_GET_DATE_TIME], spi_tx_buff,
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <SPI_RequestDateTimeFromRpi+0x54>)
 8002e12:	689c      	ldr	r4, [r3, #8]
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <SPI_RequestDateTimeFromRpi+0x54>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7fd f975 	bl	8000108 <strlen>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <SPI_RequestDateTimeFromRpi+0x58>)
 8002e22:	0019      	movs	r1, r3
 8002e24:	0020      	movs	r0, r4
 8002e26:	f005 ff99 	bl	8008d5c <memcpy>
			strlen(spi_commands[RPI_GET_DATE_TIME]));
		SPI_SM_State = SPI_TX;
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <SPI_RequestDateTimeFromRpi+0x4c>)
 8002e2c:	2205      	movs	r2, #5
 8002e2e:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_IT(&hspi2, spi_tx_buff, SPI_TX_BUFF_SIZE);
 8002e30:	4908      	ldr	r1, [pc, #32]	; (8002e54 <SPI_RequestDateTimeFromRpi+0x58>)
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <SPI_RequestDateTimeFromRpi+0x5c>)
 8002e34:	220a      	movs	r2, #10
 8002e36:	0018      	movs	r0, r3
 8002e38:	f003 fc94 	bl	8006764 <HAL_SPI_Transmit_IT>
		return true;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <SPI_RequestDateTimeFromRpi+0x46>
	}
	return false;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bdb0      	pop	{r4, r5, r7, pc}
 8002e48:	20000218 	.word	0x20000218
 8002e4c:	20000234 	.word	0x20000234
 8002e50:	20000000 	.word	0x20000000
 8002e54:	2000021c 	.word	0x2000021c
 8002e58:	200002b8 	.word	0x200002b8

08002e5c <SPI_CommSM>:

void SPI_CommSM() // called cyclicly in main
{
 8002e5c:	b5b0      	push	{r4, r5, r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
	switch(SPI_SM_State)
 8002e60:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <SPI_CommSM+0xb8>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d008      	beq.n	8002e7a <SPI_CommSM+0x1e>
 8002e68:	dc02      	bgt.n	8002e70 <SPI_CommSM+0x14>
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d048      	beq.n	8002f00 <SPI_CommSM+0xa4>
				SPI_SM_State = SPI_IDLE;
				spi_tx_done = false;
			}
			break;
		default:
			break;
 8002e6e:	e04e      	b.n	8002f0e <SPI_CommSM+0xb2>
	switch(SPI_SM_State)
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d047      	beq.n	8002f04 <SPI_CommSM+0xa8>
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d037      	beq.n	8002ee8 <SPI_CommSM+0x8c>
			break;
 8002e78:	e049      	b.n	8002f0e <SPI_CommSM+0xb2>
			if (spi_rx_done)
 8002e7a:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <SPI_CommSM+0xbc>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d041      	beq.n	8002f08 <SPI_CommSM+0xac>
				spi_rx_done = false;
 8002e84:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <SPI_CommSM+0xbc>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
				if (!spi_commEstablished)
 8002e8a:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <SPI_CommSM+0xc0>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4053      	eors	r3, r2
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d023      	beq.n	8002ee0 <SPI_CommSM+0x84>
					SPI_SM_State = SPI_IDLE;
 8002e98:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <SPI_CommSM+0xb8>)
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	701a      	strb	r2, [r3, #0]
					spi_commEstablished = checkIfConnectedRpi();
 8002e9e:	f000 f847 	bl	8002f30 <checkIfConnectedRpi>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <SPI_CommSM+0xc0>)
 8002ea8:	701a      	strb	r2, [r3, #0]
					if (spi_commEstablished)
 8002eaa:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <SPI_CommSM+0xc0>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d02a      	beq.n	8002f08 <SPI_CommSM+0xac>
						SPI_SM_State = SPI_TX;
 8002eb2:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <SPI_CommSM+0xb8>)
 8002eb4:	2205      	movs	r2, #5
 8002eb6:	701a      	strb	r2, [r3, #0]
						memcpy(spi_commands[STM_CONNECTED_ACK], spi_tx_buff,
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <SPI_CommSM+0xc4>)
 8002eba:	685c      	ldr	r4, [r3, #4]
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <SPI_CommSM+0xc4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7fd f921 	bl	8000108 <strlen>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <SPI_CommSM+0xc8>)
 8002eca:	0019      	movs	r1, r3
 8002ecc:	0020      	movs	r0, r4
 8002ece:	f005 ff45 	bl	8008d5c <memcpy>
						HAL_SPI_Transmit_IT(&hspi2, spi_tx_buff, SPI_TX_BUFF_SIZE);
 8002ed2:	4914      	ldr	r1, [pc, #80]	; (8002f24 <SPI_CommSM+0xc8>)
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <SPI_CommSM+0xcc>)
 8002ed6:	220a      	movs	r2, #10
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f003 fc43 	bl	8006764 <HAL_SPI_Transmit_IT>
			break;
 8002ede:	e013      	b.n	8002f08 <SPI_CommSM+0xac>
					SPI_SM_State = SPI_RX_DATA_AVAILABLE;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <SPI_CommSM+0xb8>)
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	701a      	strb	r2, [r3, #0]
			break;
 8002ee6:	e00f      	b.n	8002f08 <SPI_CommSM+0xac>
			if (spi_tx_done)
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <SPI_CommSM+0xd0>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00c      	beq.n	8002f0c <SPI_CommSM+0xb0>
				SPI_SM_State = SPI_IDLE;
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <SPI_CommSM+0xb8>)
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	701a      	strb	r2, [r3, #0]
				spi_tx_done = false;
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <SPI_CommSM+0xd0>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
			break;
 8002efe:	e005      	b.n	8002f0c <SPI_CommSM+0xb0>
			break;
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	e004      	b.n	8002f0e <SPI_CommSM+0xb2>
			break;
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	e002      	b.n	8002f0e <SPI_CommSM+0xb2>
			break;
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	e000      	b.n	8002f0e <SPI_CommSM+0xb2>
			break;
 8002f0c:	46c0      	nop			; (mov r8, r8)
	}
}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bdb0      	pop	{r4, r5, r7, pc}
 8002f14:	20000218 	.word	0x20000218
 8002f18:	20000233 	.word	0x20000233
 8002f1c:	20000234 	.word	0x20000234
 8002f20:	20000000 	.word	0x20000000
 8002f24:	2000021c 	.word	0x2000021c
 8002f28:	200002b8 	.word	0x200002b8
 8002f2c:	20000232 	.word	0x20000232

08002f30 <checkIfConnectedRpi>:

static bool checkIfConnectedRpi(void)
{
 8002f30:	b5b0      	push	{r4, r5, r7, lr}
 8002f32:	af00      	add	r7, sp, #0
	if (!spi_commEstablished)
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <checkIfConnectedRpi+0x40>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	4053      	eors	r3, r2
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <checkIfConnectedRpi+0x34>
	{
		if (strncmp(spi_tx_buff, spi_commands[RPI_INIT],
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <checkIfConnectedRpi+0x44>)
 8002f44:	681c      	ldr	r4, [r3, #0]
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <checkIfConnectedRpi+0x44>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f7fd f8dc 	bl	8000108 <strlen>
 8002f50:	0002      	movs	r2, r0
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <checkIfConnectedRpi+0x48>)
 8002f54:	0021      	movs	r1, r4
 8002f56:	0018      	movs	r0, r3
 8002f58:	f006 fb90 	bl	800967c <strncmp>
 8002f5c:	1e03      	subs	r3, r0, #0
 8002f5e:	d003      	beq.n	8002f68 <checkIfConnectedRpi+0x38>
			strlen(spi_commands[RPI_INIT])))
		{
			return true;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e002      	b.n	8002f6a <checkIfConnectedRpi+0x3a>
		}
	}
	else
	{
		return true;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <checkIfConnectedRpi+0x3a>
	}
	return false;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f70:	20000234 	.word	0x20000234
 8002f74:	20000000 	.word	0x20000000
 8002f78:	2000021c 	.word	0x2000021c

08002f7c <DHT11__delayMicroSec>:
static bool DHT11__initTimer(TIM_TypeDef *timerID);
static bool DHT11__CheckResponse(void);


static void DHT11__delayMicroSec(uint16_t time)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	0002      	movs	r2, r0
 8002f84:	1dbb      	adds	r3, r7, #6
 8002f86:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&dht11Timer, 0);
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <DHT11__delayMicroSec+0x2c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&dht11Timer) < time)
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <DHT11__delayMicroSec+0x2c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f98:	1dbb      	adds	r3, r7, #6
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d3f8      	bcc.n	8002f92 <DHT11__delayMicroSec+0x16>
	{

	}
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000238 	.word	0x20000238

08002fac <DHT11__SetDataPin>:

static void DHT11__SetDataPin(GPIO_TypeDef* GPIO_PORT, uint16_t GPIO_Pin)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	000a      	movs	r2, r1
 8002fb6:	1cbb      	adds	r3, r7, #2
 8002fb8:	801a      	strh	r2, [r3, #0]
	DHT11_GPIO_PORT = GPIO_PORT;
 8002fba:	4b22      	ldr	r3, [pc, #136]	; (8003044 <DHT11__SetDataPin+0x98>)
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	601a      	str	r2, [r3, #0]
	DHT11_GPIO_PIN = GPIO_Pin;
 8002fc0:	4b21      	ldr	r3, [pc, #132]	; (8003048 <DHT11__SetDataPin+0x9c>)
 8002fc2:	1cba      	adds	r2, r7, #2
 8002fc4:	8812      	ldrh	r2, [r2, #0]
 8002fc6:	801a      	strh	r2, [r3, #0]
	if(GPIO_PORT == GPIOA)
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	2390      	movs	r3, #144	; 0x90
 8002fcc:	05db      	lsls	r3, r3, #23
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d10e      	bne.n	8002ff0 <DHT11__SetDataPin+0x44>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <DHT11__SetDataPin+0xa0>)
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <DHT11__SetDataPin+0xa0>)
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	0289      	lsls	r1, r1, #10
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	615a      	str	r2, [r3, #20]
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <DHT11__SetDataPin+0xa0>)
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	029b      	lsls	r3, r3, #10
 8002fe8:	4013      	ands	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]
	}
	else if(GPIO_PORT == GPIOC)
	{
		__HAL_RCC_GPIOC_CLK_ENABLE();
	}
}
 8002fee:	e024      	b.n	800303a <DHT11__SetDataPin+0x8e>
	else if(GPIO_PORT == GPIOB)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <DHT11__SetDataPin+0xa4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d10e      	bne.n	8003016 <DHT11__SetDataPin+0x6a>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <DHT11__SetDataPin+0xa0>)
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <DHT11__SetDataPin+0xa0>)
 8002ffe:	2180      	movs	r1, #128	; 0x80
 8003000:	02c9      	lsls	r1, r1, #11
 8003002:	430a      	orrs	r2, r1
 8003004:	615a      	str	r2, [r3, #20]
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <DHT11__SetDataPin+0xa0>)
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	02db      	lsls	r3, r3, #11
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693b      	ldr	r3, [r7, #16]
}
 8003014:	e011      	b.n	800303a <DHT11__SetDataPin+0x8e>
	else if(GPIO_PORT == GPIOC)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <DHT11__SetDataPin+0xa8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10d      	bne.n	800303a <DHT11__SetDataPin+0x8e>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800301e:	4b0b      	ldr	r3, [pc, #44]	; (800304c <DHT11__SetDataPin+0xa0>)
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	4b0a      	ldr	r3, [pc, #40]	; (800304c <DHT11__SetDataPin+0xa0>)
 8003024:	2180      	movs	r1, #128	; 0x80
 8003026:	0309      	lsls	r1, r1, #12
 8003028:	430a      	orrs	r2, r1
 800302a:	615a      	str	r2, [r3, #20]
 800302c:	4b07      	ldr	r3, [pc, #28]	; (800304c <DHT11__SetDataPin+0xa0>)
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	031b      	lsls	r3, r3, #12
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b006      	add	sp, #24
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	20000278 	.word	0x20000278
 8003048:	20000010 	.word	0x20000010
 800304c:	40021000 	.word	0x40021000
 8003050:	48000400 	.word	0x48000400
 8003054:	48000800 	.word	0x48000800

08003058 <DHT11__initTimer>:

static bool DHT11__initTimer(TIM_TypeDef *timerID)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	bool timerInitSuccess = false;
 8003060:	230f      	movs	r3, #15
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]

	dht11Timer.Instance = timerID;
 8003068:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <DHT11__initTimer+0x58>)
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	601a      	str	r2, [r3, #0]
	dht11Timer.Init.Prescaler = 48 - 1; //base is 48Mhz so 1Mhz - 1 tick is 1 microsecond
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <DHT11__initTimer+0x58>)
 8003070:	222f      	movs	r2, #47	; 0x2f
 8003072:	605a      	str	r2, [r3, #4]
	dht11Timer.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <DHT11__initTimer+0x58>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
	dht11Timer.Init.Period = 0xFFFF - 1;
 800307a:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <DHT11__initTimer+0x58>)
 800307c:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <DHT11__initTimer+0x5c>)
 800307e:	60da      	str	r2, [r3, #12]
	dht11Timer.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <DHT11__initTimer+0x58>)
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
	dht11Timer.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <DHT11__initTimer+0x58>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
	if (HAL_OK == HAL_TIM_Base_Init(&dht11Timer))
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <DHT11__initTimer+0x58>)
 800308e:	0018      	movs	r0, r3
 8003090:	f004 fa8d 	bl	80075ae <HAL_TIM_Base_Init>
 8003094:	1e03      	subs	r3, r0, #0
 8003096:	d103      	bne.n	80030a0 <DHT11__initTimer+0x48>
	{
		timerInitSuccess = true;
 8003098:	230f      	movs	r3, #15
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]
	}
	return timerInitSuccess;
 80030a0:	230f      	movs	r3, #15
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	781b      	ldrb	r3, [r3, #0]
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b004      	add	sp, #16
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	20000238 	.word	0x20000238
 80030b4:	0000fffe 	.word	0x0000fffe

080030b8 <DHT11__CheckResponse>:

static bool DHT11__CheckResponse(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
	bool success = false;
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
	//check the response - wait 40us
	DHT11__delayMicroSec(40);
 80030c4:	2028      	movs	r0, #40	; 0x28
 80030c6:	f7ff ff59 	bl	8002f7c <DHT11__delayMicroSec>
	//read the pin - it should be low at this point
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN))
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <DHT11__CheckResponse+0x6c>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <DHT11__CheckResponse+0x70>)
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	0019      	movs	r1, r3
 80030d4:	0010      	movs	r0, r2
 80030d6:	f002 f9b1 	bl	800543c <HAL_GPIO_ReadPin>
 80030da:	1e03      	subs	r3, r0, #0
 80030dc:	d11c      	bne.n	8003118 <DHT11__CheckResponse+0x60>
	{
		//wait for 80us
		DHT11__delayMicroSec(80);
 80030de:	2050      	movs	r0, #80	; 0x50
 80030e0:	f7ff ff4c 	bl	8002f7c <DHT11__delayMicroSec>
		//after this time the pin should be high
		if (GPIO_PIN_SET == HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN))
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <DHT11__CheckResponse+0x6c>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <DHT11__CheckResponse+0x70>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	0019      	movs	r1, r3
 80030ee:	0010      	movs	r0, r2
 80030f0:	f002 f9a4 	bl	800543c <HAL_GPIO_ReadPin>
 80030f4:	0003      	movs	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d10e      	bne.n	8003118 <DHT11__CheckResponse+0x60>
		{
			//sensor is present return true
			success = true;
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
			while (GPIO_PIN_SET == HAL_GPIO_ReadPin (DHT11_GPIO_PORT, DHT11_GPIO_PIN));
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <DHT11__CheckResponse+0x6c>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <DHT11__CheckResponse+0x70>)
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	0019      	movs	r1, r3
 800310c:	0010      	movs	r0, r2
 800310e:	f002 f995 	bl	800543c <HAL_GPIO_ReadPin>
 8003112:	0003      	movs	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d0f4      	beq.n	8003102 <DHT11__CheckResponse+0x4a>
		}
	}
	return success;
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	781b      	ldrb	r3, [r3, #0]
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000278 	.word	0x20000278
 8003128:	20000010 	.word	0x20000010

0800312c <DHT11_Init>:


}

bool DHT11_Init(GPIO_TypeDef* GPIO_PORT, uint16_t GPIO_Pin, TIM_TypeDef *timerID)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	230a      	movs	r3, #10
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	1c0a      	adds	r2, r1, #0
 800313c:	801a      	strh	r2, [r3, #0]
	if (false == DHT11__Initalized)
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <DHT11_Init+0x5c>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2201      	movs	r2, #1
 8003144:	4053      	eors	r3, r2
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d017      	beq.n	800317c <DHT11_Init+0x50>
	{
		DHT11__SetDataPin(GPIO_PORT, GPIO_Pin);
 800314c:	240a      	movs	r4, #10
 800314e:	193b      	adds	r3, r7, r4
 8003150:	881a      	ldrh	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0011      	movs	r1, r2
 8003156:	0018      	movs	r0, r3
 8003158:	f7ff ff28 	bl	8002fac <DHT11__SetDataPin>
		if ((GPIO_Pin != 0xFF) && (NULL != GPIO_PORT))
 800315c:	193b      	adds	r3, r7, r4
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	2bff      	cmp	r3, #255	; 0xff
 8003162:	d00b      	beq.n	800317c <DHT11_Init+0x50>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <DHT11_Init+0x50>
		{
			if (DHT11__initTimer(timerID))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	0018      	movs	r0, r3
 800316e:	f7ff ff73 	bl	8003058 <DHT11__initTimer>
 8003172:	1e03      	subs	r3, r0, #0
 8003174:	d002      	beq.n	800317c <DHT11_Init+0x50>
			{
				DHT11__Initalized = true;
 8003176:	4b04      	ldr	r3, [pc, #16]	; (8003188 <DHT11_Init+0x5c>)
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return DHT11__Initalized;
 800317c:	4b02      	ldr	r3, [pc, #8]	; (8003188 <DHT11_Init+0x5c>)
 800317e:	781b      	ldrb	r3, [r3, #0]
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b005      	add	sp, #20
 8003186:	bd90      	pop	{r4, r7, pc}
 8003188:	2000027c 	.word	0x2000027c

0800318c <DHT11_ReadDHT11Data>:

bool DHT11_ReadDHT11Data(DHT11_Data *sensorData)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b08b      	sub	sp, #44	; 0x2c
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	bool dataReadSuccess = false;
 8003194:	2324      	movs	r3, #36	; 0x24
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
	if (true == DHT11__Initalized)
 800319c:	4b6e      	ldr	r3, [pc, #440]	; (8003358 <DHT11_ReadDHT11Data+0x1cc>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d100      	bne.n	80031a6 <DHT11_ReadDHT11Data+0x1a>
 80031a4:	e0d1      	b.n	800334a <DHT11_ReadDHT11Data+0x1be>
	{
		HAL_TIM_Base_Start(&dht11Timer);
 80031a6:	4b6d      	ldr	r3, [pc, #436]	; (800335c <DHT11_ReadDHT11Data+0x1d0>)
 80031a8:	0018      	movs	r0, r3
 80031aa:	f004 fa2c 	bl	8007606 <HAL_TIM_Base_Start>
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ae:	2410      	movs	r4, #16
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	0018      	movs	r0, r3
 80031b4:	2314      	movs	r3, #20
 80031b6:	001a      	movs	r2, r3
 80031b8:	2100      	movs	r1, #0
 80031ba:	f005 fdd8 	bl	8008d6e <memset>

		GPIO_InitStruct.Pin = DHT11_GPIO_PIN;
 80031be:	4b68      	ldr	r3, [pc, #416]	; (8003360 <DHT11_ReadDHT11Data+0x1d4>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	001a      	movs	r2, r3
 80031c4:	193b      	adds	r3, r7, r4
 80031c6:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c8:	193b      	adds	r3, r7, r4
 80031ca:	2201      	movs	r2, #1
 80031cc:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	2203      	movs	r2, #3
 80031d8:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(DHT11_GPIO_PORT, &GPIO_InitStruct);
 80031da:	4b62      	ldr	r3, [pc, #392]	; (8003364 <DHT11_ReadDHT11Data+0x1d8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	193a      	adds	r2, r7, r4
 80031e0:	0011      	movs	r1, r2
 80031e2:	0018      	movs	r0, r3
 80031e4:	f001 ffba 	bl	800515c <HAL_GPIO_Init>
		//set pin low and wait 18ms
		HAL_GPIO_WritePin(DHT11_GPIO_PORT, DHT11_GPIO_PIN, GPIO_PIN_RESET);
 80031e8:	4b5e      	ldr	r3, [pc, #376]	; (8003364 <DHT11_ReadDHT11Data+0x1d8>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	4b5c      	ldr	r3, [pc, #368]	; (8003360 <DHT11_ReadDHT11Data+0x1d4>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	2200      	movs	r2, #0
 80031f2:	0019      	movs	r1, r3
 80031f4:	f002 f93f 	bl	8005476 <HAL_GPIO_WritePin>
		HAL_Delay(18);
 80031f8:	2012      	movs	r0, #18
 80031fa:	f001 f901 	bl	8004400 <HAL_Delay>
		//release the pin  - set as input
		HAL_GPIO_WritePin(DHT11_GPIO_PORT, DHT11_GPIO_PIN, GPIO_PIN_SET);
 80031fe:	4b59      	ldr	r3, [pc, #356]	; (8003364 <DHT11_ReadDHT11Data+0x1d8>)
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	4b57      	ldr	r3, [pc, #348]	; (8003360 <DHT11_ReadDHT11Data+0x1d4>)
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	2201      	movs	r2, #1
 8003208:	0019      	movs	r1, r3
 800320a:	f002 f934 	bl	8005476 <HAL_GPIO_WritePin>
		DHT11__delayMicroSec(20);
 800320e:	2014      	movs	r0, #20
 8003210:	f7ff feb4 	bl	8002f7c <DHT11__delayMicroSec>
		GPIO_InitStruct.Pin = DHT11_GPIO_PIN;
 8003214:	4b52      	ldr	r3, [pc, #328]	; (8003360 <DHT11_ReadDHT11Data+0x1d4>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	001a      	movs	r2, r3
 800321a:	0021      	movs	r1, r4
 800321c:	187b      	adds	r3, r7, r1
 800321e:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003220:	187b      	adds	r3, r7, r1
 8003222:	2200      	movs	r2, #0
 8003224:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	187b      	adds	r3, r7, r1
 8003228:	2200      	movs	r2, #0
 800322a:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800322c:	187b      	adds	r3, r7, r1
 800322e:	2203      	movs	r2, #3
 8003230:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(DHT11_GPIO_PORT, &GPIO_InitStruct);
 8003232:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <DHT11_ReadDHT11Data+0x1d8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	187a      	adds	r2, r7, r1
 8003238:	0011      	movs	r1, r2
 800323a:	0018      	movs	r0, r3
 800323c:	f001 ff8e 	bl	800515c <HAL_GPIO_Init>

		DHT11__Initalized = DHT11__CheckResponse();
 8003240:	f7ff ff3a 	bl	80030b8 <DHT11__CheckResponse>
 8003244:	0003      	movs	r3, r0
 8003246:	001a      	movs	r2, r3
 8003248:	4b43      	ldr	r3, [pc, #268]	; (8003358 <DHT11_ReadDHT11Data+0x1cc>)
 800324a:	701a      	strb	r2, [r3, #0]

		uint8_t data[DHT11_DATA_SIZE]; // [PRESINT, PRESDEC, TEMPINT, TEMPDEC, CHECKSUM]
		uint8_t readData = 0;
 800324c:	2327      	movs	r3, #39	; 0x27
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
		for (uint8_t byteNum = 0; byteNum < DHT11_DATA_SIZE; byteNum++)
 8003254:	2326      	movs	r3, #38	; 0x26
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e057      	b.n	800330e <DHT11_ReadDHT11Data+0x182>
		{
			for (uint8_t bitNum = 0; bitNum < 8; bitNum++)
 800325e:	2325      	movs	r3, #37	; 0x25
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e03c      	b.n	80032e2 <DHT11_ReadDHT11Data+0x156>
			{
				while (GPIO_PIN_SET != HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN))
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <DHT11_ReadDHT11Data+0x1d8>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b3c      	ldr	r3, [pc, #240]	; (8003360 <DHT11_ReadDHT11Data+0x1d4>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	0019      	movs	r1, r3
 8003274:	0010      	movs	r0, r2
 8003276:	f002 f8e1 	bl	800543c <HAL_GPIO_ReadPin>
 800327a:	0003      	movs	r3, r0
 800327c:	2b01      	cmp	r3, #1
 800327e:	d1f4      	bne.n	800326a <DHT11_ReadDHT11Data+0xde>
					//Transmission begins with 50us of low voltage level,
					//When the high occurs start read
				}
				//Next starts sending hight volage - if the high is 26-28us the bit is "0", if 70us then "1"
				//Wait 40us - if low it means that the bit is "0"
				DHT11__delayMicroSec(40);
 8003280:	2028      	movs	r0, #40	; 0x28
 8003282:	f7ff fe7b 	bl	8002f7c <DHT11__delayMicroSec>
				if (GPIO_PIN_SET == HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN))
 8003286:	4b37      	ldr	r3, [pc, #220]	; (8003364 <DHT11_ReadDHT11Data+0x1d8>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4b35      	ldr	r3, [pc, #212]	; (8003360 <DHT11_ReadDHT11Data+0x1d4>)
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	0019      	movs	r1, r3
 8003290:	0010      	movs	r0, r2
 8003292:	f002 f8d3 	bl	800543c <HAL_GPIO_ReadPin>
 8003296:	0003      	movs	r3, r0
 8003298:	2b01      	cmp	r3, #1
 800329a:	d110      	bne.n	80032be <DHT11_ReadDHT11Data+0x132>
				{
					readData |= 1 << (7 - bitNum);
 800329c:	2325      	movs	r3, #37	; 0x25
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2207      	movs	r2, #7
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2201      	movs	r2, #1
 80032a8:	409a      	lsls	r2, r3
 80032aa:	0013      	movs	r3, r2
 80032ac:	b25a      	sxtb	r2, r3
 80032ae:	2127      	movs	r1, #39	; 0x27
 80032b0:	187b      	adds	r3, r7, r1
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	b25b      	sxtb	r3, r3
 80032b6:	4313      	orrs	r3, r2
 80032b8:	b25a      	sxtb	r2, r3
 80032ba:	187b      	adds	r3, r7, r1
 80032bc:	701a      	strb	r2, [r3, #0]
				}
				while (GPIO_PIN_SET == HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN));
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	4b28      	ldr	r3, [pc, #160]	; (8003364 <DHT11_ReadDHT11Data+0x1d8>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <DHT11_ReadDHT11Data+0x1d4>)
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	0019      	movs	r1, r3
 80032ca:	0010      	movs	r0, r2
 80032cc:	f002 f8b6 	bl	800543c <HAL_GPIO_ReadPin>
 80032d0:	0003      	movs	r3, r0
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d0f4      	beq.n	80032c0 <DHT11_ReadDHT11Data+0x134>
			for (uint8_t bitNum = 0; bitNum < 8; bitNum++)
 80032d6:	2125      	movs	r1, #37	; 0x25
 80032d8:	187b      	adds	r3, r7, r1
 80032da:	781a      	ldrb	r2, [r3, #0]
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	3201      	adds	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	2325      	movs	r3, #37	; 0x25
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b07      	cmp	r3, #7
 80032ea:	d9bd      	bls.n	8003268 <DHT11_ReadDHT11Data+0xdc>
			}
			data[byteNum] = readData;
 80032ec:	2026      	movs	r0, #38	; 0x26
 80032ee:	183b      	adds	r3, r7, r0
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2208      	movs	r2, #8
 80032f4:	18ba      	adds	r2, r7, r2
 80032f6:	2427      	movs	r4, #39	; 0x27
 80032f8:	1939      	adds	r1, r7, r4
 80032fa:	7809      	ldrb	r1, [r1, #0]
 80032fc:	54d1      	strb	r1, [r2, r3]
			readData = 0;
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
		for (uint8_t byteNum = 0; byteNum < DHT11_DATA_SIZE; byteNum++)
 8003304:	183b      	adds	r3, r7, r0
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	183b      	adds	r3, r7, r0
 800330a:	3201      	adds	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	2326      	movs	r3, #38	; 0x26
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d9a2      	bls.n	800325e <DHT11_ReadDHT11Data+0xd2>
		}
		//check checksum byte: CHECKSUM = TEMP + PRES
		sensorData->rh_int = data[0];
 8003318:	2108      	movs	r1, #8
 800331a:	187b      	adds	r3, r7, r1
 800331c:	781a      	ldrb	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	709a      	strb	r2, [r3, #2]
		sensorData->rh_dec = data[1];
 8003322:	187b      	adds	r3, r7, r1
 8003324:	785a      	ldrb	r2, [r3, #1]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	70da      	strb	r2, [r3, #3]
		sensorData->temp_int = data[2];
 800332a:	187b      	adds	r3, r7, r1
 800332c:	789a      	ldrb	r2, [r3, #2]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	701a      	strb	r2, [r3, #0]
		sensorData->temp_dec = data[3];
 8003332:	187b      	adds	r3, r7, r1
 8003334:	78da      	ldrb	r2, [r3, #3]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	705a      	strb	r2, [r3, #1]
		sensorData->checksum = data[4];
 800333a:	187b      	adds	r3, r7, r1
 800333c:	791a      	ldrb	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	711a      	strb	r2, [r3, #4]
		HAL_TIM_Base_Stop(&dht11Timer);
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <DHT11_ReadDHT11Data+0x1d0>)
 8003344:	0018      	movs	r0, r3
 8003346:	f004 f981 	bl	800764c <HAL_TIM_Base_Stop>
	}
	return dataReadSuccess;
 800334a:	2324      	movs	r3, #36	; 0x24
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	781b      	ldrb	r3, [r3, #0]
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	b00b      	add	sp, #44	; 0x2c
 8003356:	bd90      	pop	{r4, r7, pc}
 8003358:	2000027c 	.word	0x2000027c
 800335c:	20000238 	.word	0x20000238
 8003360:	20000010 	.word	0x20000010
 8003364:	20000278 	.word	0x20000278

08003368 <setPWMPeriod>:
static bool publishDataBluetooth(char *currentTimeDateData,
		DHT11_Data *DHT11_sensorData, int moveSensorState);


static void setPWMPeriod()
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	static uint16_t servoPeriod = 5U;
	if (servoPeriod < 25)
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <setPWMPeriod+0x48>)
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	2b18      	cmp	r3, #24
 8003372:	d806      	bhi.n	8003382 <setPWMPeriod+0x1a>
	{
		servoPeriod += 5U;
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <setPWMPeriod+0x48>)
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	3305      	adds	r3, #5
 800337a:	b29a      	uxth	r2, r3
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <setPWMPeriod+0x48>)
 800337e:	801a      	strh	r2, [r3, #0]
 8003380:	e002      	b.n	8003388 <setPWMPeriod+0x20>
	}
	else
	{
		servoPeriod = 5;
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <setPWMPeriod+0x48>)
 8003384:	2205      	movs	r2, #5
 8003386:	801a      	strh	r2, [r3, #0]
	}
	servoPwmConfigOC.Pulse = servoPeriod;
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <setPWMPeriod+0x48>)
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	001a      	movs	r2, r3
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <setPWMPeriod+0x4c>)
 8003390:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_ConfigChannel(&hTim3_PWM_Servo, &servoPwmConfigOC, TIM_CHANNEL_2);
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <setPWMPeriod+0x4c>)
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <setPWMPeriod+0x50>)
 8003396:	2204      	movs	r2, #4
 8003398:	0018      	movs	r0, r3
 800339a:	f004 fb5b 	bl	8007a54 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&hTim3_PWM_Servo, TIM_CHANNEL_2);
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <setPWMPeriod+0x50>)
 80033a0:	2104      	movs	r1, #4
 80033a2:	0018      	movs	r0, r3
 80033a4:	f004 f9f4 	bl	8007790 <HAL_TIM_PWM_Start>
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	2000001e 	.word	0x2000001e
 80033b4:	20000280 	.word	0x20000280
 80033b8:	2000031c 	.word	0x2000031c

080033bc <publishDataBluetooth>:

static bool publishDataBluetooth(char *currentTimeDateData,
		DHT11_Data *DHT11_sensorData, int moveSensorState)
{
 80033bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033be:	46de      	mov	lr, fp
 80033c0:	4657      	mov	r7, sl
 80033c2:	464e      	mov	r6, r9
 80033c4:	4645      	mov	r5, r8
 80033c6:	b5e0      	push	{r5, r6, r7, lr}
 80033c8:	b09b      	sub	sp, #108	; 0x6c
 80033ca:	af0c      	add	r7, sp, #48	; 0x30
 80033cc:	6178      	str	r0, [r7, #20]
 80033ce:	6139      	str	r1, [r7, #16]
 80033d0:	60fa      	str	r2, [r7, #12]
	bool sentUpdate = false;
 80033d2:	232f      	movs	r3, #47	; 0x2f
 80033d4:	2208      	movs	r2, #8
 80033d6:	4694      	mov	ip, r2
 80033d8:	44bc      	add	ip, r7
 80033da:	4463      	add	r3, ip
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
	if (currentTimeDateData && DHT11_sensorData)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d100      	bne.n	80033e8 <publishDataBluetooth+0x2c>
 80033e6:	e089      	b.n	80034fc <publishDataBluetooth+0x140>
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d100      	bne.n	80033f0 <publishDataBluetooth+0x34>
 80033ee:	e085      	b.n	80034fc <publishDataBluetooth+0x140>
	{
		RTC_TimeTypeDef rtcTime = {0};
 80033f0:	2414      	movs	r4, #20
 80033f2:	2608      	movs	r6, #8
 80033f4:	19bb      	adds	r3, r7, r6
 80033f6:	191b      	adds	r3, r3, r4
 80033f8:	0018      	movs	r0, r3
 80033fa:	2314      	movs	r3, #20
 80033fc:	001a      	movs	r2, r3
 80033fe:	2100      	movs	r1, #0
 8003400:	f005 fcb5 	bl	8008d6e <memset>
		RTC_DateTypeDef rtcDate = {0};
 8003404:	2510      	movs	r5, #16
 8003406:	19bb      	adds	r3, r7, r6
 8003408:	195b      	adds	r3, r3, r5
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
		HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800340e:	19bb      	adds	r3, r7, r6
 8003410:	1919      	adds	r1, r3, r4
 8003412:	4b42      	ldr	r3, [pc, #264]	; (800351c <publishDataBluetooth+0x160>)
 8003414:	2200      	movs	r2, #0
 8003416:	0018      	movs	r0, r3
 8003418:	f002 ff18 	bl	800624c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800341c:	19bb      	adds	r3, r7, r6
 800341e:	1959      	adds	r1, r3, r5
 8003420:	4b3e      	ldr	r3, [pc, #248]	; (800351c <publishDataBluetooth+0x160>)
 8003422:	2200      	movs	r2, #0
 8003424:	0018      	movs	r0, r3
 8003426:	f003 f815 	bl	8006454 <HAL_RTC_GetDate>

		//get current adc conversion
		float adcVoltage = ((float)adcBuffer[ADC_BUFFER_SIZE - 1] * ADC_MAX_VOLTAGE)
 800342a:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <publishDataBluetooth+0x164>)
 800342c:	4a3d      	ldr	r2, [pc, #244]	; (8003524 <publishDataBluetooth+0x168>)
 800342e:	5a9b      	ldrh	r3, [r3, r2]
 8003430:	0018      	movs	r0, r3
 8003432:	f7fd fc6f 	bl	8000d14 <__aeabi_ui2f>
 8003436:	1c03      	adds	r3, r0, #0
 8003438:	493b      	ldr	r1, [pc, #236]	; (8003528 <publishDataBluetooth+0x16c>)
 800343a:	1c18      	adds	r0, r3, #0
 800343c:	f7fd f954 	bl	80006e8 <__aeabi_fmul>
 8003440:	1c03      	adds	r3, r0, #0
 8003442:	218b      	movs	r1, #139	; 0x8b
 8003444:	05c9      	lsls	r1, r1, #23
 8003446:	1c18      	adds	r0, r3, #0
 8003448:	f7fd f83c 	bl	80004c4 <__aeabi_fdiv>
 800344c:	1c03      	adds	r3, r0, #0
 800344e:	633b      	str	r3, [r7, #48]	; 0x30
		sprintf(currentTimeDateData,
			"Date: %2d.%2d.202%d Time: %d:%d:%d\n"
			"MoveSensor : %d\n"
			"ADC Voltage: %.2fV\n"
			"Temperature: %d.%d Humidity: %d.%d\n",
			rtcDate.WeekDay, rtcDate.Month, rtcDate.Year,
 8003450:	0032      	movs	r2, r6
 8003452:	18bb      	adds	r3, r7, r2
 8003454:	195b      	adds	r3, r3, r5
 8003456:	781b      	ldrb	r3, [r3, #0]
		sprintf(currentTimeDateData,
 8003458:	60bb      	str	r3, [r7, #8]
			rtcDate.WeekDay, rtcDate.Month, rtcDate.Year,
 800345a:	18bb      	adds	r3, r7, r2
 800345c:	195b      	adds	r3, r3, r5
 800345e:	785b      	ldrb	r3, [r3, #1]
		sprintf(currentTimeDateData,
 8003460:	607b      	str	r3, [r7, #4]
			rtcDate.WeekDay, rtcDate.Month, rtcDate.Year,
 8003462:	18bb      	adds	r3, r7, r2
 8003464:	195b      	adds	r3, r3, r5
 8003466:	78db      	ldrb	r3, [r3, #3]
		sprintf(currentTimeDateData,
 8003468:	001d      	movs	r5, r3
			rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds,
 800346a:	18bb      	adds	r3, r7, r2
 800346c:	191b      	adds	r3, r3, r4
 800346e:	781b      	ldrb	r3, [r3, #0]
		sprintf(currentTimeDateData,
 8003470:	001e      	movs	r6, r3
			rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds,
 8003472:	18bb      	adds	r3, r7, r2
 8003474:	191b      	adds	r3, r3, r4
 8003476:	785b      	ldrb	r3, [r3, #1]
		sprintf(currentTimeDateData,
 8003478:	4698      	mov	r8, r3
			rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds,
 800347a:	18bb      	adds	r3, r7, r2
 800347c:	191b      	adds	r3, r3, r4
 800347e:	789b      	ldrb	r3, [r3, #2]
		sprintf(currentTimeDateData,
 8003480:	4699      	mov	r9, r3
 8003482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003484:	f7ff fa24 	bl	80028d0 <__aeabi_f2d>
 8003488:	000a      	movs	r2, r1
 800348a:	0001      	movs	r1, r0
			(int) moveSensorState, adcVoltage,
			DHT11_sensorData->temp_int, DHT11_sensorData->temp_dec,
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	781b      	ldrb	r3, [r3, #0]
		sprintf(currentTimeDateData,
 8003490:	469c      	mov	ip, r3
			DHT11_sensorData->temp_int, DHT11_sensorData->temp_dec,
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	785b      	ldrb	r3, [r3, #1]
		sprintf(currentTimeDateData,
 8003496:	469a      	mov	sl, r3
			DHT11_sensorData->rh_int, DHT11_sensorData->rh_dec);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	789b      	ldrb	r3, [r3, #2]
		sprintf(currentTimeDateData,
 800349c:	469b      	mov	fp, r3
			DHT11_sensorData->rh_int, DHT11_sensorData->rh_dec);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	78db      	ldrb	r3, [r3, #3]
		sprintf(currentTimeDateData,
 80034a2:	4c22      	ldr	r4, [pc, #136]	; (800352c <publishDataBluetooth+0x170>)
 80034a4:	6978      	ldr	r0, [r7, #20]
 80034a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80034a8:	465b      	mov	r3, fp
 80034aa:	930a      	str	r3, [sp, #40]	; 0x28
 80034ac:	4653      	mov	r3, sl
 80034ae:	9309      	str	r3, [sp, #36]	; 0x24
 80034b0:	4663      	mov	r3, ip
 80034b2:	9308      	str	r3, [sp, #32]
 80034b4:	9106      	str	r1, [sp, #24]
 80034b6:	9207      	str	r2, [sp, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	9304      	str	r3, [sp, #16]
 80034bc:	4649      	mov	r1, r9
 80034be:	9103      	str	r1, [sp, #12]
 80034c0:	4641      	mov	r1, r8
 80034c2:	9102      	str	r1, [sp, #8]
 80034c4:	9601      	str	r6, [sp, #4]
 80034c6:	9500      	str	r5, [sp, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	0021      	movs	r1, r4
 80034ce:	f006 f8b5 	bl	800963c <siprintf>

		if (HAL_ERROR != HAL_UART_Transmit(&huart1, (uint8_t*)currentTimeDateData,
				strlen(currentTimeDateData), 100))
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7fc fe17 	bl	8000108 <strlen>
 80034da:	0003      	movs	r3, r0
		if (HAL_ERROR != HAL_UART_Transmit(&huart1, (uint8_t*)currentTimeDateData,
 80034dc:	b29a      	uxth	r2, r3
 80034de:	6979      	ldr	r1, [r7, #20]
 80034e0:	4813      	ldr	r0, [pc, #76]	; (8003530 <publishDataBluetooth+0x174>)
 80034e2:	2364      	movs	r3, #100	; 0x64
 80034e4:	f004 fee0 	bl	80082a8 <HAL_UART_Transmit>
 80034e8:	0003      	movs	r3, r0
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d006      	beq.n	80034fc <publishDataBluetooth+0x140>
		{
			sentUpdate = true;
 80034ee:	232f      	movs	r3, #47	; 0x2f
 80034f0:	2208      	movs	r2, #8
 80034f2:	4694      	mov	ip, r2
 80034f4:	44bc      	add	ip, r7
 80034f6:	4463      	add	r3, ip
 80034f8:	2201      	movs	r2, #1
 80034fa:	701a      	strb	r2, [r3, #0]
		}
	}
	return sentUpdate;
 80034fc:	232f      	movs	r3, #47	; 0x2f
 80034fe:	2208      	movs	r2, #8
 8003500:	4694      	mov	ip, r2
 8003502:	44bc      	add	ip, r7
 8003504:	4463      	add	r3, ip
 8003506:	781b      	ldrb	r3, [r3, #0]
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b00f      	add	sp, #60	; 0x3c
 800350e:	bc3c      	pop	{r2, r3, r4, r5}
 8003510:	4690      	mov	r8, r2
 8003512:	4699      	mov	r9, r3
 8003514:	46a2      	mov	sl, r4
 8003516:	46ab      	mov	fp, r5
 8003518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	2000085c 	.word	0x2000085c
 8003520:	2000035c 	.word	0x2000035c
 8003524:	000003e6 	.word	0x000003e6
 8003528:	40533333 	.word	0x40533333
 800352c:	0800aec8 	.word	0x0800aec8
 8003530:	200007dc 	.word	0x200007dc

08003534 <HandleSpiDataTransfer>:

static void HandleSpiDataTransfer()
{
 8003534:	b5b0      	push	{r4, r5, r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
	SPI_State state = SPI_getState();
 800353a:	2517      	movs	r5, #23
 800353c:	197c      	adds	r4, r7, r5
 800353e:	f7ff fb5f 	bl	8002c00 <SPI_getState>
 8003542:	0003      	movs	r3, r0
 8003544:	7023      	strb	r3, [r4, #0]
	if (SPI_IDLE == state)
 8003546:	197b      	adds	r3, r7, r5
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d15d      	bne.n	800360a <HandleSpiDataTransfer+0xd6>
	{
		if (!RpiDateTimeSynced)
 800354e:	4b40      	ldr	r3, [pc, #256]	; (8003650 <HandleSpiDataTransfer+0x11c>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2201      	movs	r2, #1
 8003554:	4053      	eors	r3, r2
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HandleSpiDataTransfer+0x2e>
		{
			SPI_RequestDateTimeFromRpi();
 800355c:	f7ff fc4e 	bl	8002dfc <SPI_RequestDateTimeFromRpi>
			SPI_RxDateTime rxDateTime = {0};
			RpiDateTimeSynced = SPI_ReadTransmitData(&rxDateTime);
			MX_RTC_Init(&rxDateTime);
		}
	}
}
 8003560:	e072      	b.n	8003648 <HandleSpiDataTransfer+0x114>
			float adcVoltage = ((float)adcBuffer[ADC_BUFFER_SIZE - 1] * ADC_MAX_VOLTAGE)
 8003562:	4b3c      	ldr	r3, [pc, #240]	; (8003654 <HandleSpiDataTransfer+0x120>)
 8003564:	4a3c      	ldr	r2, [pc, #240]	; (8003658 <HandleSpiDataTransfer+0x124>)
 8003566:	5a9b      	ldrh	r3, [r3, r2]
 8003568:	0018      	movs	r0, r3
 800356a:	f7fd fbd3 	bl	8000d14 <__aeabi_ui2f>
 800356e:	1c03      	adds	r3, r0, #0
 8003570:	493a      	ldr	r1, [pc, #232]	; (800365c <HandleSpiDataTransfer+0x128>)
 8003572:	1c18      	adds	r0, r3, #0
 8003574:	f7fd f8b8 	bl	80006e8 <__aeabi_fmul>
 8003578:	1c03      	adds	r3, r0, #0
 800357a:	218b      	movs	r1, #139	; 0x8b
 800357c:	05c9      	lsls	r1, r1, #23
 800357e:	1c18      	adds	r0, r3, #0
 8003580:	f7fc ffa0 	bl	80004c4 <__aeabi_fdiv>
 8003584:	1c03      	adds	r3, r0, #0
 8003586:	613b      	str	r3, [r7, #16]
			GPIO_PinState moveSensorState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8003588:	250f      	movs	r5, #15
 800358a:	197c      	adds	r4, r7, r5
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	015b      	lsls	r3, r3, #5
 8003590:	4a33      	ldr	r2, [pc, #204]	; (8003660 <HandleSpiDataTransfer+0x12c>)
 8003592:	0019      	movs	r1, r3
 8003594:	0010      	movs	r0, r2
 8003596:	f001 ff51 	bl	800543c <HAL_GPIO_ReadPin>
 800359a:	0003      	movs	r3, r0
 800359c:	7023      	strb	r3, [r4, #0]
				.humidity_int = DHT11_sensorData.rh_int,
 800359e:	4b31      	ldr	r3, [pc, #196]	; (8003664 <HandleSpiDataTransfer+0x130>)
 80035a0:	789a      	ldrb	r2, [r3, #2]
			SPI_TxSensorData sensorData =
 80035a2:	2408      	movs	r4, #8
 80035a4:	193b      	adds	r3, r7, r4
 80035a6:	701a      	strb	r2, [r3, #0]
				.humidity_dec = DHT11_sensorData.rh_dec,
 80035a8:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <HandleSpiDataTransfer+0x130>)
 80035aa:	78da      	ldrb	r2, [r3, #3]
			SPI_TxSensorData sensorData =
 80035ac:	193b      	adds	r3, r7, r4
 80035ae:	705a      	strb	r2, [r3, #1]
				.temp_int = DHT11_sensorData.temp_int
 80035b0:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HandleSpiDataTransfer+0x130>)
 80035b2:	781a      	ldrb	r2, [r3, #0]
			SPI_TxSensorData sensorData =
 80035b4:	193b      	adds	r3, r7, r4
 80035b6:	709a      	strb	r2, [r3, #2]
				.temp_dec = DHT11_sensorData.temp_dec,
 80035b8:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <HandleSpiDataTransfer+0x130>)
 80035ba:	785a      	ldrb	r2, [r3, #1]
			SPI_TxSensorData sensorData =
 80035bc:	193b      	adds	r3, r7, r4
 80035be:	70da      	strb	r2, [r3, #3]
 80035c0:	6938      	ldr	r0, [r7, #16]
 80035c2:	f7fc ff67 	bl	8000494 <__aeabi_f2uiz>
 80035c6:	0003      	movs	r3, r0
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	2107      	movs	r1, #7
 80035ce:	400a      	ands	r2, r1
 80035d0:	0010      	movs	r0, r2
 80035d2:	791a      	ldrb	r2, [r3, #4]
 80035d4:	2107      	movs	r1, #7
 80035d6:	438a      	bics	r2, r1
 80035d8:	1c11      	adds	r1, r2, #0
 80035da:	1c02      	adds	r2, r0, #0
 80035dc:	430a      	orrs	r2, r1
 80035de:	711a      	strb	r2, [r3, #4]
 80035e0:	197b      	adds	r3, r7, r5
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	4013      	ands	r3, r2
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	193b      	adds	r3, r7, r4
 80035ec:	2101      	movs	r1, #1
 80035ee:	400a      	ands	r2, r1
 80035f0:	00d0      	lsls	r0, r2, #3
 80035f2:	791a      	ldrb	r2, [r3, #4]
 80035f4:	2108      	movs	r1, #8
 80035f6:	438a      	bics	r2, r1
 80035f8:	1c11      	adds	r1, r2, #0
 80035fa:	1c02      	adds	r2, r0, #0
 80035fc:	430a      	orrs	r2, r1
 80035fe:	711a      	strb	r2, [r3, #4]
			SPI_PrepareSensorDataTransmit(&sensorData);
 8003600:	193b      	adds	r3, r7, r4
 8003602:	0018      	movs	r0, r3
 8003604:	f7ff fbb4 	bl	8002d70 <SPI_PrepareSensorDataTransmit>
}
 8003608:	e01e      	b.n	8003648 <HandleSpiDataTransfer+0x114>
	else if (SPI_RX_DATA_AVAILABLE == state)
 800360a:	2317      	movs	r3, #23
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b04      	cmp	r3, #4
 8003612:	d119      	bne.n	8003648 <HandleSpiDataTransfer+0x114>
		if (!RpiDateTimeSynced)
 8003614:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <HandleSpiDataTransfer+0x11c>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2201      	movs	r2, #1
 800361a:	4053      	eors	r3, r2
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d012      	beq.n	8003648 <HandleSpiDataTransfer+0x114>
			SPI_RxDateTime rxDateTime = {0};
 8003622:	003b      	movs	r3, r7
 8003624:	0018      	movs	r0, r3
 8003626:	2308      	movs	r3, #8
 8003628:	001a      	movs	r2, r3
 800362a:	2100      	movs	r1, #0
 800362c:	f005 fb9f 	bl	8008d6e <memset>
			RpiDateTimeSynced = SPI_ReadTransmitData(&rxDateTime);
 8003630:	003b      	movs	r3, r7
 8003632:	0018      	movs	r0, r3
 8003634:	f7ff fbc6 	bl	8002dc4 <SPI_ReadTransmitData>
 8003638:	0003      	movs	r3, r0
 800363a:	001a      	movs	r2, r3
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <HandleSpiDataTransfer+0x11c>)
 800363e:	701a      	strb	r2, [r3, #0]
			MX_RTC_Init(&rxDateTime);
 8003640:	003b      	movs	r3, r7
 8003642:	0018      	movs	r0, r3
 8003644:	f000 f962 	bl	800390c <MX_RTC_Init>
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b006      	add	sp, #24
 800364e:	bdb0      	pop	{r4, r5, r7, pc}
 8003650:	200002a5 	.word	0x200002a5
 8003654:	2000035c 	.word	0x2000035c
 8003658:	000003e6 	.word	0x000003e6
 800365c:	40533333 	.word	0x40533333
 8003660:	48000800 	.word	0x48000800
 8003664:	200002a0 	.word	0x200002a0

08003668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800366e:	f000 fe63 	bl	8004338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003672:	f000 f885 	bl	8003780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003676:	f000 faa1 	bl	8003bbc <MX_GPIO_Init>
  MX_DMA_Init();
 800367a:	f000 fa89 	bl	8003b90 <MX_DMA_Init>
  MX_TIM6_Init();
 800367e:	f000 fa03 	bl	8003a88 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8003682:	f000 fa25 	bl	8003ad0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003686:	f000 fa53 	bl	8003b30 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800368a:	f000 f9a3 	bl	80039d4 <MX_TIM3_Init>
  MX_ADC_Init();
 800368e:	f000 f8e1 	bl	8003854 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  bool spi_initialized = false;
 8003692:	1dfb      	adds	r3, r7, #7
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
  if (SPI_Config())
 8003698:	f7ff fabc 	bl	8002c14 <SPI_Config>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d006      	beq.n	80036ae <main+0x46>
  {
	 SPI_Init();
 80036a0:	f7ff fb48 	bl	8002d34 <SPI_Init>
	 spi_initialized = SPI_RequestDateTimeFromRpi();
 80036a4:	1dfc      	adds	r4, r7, #7
 80036a6:	f7ff fba9 	bl	8002dfc <SPI_RequestDateTimeFromRpi>
 80036aa:	0003      	movs	r3, r0
 80036ac:	7023      	strb	r3, [r4, #0]
  }

  HAL_TIM_PWM_Start(&hTim3_PWM_Servo, TIM_CHANNEL_2);
 80036ae:	4b2a      	ldr	r3, [pc, #168]	; (8003758 <main+0xf0>)
 80036b0:	2104      	movs	r1, #4
 80036b2:	0018      	movs	r0, r3
 80036b4:	f004 f86c 	bl	8007790 <HAL_TIM_PWM_Start>

  // start adc conversion
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)adcBuffer, ADC_BUFFER_SIZE);
 80036b8:	23fa      	movs	r3, #250	; 0xfa
 80036ba:	005a      	lsls	r2, r3, #1
 80036bc:	4927      	ldr	r1, [pc, #156]	; (800375c <main+0xf4>)
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <main+0xf8>)
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 ffff 	bl	80046c4 <HAL_ADC_Start_DMA>

  //Init DHT11 Temp and Rh sensor
  bool dht11_Initalized = DHT11_Init(DHT11_GPIO_PORT, DHT11_GPIO_Pin, DHT11_timerID);
 80036c6:	4b27      	ldr	r3, [pc, #156]	; (8003764 <main+0xfc>)
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	4b27      	ldr	r3, [pc, #156]	; (8003768 <main+0x100>)
 80036cc:	8819      	ldrh	r1, [r3, #0]
 80036ce:	4b27      	ldr	r3, [pc, #156]	; (800376c <main+0x104>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	1dbc      	adds	r4, r7, #6
 80036d4:	001a      	movs	r2, r3
 80036d6:	f7ff fd29 	bl	800312c <DHT11_Init>
 80036da:	0003      	movs	r3, r0
 80036dc:	7023      	strb	r3, [r4, #0]

   //read Temperature and RH data
  if (dht11_Initalized)
 80036de:	1dbb      	adds	r3, r7, #6
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <main+0x86>
  {
	 DHT11_ReadDHT11Data(&DHT11_sensorData); //set to do it every 2min - not very volatile
 80036e6:	4b22      	ldr	r3, [pc, #136]	; (8003770 <main+0x108>)
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7ff fd4f 	bl	800318c <DHT11_ReadDHT11Data>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //light ext led
		GPIO_PinState moveSensorState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 80036ee:	1d7c      	adds	r4, r7, #5
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	015b      	lsls	r3, r3, #5
 80036f4:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <main+0x10c>)
 80036f6:	0019      	movs	r1, r3
 80036f8:	0010      	movs	r0, r2
 80036fa:	f001 fe9f 	bl	800543c <HAL_GPIO_ReadPin>
 80036fe:	0003      	movs	r3, r0
 8003700:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, moveSensorState);
 8003702:	1d7b      	adds	r3, r7, #5
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	481b      	ldr	r0, [pc, #108]	; (8003774 <main+0x10c>)
 8003708:	001a      	movs	r2, r3
 800370a:	2108      	movs	r1, #8
 800370c:	f001 feb3 	bl	8005476 <HAL_GPIO_WritePin>

		if (spi_initialized)
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <main+0xb8>
		{
			SPI_CommSM();
 8003718:	f7ff fba0 	bl	8002e5c <SPI_CommSM>
			HandleSpiDataTransfer();
 800371c:	f7ff ff0a 	bl	8003534 <HandleSpiDataTransfer>
		}
		//Handle button interrupts
		if (true == btnTrigger)
 8003720:	4b15      	ldr	r3, [pc, #84]	; (8003778 <main+0x110>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d011      	beq.n	800374e <main+0xe6>
		{
			//light led
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800372a:	2390      	movs	r3, #144	; 0x90
 800372c:	05db      	lsls	r3, r3, #23
 800372e:	2120      	movs	r1, #32
 8003730:	0018      	movs	r0, r3
 8003732:	f001 febd 	bl	80054b0 <HAL_GPIO_TogglePin>
			//change PWM period
			setPWMPeriod();
 8003736:	f7ff fe17 	bl	8003368 <setPWMPeriod>

			//get current rtc time and date
			publishDataBluetooth(currentTimeDateData, &DHT11_sensorData, moveSensorState);
 800373a:	1d7b      	adds	r3, r7, #5
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	490c      	ldr	r1, [pc, #48]	; (8003770 <main+0x108>)
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <main+0x114>)
 8003742:	0018      	movs	r0, r3
 8003744:	f7ff fe3a 	bl	80033bc <publishDataBluetooth>
			//send SPI - the MCU will be a slave that will be asked by the HMI ECU for
			//spi data transmit, for now the testing purposes the spi will send when button pressed
			btnTrigger = false;
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <main+0x110>)
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(50);
 800374e:	2032      	movs	r0, #50	; 0x32
 8003750:	f000 fe56 	bl	8004400 <HAL_Delay>
	{
 8003754:	e7cb      	b.n	80036ee <main+0x86>
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	2000031c 	.word	0x2000031c
 800375c:	2000035c 	.word	0x2000035c
 8003760:	20000980 	.word	0x20000980
 8003764:	20000018 	.word	0x20000018
 8003768:	2000001c 	.word	0x2000001c
 800376c:	20000014 	.word	0x20000014
 8003770:	200002a0 	.word	0x200002a0
 8003774:	48000800 	.word	0x48000800
 8003778:	2000029c 	.word	0x2000029c
 800377c:	20000744 	.word	0x20000744

08003780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b095      	sub	sp, #84	; 0x54
 8003784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003786:	2420      	movs	r4, #32
 8003788:	193b      	adds	r3, r7, r4
 800378a:	0018      	movs	r0, r3
 800378c:	2330      	movs	r3, #48	; 0x30
 800378e:	001a      	movs	r2, r3
 8003790:	2100      	movs	r1, #0
 8003792:	f005 faec 	bl	8008d6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003796:	2310      	movs	r3, #16
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	0018      	movs	r0, r3
 800379c:	2310      	movs	r3, #16
 800379e:	001a      	movs	r2, r3
 80037a0:	2100      	movs	r1, #0
 80037a2:	f005 fae4 	bl	8008d6e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037a6:	003b      	movs	r3, r7
 80037a8:	0018      	movs	r0, r3
 80037aa:	2310      	movs	r3, #16
 80037ac:	001a      	movs	r2, r3
 80037ae:	2100      	movs	r1, #0
 80037b0:	f005 fadd 	bl	8008d6e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80037b4:	0021      	movs	r1, r4
 80037b6:	187b      	adds	r3, r7, r1
 80037b8:	220a      	movs	r2, #10
 80037ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037bc:	187b      	adds	r3, r7, r1
 80037be:	2201      	movs	r2, #1
 80037c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	2210      	movs	r2, #16
 80037c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	2201      	movs	r2, #1
 80037cc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ce:	187b      	adds	r3, r7, r1
 80037d0:	2202      	movs	r2, #2
 80037d2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	2200      	movs	r2, #0
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80037da:	187b      	adds	r3, r7, r1
 80037dc:	22a0      	movs	r2, #160	; 0xa0
 80037de:	0392      	lsls	r2, r2, #14
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80037e2:	187b      	adds	r3, r7, r1
 80037e4:	2200      	movs	r2, #0
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037e8:	187b      	adds	r3, r7, r1
 80037ea:	0018      	movs	r0, r3
 80037ec:	f001 fea2 	bl	8005534 <HAL_RCC_OscConfig>
 80037f0:	1e03      	subs	r3, r0, #0
 80037f2:	d001      	beq.n	80037f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80037f4:	f000 fa80 	bl	8003cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037f8:	2110      	movs	r1, #16
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	2207      	movs	r2, #7
 80037fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003800:	187b      	adds	r3, r7, r1
 8003802:	2202      	movs	r2, #2
 8003804:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003806:	187b      	adds	r3, r7, r1
 8003808:	2200      	movs	r2, #0
 800380a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800380c:	187b      	adds	r3, r7, r1
 800380e:	2200      	movs	r2, #0
 8003810:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003812:	187b      	adds	r3, r7, r1
 8003814:	2101      	movs	r1, #1
 8003816:	0018      	movs	r0, r3
 8003818:	f002 f9a8 	bl	8005b6c <HAL_RCC_ClockConfig>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d001      	beq.n	8003824 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003820:	f000 fa6a 	bl	8003cf8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8003824:	003b      	movs	r3, r7
 8003826:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <SystemClock_Config+0xd0>)
 8003828:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800382a:	003b      	movs	r3, r7
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003830:	003b      	movs	r3, r7
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	0092      	lsls	r2, r2, #2
 8003836:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003838:	003b      	movs	r3, r7
 800383a:	0018      	movs	r0, r3
 800383c:	f002 fae8 	bl	8005e10 <HAL_RCCEx_PeriphCLKConfig>
 8003840:	1e03      	subs	r3, r0, #0
 8003842:	d001      	beq.n	8003848 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003844:	f000 fa58 	bl	8003cf8 <Error_Handler>
  }
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b015      	add	sp, #84	; 0x54
 800384e:	bd90      	pop	{r4, r7, pc}
 8003850:	00010001 	.word	0x00010001

08003854 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800385a:	1d3b      	adds	r3, r7, #4
 800385c:	0018      	movs	r0, r3
 800385e:	230c      	movs	r3, #12
 8003860:	001a      	movs	r2, r3
 8003862:	2100      	movs	r1, #0
 8003864:	f005 fa83 	bl	8008d6e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8003868:	4b26      	ldr	r3, [pc, #152]	; (8003904 <MX_ADC_Init+0xb0>)
 800386a:	4a27      	ldr	r2, [pc, #156]	; (8003908 <MX_ADC_Init+0xb4>)
 800386c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800386e:	4b25      	ldr	r3, [pc, #148]	; (8003904 <MX_ADC_Init+0xb0>)
 8003870:	2280      	movs	r2, #128	; 0x80
 8003872:	0612      	lsls	r2, r2, #24
 8003874:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003876:	4b23      	ldr	r3, [pc, #140]	; (8003904 <MX_ADC_Init+0xb0>)
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800387c:	4b21      	ldr	r3, [pc, #132]	; (8003904 <MX_ADC_Init+0xb0>)
 800387e:	2200      	movs	r2, #0
 8003880:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <MX_ADC_Init+0xb0>)
 8003884:	2201      	movs	r2, #1
 8003886:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003888:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <MX_ADC_Init+0xb0>)
 800388a:	2204      	movs	r2, #4
 800388c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800388e:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <MX_ADC_Init+0xb0>)
 8003890:	2200      	movs	r2, #0
 8003892:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003894:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <MX_ADC_Init+0xb0>)
 8003896:	2200      	movs	r2, #0
 8003898:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800389a:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <MX_ADC_Init+0xb0>)
 800389c:	2201      	movs	r2, #1
 800389e:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80038a0:	4b18      	ldr	r3, [pc, #96]	; (8003904 <MX_ADC_Init+0xb0>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <MX_ADC_Init+0xb0>)
 80038a8:	22c2      	movs	r2, #194	; 0xc2
 80038aa:	32ff      	adds	r2, #255	; 0xff
 80038ac:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <MX_ADC_Init+0xb0>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <MX_ADC_Init+0xb0>)
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	2101      	movs	r1, #1
 80038ba:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <MX_ADC_Init+0xb0>)
 80038be:	2201      	movs	r2, #1
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <MX_ADC_Init+0xb0>)
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 fdbd 	bl	8004444 <HAL_ADC_Init>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d001      	beq.n	80038d2 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80038ce:	f000 fa13 	bl	8003cf8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	220b      	movs	r2, #11
 80038d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80038d8:	1d3b      	adds	r3, r7, #4
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	0152      	lsls	r2, r2, #5
 80038de:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	2206      	movs	r2, #6
 80038e4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80038e6:	1d3a      	adds	r2, r7, #4
 80038e8:	4b06      	ldr	r3, [pc, #24]	; (8003904 <MX_ADC_Init+0xb0>)
 80038ea:	0011      	movs	r1, r2
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 ff83 	bl	80047f8 <HAL_ADC_ConfigChannel>
 80038f2:	1e03      	subs	r3, r0, #0
 80038f4:	d001      	beq.n	80038fa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80038f6:	f000 f9ff 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	20000980 	.word	0x20000980
 8003908:	40012400 	.word	0x40012400

0800390c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(SPI_RxDateTime *initDateTime)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003914:	240c      	movs	r4, #12
 8003916:	193b      	adds	r3, r7, r4
 8003918:	0018      	movs	r0, r3
 800391a:	2314      	movs	r3, #20
 800391c:	001a      	movs	r2, r3
 800391e:	2100      	movs	r1, #0
 8003920:	f005 fa25 	bl	8008d6e <memset>
  RTC_DateTypeDef sDate = {0};
 8003924:	2108      	movs	r1, #8
 8003926:	187b      	adds	r3, r7, r1
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

  sDate.Year = initDateTime->year;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	187b      	adds	r3, r7, r1
 8003934:	70da      	strb	r2, [r3, #3]
  sDate.Month = initDateTime->month;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	789a      	ldrb	r2, [r3, #2]
 800393a:	187b      	adds	r3, r7, r1
 800393c:	705a      	strb	r2, [r3, #1]
  sDate.WeekDay = initDateTime->day;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	78da      	ldrb	r2, [r3, #3]
 8003942:	187b      	adds	r3, r7, r1
 8003944:	701a      	strb	r2, [r3, #0]
  sTime.Hours = initDateTime->hour;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	791a      	ldrb	r2, [r3, #4]
 800394a:	193b      	adds	r3, r7, r4
 800394c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = initDateTime->minute;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	795a      	ldrb	r2, [r3, #5]
 8003952:	193b      	adds	r3, r7, r4
 8003954:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = initDateTime->second;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	799a      	ldrb	r2, [r3, #6]
 800395a:	193b      	adds	r3, r7, r4
 800395c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800395e:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <MX_RTC_Init+0xbc>)
 8003960:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <MX_RTC_Init+0xc0>)
 8003962:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003964:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <MX_RTC_Init+0xbc>)
 8003966:	2200      	movs	r2, #0
 8003968:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800396a:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <MX_RTC_Init+0xbc>)
 800396c:	227f      	movs	r2, #127	; 0x7f
 800396e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003970:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <MX_RTC_Init+0xbc>)
 8003972:	22ff      	movs	r2, #255	; 0xff
 8003974:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003976:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <MX_RTC_Init+0xbc>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <MX_RTC_Init+0xbc>)
 800397e:	2200      	movs	r2, #0
 8003980:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003982:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <MX_RTC_Init+0xbc>)
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) == HAL_OK)
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <MX_RTC_Init+0xbc>)
 800398a:	0018      	movs	r0, r3
 800398c:	f002 fb0e 	bl	8005fac <HAL_RTC_Init>
 8003990:	1e03      	subs	r3, r0, #0
 8003992:	d114      	bne.n	80039be <MX_RTC_Init+0xb2>
  {
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK)
 8003994:	230c      	movs	r3, #12
 8003996:	18f9      	adds	r1, r7, r3
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <MX_RTC_Init+0xbc>)
 800399a:	2200      	movs	r2, #0
 800399c:	0018      	movs	r0, r3
 800399e:	f002 fb99 	bl	80060d4 <HAL_RTC_SetTime>
 80039a2:	1e03      	subs	r3, r0, #0
 80039a4:	d10b      	bne.n	80039be <MX_RTC_Init+0xb2>
	{
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK)
 80039a6:	2308      	movs	r3, #8
 80039a8:	18f9      	adds	r1, r7, r3
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <MX_RTC_Init+0xbc>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	0018      	movs	r0, r3
 80039b0:	f002 fcaa 	bl	8006308 <HAL_RTC_SetDate>
 80039b4:	1e03      	subs	r3, r0, #0
 80039b6:	d102      	bne.n	80039be <MX_RTC_Init+0xb2>
		{
			RTC_Initalized = true;
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <MX_RTC_Init+0xc4>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b009      	add	sp, #36	; 0x24
 80039c4:	bd90      	pop	{r4, r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	2000085c 	.word	0x2000085c
 80039cc:	40002800 	.word	0x40002800
 80039d0:	200002a6 	.word	0x200002a6

080039d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039da:	003b      	movs	r3, r7
 80039dc:	0018      	movs	r0, r3
 80039de:	2308      	movs	r3, #8
 80039e0:	001a      	movs	r2, r3
 80039e2:	2100      	movs	r1, #0
 80039e4:	f005 f9c3 	bl	8008d6e <memset>
  /* USER CODE BEGIN TIM3_Init 1 */
  // 50Hz - 48 000 000 / 48000(prescaler) = 1000Hz , 1000Hz/ 20(period) = 50Hz
  //default pulse - 0 degrees is 0,5ms - 1 tick is 0.1ms, so 0 = 5 pulse
  //1.5ms - 90 degrees, 2.5ms - 180 degrees
  /* USER CODE END TIM3_Init 1 */
  hTim3_PWM_Servo.Instance = TIM3;
 80039e8:	4b23      	ldr	r3, [pc, #140]	; (8003a78 <MX_TIM3_Init+0xa4>)
 80039ea:	4a24      	ldr	r2, [pc, #144]	; (8003a7c <MX_TIM3_Init+0xa8>)
 80039ec:	601a      	str	r2, [r3, #0]
  hTim3_PWM_Servo.Init.Prescaler = 4800 - 1;
 80039ee:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <MX_TIM3_Init+0xa4>)
 80039f0:	4a23      	ldr	r2, [pc, #140]	; (8003a80 <MX_TIM3_Init+0xac>)
 80039f2:	605a      	str	r2, [r3, #4]
  hTim3_PWM_Servo.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f4:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <MX_TIM3_Init+0xa4>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  hTim3_PWM_Servo.Init.Period = 200- 1;
 80039fa:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <MX_TIM3_Init+0xa4>)
 80039fc:	22c7      	movs	r2, #199	; 0xc7
 80039fe:	60da      	str	r2, [r3, #12]
  hTim3_PWM_Servo.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a00:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <MX_TIM3_Init+0xa4>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
  hTim3_PWM_Servo.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a06:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <MX_TIM3_Init+0xa4>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&hTim3_PWM_Servo) != HAL_OK)
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <MX_TIM3_Init+0xa4>)
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f003 fe92 	bl	8007738 <HAL_TIM_PWM_Init>
 8003a14:	1e03      	subs	r3, r0, #0
 8003a16:	d001      	beq.n	8003a1c <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 8003a18:	f000 f96e 	bl	8003cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a1c:	003b      	movs	r3, r7
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a22:	003b      	movs	r3, r7
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&hTim3_PWM_Servo, &sMasterConfig) != HAL_OK)
 8003a28:	003a      	movs	r2, r7
 8003a2a:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <MX_TIM3_Init+0xa4>)
 8003a2c:	0011      	movs	r1, r2
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f004 fb7e 	bl	8008130 <HAL_TIMEx_MasterConfigSynchronization>
 8003a34:	1e03      	subs	r3, r0, #0
 8003a36:	d001      	beq.n	8003a3c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003a38:	f000 f95e 	bl	8003cf8 <Error_Handler>
  }
  servoPwmConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <MX_TIM3_Init+0xb0>)
 8003a3e:	2260      	movs	r2, #96	; 0x60
 8003a40:	601a      	str	r2, [r3, #0]
  servoPwmConfigOC.Pulse = 5;
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <MX_TIM3_Init+0xb0>)
 8003a44:	2205      	movs	r2, #5
 8003a46:	605a      	str	r2, [r3, #4]
  servoPwmConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <MX_TIM3_Init+0xb0>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  servoPwmConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <MX_TIM3_Init+0xb0>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&hTim3_PWM_Servo, &servoPwmConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a54:	490b      	ldr	r1, [pc, #44]	; (8003a84 <MX_TIM3_Init+0xb0>)
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <MX_TIM3_Init+0xa4>)
 8003a58:	2204      	movs	r2, #4
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f003 fffa 	bl	8007a54 <HAL_TIM_PWM_ConfigChannel>
 8003a60:	1e03      	subs	r3, r0, #0
 8003a62:	d001      	beq.n	8003a68 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003a64:	f000 f948 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&hTim3_PWM_Servo);
 8003a68:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <MX_TIM3_Init+0xa4>)
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f000 fa54 	bl	8003f18 <HAL_TIM_MspPostInit>
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b002      	add	sp, #8
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	2000031c 	.word	0x2000031c
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	000012bf 	.word	0x000012bf
 8003a84:	20000280 	.word	0x20000280

08003a88 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <MX_TIM6_Init+0x38>)
 8003a8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <MX_TIM6_Init+0x3c>)
 8003a90:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4800 - 1;
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <MX_TIM6_Init+0x38>)
 8003a94:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <MX_TIM6_Init+0x40>)
 8003a96:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <MX_TIM6_Init+0x38>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1500 - 1;
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <MX_TIM6_Init+0x38>)
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <MX_TIM6_Init+0x44>)
 8003aa2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <MX_TIM6_Init+0x38>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <MX_TIM6_Init+0x38>)
 8003aac:	0018      	movs	r0, r3
 8003aae:	f003 fd7e 	bl	80075ae <HAL_TIM_Base_Init>
 8003ab2:	1e03      	subs	r3, r0, #0
 8003ab4:	d001      	beq.n	8003aba <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8003ab6:	f000 f91f 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	2000087c 	.word	0x2000087c
 8003ac4:	40001000 	.word	0x40001000
 8003ac8:	000012bf 	.word	0x000012bf
 8003acc:	000005db 	.word	0x000005db

08003ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <MX_USART1_UART_Init+0x58>)
 8003ad6:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <MX_USART1_UART_Init+0x5c>)
 8003ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003ada:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <MX_USART1_UART_Init+0x58>)
 8003adc:	2296      	movs	r2, #150	; 0x96
 8003ade:	0192      	lsls	r2, r2, #6
 8003ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <MX_USART1_UART_Init+0x58>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <MX_USART1_UART_Init+0x58>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <MX_USART1_UART_Init+0x58>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <MX_USART1_UART_Init+0x58>)
 8003af6:	220c      	movs	r2, #12
 8003af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <MX_USART1_UART_Init+0x58>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <MX_USART1_UART_Init+0x58>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <MX_USART1_UART_Init+0x58>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <MX_USART1_UART_Init+0x58>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <MX_USART1_UART_Init+0x58>)
 8003b14:	0018      	movs	r0, r3
 8003b16:	f004 fb73 	bl	8008200 <HAL_UART_Init>
 8003b1a:	1e03      	subs	r3, r0, #0
 8003b1c:	d001      	beq.n	8003b22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003b1e:	f000 f8eb 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	200007dc 	.word	0x200007dc
 8003b2c:	40013800 	.word	0x40013800

08003b30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b34:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <MX_USART2_UART_Init+0x58>)
 8003b36:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <MX_USART2_UART_Init+0x5c>)
 8003b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003b3a:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <MX_USART2_UART_Init+0x58>)
 8003b3c:	2296      	movs	r2, #150	; 0x96
 8003b3e:	0212      	lsls	r2, r2, #8
 8003b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <MX_USART2_UART_Init+0x58>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <MX_USART2_UART_Init+0x58>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <MX_USART2_UART_Init+0x58>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <MX_USART2_UART_Init+0x58>)
 8003b56:	220c      	movs	r2, #12
 8003b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <MX_USART2_UART_Init+0x58>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <MX_USART2_UART_Init+0x58>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <MX_USART2_UART_Init+0x58>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <MX_USART2_UART_Init+0x58>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <MX_USART2_UART_Init+0x58>)
 8003b74:	0018      	movs	r0, r3
 8003b76:	f004 fb43 	bl	8008200 <HAL_UART_Init>
 8003b7a:	1e03      	subs	r3, r0, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003b7e:	f000 f8bb 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	200008bc 	.word	0x200008bc
 8003b8c:	40004400 	.word	0x40004400

08003b90 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <MX_DMA_Init+0x28>)
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <MX_DMA_Init+0x28>)
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	615a      	str	r2, [r3, #20]
 8003ba2:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <MX_DMA_Init+0x28>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */

}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b002      	add	sp, #8
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	40021000 	.word	0x40021000

08003bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b089      	sub	sp, #36	; 0x24
 8003bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc2:	240c      	movs	r4, #12
 8003bc4:	193b      	adds	r3, r7, r4
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	2314      	movs	r3, #20
 8003bca:	001a      	movs	r2, r3
 8003bcc:	2100      	movs	r1, #0
 8003bce:	f005 f8ce 	bl	8008d6e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd2:	4b46      	ldr	r3, [pc, #280]	; (8003cec <MX_GPIO_Init+0x130>)
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	4b45      	ldr	r3, [pc, #276]	; (8003cec <MX_GPIO_Init+0x130>)
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	0309      	lsls	r1, r1, #12
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	615a      	str	r2, [r3, #20]
 8003be0:	4b42      	ldr	r3, [pc, #264]	; (8003cec <MX_GPIO_Init+0x130>)
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	031b      	lsls	r3, r3, #12
 8003be8:	4013      	ands	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bee:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <MX_GPIO_Init+0x130>)
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	4b3e      	ldr	r3, [pc, #248]	; (8003cec <MX_GPIO_Init+0x130>)
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	03c9      	lsls	r1, r1, #15
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	615a      	str	r2, [r3, #20]
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	; (8003cec <MX_GPIO_Init+0x130>)
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	03db      	lsls	r3, r3, #15
 8003c04:	4013      	ands	r3, r2
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0a:	4b38      	ldr	r3, [pc, #224]	; (8003cec <MX_GPIO_Init+0x130>)
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	4b37      	ldr	r3, [pc, #220]	; (8003cec <MX_GPIO_Init+0x130>)
 8003c10:	2180      	movs	r1, #128	; 0x80
 8003c12:	0289      	lsls	r1, r1, #10
 8003c14:	430a      	orrs	r2, r1
 8003c16:	615a      	str	r2, [r3, #20]
 8003c18:	4b34      	ldr	r3, [pc, #208]	; (8003cec <MX_GPIO_Init+0x130>)
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	029b      	lsls	r3, r3, #10
 8003c20:	4013      	ands	r3, r2
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003c26:	4b32      	ldr	r3, [pc, #200]	; (8003cf0 <MX_GPIO_Init+0x134>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2108      	movs	r1, #8
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f001 fc22 	bl	8005476 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c32:	2390      	movs	r3, #144	; 0x90
 8003c34:	05db      	lsls	r3, r3, #23
 8003c36:	2200      	movs	r2, #0
 8003c38:	2120      	movs	r1, #32
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f001 fc1b 	bl	8005476 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c40:	193b      	adds	r3, r7, r4
 8003c42:	2280      	movs	r2, #128	; 0x80
 8003c44:	0112      	lsls	r2, r2, #4
 8003c46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003c48:	193b      	adds	r3, r7, r4
 8003c4a:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <MX_GPIO_Init+0x138>)
 8003c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	193b      	adds	r3, r7, r4
 8003c50:	2200      	movs	r2, #0
 8003c52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c54:	193b      	adds	r3, r7, r4
 8003c56:	4a26      	ldr	r2, [pc, #152]	; (8003cf0 <MX_GPIO_Init+0x134>)
 8003c58:	0019      	movs	r1, r3
 8003c5a:	0010      	movs	r0, r2
 8003c5c:	f001 fa7e 	bl	800515c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c60:	0021      	movs	r1, r4
 8003c62:	187b      	adds	r3, r7, r1
 8003c64:	2208      	movs	r2, #8
 8003c66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	187b      	adds	r3, r7, r1
 8003c70:	2200      	movs	r2, #0
 8003c72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	2200      	movs	r2, #0
 8003c78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7a:	000c      	movs	r4, r1
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <MX_GPIO_Init+0x134>)
 8003c80:	0019      	movs	r1, r3
 8003c82:	0010      	movs	r0, r2
 8003c84:	f001 fa6a 	bl	800515c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003c88:	0021      	movs	r1, r4
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	2201      	movs	r2, #1
 8003c94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	187b      	adds	r3, r7, r1
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003ca2:	000c      	movs	r4, r1
 8003ca4:	187a      	adds	r2, r7, r1
 8003ca6:	2390      	movs	r3, #144	; 0x90
 8003ca8:	05db      	lsls	r3, r3, #23
 8003caa:	0011      	movs	r1, r2
 8003cac:	0018      	movs	r0, r3
 8003cae:	f001 fa55 	bl	800515c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cb2:	0021      	movs	r1, r4
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	0152      	lsls	r2, r2, #5
 8003cba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc2:	187b      	adds	r3, r7, r1
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cc8:	187b      	adds	r3, r7, r1
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <MX_GPIO_Init+0x134>)
 8003ccc:	0019      	movs	r1, r3
 8003cce:	0010      	movs	r0, r2
 8003cd0:	f001 fa44 	bl	800515c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	2007      	movs	r0, #7
 8003cda:	f001 f82f 	bl	8004d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003cde:	2007      	movs	r0, #7
 8003ce0:	f001 f841 	bl	8004d66 <HAL_NVIC_EnableIRQ>

}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b009      	add	sp, #36	; 0x24
 8003cea:	bd90      	pop	{r4, r7, pc}
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	48000800 	.word	0x48000800
 8003cf4:	10310000 	.word	0x10310000

08003cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_MspInit+0x44>)
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_MspInit+0x44>)
 8003d10:	2101      	movs	r1, #1
 8003d12:	430a      	orrs	r2, r1
 8003d14:	619a      	str	r2, [r3, #24]
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <HAL_MspInit+0x44>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <HAL_MspInit+0x44>)
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_MspInit+0x44>)
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	0549      	lsls	r1, r1, #21
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	61da      	str	r2, [r3, #28]
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_MspInit+0x44>)
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	055b      	lsls	r3, r3, #21
 8003d38:	4013      	ands	r3, r2
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b002      	add	sp, #8
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	40021000 	.word	0x40021000

08003d4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d54:	2314      	movs	r3, #20
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	0018      	movs	r0, r3
 8003d5a:	2314      	movs	r3, #20
 8003d5c:	001a      	movs	r2, r3
 8003d5e:	2100      	movs	r1, #0
 8003d60:	f005 f805 	bl	8008d6e <memset>
  if(hadc->Instance==ADC1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2d      	ldr	r2, [pc, #180]	; (8003e20 <HAL_ADC_MspInit+0xd4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d154      	bne.n	8003e18 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d6e:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <HAL_ADC_MspInit+0xd8>)
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	4b2c      	ldr	r3, [pc, #176]	; (8003e24 <HAL_ADC_MspInit+0xd8>)
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	0089      	lsls	r1, r1, #2
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	619a      	str	r2, [r3, #24]
 8003d7c:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <HAL_ADC_MspInit+0xd8>)
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <HAL_ADC_MspInit+0xd8>)
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <HAL_ADC_MspInit+0xd8>)
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	0309      	lsls	r1, r1, #12
 8003d94:	430a      	orrs	r2, r1
 8003d96:	615a      	str	r2, [r3, #20]
 8003d98:	4b22      	ldr	r3, [pc, #136]	; (8003e24 <HAL_ADC_MspInit+0xd8>)
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	031b      	lsls	r3, r3, #12
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PC1     ------> ADC_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003da6:	2114      	movs	r1, #20
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	2202      	movs	r2, #2
 8003dac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dae:	187b      	adds	r3, r7, r1
 8003db0:	2203      	movs	r2, #3
 8003db2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	4a1a      	ldr	r2, [pc, #104]	; (8003e28 <HAL_ADC_MspInit+0xdc>)
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	0010      	movs	r0, r2
 8003dc2:	f001 f9cb 	bl	800515c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003dc6:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_ADC_MspInit+0xe0>)
 8003dc8:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <HAL_ADC_MspInit+0xe4>)
 8003dca:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dcc:	4b17      	ldr	r3, [pc, #92]	; (8003e2c <HAL_ADC_MspInit+0xe0>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dd2:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <HAL_ADC_MspInit+0xe0>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <HAL_ADC_MspInit+0xe0>)
 8003dda:	2280      	movs	r2, #128	; 0x80
 8003ddc:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <HAL_ADC_MspInit+0xe0>)
 8003de0:	2280      	movs	r2, #128	; 0x80
 8003de2:	0052      	lsls	r2, r2, #1
 8003de4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_ADC_MspInit+0xe0>)
 8003de8:	2280      	movs	r2, #128	; 0x80
 8003dea:	00d2      	lsls	r2, r2, #3
 8003dec:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <HAL_ADC_MspInit+0xe0>)
 8003df0:	2220      	movs	r2, #32
 8003df2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <HAL_ADC_MspInit+0xe0>)
 8003df6:	2280      	movs	r2, #128	; 0x80
 8003df8:	0192      	lsls	r2, r2, #6
 8003dfa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_ADC_MspInit+0xe0>)
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 ffce 	bl	8004da0 <HAL_DMA_Init>
 8003e04:	1e03      	subs	r3, r0, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8003e08:	f7ff ff76 	bl	8003cf8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <HAL_ADC_MspInit+0xe0>)
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_ADC_MspInit+0xe0>)
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e18:	46c0      	nop			; (mov r8, r8)
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b00a      	add	sp, #40	; 0x28
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40012400 	.word	0x40012400
 8003e24:	40021000 	.word	0x40021000
 8003e28:	48000800 	.word	0x48000800
 8003e2c:	2000093c 	.word	0x2000093c
 8003e30:	40020008 	.word	0x40020008

08003e34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a06      	ldr	r2, [pc, #24]	; (8003e5c <HAL_RTC_MspInit+0x28>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d106      	bne.n	8003e54 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e46:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <HAL_RTC_MspInit+0x2c>)
 8003e48:	6a1a      	ldr	r2, [r3, #32]
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_RTC_MspInit+0x2c>)
 8003e4c:	2180      	movs	r1, #128	; 0x80
 8003e4e:	0209      	lsls	r1, r1, #8
 8003e50:	430a      	orrs	r2, r1
 8003e52:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40002800 	.word	0x40002800
 8003e60:	40021000 	.word	0x40021000

08003e64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <HAL_TIM_PWM_MspInit+0x34>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d10b      	bne.n	8003e8e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_TIM_PWM_MspInit+0x38>)
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_TIM_PWM_MspInit+0x38>)
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	61da      	str	r2, [r3, #28]
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_TIM_PWM_MspInit+0x38>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	2202      	movs	r2, #2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b004      	add	sp, #16
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <HAL_TIM_Base_MspInit+0x6c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d114      	bne.n	8003edc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003eb2:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <HAL_TIM_Base_MspInit+0x70>)
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <HAL_TIM_Base_MspInit+0x70>)
 8003eb8:	2110      	movs	r1, #16
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	61da      	str	r2, [r3, #28]
 8003ebe:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <HAL_TIM_Base_MspInit+0x70>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2100      	movs	r1, #0
 8003ece:	2011      	movs	r0, #17
 8003ed0:	f000 ff34 	bl	8004d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003ed4:	2011      	movs	r0, #17
 8003ed6:	f000 ff46 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  }
  else if(htim_base->Instance == TIM1)
  {
	  __HAL_RCC_TIM1_CLK_ENABLE();
  }
}
 8003eda:	e012      	b.n	8003f02 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance == TIM1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0c      	ldr	r2, [pc, #48]	; (8003f14 <HAL_TIM_Base_MspInit+0x74>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10d      	bne.n	8003f02 <HAL_TIM_Base_MspInit+0x62>
	  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <HAL_TIM_Base_MspInit+0x70>)
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_TIM_Base_MspInit+0x70>)
 8003eec:	2180      	movs	r1, #128	; 0x80
 8003eee:	0109      	lsls	r1, r1, #4
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	619a      	str	r2, [r3, #24]
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_TIM_Base_MspInit+0x70>)
 8003ef6:	699a      	ldr	r2, [r3, #24]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	4013      	ands	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	68bb      	ldr	r3, [r7, #8]
}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b004      	add	sp, #16
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	40001000 	.word	0x40001000
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40012c00 	.word	0x40012c00

08003f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f20:	230c      	movs	r3, #12
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	0018      	movs	r0, r3
 8003f26:	2314      	movs	r3, #20
 8003f28:	001a      	movs	r2, r3
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	f004 ff1f 	bl	8008d6e <memset>
  if(htim->Instance==TIM3)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <HAL_TIM_MspPostInit+0x74>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d123      	bne.n	8003f82 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_TIM_MspPostInit+0x78>)
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <HAL_TIM_MspPostInit+0x78>)
 8003f40:	2180      	movs	r1, #128	; 0x80
 8003f42:	0309      	lsls	r1, r1, #12
 8003f44:	430a      	orrs	r2, r1
 8003f46:	615a      	str	r2, [r3, #20]
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_TIM_MspPostInit+0x78>)
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	031b      	lsls	r3, r3, #12
 8003f50:	4013      	ands	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f56:	210c      	movs	r1, #12
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	2280      	movs	r2, #128	; 0x80
 8003f5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	187b      	adds	r3, r7, r1
 8003f60:	2202      	movs	r2, #2
 8003f62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	2200      	movs	r2, #0
 8003f68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f70:	187b      	adds	r3, r7, r1
 8003f72:	2200      	movs	r2, #0
 8003f74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	4a06      	ldr	r2, [pc, #24]	; (8003f94 <HAL_TIM_MspPostInit+0x7c>)
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	0010      	movs	r0, r2
 8003f7e:	f001 f8ed 	bl	800515c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b008      	add	sp, #32
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40021000 	.word	0x40021000
 8003f94:	48000800 	.word	0x48000800

08003f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08c      	sub	sp, #48	; 0x30
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa0:	231c      	movs	r3, #28
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	2314      	movs	r3, #20
 8003fa8:	001a      	movs	r2, r3
 8003faa:	2100      	movs	r1, #0
 8003fac:	f004 fedf 	bl	8008d6e <memset>
  if(huart->Instance==USART1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a41      	ldr	r2, [pc, #260]	; (80040bc <HAL_UART_MspInit+0x124>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d13c      	bne.n	8004034 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fba:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <HAL_UART_MspInit+0x128>)
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	4b40      	ldr	r3, [pc, #256]	; (80040c0 <HAL_UART_MspInit+0x128>)
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	01c9      	lsls	r1, r1, #7
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	619a      	str	r2, [r3, #24]
 8003fc8:	4b3d      	ldr	r3, [pc, #244]	; (80040c0 <HAL_UART_MspInit+0x128>)
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	01db      	lsls	r3, r3, #7
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd6:	4b3a      	ldr	r3, [pc, #232]	; (80040c0 <HAL_UART_MspInit+0x128>)
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <HAL_UART_MspInit+0x128>)
 8003fdc:	2180      	movs	r1, #128	; 0x80
 8003fde:	0289      	lsls	r1, r1, #10
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	615a      	str	r2, [r3, #20]
 8003fe4:	4b36      	ldr	r3, [pc, #216]	; (80040c0 <HAL_UART_MspInit+0x128>)
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	029b      	lsls	r3, r3, #10
 8003fec:	4013      	ands	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ff2:	211c      	movs	r1, #28
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	22c0      	movs	r2, #192	; 0xc0
 8003ff8:	00d2      	lsls	r2, r2, #3
 8003ffa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	2202      	movs	r2, #2
 8004000:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	187b      	adds	r3, r7, r1
 8004004:	2200      	movs	r2, #0
 8004006:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004008:	187b      	adds	r3, r7, r1
 800400a:	2203      	movs	r2, #3
 800400c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800400e:	187b      	adds	r3, r7, r1
 8004010:	2201      	movs	r2, #1
 8004012:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004014:	187a      	adds	r2, r7, r1
 8004016:	2390      	movs	r3, #144	; 0x90
 8004018:	05db      	lsls	r3, r3, #23
 800401a:	0011      	movs	r1, r2
 800401c:	0018      	movs	r0, r3
 800401e:	f001 f89d 	bl	800515c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004022:	2200      	movs	r2, #0
 8004024:	2100      	movs	r1, #0
 8004026:	201b      	movs	r0, #27
 8004028:	f000 fe88 	bl	8004d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800402c:	201b      	movs	r0, #27
 800402e:	f000 fe9a 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004032:	e03f      	b.n	80040b4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a22      	ldr	r2, [pc, #136]	; (80040c4 <HAL_UART_MspInit+0x12c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d13a      	bne.n	80040b4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800403e:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <HAL_UART_MspInit+0x128>)
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <HAL_UART_MspInit+0x128>)
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	0289      	lsls	r1, r1, #10
 8004048:	430a      	orrs	r2, r1
 800404a:	61da      	str	r2, [r3, #28]
 800404c:	4b1c      	ldr	r3, [pc, #112]	; (80040c0 <HAL_UART_MspInit+0x128>)
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	029b      	lsls	r3, r3, #10
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800405a:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <HAL_UART_MspInit+0x128>)
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <HAL_UART_MspInit+0x128>)
 8004060:	2180      	movs	r1, #128	; 0x80
 8004062:	0289      	lsls	r1, r1, #10
 8004064:	430a      	orrs	r2, r1
 8004066:	615a      	str	r2, [r3, #20]
 8004068:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <HAL_UART_MspInit+0x128>)
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	029b      	lsls	r3, r3, #10
 8004070:	4013      	ands	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004076:	211c      	movs	r1, #28
 8004078:	187b      	adds	r3, r7, r1
 800407a:	220c      	movs	r2, #12
 800407c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407e:	187b      	adds	r3, r7, r1
 8004080:	2202      	movs	r2, #2
 8004082:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004084:	187b      	adds	r3, r7, r1
 8004086:	2200      	movs	r2, #0
 8004088:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800408a:	187b      	adds	r3, r7, r1
 800408c:	2203      	movs	r2, #3
 800408e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004090:	187b      	adds	r3, r7, r1
 8004092:	2201      	movs	r2, #1
 8004094:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004096:	187a      	adds	r2, r7, r1
 8004098:	2390      	movs	r3, #144	; 0x90
 800409a:	05db      	lsls	r3, r3, #23
 800409c:	0011      	movs	r1, r2
 800409e:	0018      	movs	r0, r3
 80040a0:	f001 f85c 	bl	800515c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80040a4:	2200      	movs	r2, #0
 80040a6:	2100      	movs	r1, #0
 80040a8:	201c      	movs	r0, #28
 80040aa:	f000 fe47 	bl	8004d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80040ae:	201c      	movs	r0, #28
 80040b0:	f000 fe59 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b00c      	add	sp, #48	; 0x30
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40013800 	.word	0x40013800
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40004400 	.word	0x40004400

080040c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040d6:	e7fe      	b.n	80040d6 <HardFault_Handler+0x4>

080040d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80040dc:	46c0      	nop			; (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040f0:	f000 f96a 	bl	80043c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11))
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <EXTI4_15_IRQHandler+0x24>)
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	4013      	ands	r3, r2
 800410a:	d001      	beq.n	8004110 <EXTI4_15_IRQHandler+0x14>
	{
		handleGPIO_Pin11_Interrupt();
 800410c:	f000 f866 	bl	80041dc <handleGPIO_Pin11_Interrupt>
		//handleGPIO_Pin13_Interrupt();
	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	0018      	movs	r0, r3
 8004116:	f001 f9e7 	bl	80054e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40010400 	.word	0x40010400

08004124 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <DMA1_Channel1_IRQHandler+0x14>)
 800412a:	0018      	movs	r0, r3
 800412c:	f000 ff2c 	bl	8004f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	2000093c 	.word	0x2000093c

0800413c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004140:	4b03      	ldr	r3, [pc, #12]	; (8004150 <TIM6_IRQHandler+0x14>)
 8004142:	0018      	movs	r0, r3
 8004144:	f003 fb70 	bl	8007828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	2000087c 	.word	0x2000087c

08004154 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <SPI2_IRQHandler+0x14>)
 800415a:	0018      	movs	r0, r3
 800415c:	f002 fd1a 	bl	8006b94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	200002b8 	.word	0x200002b8

0800416c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <USART1_IRQHandler+0x14>)
 8004172:	0018      	movs	r0, r3
 8004174:	f004 f940 	bl	80083f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	200007dc 	.word	0x200007dc

08004184 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <USART2_IRQHandler+0x14>)
 800418a:	0018      	movs	r0, r3
 800418c:	f004 f934 	bl	80083f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	200008bc 	.word	0x200008bc

0800419c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	if (TIM6 == htim->Instance)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10b      	bne.n	80041c6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		if (btnPressed)
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d006      	beq.n	80041c6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			timerElapsed = true;
 80041b8:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f003 fa8f 	bl	80076e4 <HAL_TIM_Base_Stop_IT>
		}
	}
}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b002      	add	sp, #8
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	40001000 	.word	0x40001000
 80041d4:	200002a7 	.word	0x200002a7
 80041d8:	200002a8 	.word	0x200002a8

080041dc <handleGPIO_Pin11_Interrupt>:

static void handleGPIO_Pin11_Interrupt()
{
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
	//Use timer to handle debouncing
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11))
 80041e2:	4b21      	ldr	r3, [pc, #132]	; (8004268 <handleGPIO_Pin11_Interrupt+0x8c>)
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	4013      	ands	r3, r2
 80041ec:	d038      	beq.n	8004260 <handleGPIO_Pin11_Interrupt+0x84>
	{
		uint8_t pin11State = (uint8_t)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 80041ee:	1dfc      	adds	r4, r7, #7
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	4a1d      	ldr	r2, [pc, #116]	; (800426c <handleGPIO_Pin11_Interrupt+0x90>)
 80041f6:	0019      	movs	r1, r3
 80041f8:	0010      	movs	r0, r2
 80041fa:	f001 f91f 	bl	800543c <HAL_GPIO_ReadPin>
 80041fe:	0003      	movs	r3, r0
 8004200:	7023      	strb	r3, [r4, #0]

		if (GPIO_PIN_SET == pin11State)
 8004202:	1dfb      	adds	r3, r7, #7
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d10f      	bne.n	800422a <handleGPIO_Pin11_Interrupt+0x4e>
		{
			//rising edge
			if (!btnPressed)
 800420a:	4b19      	ldr	r3, [pc, #100]	; (8004270 <handleGPIO_Pin11_Interrupt+0x94>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2201      	movs	r2, #1
 8004212:	4053      	eors	r3, r2
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d022      	beq.n	8004260 <handleGPIO_Pin11_Interrupt+0x84>
			{
				btnPressed = true;
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <handleGPIO_Pin11_Interrupt+0x94>)
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim6);
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <handleGPIO_Pin11_Interrupt+0x98>)
 8004222:	0018      	movs	r0, r3
 8004224:	f003 fa3c 	bl	80076a0 <HAL_TIM_Base_Start_IT>
			btnPressed = false;
			timerElapsed = false;
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}
}
 8004228:	e01a      	b.n	8004260 <handleGPIO_Pin11_Interrupt+0x84>
		else if (GPIO_PIN_RESET == pin11State)
 800422a:	1dfb      	adds	r3, r7, #7
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d116      	bne.n	8004260 <handleGPIO_Pin11_Interrupt+0x84>
			if (timerElapsed && btnPressed)
 8004232:	4b11      	ldr	r3, [pc, #68]	; (8004278 <handleGPIO_Pin11_Interrupt+0x9c>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <handleGPIO_Pin11_Interrupt+0x70>
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <handleGPIO_Pin11_Interrupt+0x94>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <handleGPIO_Pin11_Interrupt+0x70>
				btnTrigger = true;
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <handleGPIO_Pin11_Interrupt+0xa0>)
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
			btnPressed = false;
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <handleGPIO_Pin11_Interrupt+0x94>)
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
			timerElapsed = false;
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <handleGPIO_Pin11_Interrupt+0x9c>)
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <handleGPIO_Pin11_Interrupt+0x98>)
 800425a:	0018      	movs	r0, r3
 800425c:	f003 fa42 	bl	80076e4 <HAL_TIM_Base_Stop_IT>
}
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	b003      	add	sp, #12
 8004266:	bd90      	pop	{r4, r7, pc}
 8004268:	40010400 	.word	0x40010400
 800426c:	48000800 	.word	0x48000800
 8004270:	200002a7 	.word	0x200002a7
 8004274:	2000087c 	.word	0x2000087c
 8004278:	200002a8 	.word	0x200002a8
 800427c:	2000029c 	.word	0x2000029c

08004280 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <_sbrk+0x50>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <_sbrk+0x16>
		heap_end = &end;
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <_sbrk+0x50>)
 8004292:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <_sbrk+0x54>)
 8004294:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004296:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <_sbrk+0x50>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <_sbrk+0x50>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	18d3      	adds	r3, r2, r3
 80042a4:	466a      	mov	r2, sp
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d907      	bls.n	80042ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80042aa:	f004 fd2d 	bl	8008d08 <__errno>
 80042ae:	0003      	movs	r3, r0
 80042b0:	220c      	movs	r2, #12
 80042b2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80042b4:	2301      	movs	r3, #1
 80042b6:	425b      	negs	r3, r3
 80042b8:	e006      	b.n	80042c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <_sbrk+0x50>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	18d2      	adds	r2, r2, r3
 80042c2:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <_sbrk+0x50>)
 80042c4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80042c6:	68fb      	ldr	r3, [r7, #12]
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b004      	add	sp, #16
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	200002ac 	.word	0x200002ac
 80042d4:	200009c8 	.word	0x200009c8

080042d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042e4:	480d      	ldr	r0, [pc, #52]	; (800431c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042e8:	480d      	ldr	r0, [pc, #52]	; (8004320 <LoopForever+0x6>)
  ldr r1, =_edata
 80042ea:	490e      	ldr	r1, [pc, #56]	; (8004324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042ec:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <LoopForever+0xe>)
  movs r3, #0
 80042ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042f0:	e002      	b.n	80042f8 <LoopCopyDataInit>

080042f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042f6:	3304      	adds	r3, #4

080042f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042fc:	d3f9      	bcc.n	80042f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042fe:	4a0b      	ldr	r2, [pc, #44]	; (800432c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004300:	4c0b      	ldr	r4, [pc, #44]	; (8004330 <LoopForever+0x16>)
  movs r3, #0
 8004302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004304:	e001      	b.n	800430a <LoopFillZerobss>

08004306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004308:	3204      	adds	r2, #4

0800430a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800430a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800430c:	d3fb      	bcc.n	8004306 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800430e:	f7ff ffe3 	bl	80042d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004312:	f004 fcff 	bl	8008d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004316:	f7ff f9a7 	bl	8003668 <main>

0800431a <LoopForever>:

LoopForever:
    b LoopForever
 800431a:	e7fe      	b.n	800431a <LoopForever>
  ldr   r0, =_estack
 800431c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004324:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8004328:	0800b310 	.word	0x0800b310
  ldr r2, =_sbss
 800432c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8004330:	200009c8 	.word	0x200009c8

08004334 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004334:	e7fe      	b.n	8004334 <ADC1_IRQHandler>
	...

08004338 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <HAL_Init+0x24>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_Init+0x24>)
 8004342:	2110      	movs	r1, #16
 8004344:	430a      	orrs	r2, r1
 8004346:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004348:	2000      	movs	r0, #0
 800434a:	f000 f809 	bl	8004360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800434e:	f7ff fcd9 	bl	8003d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	40022000 	.word	0x40022000

08004360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004368:	4b14      	ldr	r3, [pc, #80]	; (80043bc <HAL_InitTick+0x5c>)
 800436a:	681c      	ldr	r4, [r3, #0]
 800436c:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <HAL_InitTick+0x60>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	0019      	movs	r1, r3
 8004372:	23fa      	movs	r3, #250	; 0xfa
 8004374:	0098      	lsls	r0, r3, #2
 8004376:	f7fb fed9 	bl	800012c <__udivsi3>
 800437a:	0003      	movs	r3, r0
 800437c:	0019      	movs	r1, r3
 800437e:	0020      	movs	r0, r4
 8004380:	f7fb fed4 	bl	800012c <__udivsi3>
 8004384:	0003      	movs	r3, r0
 8004386:	0018      	movs	r0, r3
 8004388:	f000 fcfd 	bl	8004d86 <HAL_SYSTICK_Config>
 800438c:	1e03      	subs	r3, r0, #0
 800438e:	d001      	beq.n	8004394 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e00f      	b.n	80043b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d80b      	bhi.n	80043b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	2301      	movs	r3, #1
 800439e:	425b      	negs	r3, r3
 80043a0:	2200      	movs	r2, #0
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 fcca 	bl	8004d3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_InitTick+0x64>)
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b003      	add	sp, #12
 80043ba:	bd90      	pop	{r4, r7, pc}
 80043bc:	20000020 	.word	0x20000020
 80043c0:	20000028 	.word	0x20000028
 80043c4:	20000024 	.word	0x20000024

080043c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_IncTick+0x1c>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	001a      	movs	r2, r3
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_IncTick+0x20>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	18d2      	adds	r2, r2, r3
 80043d8:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <HAL_IncTick+0x20>)
 80043da:	601a      	str	r2, [r3, #0]
}
 80043dc:	46c0      	nop			; (mov r8, r8)
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	20000028 	.word	0x20000028
 80043e8:	200009c0 	.word	0x200009c0

080043ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  return uwTick;
 80043f0:	4b02      	ldr	r3, [pc, #8]	; (80043fc <HAL_GetTick+0x10>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	200009c0 	.word	0x200009c0

08004400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004408:	f7ff fff0 	bl	80043ec <HAL_GetTick>
 800440c:	0003      	movs	r3, r0
 800440e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	d005      	beq.n	8004426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <HAL_Delay+0x40>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	001a      	movs	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	189b      	adds	r3, r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	f7ff ffe0 	bl	80043ec <HAL_GetTick>
 800442c:	0002      	movs	r2, r0
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	429a      	cmp	r2, r3
 8004436:	d8f7      	bhi.n	8004428 <HAL_Delay+0x28>
  {
  }
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	b004      	add	sp, #16
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000028 	.word	0x20000028

08004444 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800444c:	230f      	movs	r3, #15
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e125      	b.n	80046ae <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2234      	movs	r2, #52	; 0x34
 8004474:	2100      	movs	r1, #0
 8004476:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	0018      	movs	r0, r3
 800447c:	f7ff fc66 	bl	8003d4c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	2210      	movs	r2, #16
 8004486:	4013      	ands	r3, r2
 8004488:	d000      	beq.n	800448c <HAL_ADC_Init+0x48>
 800448a:	e103      	b.n	8004694 <HAL_ADC_Init+0x250>
 800448c:	230f      	movs	r3, #15
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d000      	beq.n	8004498 <HAL_ADC_Init+0x54>
 8004496:	e0fd      	b.n	8004694 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2204      	movs	r2, #4
 80044a0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80044a2:	d000      	beq.n	80044a6 <HAL_ADC_Init+0x62>
 80044a4:	e0f6      	b.n	8004694 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	4a83      	ldr	r2, [pc, #524]	; (80046b8 <HAL_ADC_Init+0x274>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	2202      	movs	r2, #2
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2203      	movs	r2, #3
 80044be:	4013      	ands	r3, r2
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d112      	bne.n	80044ea <HAL_ADC_Init+0xa6>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2201      	movs	r2, #1
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d009      	beq.n	80044e6 <HAL_ADC_Init+0xa2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	401a      	ands	r2, r3
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d101      	bne.n	80044ea <HAL_ADC_Init+0xa6>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_ADC_Init+0xa8>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d116      	bne.n	800451e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2218      	movs	r2, #24
 80044f8:	4393      	bics	r3, r2
 80044fa:	0019      	movs	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	0899      	lsrs	r1, r3, #2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4964      	ldr	r1, [pc, #400]	; (80046bc <HAL_ADC_Init+0x278>)
 800452a:	400a      	ands	r2, r1
 800452c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	7e1b      	ldrb	r3, [r3, #24]
 8004532:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	7e5b      	ldrb	r3, [r3, #25]
 8004538:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800453a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	7e9b      	ldrb	r3, [r3, #26]
 8004540:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004542:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	2b01      	cmp	r3, #1
 800454a:	d002      	beq.n	8004552 <HAL_ADC_Init+0x10e>
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	015b      	lsls	r3, r3, #5
 8004550:	e000      	b.n	8004554 <HAL_ADC_Init+0x110>
 8004552:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004554:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800455a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d101      	bne.n	8004568 <HAL_ADC_Init+0x124>
 8004564:	2304      	movs	r3, #4
 8004566:	e000      	b.n	800456a <HAL_ADC_Init+0x126>
 8004568:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800456a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2124      	movs	r1, #36	; 0x24
 8004570:	5c5b      	ldrb	r3, [r3, r1]
 8004572:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004574:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4313      	orrs	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	7edb      	ldrb	r3, [r3, #27]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d115      	bne.n	80045b0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7e9b      	ldrb	r3, [r3, #26]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	0252      	lsls	r2, r2, #9
 8004592:	4313      	orrs	r3, r2
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	e00b      	b.n	80045b0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	2220      	movs	r2, #32
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	2201      	movs	r2, #1
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	23c2      	movs	r3, #194	; 0xc2
 80045b6:	33ff      	adds	r3, #255	; 0xff
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d007      	beq.n	80045cc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80045c4:	4313      	orrs	r3, r2
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68d9      	ldr	r1, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	430a      	orrs	r2, r1
 80045da:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	2380      	movs	r3, #128	; 0x80
 80045e2:	055b      	lsls	r3, r3, #21
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d01b      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d017      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d013      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d00f      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	2b04      	cmp	r3, #4
 8004606:	d00b      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	2b05      	cmp	r3, #5
 800460e:	d007      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2b06      	cmp	r3, #6
 8004616:	d003      	beq.n	8004620 <HAL_ADC_Init+0x1dc>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	2b07      	cmp	r3, #7
 800461e:	d112      	bne.n	8004646 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695a      	ldr	r2, [r3, #20]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2107      	movs	r1, #7
 800462c:	438a      	bics	r2, r1
 800462e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6959      	ldr	r1, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	2207      	movs	r2, #7
 800463c:	401a      	ands	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a1c      	ldr	r2, [pc, #112]	; (80046c0 <HAL_ADC_Init+0x27c>)
 800464e:	4013      	ands	r3, r2
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d10b      	bne.n	800466e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	2203      	movs	r2, #3
 8004662:	4393      	bics	r3, r2
 8004664:	2201      	movs	r2, #1
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800466c:	e01c      	b.n	80046a8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	2212      	movs	r2, #18
 8004674:	4393      	bics	r3, r2
 8004676:	2210      	movs	r2, #16
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	2201      	movs	r2, #1
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800468a:	230f      	movs	r3, #15
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004692:	e009      	b.n	80046a8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	2210      	movs	r2, #16
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80046a0:	230f      	movs	r3, #15
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	2201      	movs	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046a8:	230f      	movs	r3, #15
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	781b      	ldrb	r3, [r3, #0]
}
 80046ae:	0018      	movs	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b004      	add	sp, #16
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	fffffefd 	.word	0xfffffefd
 80046bc:	fffe0219 	.word	0xfffe0219
 80046c0:	833fffe7 	.word	0x833fffe7

080046c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046d0:	2317      	movs	r3, #23
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2204      	movs	r2, #4
 80046e0:	4013      	ands	r3, r2
 80046e2:	d15e      	bne.n	80047a2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2234      	movs	r2, #52	; 0x34
 80046e8:	5c9b      	ldrb	r3, [r3, r2]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_ADC_Start_DMA+0x2e>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e05e      	b.n	80047b0 <HAL_ADC_Start_DMA+0xec>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2234      	movs	r2, #52	; 0x34
 80046f6:	2101      	movs	r1, #1
 80046f8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	7e5b      	ldrb	r3, [r3, #25]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d007      	beq.n	8004712 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004702:	2317      	movs	r3, #23
 8004704:	18fc      	adds	r4, r7, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	0018      	movs	r0, r3
 800470a:	f000 f96b 	bl	80049e4 <ADC_Enable>
 800470e:	0003      	movs	r3, r0
 8004710:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004712:	2317      	movs	r3, #23
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d146      	bne.n	80047aa <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	4a25      	ldr	r2, [pc, #148]	; (80047b8 <HAL_ADC_Start_DMA+0xf4>)
 8004722:	4013      	ands	r3, r2
 8004724:	2280      	movs	r2, #128	; 0x80
 8004726:	0052      	lsls	r2, r2, #1
 8004728:	431a      	orrs	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2234      	movs	r2, #52	; 0x34
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <HAL_ADC_Start_DMA+0xf8>)
 8004742:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	4a1d      	ldr	r2, [pc, #116]	; (80047c0 <HAL_ADC_Start_DMA+0xfc>)
 800474a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	4a1c      	ldr	r2, [pc, #112]	; (80047c4 <HAL_ADC_Start_DMA+0x100>)
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	221c      	movs	r2, #28
 800475a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2110      	movs	r1, #16
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2101      	movs	r1, #1
 8004778:	430a      	orrs	r2, r1
 800477a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3340      	adds	r3, #64	; 0x40
 8004786:	0019      	movs	r1, r3
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f000 fb50 	bl	8004e30 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2104      	movs	r1, #4
 800479c:	430a      	orrs	r2, r1
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	e003      	b.n	80047aa <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047a2:	2317      	movs	r3, #23
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	2202      	movs	r2, #2
 80047a8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80047aa:	2317      	movs	r3, #23
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	781b      	ldrb	r3, [r3, #0]
}
 80047b0:	0018      	movs	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b007      	add	sp, #28
 80047b6:	bd90      	pop	{r4, r7, pc}
 80047b8:	fffff0fe 	.word	0xfffff0fe
 80047bc:	08004add 	.word	0x08004add
 80047c0:	08004b91 	.word	0x08004b91
 80047c4:	08004baf 	.word	0x08004baf

080047c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80047d0:	46c0      	nop			; (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b002      	add	sp, #8
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b002      	add	sp, #8
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b002      	add	sp, #8
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004802:	230f      	movs	r3, #15
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	055b      	lsls	r3, r3, #21
 8004816:	429a      	cmp	r2, r3
 8004818:	d011      	beq.n	800483e <HAL_ADC_ConfigChannel+0x46>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d00d      	beq.n	800483e <HAL_ADC_ConfigChannel+0x46>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	2b02      	cmp	r3, #2
 8004828:	d009      	beq.n	800483e <HAL_ADC_ConfigChannel+0x46>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	2b03      	cmp	r3, #3
 8004830:	d005      	beq.n	800483e <HAL_ADC_ConfigChannel+0x46>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	2b04      	cmp	r3, #4
 8004838:	d001      	beq.n	800483e <HAL_ADC_ConfigChannel+0x46>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2234      	movs	r2, #52	; 0x34
 8004842:	5c9b      	ldrb	r3, [r3, r2]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_ADC_ConfigChannel+0x54>
 8004848:	2302      	movs	r3, #2
 800484a:	e0bb      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x1cc>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2234      	movs	r2, #52	; 0x34
 8004850:	2101      	movs	r1, #1
 8004852:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2204      	movs	r2, #4
 800485c:	4013      	ands	r3, r2
 800485e:	d000      	beq.n	8004862 <HAL_ADC_ConfigChannel+0x6a>
 8004860:	e09f      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4a59      	ldr	r2, [pc, #356]	; (80049cc <HAL_ADC_ConfigChannel+0x1d4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d100      	bne.n	800486e <HAL_ADC_ConfigChannel+0x76>
 800486c:	e077      	b.n	800495e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2201      	movs	r2, #1
 800487a:	409a      	lsls	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	055b      	lsls	r3, r3, #21
 800488c:	429a      	cmp	r2, r3
 800488e:	d037      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x108>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d033      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x108>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	2b02      	cmp	r3, #2
 800489e:	d02f      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x108>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d02b      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x108>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d027      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x108>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d023      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x108>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	2b06      	cmp	r3, #6
 80048be:	d01f      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x108>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	2b07      	cmp	r3, #7
 80048c6:	d01b      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	2107      	movs	r1, #7
 80048d4:	400b      	ands	r3, r1
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d012      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2107      	movs	r1, #7
 80048e6:	438a      	bics	r2, r1
 80048e8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6959      	ldr	r1, [r3, #20]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2207      	movs	r2, #7
 80048f6:	401a      	ands	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b10      	cmp	r3, #16
 8004906:	d003      	beq.n	8004910 <HAL_ADC_ConfigChannel+0x118>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b11      	cmp	r3, #17
 800490e:	d152      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004910:	4b2f      	ldr	r3, [pc, #188]	; (80049d0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004912:	6819      	ldr	r1, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b10      	cmp	r3, #16
 800491a:	d102      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x12a>
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	e001      	b.n	8004926 <HAL_ADC_ConfigChannel+0x12e>
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	03db      	lsls	r3, r3, #15
 8004926:	4a2a      	ldr	r2, [pc, #168]	; (80049d0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004928:	430b      	orrs	r3, r1
 800492a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b10      	cmp	r3, #16
 8004932:	d140      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004934:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <HAL_ADC_ConfigChannel+0x1dc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4927      	ldr	r1, [pc, #156]	; (80049d8 <HAL_ADC_ConfigChannel+0x1e0>)
 800493a:	0018      	movs	r0, r3
 800493c:	f7fb fbf6 	bl	800012c <__udivsi3>
 8004940:	0003      	movs	r3, r0
 8004942:	001a      	movs	r2, r3
 8004944:	0013      	movs	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	189b      	adds	r3, r3, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800494e:	e002      	b.n	8004956 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	3b01      	subs	r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f9      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x158>
 800495c:	e02b      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2101      	movs	r1, #1
 800496a:	4099      	lsls	r1, r3
 800496c:	000b      	movs	r3, r1
 800496e:	43d9      	mvns	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	400a      	ands	r2, r1
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b10      	cmp	r3, #16
 800497e:	d003      	beq.n	8004988 <HAL_ADC_ConfigChannel+0x190>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b11      	cmp	r3, #17
 8004986:	d116      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <HAL_ADC_ConfigChannel+0x1d8>)
 800498a:	6819      	ldr	r1, [r3, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b10      	cmp	r3, #16
 8004992:	d101      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x1a0>
 8004994:	4a11      	ldr	r2, [pc, #68]	; (80049dc <HAL_ADC_ConfigChannel+0x1e4>)
 8004996:	e000      	b.n	800499a <HAL_ADC_ConfigChannel+0x1a2>
 8004998:	4a11      	ldr	r2, [pc, #68]	; (80049e0 <HAL_ADC_ConfigChannel+0x1e8>)
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <HAL_ADC_ConfigChannel+0x1d8>)
 800499c:	400a      	ands	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e009      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	2220      	movs	r2, #32
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80049ae:	230f      	movs	r3, #15
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	2201      	movs	r2, #1
 80049b4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2234      	movs	r2, #52	; 0x34
 80049ba:	2100      	movs	r1, #0
 80049bc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80049be:	230f      	movs	r3, #15
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	781b      	ldrb	r3, [r3, #0]
}
 80049c4:	0018      	movs	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b004      	add	sp, #16
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	00001001 	.word	0x00001001
 80049d0:	40012708 	.word	0x40012708
 80049d4:	20000020 	.word	0x20000020
 80049d8:	000f4240 	.word	0x000f4240
 80049dc:	ff7fffff 	.word	0xff7fffff
 80049e0:	ffbfffff 	.word	0xffbfffff

080049e4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2203      	movs	r2, #3
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d112      	bne.n	8004a28 <ADC_Enable+0x44>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d009      	beq.n	8004a24 <ADC_Enable+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	2380      	movs	r3, #128	; 0x80
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d101      	bne.n	8004a28 <ADC_Enable+0x44>
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <ADC_Enable+0x46>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d14b      	bne.n	8004ac6 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4a26      	ldr	r2, [pc, #152]	; (8004ad0 <ADC_Enable+0xec>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	d00d      	beq.n	8004a56 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	2210      	movs	r2, #16
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e038      	b.n	8004ac8 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2101      	movs	r1, #1
 8004a62:	430a      	orrs	r2, r1
 8004a64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <ADC_Enable+0xf0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	491b      	ldr	r1, [pc, #108]	; (8004ad8 <ADC_Enable+0xf4>)
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7fb fb5d 	bl	800012c <__udivsi3>
 8004a72:	0003      	movs	r3, r0
 8004a74:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a76:	e002      	b.n	8004a7e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f9      	bne.n	8004a78 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a84:	f7ff fcb2 	bl	80043ec <HAL_GetTick>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a8c:	e014      	b.n	8004ab8 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a8e:	f7ff fcad 	bl	80043ec <HAL_GetTick>
 8004a92:	0002      	movs	r2, r0
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d90d      	bls.n	8004ab8 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	2201      	movs	r2, #1
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e007      	b.n	8004ac8 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d1e3      	bne.n	8004a8e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b004      	add	sp, #16
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	80000017 	.word	0x80000017
 8004ad4:	20000020 	.word	0x20000020
 8004ad8:	000f4240 	.word	0x000f4240

08004adc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	2250      	movs	r2, #80	; 0x50
 8004af0:	4013      	ands	r3, r2
 8004af2:	d140      	bne.n	8004b76 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	0092      	lsls	r2, r2, #2
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	23c0      	movs	r3, #192	; 0xc0
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d12d      	bne.n	8004b6c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d129      	bne.n	8004b6c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2208      	movs	r2, #8
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d122      	bne.n	8004b6c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d110      	bne.n	8004b54 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	210c      	movs	r1, #12
 8004b3e:	438a      	bics	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <ADC_DMAConvCplt+0xb0>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38
 8004b52:	e00b      	b.n	8004b6c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	2220      	movs	r2, #32
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	2201      	movs	r2, #1
 8004b66:	431a      	orrs	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7ff fe2a 	bl	80047c8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004b74:	e005      	b.n	8004b82 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	0010      	movs	r0, r2
 8004b80:	4798      	blx	r3
}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b004      	add	sp, #16
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	fffffefe 	.word	0xfffffefe

08004b90 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f7ff fe19 	bl	80047d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b004      	add	sp, #16
 8004bac:	bd80      	pop	{r7, pc}

08004bae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	2240      	movs	r2, #64	; 0x40
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	2204      	movs	r2, #4
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f7ff fe06 	bl	80047e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b004      	add	sp, #16
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	0002      	movs	r2, r0
 8004bec:	1dfb      	adds	r3, r7, #7
 8004bee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004bf0:	1dfb      	adds	r3, r7, #7
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8004bf6:	d809      	bhi.n	8004c0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bf8:	1dfb      	adds	r3, r7, #7
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	001a      	movs	r2, r3
 8004bfe:	231f      	movs	r3, #31
 8004c00:	401a      	ands	r2, r3
 8004c02:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <__NVIC_EnableIRQ+0x30>)
 8004c04:	2101      	movs	r1, #1
 8004c06:	4091      	lsls	r1, r2
 8004c08:	000a      	movs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]
  }
}
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b002      	add	sp, #8
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	e000e100 	.word	0xe000e100

08004c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c18:	b590      	push	{r4, r7, lr}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	0002      	movs	r2, r0
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	1dfb      	adds	r3, r7, #7
 8004c24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c26:	1dfb      	adds	r3, r7, #7
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c2c:	d828      	bhi.n	8004c80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c2e:	4a2f      	ldr	r2, [pc, #188]	; (8004cec <__NVIC_SetPriority+0xd4>)
 8004c30:	1dfb      	adds	r3, r7, #7
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	b25b      	sxtb	r3, r3
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	33c0      	adds	r3, #192	; 0xc0
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	589b      	ldr	r3, [r3, r2]
 8004c3e:	1dfa      	adds	r2, r7, #7
 8004c40:	7812      	ldrb	r2, [r2, #0]
 8004c42:	0011      	movs	r1, r2
 8004c44:	2203      	movs	r2, #3
 8004c46:	400a      	ands	r2, r1
 8004c48:	00d2      	lsls	r2, r2, #3
 8004c4a:	21ff      	movs	r1, #255	; 0xff
 8004c4c:	4091      	lsls	r1, r2
 8004c4e:	000a      	movs	r2, r1
 8004c50:	43d2      	mvns	r2, r2
 8004c52:	401a      	ands	r2, r3
 8004c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	22ff      	movs	r2, #255	; 0xff
 8004c5c:	401a      	ands	r2, r3
 8004c5e:	1dfb      	adds	r3, r7, #7
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	0018      	movs	r0, r3
 8004c64:	2303      	movs	r3, #3
 8004c66:	4003      	ands	r3, r0
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c6c:	481f      	ldr	r0, [pc, #124]	; (8004cec <__NVIC_SetPriority+0xd4>)
 8004c6e:	1dfb      	adds	r3, r7, #7
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b25b      	sxtb	r3, r3
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	430a      	orrs	r2, r1
 8004c78:	33c0      	adds	r3, #192	; 0xc0
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004c7e:	e031      	b.n	8004ce4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <__NVIC_SetPriority+0xd8>)
 8004c82:	1dfb      	adds	r3, r7, #7
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	0019      	movs	r1, r3
 8004c88:	230f      	movs	r3, #15
 8004c8a:	400b      	ands	r3, r1
 8004c8c:	3b08      	subs	r3, #8
 8004c8e:	089b      	lsrs	r3, r3, #2
 8004c90:	3306      	adds	r3, #6
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	18d3      	adds	r3, r2, r3
 8004c96:	3304      	adds	r3, #4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	1dfa      	adds	r2, r7, #7
 8004c9c:	7812      	ldrb	r2, [r2, #0]
 8004c9e:	0011      	movs	r1, r2
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	400a      	ands	r2, r1
 8004ca4:	00d2      	lsls	r2, r2, #3
 8004ca6:	21ff      	movs	r1, #255	; 0xff
 8004ca8:	4091      	lsls	r1, r2
 8004caa:	000a      	movs	r2, r1
 8004cac:	43d2      	mvns	r2, r2
 8004cae:	401a      	ands	r2, r3
 8004cb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	22ff      	movs	r2, #255	; 0xff
 8004cb8:	401a      	ands	r2, r3
 8004cba:	1dfb      	adds	r3, r7, #7
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	4003      	ands	r3, r0
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cc8:	4809      	ldr	r0, [pc, #36]	; (8004cf0 <__NVIC_SetPriority+0xd8>)
 8004cca:	1dfb      	adds	r3, r7, #7
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	001c      	movs	r4, r3
 8004cd0:	230f      	movs	r3, #15
 8004cd2:	4023      	ands	r3, r4
 8004cd4:	3b08      	subs	r3, #8
 8004cd6:	089b      	lsrs	r3, r3, #2
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	3306      	adds	r3, #6
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	18c3      	adds	r3, r0, r3
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b003      	add	sp, #12
 8004cea:	bd90      	pop	{r4, r7, pc}
 8004cec:	e000e100 	.word	0xe000e100
 8004cf0:	e000ed00 	.word	0xe000ed00

08004cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <SysTick_Config+0x40>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d901      	bls.n	8004d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d06:	2301      	movs	r3, #1
 8004d08:	e010      	b.n	8004d2c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <SysTick_Config+0x44>)
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d12:	2301      	movs	r3, #1
 8004d14:	425b      	negs	r3, r3
 8004d16:	2103      	movs	r1, #3
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f7ff ff7d 	bl	8004c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <SysTick_Config+0x44>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <SysTick_Config+0x44>)
 8004d26:	2207      	movs	r2, #7
 8004d28:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b002      	add	sp, #8
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	00ffffff 	.word	0x00ffffff
 8004d38:	e000e010 	.word	0xe000e010

08004d3c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
 8004d46:	210f      	movs	r1, #15
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	1c02      	adds	r2, r0, #0
 8004d4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	187b      	adds	r3, r7, r1
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	0011      	movs	r1, r2
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f7ff ff5d 	bl	8004c18 <__NVIC_SetPriority>
}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b004      	add	sp, #16
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	0002      	movs	r2, r0
 8004d6e:	1dfb      	adds	r3, r7, #7
 8004d70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d72:	1dfb      	adds	r3, r7, #7
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7ff ff33 	bl	8004be4 <__NVIC_EnableIRQ>
}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b002      	add	sp, #8
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7ff ffaf 	bl	8004cf4 <SysTick_Config>
 8004d96:	0003      	movs	r3, r0
}
 8004d98:	0018      	movs	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e036      	b.n	8004e24 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2221      	movs	r2, #33	; 0x21
 8004dba:	2102      	movs	r1, #2
 8004dbc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_DMA_Init+0x8c>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	0018      	movs	r0, r3
 8004e08:	f000 f98c 	bl	8005124 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2221      	movs	r2, #33	; 0x21
 8004e16:	2101      	movs	r1, #1
 8004e18:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	2100      	movs	r1, #0
 8004e20:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}  
 8004e24:	0018      	movs	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b004      	add	sp, #16
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	ffffc00f 	.word	0xffffc00f

08004e30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2317      	movs	r3, #23
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	5c9b      	ldrb	r3, [r3, r2]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_DMA_Start_IT+0x24>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e04f      	b.n	8004ef4 <HAL_DMA_Start_IT+0xc4>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	2101      	movs	r1, #1
 8004e5a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2221      	movs	r2, #33	; 0x21
 8004e60:	5c9b      	ldrb	r3, [r3, r2]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d13a      	bne.n	8004ede <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2221      	movs	r2, #33	; 0x21
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2101      	movs	r1, #1
 8004e82:	438a      	bics	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f91d 	bl	80050cc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	210e      	movs	r1, #14
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e00f      	b.n	8004ecc <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	210a      	movs	r1, #10
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	438a      	bics	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e007      	b.n	8004eee <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004ee6:	2317      	movs	r3, #23
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	2202      	movs	r2, #2
 8004eec:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8004eee:	2317      	movs	r3, #23
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	781b      	ldrb	r3, [r3, #0]
} 
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b006      	add	sp, #24
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f04:	230f      	movs	r3, #15
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2221      	movs	r2, #33	; 0x21
 8004f10:	5c9b      	ldrb	r3, [r3, r2]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d007      	beq.n	8004f28 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004f1e:	230f      	movs	r3, #15
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	e028      	b.n	8004f7a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	210e      	movs	r1, #14
 8004f34:	438a      	bics	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2101      	movs	r1, #1
 8004f44:	438a      	bics	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f50:	2101      	movs	r1, #1
 8004f52:	4091      	lsls	r1, r2
 8004f54:	000a      	movs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2221      	movs	r2, #33	; 0x21
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	2100      	movs	r1, #0
 8004f66:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d004      	beq.n	8004f7a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	0010      	movs	r0, r2
 8004f78:	4798      	blx	r3
    } 
  }
  return status;
 8004f7a:	230f      	movs	r3, #15
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	781b      	ldrb	r3, [r3, #0]
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b004      	add	sp, #16
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	0013      	movs	r3, r2
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4013      	ands	r3, r2
 8004fae:	d024      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x72>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d020      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d107      	bne.n	8004fd4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2104      	movs	r1, #4
 8004fd0:	438a      	bics	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fdc:	2104      	movs	r1, #4
 8004fde:	4091      	lsls	r1, r2
 8004fe0:	000a      	movs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d100      	bne.n	8004fee <HAL_DMA_IRQHandler+0x66>
 8004fec:	e06a      	b.n	80050c4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	0010      	movs	r0, r2
 8004ff6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004ff8:	e064      	b.n	80050c4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2202      	movs	r2, #2
 8005000:	409a      	lsls	r2, r3
 8005002:	0013      	movs	r3, r2
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4013      	ands	r3, r2
 8005008:	d02b      	beq.n	8005062 <HAL_DMA_IRQHandler+0xda>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2202      	movs	r2, #2
 800500e:	4013      	ands	r3, r2
 8005010:	d027      	beq.n	8005062 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2220      	movs	r2, #32
 800501a:	4013      	ands	r3, r2
 800501c:	d10b      	bne.n	8005036 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	210a      	movs	r1, #10
 800502a:	438a      	bics	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2221      	movs	r2, #33	; 0x21
 8005032:	2101      	movs	r1, #1
 8005034:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503e:	2102      	movs	r1, #2
 8005040:	4091      	lsls	r1, r2
 8005042:	000a      	movs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	2100      	movs	r1, #0
 800504c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d036      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	0010      	movs	r0, r2
 800505e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005060:	e030      	b.n	80050c4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	2208      	movs	r2, #8
 8005068:	409a      	lsls	r2, r3
 800506a:	0013      	movs	r3, r2
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4013      	ands	r3, r2
 8005070:	d028      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x13c>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2208      	movs	r2, #8
 8005076:	4013      	ands	r3, r2
 8005078:	d024      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	210e      	movs	r1, #14
 8005086:	438a      	bics	r2, r1
 8005088:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	2101      	movs	r1, #1
 8005094:	4091      	lsls	r1, r2
 8005096:	000a      	movs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2221      	movs	r2, #33	; 0x21
 80050a4:	2101      	movs	r1, #1
 80050a6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	2100      	movs	r1, #0
 80050ae:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	0010      	movs	r0, r2
 80050c0:	4798      	blx	r3
    }
   }
}  
 80050c2:	e7ff      	b.n	80050c4 <HAL_DMA_IRQHandler+0x13c>
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b004      	add	sp, #16
 80050ca:	bd80      	pop	{r7, pc}

080050cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	2101      	movs	r1, #1
 80050e4:	4091      	lsls	r1, r2
 80050e6:	000a      	movs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d108      	bne.n	800510c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800510a:	e007      	b.n	800511c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]
}
 800511c:	46c0      	nop			; (mov r8, r8)
 800511e:	46bd      	mov	sp, r7
 8005120:	b004      	add	sp, #16
 8005122:	bd80      	pop	{r7, pc}

08005124 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a08      	ldr	r2, [pc, #32]	; (8005154 <DMA_CalcBaseAndBitshift+0x30>)
 8005132:	4694      	mov	ip, r2
 8005134:	4463      	add	r3, ip
 8005136:	2114      	movs	r1, #20
 8005138:	0018      	movs	r0, r3
 800513a:	f7fa fff7 	bl	800012c <__udivsi3>
 800513e:	0003      	movs	r3, r0
 8005140:	009a      	lsls	r2, r3, #2
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a03      	ldr	r2, [pc, #12]	; (8005158 <DMA_CalcBaseAndBitshift+0x34>)
 800514a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b002      	add	sp, #8
 8005152:	bd80      	pop	{r7, pc}
 8005154:	bffdfff8 	.word	0xbffdfff8
 8005158:	40020000 	.word	0x40020000

0800515c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800516a:	e14f      	b.n	800540c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2101      	movs	r1, #1
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4091      	lsls	r1, r2
 8005176:	000a      	movs	r2, r1
 8005178:	4013      	ands	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d100      	bne.n	8005184 <HAL_GPIO_Init+0x28>
 8005182:	e140      	b.n	8005406 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d00b      	beq.n	80051a4 <HAL_GPIO_Init+0x48>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d007      	beq.n	80051a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005198:	2b11      	cmp	r3, #17
 800519a:	d003      	beq.n	80051a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b12      	cmp	r3, #18
 80051a2:	d130      	bne.n	8005206 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	2203      	movs	r2, #3
 80051b0:	409a      	lsls	r2, r3
 80051b2:	0013      	movs	r3, r2
 80051b4:	43da      	mvns	r2, r3
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4013      	ands	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	409a      	lsls	r2, r3
 80051c6:	0013      	movs	r3, r2
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051da:	2201      	movs	r2, #1
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	409a      	lsls	r2, r3
 80051e0:	0013      	movs	r3, r2
 80051e2:	43da      	mvns	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4013      	ands	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	091b      	lsrs	r3, r3, #4
 80051f0:	2201      	movs	r2, #1
 80051f2:	401a      	ands	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	409a      	lsls	r2, r3
 80051f8:	0013      	movs	r3, r2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	2203      	movs	r2, #3
 8005212:	409a      	lsls	r2, r3
 8005214:	0013      	movs	r3, r2
 8005216:	43da      	mvns	r2, r3
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4013      	ands	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	409a      	lsls	r2, r3
 8005228:	0013      	movs	r3, r2
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d003      	beq.n	8005246 <HAL_GPIO_Init+0xea>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b12      	cmp	r3, #18
 8005244:	d123      	bne.n	800528e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	08da      	lsrs	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3208      	adds	r2, #8
 800524e:	0092      	lsls	r2, r2, #2
 8005250:	58d3      	ldr	r3, [r2, r3]
 8005252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2207      	movs	r2, #7
 8005258:	4013      	ands	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	220f      	movs	r2, #15
 800525e:	409a      	lsls	r2, r3
 8005260:	0013      	movs	r3, r2
 8005262:	43da      	mvns	r2, r3
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4013      	ands	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2107      	movs	r1, #7
 8005272:	400b      	ands	r3, r1
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	409a      	lsls	r2, r3
 8005278:	0013      	movs	r3, r2
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	08da      	lsrs	r2, r3, #3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3208      	adds	r2, #8
 8005288:	0092      	lsls	r2, r2, #2
 800528a:	6939      	ldr	r1, [r7, #16]
 800528c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	2203      	movs	r2, #3
 800529a:	409a      	lsls	r2, r3
 800529c:	0013      	movs	r3, r2
 800529e:	43da      	mvns	r2, r3
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4013      	ands	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2203      	movs	r2, #3
 80052ac:	401a      	ands	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	409a      	lsls	r2, r3
 80052b4:	0013      	movs	r3, r2
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	055b      	lsls	r3, r3, #21
 80052ca:	4013      	ands	r3, r2
 80052cc:	d100      	bne.n	80052d0 <HAL_GPIO_Init+0x174>
 80052ce:	e09a      	b.n	8005406 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052d0:	4b54      	ldr	r3, [pc, #336]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 80052d2:	699a      	ldr	r2, [r3, #24]
 80052d4:	4b53      	ldr	r3, [pc, #332]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 80052d6:	2101      	movs	r1, #1
 80052d8:	430a      	orrs	r2, r1
 80052da:	619a      	str	r2, [r3, #24]
 80052dc:	4b51      	ldr	r3, [pc, #324]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	2201      	movs	r2, #1
 80052e2:	4013      	ands	r3, r2
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80052e8:	4a4f      	ldr	r2, [pc, #316]	; (8005428 <HAL_GPIO_Init+0x2cc>)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	089b      	lsrs	r3, r3, #2
 80052ee:	3302      	adds	r3, #2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	589b      	ldr	r3, [r3, r2]
 80052f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2203      	movs	r2, #3
 80052fa:	4013      	ands	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	220f      	movs	r2, #15
 8005300:	409a      	lsls	r2, r3
 8005302:	0013      	movs	r3, r2
 8005304:	43da      	mvns	r2, r3
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	2390      	movs	r3, #144	; 0x90
 8005310:	05db      	lsls	r3, r3, #23
 8005312:	429a      	cmp	r2, r3
 8005314:	d013      	beq.n	800533e <HAL_GPIO_Init+0x1e2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a44      	ldr	r2, [pc, #272]	; (800542c <HAL_GPIO_Init+0x2d0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00d      	beq.n	800533a <HAL_GPIO_Init+0x1de>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a43      	ldr	r2, [pc, #268]	; (8005430 <HAL_GPIO_Init+0x2d4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d007      	beq.n	8005336 <HAL_GPIO_Init+0x1da>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a42      	ldr	r2, [pc, #264]	; (8005434 <HAL_GPIO_Init+0x2d8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d101      	bne.n	8005332 <HAL_GPIO_Init+0x1d6>
 800532e:	2303      	movs	r3, #3
 8005330:	e006      	b.n	8005340 <HAL_GPIO_Init+0x1e4>
 8005332:	2305      	movs	r3, #5
 8005334:	e004      	b.n	8005340 <HAL_GPIO_Init+0x1e4>
 8005336:	2302      	movs	r3, #2
 8005338:	e002      	b.n	8005340 <HAL_GPIO_Init+0x1e4>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_GPIO_Init+0x1e4>
 800533e:	2300      	movs	r3, #0
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	2103      	movs	r1, #3
 8005344:	400a      	ands	r2, r1
 8005346:	0092      	lsls	r2, r2, #2
 8005348:	4093      	lsls	r3, r2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005350:	4935      	ldr	r1, [pc, #212]	; (8005428 <HAL_GPIO_Init+0x2cc>)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	089b      	lsrs	r3, r3, #2
 8005356:	3302      	adds	r3, #2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800535e:	4b36      	ldr	r3, [pc, #216]	; (8005438 <HAL_GPIO_Init+0x2dc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	43da      	mvns	r2, r3
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4013      	ands	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	025b      	lsls	r3, r3, #9
 8005376:	4013      	ands	r3, r2
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005382:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <HAL_GPIO_Init+0x2dc>)
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005388:	4b2b      	ldr	r3, [pc, #172]	; (8005438 <HAL_GPIO_Init+0x2dc>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	43da      	mvns	r2, r3
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4013      	ands	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	029b      	lsls	r3, r3, #10
 80053a0:	4013      	ands	r3, r2
 80053a2:	d003      	beq.n	80053ac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80053ac:	4b22      	ldr	r3, [pc, #136]	; (8005438 <HAL_GPIO_Init+0x2dc>)
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053b2:	4b21      	ldr	r3, [pc, #132]	; (8005438 <HAL_GPIO_Init+0x2dc>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	43da      	mvns	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4013      	ands	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	2380      	movs	r3, #128	; 0x80
 80053c8:	035b      	lsls	r3, r3, #13
 80053ca:	4013      	ands	r3, r2
 80053cc:	d003      	beq.n	80053d6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80053d6:	4b18      	ldr	r3, [pc, #96]	; (8005438 <HAL_GPIO_Init+0x2dc>)
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80053dc:	4b16      	ldr	r3, [pc, #88]	; (8005438 <HAL_GPIO_Init+0x2dc>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	43da      	mvns	r2, r3
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4013      	ands	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	2380      	movs	r3, #128	; 0x80
 80053f2:	039b      	lsls	r3, r3, #14
 80053f4:	4013      	ands	r3, r2
 80053f6:	d003      	beq.n	8005400 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005400:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <HAL_GPIO_Init+0x2dc>)
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3301      	adds	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	40da      	lsrs	r2, r3
 8005414:	1e13      	subs	r3, r2, #0
 8005416:	d000      	beq.n	800541a <HAL_GPIO_Init+0x2be>
 8005418:	e6a8      	b.n	800516c <HAL_GPIO_Init+0x10>
  } 
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b006      	add	sp, #24
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	40021000 	.word	0x40021000
 8005428:	40010000 	.word	0x40010000
 800542c:	48000400 	.word	0x48000400
 8005430:	48000800 	.word	0x48000800
 8005434:	48000c00 	.word	0x48000c00
 8005438:	40010400 	.word	0x40010400

0800543c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	000a      	movs	r2, r1
 8005446:	1cbb      	adds	r3, r7, #2
 8005448:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	1cba      	adds	r2, r7, #2
 8005450:	8812      	ldrh	r2, [r2, #0]
 8005452:	4013      	ands	r3, r2
 8005454:	d004      	beq.n	8005460 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005456:	230f      	movs	r3, #15
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e003      	b.n	8005468 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005460:	230f      	movs	r3, #15
 8005462:	18fb      	adds	r3, r7, r3
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005468:	230f      	movs	r3, #15
 800546a:	18fb      	adds	r3, r7, r3
 800546c:	781b      	ldrb	r3, [r3, #0]
  }
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b004      	add	sp, #16
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	0008      	movs	r0, r1
 8005480:	0011      	movs	r1, r2
 8005482:	1cbb      	adds	r3, r7, #2
 8005484:	1c02      	adds	r2, r0, #0
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	1c7b      	adds	r3, r7, #1
 800548a:	1c0a      	adds	r2, r1, #0
 800548c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800548e:	1c7b      	adds	r3, r7, #1
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d004      	beq.n	80054a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005496:	1cbb      	adds	r3, r7, #2
 8005498:	881a      	ldrh	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800549e:	e003      	b.n	80054a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054a0:	1cbb      	adds	r3, r7, #2
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b002      	add	sp, #8
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	000a      	movs	r2, r1
 80054ba:	1cbb      	adds	r3, r7, #2
 80054bc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054c4:	1cbb      	adds	r3, r7, #2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4013      	ands	r3, r2
 80054cc:	041a      	lsls	r2, r3, #16
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	1cb9      	adds	r1, r7, #2
 80054d4:	8809      	ldrh	r1, [r1, #0]
 80054d6:	400b      	ands	r3, r1
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	619a      	str	r2, [r3, #24]
}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b004      	add	sp, #16
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	0002      	movs	r2, r0
 80054f0:	1dbb      	adds	r3, r7, #6
 80054f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054f4:	4b09      	ldr	r3, [pc, #36]	; (800551c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	1dba      	adds	r2, r7, #6
 80054fa:	8812      	ldrh	r2, [r2, #0]
 80054fc:	4013      	ands	r3, r2
 80054fe:	d008      	beq.n	8005512 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005500:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005502:	1dba      	adds	r2, r7, #6
 8005504:	8812      	ldrh	r2, [r2, #0]
 8005506:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005508:	1dbb      	adds	r3, r7, #6
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	0018      	movs	r0, r3
 800550e:	f000 f807 	bl	8005520 <HAL_GPIO_EXTI_Callback>
  }
}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	46bd      	mov	sp, r7
 8005516:	b002      	add	sp, #8
 8005518:	bd80      	pop	{r7, pc}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	40010400 	.word	0x40010400

08005520 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	0002      	movs	r2, r0
 8005528:	1dbb      	adds	r3, r7, #6
 800552a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800552c:	46c0      	nop			; (mov r8, r8)
 800552e:	46bd      	mov	sp, r7
 8005530:	b002      	add	sp, #8
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e303      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2201      	movs	r2, #1
 800554c:	4013      	ands	r3, r2
 800554e:	d100      	bne.n	8005552 <HAL_RCC_OscConfig+0x1e>
 8005550:	e08d      	b.n	800566e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005552:	4bc4      	ldr	r3, [pc, #784]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	220c      	movs	r2, #12
 8005558:	4013      	ands	r3, r2
 800555a:	2b04      	cmp	r3, #4
 800555c:	d00e      	beq.n	800557c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800555e:	4bc1      	ldr	r3, [pc, #772]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	220c      	movs	r2, #12
 8005564:	4013      	ands	r3, r2
 8005566:	2b08      	cmp	r3, #8
 8005568:	d116      	bne.n	8005598 <HAL_RCC_OscConfig+0x64>
 800556a:	4bbe      	ldr	r3, [pc, #760]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	025b      	lsls	r3, r3, #9
 8005572:	401a      	ands	r2, r3
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	025b      	lsls	r3, r3, #9
 8005578:	429a      	cmp	r2, r3
 800557a:	d10d      	bne.n	8005598 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557c:	4bb9      	ldr	r3, [pc, #740]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	029b      	lsls	r3, r3, #10
 8005584:	4013      	ands	r3, r2
 8005586:	d100      	bne.n	800558a <HAL_RCC_OscConfig+0x56>
 8005588:	e070      	b.n	800566c <HAL_RCC_OscConfig+0x138>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d000      	beq.n	8005594 <HAL_RCC_OscConfig+0x60>
 8005592:	e06b      	b.n	800566c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e2da      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d107      	bne.n	80055b0 <HAL_RCC_OscConfig+0x7c>
 80055a0:	4bb0      	ldr	r3, [pc, #704]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4baf      	ldr	r3, [pc, #700]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055a6:	2180      	movs	r1, #128	; 0x80
 80055a8:	0249      	lsls	r1, r1, #9
 80055aa:	430a      	orrs	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e02f      	b.n	8005610 <HAL_RCC_OscConfig+0xdc>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10c      	bne.n	80055d2 <HAL_RCC_OscConfig+0x9e>
 80055b8:	4baa      	ldr	r3, [pc, #680]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	4ba9      	ldr	r3, [pc, #676]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055be:	49aa      	ldr	r1, [pc, #680]	; (8005868 <HAL_RCC_OscConfig+0x334>)
 80055c0:	400a      	ands	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	4ba7      	ldr	r3, [pc, #668]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4ba6      	ldr	r3, [pc, #664]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055ca:	49a8      	ldr	r1, [pc, #672]	; (800586c <HAL_RCC_OscConfig+0x338>)
 80055cc:	400a      	ands	r2, r1
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	e01e      	b.n	8005610 <HAL_RCC_OscConfig+0xdc>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d10e      	bne.n	80055f8 <HAL_RCC_OscConfig+0xc4>
 80055da:	4ba2      	ldr	r3, [pc, #648]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4ba1      	ldr	r3, [pc, #644]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055e0:	2180      	movs	r1, #128	; 0x80
 80055e2:	02c9      	lsls	r1, r1, #11
 80055e4:	430a      	orrs	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	4b9e      	ldr	r3, [pc, #632]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4b9d      	ldr	r3, [pc, #628]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055ee:	2180      	movs	r1, #128	; 0x80
 80055f0:	0249      	lsls	r1, r1, #9
 80055f2:	430a      	orrs	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e00b      	b.n	8005610 <HAL_RCC_OscConfig+0xdc>
 80055f8:	4b9a      	ldr	r3, [pc, #616]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b99      	ldr	r3, [pc, #612]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80055fe:	499a      	ldr	r1, [pc, #616]	; (8005868 <HAL_RCC_OscConfig+0x334>)
 8005600:	400a      	ands	r2, r1
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	4b97      	ldr	r3, [pc, #604]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	4b96      	ldr	r3, [pc, #600]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 800560a:	4998      	ldr	r1, [pc, #608]	; (800586c <HAL_RCC_OscConfig+0x338>)
 800560c:	400a      	ands	r2, r1
 800560e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d014      	beq.n	8005642 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fe fee8 	bl	80043ec <HAL_GetTick>
 800561c:	0003      	movs	r3, r0
 800561e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005622:	f7fe fee3 	bl	80043ec <HAL_GetTick>
 8005626:	0002      	movs	r2, r0
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b64      	cmp	r3, #100	; 0x64
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e28c      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005634:	4b8b      	ldr	r3, [pc, #556]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	029b      	lsls	r3, r3, #10
 800563c:	4013      	ands	r3, r2
 800563e:	d0f0      	beq.n	8005622 <HAL_RCC_OscConfig+0xee>
 8005640:	e015      	b.n	800566e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005642:	f7fe fed3 	bl	80043ec <HAL_GetTick>
 8005646:	0003      	movs	r3, r0
 8005648:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800564c:	f7fe fece 	bl	80043ec <HAL_GetTick>
 8005650:	0002      	movs	r2, r0
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b64      	cmp	r3, #100	; 0x64
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e277      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565e:	4b81      	ldr	r3, [pc, #516]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	029b      	lsls	r3, r3, #10
 8005666:	4013      	ands	r3, r2
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x118>
 800566a:	e000      	b.n	800566e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2202      	movs	r2, #2
 8005674:	4013      	ands	r3, r2
 8005676:	d100      	bne.n	800567a <HAL_RCC_OscConfig+0x146>
 8005678:	e069      	b.n	800574e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800567a:	4b7a      	ldr	r3, [pc, #488]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	220c      	movs	r2, #12
 8005680:	4013      	ands	r3, r2
 8005682:	d00b      	beq.n	800569c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005684:	4b77      	ldr	r3, [pc, #476]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	220c      	movs	r2, #12
 800568a:	4013      	ands	r3, r2
 800568c:	2b08      	cmp	r3, #8
 800568e:	d11c      	bne.n	80056ca <HAL_RCC_OscConfig+0x196>
 8005690:	4b74      	ldr	r3, [pc, #464]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	025b      	lsls	r3, r3, #9
 8005698:	4013      	ands	r3, r2
 800569a:	d116      	bne.n	80056ca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569c:	4b71      	ldr	r3, [pc, #452]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2202      	movs	r2, #2
 80056a2:	4013      	ands	r3, r2
 80056a4:	d005      	beq.n	80056b2 <HAL_RCC_OscConfig+0x17e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d001      	beq.n	80056b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e24d      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b2:	4b6c      	ldr	r3, [pc, #432]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	22f8      	movs	r2, #248	; 0xf8
 80056b8:	4393      	bics	r3, r2
 80056ba:	0019      	movs	r1, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	00da      	lsls	r2, r3, #3
 80056c2:	4b68      	ldr	r3, [pc, #416]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056c8:	e041      	b.n	800574e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d024      	beq.n	800571c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d2:	4b64      	ldr	r3, [pc, #400]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4b63      	ldr	r3, [pc, #396]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80056d8:	2101      	movs	r1, #1
 80056da:	430a      	orrs	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056de:	f7fe fe85 	bl	80043ec <HAL_GetTick>
 80056e2:	0003      	movs	r3, r0
 80056e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056e8:	f7fe fe80 	bl	80043ec <HAL_GetTick>
 80056ec:	0002      	movs	r2, r0
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e229      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056fa:	4b5a      	ldr	r3, [pc, #360]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2202      	movs	r2, #2
 8005700:	4013      	ands	r3, r2
 8005702:	d0f1      	beq.n	80056e8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005704:	4b57      	ldr	r3, [pc, #348]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	22f8      	movs	r2, #248	; 0xf8
 800570a:	4393      	bics	r3, r2
 800570c:	0019      	movs	r1, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	00da      	lsls	r2, r3, #3
 8005714:	4b53      	ldr	r3, [pc, #332]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005716:	430a      	orrs	r2, r1
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e018      	b.n	800574e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800571c:	4b51      	ldr	r3, [pc, #324]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b50      	ldr	r3, [pc, #320]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005722:	2101      	movs	r1, #1
 8005724:	438a      	bics	r2, r1
 8005726:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005728:	f7fe fe60 	bl	80043ec <HAL_GetTick>
 800572c:	0003      	movs	r3, r0
 800572e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005732:	f7fe fe5b 	bl	80043ec <HAL_GetTick>
 8005736:	0002      	movs	r2, r0
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e204      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005744:	4b47      	ldr	r3, [pc, #284]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2202      	movs	r2, #2
 800574a:	4013      	ands	r3, r2
 800574c:	d1f1      	bne.n	8005732 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2208      	movs	r2, #8
 8005754:	4013      	ands	r3, r2
 8005756:	d036      	beq.n	80057c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d019      	beq.n	8005794 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005760:	4b40      	ldr	r3, [pc, #256]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005764:	4b3f      	ldr	r3, [pc, #252]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005766:	2101      	movs	r1, #1
 8005768:	430a      	orrs	r2, r1
 800576a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576c:	f7fe fe3e 	bl	80043ec <HAL_GetTick>
 8005770:	0003      	movs	r3, r0
 8005772:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005776:	f7fe fe39 	bl	80043ec <HAL_GetTick>
 800577a:	0002      	movs	r2, r0
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e1e2      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005788:	4b36      	ldr	r3, [pc, #216]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	2202      	movs	r2, #2
 800578e:	4013      	ands	r3, r2
 8005790:	d0f1      	beq.n	8005776 <HAL_RCC_OscConfig+0x242>
 8005792:	e018      	b.n	80057c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005794:	4b33      	ldr	r3, [pc, #204]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005798:	4b32      	ldr	r3, [pc, #200]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 800579a:	2101      	movs	r1, #1
 800579c:	438a      	bics	r2, r1
 800579e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a0:	f7fe fe24 	bl	80043ec <HAL_GetTick>
 80057a4:	0003      	movs	r3, r0
 80057a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057aa:	f7fe fe1f 	bl	80043ec <HAL_GetTick>
 80057ae:	0002      	movs	r2, r0
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e1c8      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057bc:	4b29      	ldr	r3, [pc, #164]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	2202      	movs	r2, #2
 80057c2:	4013      	ands	r3, r2
 80057c4:	d1f1      	bne.n	80057aa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2204      	movs	r2, #4
 80057cc:	4013      	ands	r3, r2
 80057ce:	d100      	bne.n	80057d2 <HAL_RCC_OscConfig+0x29e>
 80057d0:	e0b6      	b.n	8005940 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057d2:	231f      	movs	r3, #31
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057da:	4b22      	ldr	r3, [pc, #136]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	055b      	lsls	r3, r3, #21
 80057e2:	4013      	ands	r3, r2
 80057e4:	d111      	bne.n	800580a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e6:	4b1f      	ldr	r3, [pc, #124]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80057e8:	69da      	ldr	r2, [r3, #28]
 80057ea:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80057ec:	2180      	movs	r1, #128	; 0x80
 80057ee:	0549      	lsls	r1, r1, #21
 80057f0:	430a      	orrs	r2, r1
 80057f2:	61da      	str	r2, [r3, #28]
 80057f4:	4b1b      	ldr	r3, [pc, #108]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	055b      	lsls	r3, r3, #21
 80057fc:	4013      	ands	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005802:	231f      	movs	r3, #31
 8005804:	18fb      	adds	r3, r7, r3
 8005806:	2201      	movs	r2, #1
 8005808:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580a:	4b19      	ldr	r3, [pc, #100]	; (8005870 <HAL_RCC_OscConfig+0x33c>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	2380      	movs	r3, #128	; 0x80
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	4013      	ands	r3, r2
 8005814:	d11a      	bne.n	800584c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005816:	4b16      	ldr	r3, [pc, #88]	; (8005870 <HAL_RCC_OscConfig+0x33c>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b15      	ldr	r3, [pc, #84]	; (8005870 <HAL_RCC_OscConfig+0x33c>)
 800581c:	2180      	movs	r1, #128	; 0x80
 800581e:	0049      	lsls	r1, r1, #1
 8005820:	430a      	orrs	r2, r1
 8005822:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005824:	f7fe fde2 	bl	80043ec <HAL_GetTick>
 8005828:	0003      	movs	r3, r0
 800582a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582e:	f7fe fddd 	bl	80043ec <HAL_GetTick>
 8005832:	0002      	movs	r2, r0
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b64      	cmp	r3, #100	; 0x64
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e186      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <HAL_RCC_OscConfig+0x33c>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4013      	ands	r3, r2
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d10f      	bne.n	8005874 <HAL_RCC_OscConfig+0x340>
 8005854:	4b03      	ldr	r3, [pc, #12]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 8005856:	6a1a      	ldr	r2, [r3, #32]
 8005858:	4b02      	ldr	r3, [pc, #8]	; (8005864 <HAL_RCC_OscConfig+0x330>)
 800585a:	2101      	movs	r1, #1
 800585c:	430a      	orrs	r2, r1
 800585e:	621a      	str	r2, [r3, #32]
 8005860:	e036      	b.n	80058d0 <HAL_RCC_OscConfig+0x39c>
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	40021000 	.word	0x40021000
 8005868:	fffeffff 	.word	0xfffeffff
 800586c:	fffbffff 	.word	0xfffbffff
 8005870:	40007000 	.word	0x40007000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10c      	bne.n	8005896 <HAL_RCC_OscConfig+0x362>
 800587c:	4bb6      	ldr	r3, [pc, #728]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	4bb5      	ldr	r3, [pc, #724]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005882:	2101      	movs	r1, #1
 8005884:	438a      	bics	r2, r1
 8005886:	621a      	str	r2, [r3, #32]
 8005888:	4bb3      	ldr	r3, [pc, #716]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 800588a:	6a1a      	ldr	r2, [r3, #32]
 800588c:	4bb2      	ldr	r3, [pc, #712]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 800588e:	2104      	movs	r1, #4
 8005890:	438a      	bics	r2, r1
 8005892:	621a      	str	r2, [r3, #32]
 8005894:	e01c      	b.n	80058d0 <HAL_RCC_OscConfig+0x39c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b05      	cmp	r3, #5
 800589c:	d10c      	bne.n	80058b8 <HAL_RCC_OscConfig+0x384>
 800589e:	4bae      	ldr	r3, [pc, #696]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80058a0:	6a1a      	ldr	r2, [r3, #32]
 80058a2:	4bad      	ldr	r3, [pc, #692]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80058a4:	2104      	movs	r1, #4
 80058a6:	430a      	orrs	r2, r1
 80058a8:	621a      	str	r2, [r3, #32]
 80058aa:	4bab      	ldr	r3, [pc, #684]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80058ac:	6a1a      	ldr	r2, [r3, #32]
 80058ae:	4baa      	ldr	r3, [pc, #680]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80058b0:	2101      	movs	r1, #1
 80058b2:	430a      	orrs	r2, r1
 80058b4:	621a      	str	r2, [r3, #32]
 80058b6:	e00b      	b.n	80058d0 <HAL_RCC_OscConfig+0x39c>
 80058b8:	4ba7      	ldr	r3, [pc, #668]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80058ba:	6a1a      	ldr	r2, [r3, #32]
 80058bc:	4ba6      	ldr	r3, [pc, #664]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80058be:	2101      	movs	r1, #1
 80058c0:	438a      	bics	r2, r1
 80058c2:	621a      	str	r2, [r3, #32]
 80058c4:	4ba4      	ldr	r3, [pc, #656]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80058c6:	6a1a      	ldr	r2, [r3, #32]
 80058c8:	4ba3      	ldr	r3, [pc, #652]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80058ca:	2104      	movs	r1, #4
 80058cc:	438a      	bics	r2, r1
 80058ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d014      	beq.n	8005902 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d8:	f7fe fd88 	bl	80043ec <HAL_GetTick>
 80058dc:	0003      	movs	r3, r0
 80058de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e0:	e009      	b.n	80058f6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e2:	f7fe fd83 	bl	80043ec <HAL_GetTick>
 80058e6:	0002      	movs	r2, r0
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	4a9b      	ldr	r2, [pc, #620]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e12b      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f6:	4b98      	ldr	r3, [pc, #608]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	2202      	movs	r2, #2
 80058fc:	4013      	ands	r3, r2
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x3ae>
 8005900:	e013      	b.n	800592a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005902:	f7fe fd73 	bl	80043ec <HAL_GetTick>
 8005906:	0003      	movs	r3, r0
 8005908:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800590a:	e009      	b.n	8005920 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800590c:	f7fe fd6e 	bl	80043ec <HAL_GetTick>
 8005910:	0002      	movs	r2, r0
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	4a91      	ldr	r2, [pc, #580]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e116      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005920:	4b8d      	ldr	r3, [pc, #564]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	2202      	movs	r2, #2
 8005926:	4013      	ands	r3, r2
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800592a:	231f      	movs	r3, #31
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d105      	bne.n	8005940 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005934:	4b88      	ldr	r3, [pc, #544]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	4b87      	ldr	r3, [pc, #540]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 800593a:	4989      	ldr	r1, [pc, #548]	; (8005b60 <HAL_RCC_OscConfig+0x62c>)
 800593c:	400a      	ands	r2, r1
 800593e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2210      	movs	r2, #16
 8005946:	4013      	ands	r3, r2
 8005948:	d063      	beq.n	8005a12 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d12a      	bne.n	80059a8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005952:	4b81      	ldr	r3, [pc, #516]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005956:	4b80      	ldr	r3, [pc, #512]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005958:	2104      	movs	r1, #4
 800595a:	430a      	orrs	r2, r1
 800595c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800595e:	4b7e      	ldr	r3, [pc, #504]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005962:	4b7d      	ldr	r3, [pc, #500]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005964:	2101      	movs	r1, #1
 8005966:	430a      	orrs	r2, r1
 8005968:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800596a:	f7fe fd3f 	bl	80043ec <HAL_GetTick>
 800596e:	0003      	movs	r3, r0
 8005970:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005974:	f7fe fd3a 	bl	80043ec <HAL_GetTick>
 8005978:	0002      	movs	r2, r0
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e0e3      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005986:	4b74      	ldr	r3, [pc, #464]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598a:	2202      	movs	r2, #2
 800598c:	4013      	ands	r3, r2
 800598e:	d0f1      	beq.n	8005974 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005990:	4b71      	ldr	r3, [pc, #452]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005994:	22f8      	movs	r2, #248	; 0xf8
 8005996:	4393      	bics	r3, r2
 8005998:	0019      	movs	r1, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	00da      	lsls	r2, r3, #3
 80059a0:	4b6d      	ldr	r3, [pc, #436]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80059a2:	430a      	orrs	r2, r1
 80059a4:	635a      	str	r2, [r3, #52]	; 0x34
 80059a6:	e034      	b.n	8005a12 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	3305      	adds	r3, #5
 80059ae:	d111      	bne.n	80059d4 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80059b0:	4b69      	ldr	r3, [pc, #420]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80059b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b4:	4b68      	ldr	r3, [pc, #416]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80059b6:	2104      	movs	r1, #4
 80059b8:	438a      	bics	r2, r1
 80059ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80059bc:	4b66      	ldr	r3, [pc, #408]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80059be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c0:	22f8      	movs	r2, #248	; 0xf8
 80059c2:	4393      	bics	r3, r2
 80059c4:	0019      	movs	r1, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	00da      	lsls	r2, r3, #3
 80059cc:	4b62      	ldr	r3, [pc, #392]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80059ce:	430a      	orrs	r2, r1
 80059d0:	635a      	str	r2, [r3, #52]	; 0x34
 80059d2:	e01e      	b.n	8005a12 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80059d4:	4b60      	ldr	r3, [pc, #384]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80059d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d8:	4b5f      	ldr	r3, [pc, #380]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80059da:	2104      	movs	r1, #4
 80059dc:	430a      	orrs	r2, r1
 80059de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80059e0:	4b5d      	ldr	r3, [pc, #372]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80059e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e4:	4b5c      	ldr	r3, [pc, #368]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 80059e6:	2101      	movs	r1, #1
 80059e8:	438a      	bics	r2, r1
 80059ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ec:	f7fe fcfe 	bl	80043ec <HAL_GetTick>
 80059f0:	0003      	movs	r3, r0
 80059f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80059f6:	f7fe fcf9 	bl	80043ec <HAL_GetTick>
 80059fa:	0002      	movs	r2, r0
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e0a2      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005a08:	4b53      	ldr	r3, [pc, #332]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d1f1      	bne.n	80059f6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d100      	bne.n	8005a1c <HAL_RCC_OscConfig+0x4e8>
 8005a1a:	e097      	b.n	8005b4c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a1c:	4b4e      	ldr	r3, [pc, #312]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	220c      	movs	r2, #12
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d100      	bne.n	8005a2a <HAL_RCC_OscConfig+0x4f6>
 8005a28:	e06b      	b.n	8005b02 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d14c      	bne.n	8005acc <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a32:	4b49      	ldr	r3, [pc, #292]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b48      	ldr	r3, [pc, #288]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005a38:	494a      	ldr	r1, [pc, #296]	; (8005b64 <HAL_RCC_OscConfig+0x630>)
 8005a3a:	400a      	ands	r2, r1
 8005a3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3e:	f7fe fcd5 	bl	80043ec <HAL_GetTick>
 8005a42:	0003      	movs	r3, r0
 8005a44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a48:	f7fe fcd0 	bl	80043ec <HAL_GetTick>
 8005a4c:	0002      	movs	r2, r0
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e079      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a5a:	4b3f      	ldr	r3, [pc, #252]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	049b      	lsls	r3, r3, #18
 8005a62:	4013      	ands	r3, r2
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a66:	4b3c      	ldr	r3, [pc, #240]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	220f      	movs	r2, #15
 8005a6c:	4393      	bics	r3, r2
 8005a6e:	0019      	movs	r1, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a74:	4b38      	ldr	r3, [pc, #224]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005a76:	430a      	orrs	r2, r1
 8005a78:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a7a:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	4a3a      	ldr	r2, [pc, #232]	; (8005b68 <HAL_RCC_OscConfig+0x634>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	0019      	movs	r1, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	4b32      	ldr	r3, [pc, #200]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005a90:	430a      	orrs	r2, r1
 8005a92:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a94:	4b30      	ldr	r3, [pc, #192]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b2f      	ldr	r3, [pc, #188]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005a9a:	2180      	movs	r1, #128	; 0x80
 8005a9c:	0449      	lsls	r1, r1, #17
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa2:	f7fe fca3 	bl	80043ec <HAL_GetTick>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fe fc9e 	bl	80043ec <HAL_GetTick>
 8005ab0:	0002      	movs	r2, r0
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e047      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005abe:	4b26      	ldr	r3, [pc, #152]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	049b      	lsls	r3, r3, #18
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d0f0      	beq.n	8005aac <HAL_RCC_OscConfig+0x578>
 8005aca:	e03f      	b.n	8005b4c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005acc:	4b22      	ldr	r3, [pc, #136]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005ad2:	4924      	ldr	r1, [pc, #144]	; (8005b64 <HAL_RCC_OscConfig+0x630>)
 8005ad4:	400a      	ands	r2, r1
 8005ad6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad8:	f7fe fc88 	bl	80043ec <HAL_GetTick>
 8005adc:	0003      	movs	r3, r0
 8005ade:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae2:	f7fe fc83 	bl	80043ec <HAL_GetTick>
 8005ae6:	0002      	movs	r2, r0
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e02c      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af4:	4b18      	ldr	r3, [pc, #96]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	049b      	lsls	r3, r3, #18
 8005afc:	4013      	ands	r3, r2
 8005afe:	d1f0      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x5ae>
 8005b00:	e024      	b.n	8005b4c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e01f      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005b0e:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005b14:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <HAL_RCC_OscConfig+0x624>)
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	2380      	movs	r3, #128	; 0x80
 8005b1e:	025b      	lsls	r3, r3, #9
 8005b20:	401a      	ands	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d10e      	bne.n	8005b48 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	220f      	movs	r2, #15
 8005b2e:	401a      	ands	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d107      	bne.n	8005b48 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	23f0      	movs	r3, #240	; 0xf0
 8005b3c:	039b      	lsls	r3, r3, #14
 8005b3e:	401a      	ands	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d001      	beq.n	8005b4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e000      	b.n	8005b4e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	0018      	movs	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b008      	add	sp, #32
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	00001388 	.word	0x00001388
 8005b60:	efffffff 	.word	0xefffffff
 8005b64:	feffffff 	.word	0xfeffffff
 8005b68:	ffc2ffff 	.word	0xffc2ffff

08005b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e0b3      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b80:	4b5b      	ldr	r3, [pc, #364]	; (8005cf0 <HAL_RCC_ClockConfig+0x184>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2201      	movs	r2, #1
 8005b86:	4013      	ands	r3, r2
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d911      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8e:	4b58      	ldr	r3, [pc, #352]	; (8005cf0 <HAL_RCC_ClockConfig+0x184>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2201      	movs	r2, #1
 8005b94:	4393      	bics	r3, r2
 8005b96:	0019      	movs	r1, r3
 8005b98:	4b55      	ldr	r3, [pc, #340]	; (8005cf0 <HAL_RCC_ClockConfig+0x184>)
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba0:	4b53      	ldr	r3, [pc, #332]	; (8005cf0 <HAL_RCC_ClockConfig+0x184>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d001      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e09a      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d015      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d006      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005bc6:	4b4b      	ldr	r3, [pc, #300]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	4b4a      	ldr	r3, [pc, #296]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005bcc:	21e0      	movs	r1, #224	; 0xe0
 8005bce:	00c9      	lsls	r1, r1, #3
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd4:	4b47      	ldr	r3, [pc, #284]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	22f0      	movs	r2, #240	; 0xf0
 8005bda:	4393      	bics	r3, r2
 8005bdc:	0019      	movs	r1, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	4b44      	ldr	r3, [pc, #272]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2201      	movs	r2, #1
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d040      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d107      	bne.n	8005c0a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfa:	4b3e      	ldr	r3, [pc, #248]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	2380      	movs	r3, #128	; 0x80
 8005c00:	029b      	lsls	r3, r3, #10
 8005c02:	4013      	ands	r3, r2
 8005c04:	d114      	bne.n	8005c30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e06e      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d107      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c12:	4b38      	ldr	r3, [pc, #224]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	049b      	lsls	r3, r3, #18
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d108      	bne.n	8005c30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e062      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c22:	4b34      	ldr	r3, [pc, #208]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2202      	movs	r2, #2
 8005c28:	4013      	ands	r3, r2
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e05b      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c30:	4b30      	ldr	r3, [pc, #192]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2203      	movs	r2, #3
 8005c36:	4393      	bics	r3, r2
 8005c38:	0019      	movs	r1, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	4b2d      	ldr	r3, [pc, #180]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005c40:	430a      	orrs	r2, r1
 8005c42:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c44:	f7fe fbd2 	bl	80043ec <HAL_GetTick>
 8005c48:	0003      	movs	r3, r0
 8005c4a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4c:	e009      	b.n	8005c62 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c4e:	f7fe fbcd 	bl	80043ec <HAL_GetTick>
 8005c52:	0002      	movs	r2, r0
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	4a27      	ldr	r2, [pc, #156]	; (8005cf8 <HAL_RCC_ClockConfig+0x18c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e042      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c62:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	220c      	movs	r2, #12
 8005c68:	401a      	ands	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d1ec      	bne.n	8005c4e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c74:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <HAL_RCC_ClockConfig+0x184>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d211      	bcs.n	8005ca6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c82:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <HAL_RCC_ClockConfig+0x184>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2201      	movs	r2, #1
 8005c88:	4393      	bics	r3, r2
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	4b18      	ldr	r3, [pc, #96]	; (8005cf0 <HAL_RCC_ClockConfig+0x184>)
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c94:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <HAL_RCC_ClockConfig+0x184>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d001      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e020      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2204      	movs	r2, #4
 8005cac:	4013      	ands	r3, r2
 8005cae:	d009      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb0:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <HAL_RCC_ClockConfig+0x190>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	0019      	movs	r1, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005cc4:	f000 f820 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8005cc8:	0001      	movs	r1, r0
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <HAL_RCC_ClockConfig+0x188>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	220f      	movs	r2, #15
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <HAL_RCC_ClockConfig+0x194>)
 8005cd6:	5cd3      	ldrb	r3, [r2, r3]
 8005cd8:	000a      	movs	r2, r1
 8005cda:	40da      	lsrs	r2, r3
 8005cdc:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <HAL_RCC_ClockConfig+0x198>)
 8005cde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f7fe fb3d 	bl	8004360 <HAL_InitTick>
  
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	0018      	movs	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b004      	add	sp, #16
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40022000 	.word	0x40022000
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	00001388 	.word	0x00001388
 8005cfc:	fffff8ff 	.word	0xfffff8ff
 8005d00:	0800b094 	.word	0x0800b094
 8005d04:	20000020 	.word	0x20000020

08005d08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b08f      	sub	sp, #60	; 0x3c
 8005d0c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005d0e:	2314      	movs	r3, #20
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	4a2b      	ldr	r2, [pc, #172]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d16:	c313      	stmia	r3!, {r0, r1, r4}
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d20:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d22:	c313      	stmia	r3!, {r0, r1, r4}
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d30:	2300      	movs	r3, #0
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
 8005d34:	2300      	movs	r3, #0
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005d3c:	4b22      	ldr	r3, [pc, #136]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	220c      	movs	r2, #12
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d002      	beq.n	8005d52 <HAL_RCC_GetSysClockFreq+0x4a>
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d003      	beq.n	8005d58 <HAL_RCC_GetSysClockFreq+0x50>
 8005d50:	e02d      	b.n	8005dae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d52:	4b1e      	ldr	r3, [pc, #120]	; (8005dcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d56:	e02d      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	0c9b      	lsrs	r3, r3, #18
 8005d5c:	220f      	movs	r2, #15
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2214      	movs	r2, #20
 8005d62:	18ba      	adds	r2, r7, r2
 8005d64:	5cd3      	ldrb	r3, [r2, r3]
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005d68:	4b17      	ldr	r3, [pc, #92]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	220f      	movs	r2, #15
 8005d6e:	4013      	ands	r3, r2
 8005d70:	1d3a      	adds	r2, r7, #4
 8005d72:	5cd3      	ldrb	r3, [r2, r3]
 8005d74:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d78:	2380      	movs	r3, #128	; 0x80
 8005d7a:	025b      	lsls	r3, r3, #9
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d009      	beq.n	8005d94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d82:	4812      	ldr	r0, [pc, #72]	; (8005dcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d84:	f7fa f9d2 	bl	800012c <__udivsi3>
 8005d88:	0003      	movs	r3, r0
 8005d8a:	001a      	movs	r2, r3
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	4353      	muls	r3, r2
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
 8005d92:	e009      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d96:	000a      	movs	r2, r1
 8005d98:	0152      	lsls	r2, r2, #5
 8005d9a:	1a52      	subs	r2, r2, r1
 8005d9c:	0193      	lsls	r3, r2, #6
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	185b      	adds	r3, r3, r1
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005dac:	e002      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005dae:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005db0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005db2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005db6:	0018      	movs	r0, r3
 8005db8:	46bd      	mov	sp, r7
 8005dba:	b00f      	add	sp, #60	; 0x3c
 8005dbc:	bd90      	pop	{r4, r7, pc}
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	0800af34 	.word	0x0800af34
 8005dc4:	0800af44 	.word	0x0800af44
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	007a1200 	.word	0x007a1200

08005dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
}
 8005dd8:	0018      	movs	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	20000020 	.word	0x20000020

08005de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005de8:	f7ff fff2 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8005dec:	0001      	movs	r1, r0
 8005dee:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	0a1b      	lsrs	r3, r3, #8
 8005df4:	2207      	movs	r2, #7
 8005df6:	4013      	ands	r3, r2
 8005df8:	4a04      	ldr	r2, [pc, #16]	; (8005e0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dfa:	5cd3      	ldrb	r3, [r2, r3]
 8005dfc:	40d9      	lsrs	r1, r3
 8005dfe:	000b      	movs	r3, r1
}    
 8005e00:	0018      	movs	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	0800b0a4 	.word	0x0800b0a4

08005e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	025b      	lsls	r3, r3, #9
 8005e28:	4013      	ands	r3, r2
 8005e2a:	d100      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005e2c:	e08f      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005e2e:	2317      	movs	r3, #23
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e36:	4b57      	ldr	r3, [pc, #348]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	055b      	lsls	r3, r3, #21
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d111      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e42:	4b54      	ldr	r3, [pc, #336]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e44:	69da      	ldr	r2, [r3, #28]
 8005e46:	4b53      	ldr	r3, [pc, #332]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	0549      	lsls	r1, r1, #21
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	61da      	str	r2, [r3, #28]
 8005e50:	4b50      	ldr	r3, [pc, #320]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	055b      	lsls	r3, r3, #21
 8005e58:	4013      	ands	r3, r2
 8005e5a:	60bb      	str	r3, [r7, #8]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e5e:	2317      	movs	r3, #23
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e66:	4b4c      	ldr	r3, [pc, #304]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	2380      	movs	r3, #128	; 0x80
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d11a      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e72:	4b49      	ldr	r3, [pc, #292]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b48      	ldr	r3, [pc, #288]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005e78:	2180      	movs	r1, #128	; 0x80
 8005e7a:	0049      	lsls	r1, r1, #1
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e80:	f7fe fab4 	bl	80043ec <HAL_GetTick>
 8005e84:	0003      	movs	r3, r0
 8005e86:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e88:	e008      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e8a:	f7fe faaf 	bl	80043ec <HAL_GetTick>
 8005e8e:	0002      	movs	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b64      	cmp	r3, #100	; 0x64
 8005e96:	d901      	bls.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e077      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e9c:	4b3e      	ldr	r3, [pc, #248]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d0f0      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ea8:	4b3a      	ldr	r3, [pc, #232]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005eaa:	6a1a      	ldr	r2, [r3, #32]
 8005eac:	23c0      	movs	r3, #192	; 0xc0
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d034      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	23c0      	movs	r3, #192	; 0xc0
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d02c      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eca:	4b32      	ldr	r3, [pc, #200]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	4a33      	ldr	r2, [pc, #204]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ed4:	4b2f      	ldr	r3, [pc, #188]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ed6:	6a1a      	ldr	r2, [r3, #32]
 8005ed8:	4b2e      	ldr	r3, [pc, #184]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005eda:	2180      	movs	r1, #128	; 0x80
 8005edc:	0249      	lsls	r1, r1, #9
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ee2:	4b2c      	ldr	r3, [pc, #176]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	4b2b      	ldr	r3, [pc, #172]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ee8:	492d      	ldr	r1, [pc, #180]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005eea:	400a      	ands	r2, r1
 8005eec:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005eee:	4b29      	ldr	r3, [pc, #164]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d013      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efc:	f7fe fa76 	bl	80043ec <HAL_GetTick>
 8005f00:	0003      	movs	r3, r0
 8005f02:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f04:	e009      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f06:	f7fe fa71 	bl	80043ec <HAL_GetTick>
 8005f0a:	0002      	movs	r2, r0
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	4a24      	ldr	r2, [pc, #144]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e038      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f1a:	4b1e      	ldr	r3, [pc, #120]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	4013      	ands	r3, r2
 8005f22:	d0f0      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f24:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	0019      	movs	r1, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	4b18      	ldr	r3, [pc, #96]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f34:	430a      	orrs	r2, r1
 8005f36:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f38:	2317      	movs	r3, #23
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d105      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f42:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f44:	69da      	ldr	r2, [r3, #28]
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f48:	4917      	ldr	r1, [pc, #92]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005f4a:	400a      	ands	r2, r1
 8005f4c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2201      	movs	r2, #1
 8005f54:	4013      	ands	r3, r2
 8005f56:	d009      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f58:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	4393      	bics	r3, r2
 8005f60:	0019      	movs	r1, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2220      	movs	r2, #32
 8005f72:	4013      	ands	r3, r2
 8005f74:	d009      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f76:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	4393      	bics	r3, r2
 8005f7e:	0019      	movs	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f86:	430a      	orrs	r2, r1
 8005f88:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b006      	add	sp, #24
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40021000 	.word	0x40021000
 8005f98:	40007000 	.word	0x40007000
 8005f9c:	fffffcff 	.word	0xfffffcff
 8005fa0:	fffeffff 	.word	0xfffeffff
 8005fa4:	00001388 	.word	0x00001388
 8005fa8:	efffffff 	.word	0xefffffff

08005fac <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e081      	b.n	80060c2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	7f5b      	ldrb	r3, [r3, #29]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	f7fd ff2f 	bl	8003e34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	22ca      	movs	r2, #202	; 0xca
 8005fe2:	625a      	str	r2, [r3, #36]	; 0x24
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2253      	movs	r2, #83	; 0x53
 8005fea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f000 faa9 	bl	8006546 <RTC_EnterInitMode>
 8005ff4:	1e03      	subs	r3, r0, #0
 8005ff6:	d008      	beq.n	800600a <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	22ff      	movs	r2, #255	; 0xff
 8005ffe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2204      	movs	r2, #4
 8006004:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e05b      	b.n	80060c2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	492d      	ldr	r1, [pc, #180]	; (80060cc <HAL_RTC_Init+0x120>)
 8006016:	400a      	ands	r2, r1
 8006018:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6899      	ldr	r1, [r3, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68d2      	ldr	r2, [r2, #12]
 8006040:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6919      	ldr	r1, [r3, #16]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	041a      	lsls	r2, r3, #16
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2180      	movs	r1, #128	; 0x80
 8006062:	438a      	bics	r2, r1
 8006064:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2220      	movs	r2, #32
 800606e:	4013      	ands	r3, r2
 8006070:	d10e      	bne.n	8006090 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	0018      	movs	r0, r3
 8006076:	f000 fa3d 	bl	80064f4 <HAL_RTC_WaitForSynchro>
 800607a:	1e03      	subs	r3, r0, #0
 800607c:	d008      	beq.n	8006090 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	22ff      	movs	r2, #255	; 0xff
 8006084:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2204      	movs	r2, #4
 800608a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e018      	b.n	80060c2 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	490d      	ldr	r1, [pc, #52]	; (80060d0 <HAL_RTC_Init+0x124>)
 800609c:	400a      	ands	r2, r1
 800609e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	22ff      	movs	r2, #255	; 0xff
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80060c0:	2300      	movs	r3, #0
  }
}
 80060c2:	0018      	movs	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b002      	add	sp, #8
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	ff8fffbf 	.word	0xff8fffbf
 80060d0:	fffbffff 	.word	0xfffbffff

080060d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060d4:	b590      	push	{r4, r7, lr}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	7f1b      	ldrb	r3, [r3, #28]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_RTC_SetTime+0x1c>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e0a5      	b.n	800623c <HAL_RTC_SetTime+0x168>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2202      	movs	r2, #2
 80060fa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d125      	bne.n	800614e <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2240      	movs	r2, #64	; 0x40
 800610a:	4013      	ands	r3, r2
 800610c:	d102      	bne.n	8006114 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2200      	movs	r2, #0
 8006112:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	0018      	movs	r0, r3
 800611a:	f000 fa40 	bl	800659e <RTC_ByteToBcd2>
 800611e:	0003      	movs	r3, r0
 8006120:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	0018      	movs	r0, r3
 8006128:	f000 fa39 	bl	800659e <RTC_ByteToBcd2>
 800612c:	0003      	movs	r3, r0
 800612e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006130:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	789b      	ldrb	r3, [r3, #2]
 8006136:	0018      	movs	r0, r3
 8006138:	f000 fa31 	bl	800659e <RTC_ByteToBcd2>
 800613c:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800613e:	0022      	movs	r2, r4
 8006140:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	78db      	ldrb	r3, [r3, #3]
 8006146:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e017      	b.n	800617e <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2240      	movs	r2, #64	; 0x40
 8006156:	4013      	ands	r3, r2
 8006158:	d102      	bne.n	8006160 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2200      	movs	r2, #0
 800615e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800616c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006172:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	78db      	ldrb	r3, [r3, #3]
 8006178:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	22ca      	movs	r2, #202	; 0xca
 8006184:	625a      	str	r2, [r3, #36]	; 0x24
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2253      	movs	r2, #83	; 0x53
 800618c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	0018      	movs	r0, r3
 8006192:	f000 f9d8 	bl	8006546 <RTC_EnterInitMode>
 8006196:	1e03      	subs	r3, r0, #0
 8006198:	d00b      	beq.n	80061b2 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	22ff      	movs	r2, #255	; 0xff
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2204      	movs	r2, #4
 80061a6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e044      	b.n	800623c <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4922      	ldr	r1, [pc, #136]	; (8006244 <HAL_RTC_SetTime+0x170>)
 80061ba:	400a      	ands	r2, r1
 80061bc:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	491f      	ldr	r1, [pc, #124]	; (8006248 <HAL_RTC_SetTime+0x174>)
 80061ca:	400a      	ands	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6899      	ldr	r1, [r3, #8]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	431a      	orrs	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2180      	movs	r1, #128	; 0x80
 80061f2:	438a      	bics	r2, r1
 80061f4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2220      	movs	r2, #32
 80061fe:	4013      	ands	r3, r2
 8006200:	d111      	bne.n	8006226 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	0018      	movs	r0, r3
 8006206:	f000 f975 	bl	80064f4 <HAL_RTC_WaitForSynchro>
 800620a:	1e03      	subs	r3, r0, #0
 800620c:	d00b      	beq.n	8006226 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	22ff      	movs	r2, #255	; 0xff
 8006214:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2204      	movs	r2, #4
 800621a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e00a      	b.n	800623c <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	22ff      	movs	r2, #255	; 0xff
 800622c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800623a:	2300      	movs	r3, #0
  }
}
 800623c:	0018      	movs	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	b007      	add	sp, #28
 8006242:	bd90      	pop	{r4, r7, pc}
 8006244:	007f7f7f 	.word	0x007f7f7f
 8006248:	fffbffff 	.word	0xfffbffff

0800624c <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	045b      	lsls	r3, r3, #17
 800626e:	0c5a      	lsrs	r2, r3, #17
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a22      	ldr	r2, [pc, #136]	; (8006304 <HAL_RTC_GetTime+0xb8>)
 800627c:	4013      	ands	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	0c1b      	lsrs	r3, r3, #16
 8006284:	b2db      	uxtb	r3, r3
 8006286:	223f      	movs	r2, #63	; 0x3f
 8006288:	4013      	ands	r3, r2
 800628a:	b2da      	uxtb	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	b2db      	uxtb	r3, r3
 8006296:	227f      	movs	r2, #127	; 0x7f
 8006298:	4013      	ands	r3, r2
 800629a:	b2da      	uxtb	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	227f      	movs	r2, #127	; 0x7f
 80062a6:	4013      	ands	r3, r2
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2240      	movs	r2, #64	; 0x40
 80062b6:	4013      	ands	r3, r2
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d11a      	bne.n	80062fa <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	0018      	movs	r0, r3
 80062ca:	f000 f989 	bl	80065e0 <RTC_Bcd2ToByte>
 80062ce:	0003      	movs	r3, r0
 80062d0:	001a      	movs	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	0018      	movs	r0, r3
 80062dc:	f000 f980 	bl	80065e0 <RTC_Bcd2ToByte>
 80062e0:	0003      	movs	r3, r0
 80062e2:	001a      	movs	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	789b      	ldrb	r3, [r3, #2]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f000 f977 	bl	80065e0 <RTC_Bcd2ToByte>
 80062f2:	0003      	movs	r3, r0
 80062f4:	001a      	movs	r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	0018      	movs	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	b006      	add	sp, #24
 8006302:	bd80      	pop	{r7, pc}
 8006304:	007f7f7f 	.word	0x007f7f7f

08006308 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006308:	b590      	push	{r4, r7, lr}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	7f1b      	ldrb	r3, [r3, #28]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_RTC_SetDate+0x1c>
 8006320:	2302      	movs	r3, #2
 8006322:	e091      	b.n	8006448 <HAL_RTC_SetDate+0x140>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2202      	movs	r2, #2
 800632e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10e      	bne.n	8006354 <HAL_RTC_SetDate+0x4c>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	785b      	ldrb	r3, [r3, #1]
 800633a:	001a      	movs	r2, r3
 800633c:	2310      	movs	r3, #16
 800633e:	4013      	ands	r3, r2
 8006340:	d008      	beq.n	8006354 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2210      	movs	r2, #16
 8006348:	4393      	bics	r3, r2
 800634a:	b2db      	uxtb	r3, r3
 800634c:	330a      	adds	r3, #10
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d11c      	bne.n	8006394 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	78db      	ldrb	r3, [r3, #3]
 800635e:	0018      	movs	r0, r3
 8006360:	f000 f91d 	bl	800659e <RTC_ByteToBcd2>
 8006364:	0003      	movs	r3, r0
 8006366:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	0018      	movs	r0, r3
 800636e:	f000 f916 	bl	800659e <RTC_ByteToBcd2>
 8006372:	0003      	movs	r3, r0
 8006374:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006376:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	789b      	ldrb	r3, [r3, #2]
 800637c:	0018      	movs	r0, r3
 800637e:	f000 f90e 	bl	800659e <RTC_ByteToBcd2>
 8006382:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006384:	0022      	movs	r2, r4
 8006386:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e00e      	b.n	80063b2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063a0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80063a6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	22ca      	movs	r2, #202	; 0xca
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2253      	movs	r2, #83	; 0x53
 80063c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	0018      	movs	r0, r3
 80063c6:	f000 f8be 	bl	8006546 <RTC_EnterInitMode>
 80063ca:	1e03      	subs	r3, r0, #0
 80063cc:	d00b      	beq.n	80063e6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	22ff      	movs	r2, #255	; 0xff
 80063d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2204      	movs	r2, #4
 80063da:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e030      	b.n	8006448 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4918      	ldr	r1, [pc, #96]	; (8006450 <HAL_RTC_SetDate+0x148>)
 80063ee:	400a      	ands	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2180      	movs	r1, #128	; 0x80
 80063fe:	438a      	bics	r2, r1
 8006400:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2220      	movs	r2, #32
 800640a:	4013      	ands	r3, r2
 800640c:	d111      	bne.n	8006432 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	0018      	movs	r0, r3
 8006412:	f000 f86f 	bl	80064f4 <HAL_RTC_WaitForSynchro>
 8006416:	1e03      	subs	r3, r0, #0
 8006418:	d00b      	beq.n	8006432 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	22ff      	movs	r2, #255	; 0xff
 8006420:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2204      	movs	r2, #4
 8006426:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e00a      	b.n	8006448 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	22ff      	movs	r2, #255	; 0xff
 8006438:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006446:	2300      	movs	r3, #0
  }
}
 8006448:	0018      	movs	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	b007      	add	sp, #28
 800644e:	bd90      	pop	{r4, r7, pc}
 8006450:	00ffff3f 	.word	0x00ffff3f

08006454 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	4a21      	ldr	r2, [pc, #132]	; (80064f0 <HAL_RTC_GetDate+0x9c>)
 800646c:	4013      	ands	r3, r2
 800646e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	0c1b      	lsrs	r3, r3, #16
 8006474:	b2da      	uxtb	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	0a1b      	lsrs	r3, r3, #8
 800647e:	b2db      	uxtb	r3, r3
 8006480:	221f      	movs	r2, #31
 8006482:	4013      	ands	r3, r2
 8006484:	b2da      	uxtb	r2, r3
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	223f      	movs	r2, #63	; 0x3f
 8006490:	4013      	ands	r3, r2
 8006492:	b2da      	uxtb	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	0b5b      	lsrs	r3, r3, #13
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2207      	movs	r2, #7
 80064a0:	4013      	ands	r3, r2
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d11a      	bne.n	80064e4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	78db      	ldrb	r3, [r3, #3]
 80064b2:	0018      	movs	r0, r3
 80064b4:	f000 f894 	bl	80065e0 <RTC_Bcd2ToByte>
 80064b8:	0003      	movs	r3, r0
 80064ba:	001a      	movs	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	0018      	movs	r0, r3
 80064c6:	f000 f88b 	bl	80065e0 <RTC_Bcd2ToByte>
 80064ca:	0003      	movs	r3, r0
 80064cc:	001a      	movs	r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	789b      	ldrb	r3, [r3, #2]
 80064d6:	0018      	movs	r0, r3
 80064d8:	f000 f882 	bl	80065e0 <RTC_Bcd2ToByte>
 80064dc:	0003      	movs	r3, r0
 80064de:	001a      	movs	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	0018      	movs	r0, r3
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b006      	add	sp, #24
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	00ffff3f 	.word	0x00ffff3f

080064f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	21a0      	movs	r1, #160	; 0xa0
 800650c:	438a      	bics	r2, r1
 800650e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006510:	f7fd ff6c 	bl	80043ec <HAL_GetTick>
 8006514:	0003      	movs	r3, r0
 8006516:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006518:	e00a      	b.n	8006530 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800651a:	f7fd ff67 	bl	80043ec <HAL_GetTick>
 800651e:	0002      	movs	r2, r0
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	23fa      	movs	r3, #250	; 0xfa
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	429a      	cmp	r2, r3
 800652a:	d901      	bls.n	8006530 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e006      	b.n	800653e <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	4013      	ands	r3, r2
 800653a:	d0ee      	beq.n	800651a <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	0018      	movs	r0, r3
 8006540:	46bd      	mov	sp, r7
 8006542:	b004      	add	sp, #16
 8006544:	bd80      	pop	{r7, pc}

08006546 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	2240      	movs	r2, #64	; 0x40
 800655a:	4013      	ands	r3, r2
 800655c:	d11a      	bne.n	8006594 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2201      	movs	r2, #1
 8006564:	4252      	negs	r2, r2
 8006566:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006568:	f7fd ff40 	bl	80043ec <HAL_GetTick>
 800656c:	0003      	movs	r3, r0
 800656e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006570:	e00a      	b.n	8006588 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006572:	f7fd ff3b 	bl	80043ec <HAL_GetTick>
 8006576:	0002      	movs	r2, r0
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	1ad2      	subs	r2, r2, r3
 800657c:	23fa      	movs	r3, #250	; 0xfa
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	429a      	cmp	r2, r3
 8006582:	d901      	bls.n	8006588 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e006      	b.n	8006596 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2240      	movs	r2, #64	; 0x40
 8006590:	4013      	ands	r3, r2
 8006592:	d0ee      	beq.n	8006572 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	0018      	movs	r0, r3
 8006598:	46bd      	mov	sp, r7
 800659a:	b004      	add	sp, #16
 800659c:	bd80      	pop	{r7, pc}

0800659e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	0002      	movs	r2, r0
 80065a6:	1dfb      	adds	r3, r7, #7
 80065a8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80065ae:	e007      	b.n	80065c0 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3301      	adds	r3, #1
 80065b4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80065b6:	1dfb      	adds	r3, r7, #7
 80065b8:	1dfa      	adds	r2, r7, #7
 80065ba:	7812      	ldrb	r2, [r2, #0]
 80065bc:	3a0a      	subs	r2, #10
 80065be:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 80065c0:	1dfb      	adds	r3, r7, #7
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b09      	cmp	r3, #9
 80065c6:	d8f3      	bhi.n	80065b0 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	1dfb      	adds	r3, r7, #7
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	b2db      	uxtb	r3, r3
}
 80065d8:	0018      	movs	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	b004      	add	sp, #16
 80065de:	bd80      	pop	{r7, pc}

080065e0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	0002      	movs	r2, r0
 80065e8:	1dfb      	adds	r3, r7, #7
 80065ea:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80065f0:	1dfb      	adds	r3, r7, #7
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	091b      	lsrs	r3, r3, #4
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	001a      	movs	r2, r3
 80065fa:	0013      	movs	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	189b      	adds	r3, r3, r2
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8006604:	1dfb      	adds	r3, r7, #7
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	220f      	movs	r2, #15
 800660a:	4013      	ands	r3, r2
 800660c:	b2da      	uxtb	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	18d3      	adds	r3, r2, r3
 8006614:	b2db      	uxtb	r3, r3
}
 8006616:	0018      	movs	r0, r3
 8006618:	46bd      	mov	sp, r7
 800661a:	b004      	add	sp, #16
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e08a      	b.n	8006748 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	225d      	movs	r2, #93	; 0x5d
 800663c:	5c9b      	ldrb	r3, [r3, r2]
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d107      	bne.n	8006654 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	225c      	movs	r2, #92	; 0x5c
 8006648:	2100      	movs	r1, #0
 800664a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	0018      	movs	r0, r3
 8006650:	f000 f880 	bl	8006754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	225d      	movs	r2, #93	; 0x5d
 8006658:	2102      	movs	r1, #2
 800665a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2140      	movs	r1, #64	; 0x40
 8006668:	438a      	bics	r2, r1
 800666a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	23e0      	movs	r3, #224	; 0xe0
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	429a      	cmp	r2, r3
 8006676:	d902      	bls.n	800667e <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	e002      	b.n	8006684 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800667e:	2380      	movs	r3, #128	; 0x80
 8006680:	015b      	lsls	r3, r3, #5
 8006682:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	23f0      	movs	r3, #240	; 0xf0
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	429a      	cmp	r2, r3
 800668e:	d008      	beq.n	80066a2 <HAL_SPI_Init+0x82>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	23e0      	movs	r3, #224	; 0xe0
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	429a      	cmp	r2, r3
 800669a:	d002      	beq.n	80066a2 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10c      	bne.n	80066c4 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	23e0      	movs	r3, #224	; 0xe0
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d903      	bls.n	80066be <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2202      	movs	r2, #2
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
 80066bc:	e002      	b.n	80066c4 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6999      	ldr	r1, [r3, #24]
 80066de:	2380      	movs	r3, #128	; 0x80
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	400b      	ands	r3, r1
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	431a      	orrs	r2, r3
 80066f2:	0011      	movs	r1, r2
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	0c1b      	lsrs	r3, r3, #16
 8006706:	2204      	movs	r2, #4
 8006708:	401a      	ands	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	431a      	orrs	r2, r3
 800671c:	0011      	movs	r1, r2
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	430a      	orrs	r2, r1
 8006726:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69da      	ldr	r2, [r3, #28]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4907      	ldr	r1, [pc, #28]	; (8006750 <HAL_SPI_Init+0x130>)
 8006734:	400a      	ands	r2, r1
 8006736:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	225d      	movs	r2, #93	; 0x5d
 8006742:	2101      	movs	r1, #1
 8006744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	0018      	movs	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	b004      	add	sp, #16
 800674e:	bd80      	pop	{r7, pc}
 8006750:	fffff7ff 	.word	0xfffff7ff

08006754 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800675c:	46c0      	nop			; (mov r8, r8)
 800675e:	46bd      	mov	sp, r7
 8006760:	b002      	add	sp, #8
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	1dbb      	adds	r3, r7, #6
 8006770:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006772:	2317      	movs	r3, #23
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	2200      	movs	r2, #0
 8006778:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	225c      	movs	r2, #92	; 0x5c
 800677e:	5c9b      	ldrb	r3, [r3, r2]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_SPI_Transmit_IT+0x24>
 8006784:	2302      	movs	r3, #2
 8006786:	e076      	b.n	8006876 <HAL_SPI_Transmit_IT+0x112>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	225c      	movs	r2, #92	; 0x5c
 800678c:	2101      	movs	r1, #1
 800678e:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_SPI_Transmit_IT+0x3a>
 8006796:	1dbb      	adds	r3, r7, #6
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 800679e:	2317      	movs	r3, #23
 80067a0:	18fb      	adds	r3, r7, r3
 80067a2:	2201      	movs	r2, #1
 80067a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80067a6:	e05f      	b.n	8006868 <HAL_SPI_Transmit_IT+0x104>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	225d      	movs	r2, #93	; 0x5d
 80067ac:	5c9b      	ldrb	r3, [r3, r2]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d004      	beq.n	80067be <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 80067b4:	2317      	movs	r3, #23
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	2202      	movs	r2, #2
 80067ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80067bc:	e054      	b.n	8006868 <HAL_SPI_Transmit_IT+0x104>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	225d      	movs	r2, #93	; 0x5d
 80067c2:	2103      	movs	r1, #3
 80067c4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1dba      	adds	r2, r7, #6
 80067d6:	8812      	ldrh	r2, [r2, #0]
 80067d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	1dba      	adds	r2, r7, #6
 80067de:	8812      	ldrh	r2, [r2, #0]
 80067e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2244      	movs	r2, #68	; 0x44
 80067ec:	2100      	movs	r1, #0
 80067ee:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2246      	movs	r2, #70	; 0x46
 80067f4:	2100      	movs	r1, #0
 80067f6:	5299      	strh	r1, [r3, r2]
  hspi->RxISR       = NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	23e0      	movs	r3, #224	; 0xe0
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	429a      	cmp	r2, r3
 8006808:	d903      	bls.n	8006812 <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4a1c      	ldr	r2, [pc, #112]	; (8006880 <HAL_SPI_Transmit_IT+0x11c>)
 800680e:	651a      	str	r2, [r3, #80]	; 0x50
 8006810:	e002      	b.n	8006818 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4a1b      	ldr	r2, [pc, #108]	; (8006884 <HAL_SPI_Transmit_IT+0x120>)
 8006816:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	429a      	cmp	r2, r3
 8006822:	d108      	bne.n	8006836 <HAL_SPI_Transmit_IT+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2180      	movs	r1, #128	; 0x80
 8006830:	01c9      	lsls	r1, r1, #7
 8006832:	430a      	orrs	r2, r1
 8006834:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	21a0      	movs	r1, #160	; 0xa0
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2240      	movs	r2, #64	; 0x40
 800684e:	4013      	ands	r3, r2
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	d008      	beq.n	8006866 <HAL_SPI_Transmit_IT+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2140      	movs	r1, #64	; 0x40
 8006860:	430a      	orrs	r2, r1
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	e000      	b.n	8006868 <HAL_SPI_Transmit_IT+0x104>
  }

error :
 8006866:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	225c      	movs	r2, #92	; 0x5c
 800686c:	2100      	movs	r1, #0
 800686e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006870:	2317      	movs	r3, #23
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	781b      	ldrb	r3, [r3, #0]
}
 8006876:	0018      	movs	r0, r3
 8006878:	46bd      	mov	sp, r7
 800687a:	b006      	add	sp, #24
 800687c:	bd80      	pop	{r7, pc}
 800687e:	46c0      	nop			; (mov r8, r8)
 8006880:	080070e5 	.word	0x080070e5
 8006884:	0800709d 	.word	0x0800709d

08006888 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	1dbb      	adds	r3, r7, #6
 8006894:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006896:	2317      	movs	r3, #23
 8006898:	18fb      	adds	r3, r7, r3
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d112      	bne.n	80068cc <HAL_SPI_Receive_IT+0x44>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	2382      	movs	r3, #130	; 0x82
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d10c      	bne.n	80068cc <HAL_SPI_Receive_IT+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	225d      	movs	r2, #93	; 0x5d
 80068b6:	2104      	movs	r1, #4
 80068b8:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80068ba:	1dbb      	adds	r3, r7, #6
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f89c 	bl	8006a00 <HAL_SPI_TransmitReceive_IT>
 80068c8:	0003      	movs	r3, r0
 80068ca:	e08d      	b.n	80069e8 <HAL_SPI_Receive_IT+0x160>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	225c      	movs	r2, #92	; 0x5c
 80068d0:	5c9b      	ldrb	r3, [r3, r2]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_SPI_Receive_IT+0x52>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e086      	b.n	80069e8 <HAL_SPI_Receive_IT+0x160>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	225c      	movs	r2, #92	; 0x5c
 80068de:	2101      	movs	r1, #1
 80068e0:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	225d      	movs	r2, #93	; 0x5d
 80068e6:	5c9b      	ldrb	r3, [r3, r2]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d004      	beq.n	80068f8 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 80068ee:	2317      	movs	r3, #23
 80068f0:	18fb      	adds	r3, r7, r3
 80068f2:	2202      	movs	r2, #2
 80068f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80068f6:	e070      	b.n	80069da <HAL_SPI_Receive_IT+0x152>
  }

  if ((pData == NULL) || (Size == 0U))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_SPI_Receive_IT+0x7e>
 80068fe:	1dbb      	adds	r3, r7, #6
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <HAL_SPI_Receive_IT+0x88>
  {
    errorcode = HAL_ERROR;
 8006906:	2317      	movs	r3, #23
 8006908:	18fb      	adds	r3, r7, r3
 800690a:	2201      	movs	r2, #1
 800690c:	701a      	strb	r2, [r3, #0]
    goto error;
 800690e:	e064      	b.n	80069da <HAL_SPI_Receive_IT+0x152>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	225d      	movs	r2, #93	; 0x5d
 8006914:	2104      	movs	r1, #4
 8006916:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	1dba      	adds	r2, r7, #6
 8006928:	2144      	movs	r1, #68	; 0x44
 800692a:	8812      	ldrh	r2, [r2, #0]
 800692c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1dba      	adds	r2, r7, #6
 8006932:	2146      	movs	r1, #70	; 0x46
 8006934:	8812      	ldrh	r2, [r2, #0]
 8006936:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	23e0      	movs	r3, #224	; 0xe0
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	429a      	cmp	r2, r3
 800695a:	d90b      	bls.n	8006974 <HAL_SPI_Receive_IT+0xec>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4922      	ldr	r1, [pc, #136]	; (80069f0 <HAL_SPI_Receive_IT+0x168>)
 8006968:	400a      	ands	r2, r1
 800696a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4a21      	ldr	r2, [pc, #132]	; (80069f4 <HAL_SPI_Receive_IT+0x16c>)
 8006970:	64da      	str	r2, [r3, #76]	; 0x4c
 8006972:	e00b      	b.n	800698c <HAL_SPI_Receive_IT+0x104>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2180      	movs	r1, #128	; 0x80
 8006980:	0149      	lsls	r1, r1, #5
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a1b      	ldr	r2, [pc, #108]	; (80069f8 <HAL_SPI_Receive_IT+0x170>)
 800698a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	2380      	movs	r3, #128	; 0x80
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	429a      	cmp	r2, r3
 8006996:	d107      	bne.n	80069a8 <HAL_SPI_Receive_IT+0x120>
  {
    SPI_1LINE_RX(hspi);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4916      	ldr	r1, [pc, #88]	; (80069fc <HAL_SPI_Receive_IT+0x174>)
 80069a4:	400a      	ands	r2, r1
 80069a6:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2160      	movs	r1, #96	; 0x60
 80069b4:	430a      	orrs	r2, r1
 80069b6:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2240      	movs	r2, #64	; 0x40
 80069c0:	4013      	ands	r3, r2
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	d008      	beq.n	80069d8 <HAL_SPI_Receive_IT+0x150>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2140      	movs	r1, #64	; 0x40
 80069d2:	430a      	orrs	r2, r1
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	e000      	b.n	80069da <HAL_SPI_Receive_IT+0x152>
  }

error :
 80069d8:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	225c      	movs	r2, #92	; 0x5c
 80069de:	2100      	movs	r1, #0
 80069e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80069e2:	2317      	movs	r3, #23
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	781b      	ldrb	r3, [r3, #0]
}
 80069e8:	0018      	movs	r0, r3
 80069ea:	46bd      	mov	sp, r7
 80069ec:	b006      	add	sp, #24
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	ffffefff 	.word	0xffffefff
 80069f4:	0800704f 	.word	0x0800704f
 80069f8:	08006ffd 	.word	0x08006ffd
 80069fc:	ffffbfff 	.word	0xffffbfff

08006a00 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	001a      	movs	r2, r3
 8006a0e:	1cbb      	adds	r3, r7, #2
 8006a10:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a12:	2317      	movs	r3, #23
 8006a14:	18fb      	adds	r3, r7, r3
 8006a16:	2200      	movs	r2, #0
 8006a18:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	225c      	movs	r2, #92	; 0x5c
 8006a1e:	5c9b      	ldrb	r3, [r3, r2]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_SPI_TransmitReceive_IT+0x28>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e0a6      	b.n	8006b76 <HAL_SPI_TransmitReceive_IT+0x176>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	225c      	movs	r2, #92	; 0x5c
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a30:	2016      	movs	r0, #22
 8006a32:	183b      	adds	r3, r7, r0
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	215d      	movs	r1, #93	; 0x5d
 8006a38:	5c52      	ldrb	r2, [r2, r1]
 8006a3a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a42:	183b      	adds	r3, r7, r0
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d012      	beq.n	8006a70 <HAL_SPI_TransmitReceive_IT+0x70>
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	2382      	movs	r3, #130	; 0x82
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d108      	bne.n	8006a66 <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <HAL_SPI_TransmitReceive_IT+0x66>
 8006a5c:	2316      	movs	r3, #22
 8006a5e:	18fb      	adds	r3, r7, r3
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d004      	beq.n	8006a70 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8006a66:	2317      	movs	r3, #23
 8006a68:	18fb      	adds	r3, r7, r3
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8006a6e:	e07b      	b.n	8006b68 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d006      	beq.n	8006a84 <HAL_SPI_TransmitReceive_IT+0x84>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <HAL_SPI_TransmitReceive_IT+0x84>
 8006a7c:	1cbb      	adds	r3, r7, #2
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d104      	bne.n	8006a8e <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8006a84:	2317      	movs	r3, #23
 8006a86:	18fb      	adds	r3, r7, r3
 8006a88:	2201      	movs	r2, #1
 8006a8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006a8c:	e06c      	b.n	8006b68 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	225d      	movs	r2, #93	; 0x5d
 8006a92:	5c9b      	ldrb	r3, [r3, r2]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d003      	beq.n	8006aa2 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	225d      	movs	r2, #93	; 0x5d
 8006a9e:	2105      	movs	r1, #5
 8006aa0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1cba      	adds	r2, r7, #2
 8006ab2:	8812      	ldrh	r2, [r2, #0]
 8006ab4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	1cba      	adds	r2, r7, #2
 8006aba:	8812      	ldrh	r2, [r2, #0]
 8006abc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	1cba      	adds	r2, r7, #2
 8006ac8:	2144      	movs	r1, #68	; 0x44
 8006aca:	8812      	ldrh	r2, [r2, #0]
 8006acc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	1cba      	adds	r2, r7, #2
 8006ad2:	2146      	movs	r1, #70	; 0x46
 8006ad4:	8812      	ldrh	r2, [r2, #0]
 8006ad6:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	23e0      	movs	r3, #224	; 0xe0
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d906      	bls.n	8006af2 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a26      	ldr	r2, [pc, #152]	; (8006b80 <HAL_SPI_TransmitReceive_IT+0x180>)
 8006ae8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a25      	ldr	r2, [pc, #148]	; (8006b84 <HAL_SPI_TransmitReceive_IT+0x184>)
 8006aee:	651a      	str	r2, [r3, #80]	; 0x50
 8006af0:	e005      	b.n	8006afe <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4a24      	ldr	r2, [pc, #144]	; (8006b88 <HAL_SPI_TransmitReceive_IT+0x188>)
 8006af6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4a24      	ldr	r2, [pc, #144]	; (8006b8c <HAL_SPI_TransmitReceive_IT+0x18c>)
 8006afc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	23e0      	movs	r3, #224	; 0xe0
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d803      	bhi.n	8006b12 <HAL_SPI_TransmitReceive_IT+0x112>
 8006b0a:	1cbb      	adds	r3, r7, #2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d908      	bls.n	8006b24 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	491c      	ldr	r1, [pc, #112]	; (8006b90 <HAL_SPI_TransmitReceive_IT+0x190>)
 8006b1e:	400a      	ands	r2, r1
 8006b20:	605a      	str	r2, [r3, #4]
 8006b22:	e008      	b.n	8006b36 <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2180      	movs	r1, #128	; 0x80
 8006b30:	0149      	lsls	r1, r1, #5
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	21e0      	movs	r1, #224	; 0xe0
 8006b42:	430a      	orrs	r2, r1
 8006b44:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2240      	movs	r2, #64	; 0x40
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b40      	cmp	r3, #64	; 0x40
 8006b52:	d008      	beq.n	8006b66 <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2140      	movs	r1, #64	; 0x40
 8006b60:	430a      	orrs	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	e000      	b.n	8006b68 <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 8006b66:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	225c      	movs	r2, #92	; 0x5c
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006b70:	2317      	movs	r3, #23
 8006b72:	18fb      	adds	r3, r7, r3
 8006b74:	781b      	ldrb	r3, [r3, #0]
}
 8006b76:	0018      	movs	r0, r3
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	b006      	add	sp, #24
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	08006f33 	.word	0x08006f33
 8006b84:	08006f9b 	.word	0x08006f9b
 8006b88:	08006ddd 	.word	0x08006ddd
 8006b8c:	08006e9f 	.word	0x08006e9f
 8006b90:	ffffefff 	.word	0xffffefff

08006b94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	099b      	lsrs	r3, r3, #6
 8006bb0:	001a      	movs	r2, r3
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	d10f      	bne.n	8006bd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bbe:	d00b      	beq.n	8006bd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	099b      	lsrs	r3, r3, #6
 8006bc4:	001a      	movs	r2, r3
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	4013      	ands	r3, r2
 8006bca:	d005      	beq.n	8006bd8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	0010      	movs	r0, r2
 8006bd4:	4798      	blx	r3
    return;
 8006bd6:	e0d6      	b.n	8006d86 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	001a      	movs	r2, r3
 8006bde:	2301      	movs	r3, #1
 8006be0:	4013      	ands	r3, r2
 8006be2:	d00b      	beq.n	8006bfc <HAL_SPI_IRQHandler+0x68>
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	09db      	lsrs	r3, r3, #7
 8006be8:	001a      	movs	r2, r3
 8006bea:	2301      	movs	r3, #1
 8006bec:	4013      	ands	r3, r2
 8006bee:	d005      	beq.n	8006bfc <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	0010      	movs	r0, r2
 8006bf8:	4798      	blx	r3
    return;
 8006bfa:	e0c4      	b.n	8006d86 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	001a      	movs	r2, r3
 8006c02:	2301      	movs	r3, #1
 8006c04:	4013      	ands	r3, r2
 8006c06:	d10c      	bne.n	8006c22 <HAL_SPI_IRQHandler+0x8e>
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	099b      	lsrs	r3, r3, #6
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4013      	ands	r3, r2
 8006c12:	d106      	bne.n	8006c22 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	0a1b      	lsrs	r3, r3, #8
 8006c18:	001a      	movs	r2, r3
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	d100      	bne.n	8006c22 <HAL_SPI_IRQHandler+0x8e>
 8006c20:	e0b1      	b.n	8006d86 <HAL_SPI_IRQHandler+0x1f2>
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	001a      	movs	r2, r3
 8006c28:	2301      	movs	r3, #1
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	d100      	bne.n	8006c30 <HAL_SPI_IRQHandler+0x9c>
 8006c2e:	e0aa      	b.n	8006d86 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	099b      	lsrs	r3, r3, #6
 8006c34:	001a      	movs	r2, r3
 8006c36:	2301      	movs	r3, #1
 8006c38:	4013      	ands	r3, r2
 8006c3a:	d023      	beq.n	8006c84 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	225d      	movs	r2, #93	; 0x5d
 8006c40:	5c9b      	ldrb	r3, [r3, r2]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d011      	beq.n	8006c6c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	e00b      	b.n	8006c84 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	693b      	ldr	r3, [r7, #16]
        return;
 8006c82:	e080      	b.n	8006d86 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	095b      	lsrs	r3, r3, #5
 8006c88:	001a      	movs	r2, r3
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d014      	beq.n	8006cba <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c94:	2201      	movs	r2, #1
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2140      	movs	r1, #64	; 0x40
 8006cb4:	438a      	bics	r2, r1
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	0a1b      	lsrs	r3, r3, #8
 8006cbe:	001a      	movs	r2, r3
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d00c      	beq.n	8006ce0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cca:	2208      	movs	r2, #8
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d04d      	beq.n	8006d84 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	21e0      	movs	r1, #224	; 0xe0
 8006cf4:	438a      	bics	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	225d      	movs	r2, #93	; 0x5d
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	2202      	movs	r2, #2
 8006d04:	4013      	ands	r3, r2
 8006d06:	d103      	bne.n	8006d10 <HAL_SPI_IRQHandler+0x17c>
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d032      	beq.n	8006d76 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2103      	movs	r1, #3
 8006d1c:	438a      	bics	r2, r1
 8006d1e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d010      	beq.n	8006d4a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2c:	4a17      	ldr	r2, [pc, #92]	; (8006d8c <HAL_SPI_IRQHandler+0x1f8>)
 8006d2e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d34:	0018      	movs	r0, r3
 8006d36:	f7fe f8e1 	bl	8004efc <HAL_DMA_Abort_IT>
 8006d3a:	1e03      	subs	r3, r0, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d42:	2240      	movs	r2, #64	; 0x40
 8006d44:	431a      	orrs	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d016      	beq.n	8006d80 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d56:	4a0d      	ldr	r2, [pc, #52]	; (8006d8c <HAL_SPI_IRQHandler+0x1f8>)
 8006d58:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7fe f8cc 	bl	8004efc <HAL_DMA_Abort_IT>
 8006d64:	1e03      	subs	r3, r0, #0
 8006d66:	d00b      	beq.n	8006d80 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d6c:	2240      	movs	r2, #64	; 0x40
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006d74:	e004      	b.n	8006d80 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f000 f811 	bl	8006da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d7e:	e000      	b.n	8006d82 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006d80:	46c0      	nop			; (mov r8, r8)
    return;
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	46c0      	nop			; (mov r8, r8)
  }
}
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b008      	add	sp, #32
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	08006db1 	.word	0x08006db1

08006d90 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006d98:	46c0      	nop			; (mov r8, r8)
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	b002      	add	sp, #8
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006da8:	46c0      	nop			; (mov r8, r8)
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b002      	add	sp, #8
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2246      	movs	r2, #70	; 0x46
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f7ff ffe6 	bl	8006da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006dd4:	46c0      	nop			; (mov r8, r8)
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	b004      	add	sp, #16
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2246      	movs	r2, #70	; 0x46
 8006de8:	5a9b      	ldrh	r3, [r3, r2]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d924      	bls.n	8006e3a <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	b292      	uxth	r2, r2
 8006dfc:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	1c9a      	adds	r2, r3, #2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2246      	movs	r2, #70	; 0x46
 8006e0c:	5a9b      	ldrh	r3, [r3, r2]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b02      	subs	r3, #2
 8006e12:	b299      	uxth	r1, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2246      	movs	r2, #70	; 0x46
 8006e18:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2246      	movs	r2, #70	; 0x46
 8006e1e:	5a9b      	ldrh	r3, [r3, r2]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d120      	bne.n	8006e68 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2180      	movs	r1, #128	; 0x80
 8006e32:	0149      	lsls	r1, r1, #5
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
 8006e38:	e016      	b.n	8006e68 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	330c      	adds	r3, #12
 8006e40:	001a      	movs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2246      	movs	r2, #70	; 0x46
 8006e5a:	5a9b      	ldrh	r3, [r3, r2]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b299      	uxth	r1, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2246      	movs	r2, #70	; 0x46
 8006e66:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2246      	movs	r2, #70	; 0x46
 8006e6c:	5a9b      	ldrh	r3, [r3, r2]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d110      	bne.n	8006e96 <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2160      	movs	r1, #96	; 0x60
 8006e80:	438a      	bics	r2, r1
 8006e82:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d103      	bne.n	8006e96 <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	0018      	movs	r0, r3
 8006e92:	f000 fad3 	bl	800743c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	b002      	add	sp, #8
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d912      	bls.n	8006ed6 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	881a      	ldrh	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	1c9a      	adds	r2, r3, #2
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b02      	subs	r3, #2
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ed4:	e012      	b.n	8006efc <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	330c      	adds	r3, #12
 8006ee0:	7812      	ldrb	r2, [r2, #0]
 8006ee2:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d111      	bne.n	8006f2a <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2180      	movs	r1, #128	; 0x80
 8006f12:	438a      	bics	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2246      	movs	r2, #70	; 0x46
 8006f1a:	5a9b      	ldrh	r3, [r3, r2]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	0018      	movs	r0, r3
 8006f26:	f000 fa89 	bl	800743c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	b002      	add	sp, #8
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	b292      	uxth	r2, r2
 8006f46:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	1c9a      	adds	r2, r3, #2
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2246      	movs	r2, #70	; 0x46
 8006f56:	5a9b      	ldrh	r3, [r3, r2]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b299      	uxth	r1, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2246      	movs	r2, #70	; 0x46
 8006f62:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2246      	movs	r2, #70	; 0x46
 8006f68:	5a9b      	ldrh	r3, [r3, r2]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d110      	bne.n	8006f92 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2140      	movs	r1, #64	; 0x40
 8006f7c:	438a      	bics	r2, r1
 8006f7e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d103      	bne.n	8006f92 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f000 fa55 	bl	800743c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b002      	add	sp, #8
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	881a      	ldrh	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	1c9a      	adds	r2, r3, #2
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d111      	bne.n	8006ff4 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2180      	movs	r1, #128	; 0x80
 8006fdc:	438a      	bics	r2, r1
 8006fde:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2246      	movs	r2, #70	; 0x46
 8006fe4:	5a9b      	ldrh	r3, [r3, r2]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d103      	bne.n	8006ff4 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f000 fa24 	bl	800743c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006ff4:	46c0      	nop			; (mov r8, r8)
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b002      	add	sp, #8
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	001a      	movs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007010:	7812      	ldrb	r2, [r2, #0]
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2246      	movs	r2, #70	; 0x46
 8007024:	5a9b      	ldrh	r3, [r3, r2]
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b299      	uxth	r1, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2246      	movs	r2, #70	; 0x46
 8007030:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2246      	movs	r2, #70	; 0x46
 8007036:	5a9b      	ldrh	r3, [r3, r2]
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d103      	bne.n	8007046 <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	0018      	movs	r0, r3
 8007042:	f000 fa41 	bl	80074c8 <SPI_CloseRx_ISR>
  }
}
 8007046:	46c0      	nop			; (mov r8, r8)
 8007048:	46bd      	mov	sp, r7
 800704a:	b002      	add	sp, #8
 800704c:	bd80      	pop	{r7, pc}

0800704e <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	b292      	uxth	r2, r2
 8007062:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	1c9a      	adds	r2, r3, #2
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2246      	movs	r2, #70	; 0x46
 8007072:	5a9b      	ldrh	r3, [r3, r2]
 8007074:	b29b      	uxth	r3, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	b299      	uxth	r1, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2246      	movs	r2, #70	; 0x46
 800707e:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2246      	movs	r2, #70	; 0x46
 8007084:	5a9b      	ldrh	r3, [r3, r2]
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d103      	bne.n	8007094 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	0018      	movs	r0, r3
 8007090:	f000 fa1a 	bl	80074c8 <SPI_CloseRx_ISR>
  }
}
 8007094:	46c0      	nop			; (mov r8, r8)
 8007096:	46bd      	mov	sp, r7
 8007098:	b002      	add	sp, #8
 800709a:	bd80      	pop	{r7, pc}

0800709c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	330c      	adds	r3, #12
 80070ae:	7812      	ldrb	r2, [r2, #0]
 80070b0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	0018      	movs	r0, r3
 80070d8:	f000 fa27 	bl	800752a <SPI_CloseTx_ISR>
  }
}
 80070dc:	46c0      	nop			; (mov r8, r8)
 80070de:	46bd      	mov	sp, r7
 80070e0:	b002      	add	sp, #8
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	881a      	ldrh	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d103      	bne.n	8007122 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	0018      	movs	r0, r3
 800711e:	f000 fa04 	bl	800752a <SPI_CloseTx_ISR>
  }
}
 8007122:	46c0      	nop			; (mov r8, r8)
 8007124:	46bd      	mov	sp, r7
 8007126:	b002      	add	sp, #8
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	603b      	str	r3, [r7, #0]
 8007138:	1dfb      	adds	r3, r7, #7
 800713a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800713c:	e050      	b.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	3301      	adds	r3, #1
 8007142:	d04d      	beq.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007144:	f7fd f952 	bl	80043ec <HAL_GetTick>
 8007148:	0002      	movs	r2, r0
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d902      	bls.n	800715a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d142      	bne.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	21e0      	movs	r1, #224	; 0xe0
 8007166:	438a      	bics	r2, r1
 8007168:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	2382      	movs	r3, #130	; 0x82
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	429a      	cmp	r2, r3
 8007174:	d113      	bne.n	800719e <SPI_WaitFlagStateUntilTimeout+0x72>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	2380      	movs	r3, #128	; 0x80
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	429a      	cmp	r2, r3
 8007180:	d005      	beq.n	800718e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	2380      	movs	r3, #128	; 0x80
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	429a      	cmp	r2, r3
 800718c:	d107      	bne.n	800719e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2140      	movs	r1, #64	; 0x40
 800719a:	438a      	bics	r2, r1
 800719c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071a2:	2380      	movs	r3, #128	; 0x80
 80071a4:	019b      	lsls	r3, r3, #6
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d110      	bne.n	80071cc <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4914      	ldr	r1, [pc, #80]	; (8007208 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80071b6:	400a      	ands	r2, r1
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2180      	movs	r1, #128	; 0x80
 80071c6:	0189      	lsls	r1, r1, #6
 80071c8:	430a      	orrs	r2, r1
 80071ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	225d      	movs	r2, #93	; 0x5d
 80071d0:	2101      	movs	r1, #1
 80071d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	225c      	movs	r2, #92	; 0x5c
 80071d8:	2100      	movs	r1, #0
 80071da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e00f      	b.n	8007200 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4013      	ands	r3, r2
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	425a      	negs	r2, r3
 80071f0:	4153      	adcs	r3, r2
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	001a      	movs	r2, r3
 80071f6:	1dfb      	adds	r3, r7, #7
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d19f      	bne.n	800713e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	0018      	movs	r0, r3
 8007202:	46bd      	mov	sp, r7
 8007204:	b004      	add	sp, #16
 8007206:	bd80      	pop	{r7, pc}
 8007208:	ffffdfff 	.word	0xffffdfff

0800720c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800721a:	e05c      	b.n	80072d6 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	23c0      	movs	r3, #192	; 0xc0
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	429a      	cmp	r2, r3
 8007224:	d106      	bne.n	8007234 <SPI_WaitFifoStateUntilTimeout+0x28>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d103      	bne.n	8007234 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	330c      	adds	r3, #12
 8007232:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	d04d      	beq.n	80072d6 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800723a:	f7fd f8d7 	bl	80043ec <HAL_GetTick>
 800723e:	0002      	movs	r2, r0
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d902      	bls.n	8007250 <SPI_WaitFifoStateUntilTimeout+0x44>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d142      	bne.n	80072d6 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	21e0      	movs	r1, #224	; 0xe0
 800725c:	438a      	bics	r2, r1
 800725e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	2382      	movs	r3, #130	; 0x82
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	429a      	cmp	r2, r3
 800726a:	d113      	bne.n	8007294 <SPI_WaitFifoStateUntilTimeout+0x88>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	2380      	movs	r3, #128	; 0x80
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	429a      	cmp	r2, r3
 8007276:	d005      	beq.n	8007284 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	429a      	cmp	r2, r3
 8007282:	d107      	bne.n	8007294 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2140      	movs	r1, #64	; 0x40
 8007290:	438a      	bics	r2, r1
 8007292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	019b      	lsls	r3, r3, #6
 800729c:	429a      	cmp	r2, r3
 800729e:	d110      	bne.n	80072c2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4911      	ldr	r1, [pc, #68]	; (80072f0 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 80072ac:	400a      	ands	r2, r1
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2180      	movs	r1, #128	; 0x80
 80072bc:	0189      	lsls	r1, r1, #6
 80072be:	430a      	orrs	r2, r1
 80072c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	225d      	movs	r2, #93	; 0x5d
 80072c6:	2101      	movs	r1, #1
 80072c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	225c      	movs	r2, #92	; 0x5c
 80072ce:	2100      	movs	r1, #0
 80072d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e008      	b.n	80072e8 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	4013      	ands	r3, r2
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d19a      	bne.n	800721c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	0018      	movs	r0, r3
 80072ea:	46bd      	mov	sp, r7
 80072ec:	b004      	add	sp, #16
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	ffffdfff 	.word	0xffffdfff

080072f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	2382      	movs	r3, #130	; 0x82
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	429a      	cmp	r2, r3
 800730a:	d113      	bne.n	8007334 <SPI_EndRxTransaction+0x40>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	2380      	movs	r3, #128	; 0x80
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	429a      	cmp	r2, r3
 8007316:	d005      	beq.n	8007324 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	2380      	movs	r3, #128	; 0x80
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	429a      	cmp	r2, r3
 8007322:	d107      	bne.n	8007334 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2140      	movs	r1, #64	; 0x40
 8007330:	438a      	bics	r2, r1
 8007332:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	0013      	movs	r3, r2
 800733e:	2200      	movs	r2, #0
 8007340:	2180      	movs	r1, #128	; 0x80
 8007342:	f7ff fef3 	bl	800712c <SPI_WaitFlagStateUntilTimeout>
 8007346:	1e03      	subs	r3, r0, #0
 8007348:	d007      	beq.n	800735a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800734e:	2220      	movs	r2, #32
 8007350:	431a      	orrs	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e026      	b.n	80073a8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	2382      	movs	r3, #130	; 0x82
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	429a      	cmp	r2, r3
 8007364:	d11f      	bne.n	80073a6 <SPI_EndRxTransaction+0xb2>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	2380      	movs	r3, #128	; 0x80
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	429a      	cmp	r2, r3
 8007370:	d005      	beq.n	800737e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	2380      	movs	r3, #128	; 0x80
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	429a      	cmp	r2, r3
 800737c:	d113      	bne.n	80073a6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	23c0      	movs	r3, #192	; 0xc0
 8007382:	00d9      	lsls	r1, r3, #3
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	0013      	movs	r3, r2
 800738c:	2200      	movs	r2, #0
 800738e:	f7ff ff3d 	bl	800720c <SPI_WaitFifoStateUntilTimeout>
 8007392:	1e03      	subs	r3, r0, #0
 8007394:	d007      	beq.n	80073a6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800739a:	2220      	movs	r2, #32
 800739c:	431a      	orrs	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e000      	b.n	80073a8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	0018      	movs	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	b004      	add	sp, #16
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	23c0      	movs	r3, #192	; 0xc0
 80073c0:	0159      	lsls	r1, r3, #5
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	0013      	movs	r3, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	f7ff ff1e 	bl	800720c <SPI_WaitFifoStateUntilTimeout>
 80073d0:	1e03      	subs	r3, r0, #0
 80073d2:	d007      	beq.n	80073e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d8:	2220      	movs	r2, #32
 80073da:	431a      	orrs	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e027      	b.n	8007434 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	0013      	movs	r3, r2
 80073ee:	2200      	movs	r2, #0
 80073f0:	2180      	movs	r1, #128	; 0x80
 80073f2:	f7ff fe9b 	bl	800712c <SPI_WaitFlagStateUntilTimeout>
 80073f6:	1e03      	subs	r3, r0, #0
 80073f8:	d007      	beq.n	800740a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073fe:	2220      	movs	r2, #32
 8007400:	431a      	orrs	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e014      	b.n	8007434 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	23c0      	movs	r3, #192	; 0xc0
 800740e:	00d9      	lsls	r1, r3, #3
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	0013      	movs	r3, r2
 8007418:	2200      	movs	r2, #0
 800741a:	f7ff fef7 	bl	800720c <SPI_WaitFifoStateUntilTimeout>
 800741e:	1e03      	subs	r3, r0, #0
 8007420:	d007      	beq.n	8007432 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007426:	2220      	movs	r2, #32
 8007428:	431a      	orrs	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e000      	b.n	8007434 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	0018      	movs	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	b004      	add	sp, #16
 800743a:	bd80      	pop	{r7, pc}

0800743c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007444:	f7fc ffd2 	bl	80043ec <HAL_GetTick>
 8007448:	0003      	movs	r3, r0
 800744a:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2120      	movs	r1, #32
 8007458:	438a      	bics	r2, r1
 800745a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2164      	movs	r1, #100	; 0x64
 8007462:	0018      	movs	r0, r3
 8007464:	f7ff ffa4 	bl	80073b0 <SPI_EndRxTxTransaction>
 8007468:	1e03      	subs	r3, r0, #0
 800746a:	d005      	beq.n	8007478 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007470:	2220      	movs	r2, #32
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800747c:	2b00      	cmp	r3, #0
 800747e:	d117      	bne.n	80074b0 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	225d      	movs	r2, #93	; 0x5d
 8007484:	5c9b      	ldrb	r3, [r3, r2]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b04      	cmp	r3, #4
 800748a:	d108      	bne.n	800749e <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	225d      	movs	r2, #93	; 0x5d
 8007490:	2101      	movs	r1, #1
 8007492:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	0018      	movs	r0, r3
 8007498:	f7fb fb9e 	bl	8002bd8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800749c:	e010      	b.n	80074c0 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	225d      	movs	r2, #93	; 0x5d
 80074a2:	2101      	movs	r1, #1
 80074a4:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	0018      	movs	r0, r3
 80074aa:	f7ff fc71 	bl	8006d90 <HAL_SPI_TxRxCpltCallback>
}
 80074ae:	e007      	b.n	80074c0 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	225d      	movs	r2, #93	; 0x5d
 80074b4:	2101      	movs	r1, #1
 80074b6:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	0018      	movs	r0, r3
 80074bc:	f7ff fc70 	bl	8006da0 <HAL_SPI_ErrorCallback>
}
 80074c0:	46c0      	nop			; (mov r8, r8)
 80074c2:	46bd      	mov	sp, r7
 80074c4:	b004      	add	sp, #16
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2160      	movs	r1, #96	; 0x60
 80074dc:	438a      	bics	r2, r1
 80074de:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80074e0:	f7fc ff84 	bl	80043ec <HAL_GetTick>
 80074e4:	0002      	movs	r2, r0
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2164      	movs	r1, #100	; 0x64
 80074ea:	0018      	movs	r0, r3
 80074ec:	f7ff ff02 	bl	80072f4 <SPI_EndRxTransaction>
 80074f0:	1e03      	subs	r3, r0, #0
 80074f2:	d005      	beq.n	8007500 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f8:	2220      	movs	r2, #32
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	225d      	movs	r2, #93	; 0x5d
 8007504:	2101      	movs	r1, #1
 8007506:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	0018      	movs	r0, r3
 8007514:	f7fb fb60 	bl	8002bd8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007518:	e003      	b.n	8007522 <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	0018      	movs	r0, r3
 800751e:	f7ff fc3f 	bl	8006da0 <HAL_SPI_ErrorCallback>
}
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	46bd      	mov	sp, r7
 8007526:	b002      	add	sp, #8
 8007528:	bd80      	pop	{r7, pc}

0800752a <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007532:	f7fc ff5b 	bl	80043ec <HAL_GetTick>
 8007536:	0003      	movs	r3, r0
 8007538:	60fb      	str	r3, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	21a0      	movs	r1, #160	; 0xa0
 8007546:	438a      	bics	r2, r1
 8007548:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2164      	movs	r1, #100	; 0x64
 8007550:	0018      	movs	r0, r3
 8007552:	f7ff ff2d 	bl	80073b0 <SPI_EndRxTxTransaction>
 8007556:	1e03      	subs	r3, r0, #0
 8007558:	d005      	beq.n	8007566 <SPI_CloseTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755e:	2220      	movs	r2, #32
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <SPI_CloseTx_ISR+0x5a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800756e:	2300      	movs	r3, #0
 8007570:	60bb      	str	r3, [r7, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	60bb      	str	r3, [r7, #8]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	60bb      	str	r3, [r7, #8]
 8007582:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	225d      	movs	r2, #93	; 0x5d
 8007588:	2101      	movs	r1, #1
 800758a:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007590:	2b00      	cmp	r3, #0
 8007592:	d004      	beq.n	800759e <SPI_CloseTx_ISR+0x74>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	0018      	movs	r0, r3
 8007598:	f7ff fc02 	bl	8006da0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800759c:	e003      	b.n	80075a6 <SPI_CloseTx_ISR+0x7c>
    HAL_SPI_TxCpltCallback(hspi);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	0018      	movs	r0, r3
 80075a2:	f7fb fb05 	bl	8002bb0 <HAL_SPI_TxCpltCallback>
}
 80075a6:	46c0      	nop			; (mov r8, r8)
 80075a8:	46bd      	mov	sp, r7
 80075aa:	b004      	add	sp, #16
 80075ac:	bd80      	pop	{r7, pc}

080075ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e01e      	b.n	80075fe <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	223d      	movs	r2, #61	; 0x3d
 80075c4:	5c9b      	ldrb	r3, [r3, r2]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d107      	bne.n	80075dc <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	223c      	movs	r2, #60	; 0x3c
 80075d0:	2100      	movs	r1, #0
 80075d2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	0018      	movs	r0, r3
 80075d8:	f7fc fc62 	bl	8003ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	223d      	movs	r2, #61	; 0x3d
 80075e0:	2102      	movs	r1, #2
 80075e2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3304      	adds	r3, #4
 80075ec:	0019      	movs	r1, r3
 80075ee:	0010      	movs	r0, r2
 80075f0:	f000 fb08 	bl	8007c04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	223d      	movs	r2, #61	; 0x3d
 80075f8:	2101      	movs	r1, #1
 80075fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	0018      	movs	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	b002      	add	sp, #8
 8007604:	bd80      	pop	{r7, pc}

08007606 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	223d      	movs	r2, #61	; 0x3d
 8007612:	2102      	movs	r1, #2
 8007614:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2207      	movs	r2, #7
 800761e:	4013      	ands	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b06      	cmp	r3, #6
 8007626:	d007      	beq.n	8007638 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2101      	movs	r1, #1
 8007634:	430a      	orrs	r2, r1
 8007636:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	223d      	movs	r2, #61	; 0x3d
 800763c:	2101      	movs	r1, #1
 800763e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	0018      	movs	r0, r3
 8007644:	46bd      	mov	sp, r7
 8007646:	b004      	add	sp, #16
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	223d      	movs	r2, #61	; 0x3d
 8007658:	2102      	movs	r1, #2
 800765a:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	4a0d      	ldr	r2, [pc, #52]	; (8007698 <HAL_TIM_Base_Stop+0x4c>)
 8007664:	4013      	ands	r3, r2
 8007666:	d10d      	bne.n	8007684 <HAL_TIM_Base_Stop+0x38>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	4a0b      	ldr	r2, [pc, #44]	; (800769c <HAL_TIM_Base_Stop+0x50>)
 8007670:	4013      	ands	r3, r2
 8007672:	d107      	bne.n	8007684 <HAL_TIM_Base_Stop+0x38>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2101      	movs	r1, #1
 8007680:	438a      	bics	r2, r1
 8007682:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	223d      	movs	r2, #61	; 0x3d
 8007688:	2101      	movs	r1, #1
 800768a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	0018      	movs	r0, r3
 8007690:	46bd      	mov	sp, r7
 8007692:	b002      	add	sp, #8
 8007694:	bd80      	pop	{r7, pc}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	00001111 	.word	0x00001111
 800769c:	00000444 	.word	0x00000444

080076a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2101      	movs	r1, #1
 80076b4:	430a      	orrs	r2, r1
 80076b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	2207      	movs	r2, #7
 80076c0:	4013      	ands	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b06      	cmp	r3, #6
 80076c8:	d007      	beq.n	80076da <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2101      	movs	r1, #1
 80076d6:	430a      	orrs	r2, r1
 80076d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	0018      	movs	r0, r3
 80076de:	46bd      	mov	sp, r7
 80076e0:	b004      	add	sp, #16
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2101      	movs	r1, #1
 80076f8:	438a      	bics	r2, r1
 80076fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	4a0b      	ldr	r2, [pc, #44]	; (8007730 <HAL_TIM_Base_Stop_IT+0x4c>)
 8007704:	4013      	ands	r3, r2
 8007706:	d10d      	bne.n	8007724 <HAL_TIM_Base_Stop_IT+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	4a09      	ldr	r2, [pc, #36]	; (8007734 <HAL_TIM_Base_Stop_IT+0x50>)
 8007710:	4013      	ands	r3, r2
 8007712:	d107      	bne.n	8007724 <HAL_TIM_Base_Stop_IT+0x40>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2101      	movs	r1, #1
 8007720:	438a      	bics	r2, r1
 8007722:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	0018      	movs	r0, r3
 8007728:	46bd      	mov	sp, r7
 800772a:	b002      	add	sp, #8
 800772c:	bd80      	pop	{r7, pc}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	00001111 	.word	0x00001111
 8007734:	00000444 	.word	0x00000444

08007738 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e01e      	b.n	8007788 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	223d      	movs	r2, #61	; 0x3d
 800774e:	5c9b      	ldrb	r3, [r3, r2]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d107      	bne.n	8007766 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	223c      	movs	r2, #60	; 0x3c
 800775a:	2100      	movs	r1, #0
 800775c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	0018      	movs	r0, r3
 8007762:	f7fc fb7f 	bl	8003e64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	223d      	movs	r2, #61	; 0x3d
 800776a:	2102      	movs	r1, #2
 800776c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3304      	adds	r3, #4
 8007776:	0019      	movs	r1, r3
 8007778:	0010      	movs	r0, r2
 800777a:	f000 fa43 	bl	8007c04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	223d      	movs	r2, #61	; 0x3d
 8007782:	2101      	movs	r1, #1
 8007784:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	0018      	movs	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	b002      	add	sp, #8
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	2201      	movs	r2, #1
 80077a2:	0018      	movs	r0, r3
 80077a4:	f000 fca0 	bl	80080e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1a      	ldr	r2, [pc, #104]	; (8007818 <HAL_TIM_PWM_Start+0x88>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00e      	beq.n	80077d0 <HAL_TIM_PWM_Start+0x40>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a19      	ldr	r2, [pc, #100]	; (800781c <HAL_TIM_PWM_Start+0x8c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d009      	beq.n	80077d0 <HAL_TIM_PWM_Start+0x40>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a17      	ldr	r2, [pc, #92]	; (8007820 <HAL_TIM_PWM_Start+0x90>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <HAL_TIM_PWM_Start+0x40>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a16      	ldr	r2, [pc, #88]	; (8007824 <HAL_TIM_PWM_Start+0x94>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d101      	bne.n	80077d4 <HAL_TIM_PWM_Start+0x44>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <HAL_TIM_PWM_Start+0x46>
 80077d4:	2300      	movs	r3, #0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d008      	beq.n	80077ec <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2180      	movs	r1, #128	; 0x80
 80077e6:	0209      	lsls	r1, r1, #8
 80077e8:	430a      	orrs	r2, r1
 80077ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2207      	movs	r2, #7
 80077f4:	4013      	ands	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b06      	cmp	r3, #6
 80077fc:	d007      	beq.n	800780e <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2101      	movs	r1, #1
 800780a:	430a      	orrs	r2, r1
 800780c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	0018      	movs	r0, r3
 8007812:	46bd      	mov	sp, r7
 8007814:	b004      	add	sp, #16
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40012c00 	.word	0x40012c00
 800781c:	40014000 	.word	0x40014000
 8007820:	40014400 	.word	0x40014400
 8007824:	40014800 	.word	0x40014800

08007828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2202      	movs	r2, #2
 8007838:	4013      	ands	r3, r2
 800783a:	2b02      	cmp	r3, #2
 800783c:	d124      	bne.n	8007888 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	2202      	movs	r2, #2
 8007846:	4013      	ands	r3, r2
 8007848:	2b02      	cmp	r3, #2
 800784a:	d11d      	bne.n	8007888 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2203      	movs	r2, #3
 8007852:	4252      	negs	r2, r2
 8007854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	2203      	movs	r2, #3
 8007864:	4013      	ands	r3, r2
 8007866:	d004      	beq.n	8007872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	0018      	movs	r0, r3
 800786c:	f000 f9b2 	bl	8007bd4 <HAL_TIM_IC_CaptureCallback>
 8007870:	e007      	b.n	8007882 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	0018      	movs	r0, r3
 8007876:	f000 f9a5 	bl	8007bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	0018      	movs	r0, r3
 800787e:	f000 f9b1 	bl	8007be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2204      	movs	r2, #4
 8007890:	4013      	ands	r3, r2
 8007892:	2b04      	cmp	r3, #4
 8007894:	d125      	bne.n	80078e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2204      	movs	r2, #4
 800789e:	4013      	ands	r3, r2
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d11e      	bne.n	80078e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2205      	movs	r2, #5
 80078aa:	4252      	negs	r2, r2
 80078ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	699a      	ldr	r2, [r3, #24]
 80078ba:	23c0      	movs	r3, #192	; 0xc0
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4013      	ands	r3, r2
 80078c0:	d004      	beq.n	80078cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	0018      	movs	r0, r3
 80078c6:	f000 f985 	bl	8007bd4 <HAL_TIM_IC_CaptureCallback>
 80078ca:	e007      	b.n	80078dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	0018      	movs	r0, r3
 80078d0:	f000 f978 	bl	8007bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	0018      	movs	r0, r3
 80078d8:	f000 f984 	bl	8007be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	2208      	movs	r2, #8
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d124      	bne.n	800793a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	2208      	movs	r2, #8
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b08      	cmp	r3, #8
 80078fc:	d11d      	bne.n	800793a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2209      	movs	r2, #9
 8007904:	4252      	negs	r2, r2
 8007906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2204      	movs	r2, #4
 800790c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	2203      	movs	r2, #3
 8007916:	4013      	ands	r3, r2
 8007918:	d004      	beq.n	8007924 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	0018      	movs	r0, r3
 800791e:	f000 f959 	bl	8007bd4 <HAL_TIM_IC_CaptureCallback>
 8007922:	e007      	b.n	8007934 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	0018      	movs	r0, r3
 8007928:	f000 f94c 	bl	8007bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	0018      	movs	r0, r3
 8007930:	f000 f958 	bl	8007be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	2210      	movs	r2, #16
 8007942:	4013      	ands	r3, r2
 8007944:	2b10      	cmp	r3, #16
 8007946:	d125      	bne.n	8007994 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	2210      	movs	r2, #16
 8007950:	4013      	ands	r3, r2
 8007952:	2b10      	cmp	r3, #16
 8007954:	d11e      	bne.n	8007994 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2211      	movs	r2, #17
 800795c:	4252      	negs	r2, r2
 800795e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2208      	movs	r2, #8
 8007964:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69da      	ldr	r2, [r3, #28]
 800796c:	23c0      	movs	r3, #192	; 0xc0
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4013      	ands	r3, r2
 8007972:	d004      	beq.n	800797e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	0018      	movs	r0, r3
 8007978:	f000 f92c 	bl	8007bd4 <HAL_TIM_IC_CaptureCallback>
 800797c:	e007      	b.n	800798e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	0018      	movs	r0, r3
 8007982:	f000 f91f 	bl	8007bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	0018      	movs	r0, r3
 800798a:	f000 f92b 	bl	8007be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2201      	movs	r2, #1
 800799c:	4013      	ands	r3, r2
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d10f      	bne.n	80079c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	4013      	ands	r3, r2
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d108      	bne.n	80079c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2202      	movs	r2, #2
 80079b6:	4252      	negs	r2, r2
 80079b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	0018      	movs	r0, r3
 80079be:	f7fc fbed 	bl	800419c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	2280      	movs	r2, #128	; 0x80
 80079ca:	4013      	ands	r3, r2
 80079cc:	2b80      	cmp	r3, #128	; 0x80
 80079ce:	d10f      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	2280      	movs	r2, #128	; 0x80
 80079d8:	4013      	ands	r3, r2
 80079da:	2b80      	cmp	r3, #128	; 0x80
 80079dc:	d108      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2281      	movs	r2, #129	; 0x81
 80079e4:	4252      	negs	r2, r2
 80079e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	0018      	movs	r0, r3
 80079ec:	f000 fc00 	bl	80081f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2240      	movs	r2, #64	; 0x40
 80079f8:	4013      	ands	r3, r2
 80079fa:	2b40      	cmp	r3, #64	; 0x40
 80079fc:	d10f      	bne.n	8007a1e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	2240      	movs	r2, #64	; 0x40
 8007a06:	4013      	ands	r3, r2
 8007a08:	2b40      	cmp	r3, #64	; 0x40
 8007a0a:	d108      	bne.n	8007a1e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2241      	movs	r2, #65	; 0x41
 8007a12:	4252      	negs	r2, r2
 8007a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	0018      	movs	r0, r3
 8007a1a:	f000 f8eb 	bl	8007bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	2220      	movs	r2, #32
 8007a26:	4013      	ands	r3, r2
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d10f      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	2220      	movs	r2, #32
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d108      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2221      	movs	r2, #33	; 0x21
 8007a40:	4252      	negs	r2, r2
 8007a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	0018      	movs	r0, r3
 8007a48:	f000 fbca 	bl	80081e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a4c:	46c0      	nop			; (mov r8, r8)
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b002      	add	sp, #8
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	223c      	movs	r2, #60	; 0x3c
 8007a64:	5c9b      	ldrb	r3, [r3, r2]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e0a4      	b.n	8007bb8 <HAL_TIM_PWM_ConfigChannel+0x164>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	223c      	movs	r2, #60	; 0x3c
 8007a72:	2101      	movs	r1, #1
 8007a74:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	223d      	movs	r2, #61	; 0x3d
 8007a7a:	2102      	movs	r1, #2
 8007a7c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d029      	beq.n	8007ad8 <HAL_TIM_PWM_ConfigChannel+0x84>
 8007a84:	d802      	bhi.n	8007a8c <HAL_TIM_PWM_ConfigChannel+0x38>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d005      	beq.n	8007a96 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8007a8a:	e08c      	b.n	8007ba6 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d046      	beq.n	8007b1e <HAL_TIM_PWM_ConfigChannel+0xca>
 8007a90:	2b0c      	cmp	r3, #12
 8007a92:	d065      	beq.n	8007b60 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8007a94:	e087      	b.n	8007ba6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	0011      	movs	r1, r2
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f000 f926 	bl	8007cf0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2108      	movs	r1, #8
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2104      	movs	r1, #4
 8007ac0:	438a      	bics	r2, r1
 8007ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6999      	ldr	r1, [r3, #24]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	691a      	ldr	r2, [r3, #16]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	619a      	str	r2, [r3, #24]
      break;
 8007ad6:	e066      	b.n	8007ba6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	0011      	movs	r1, r2
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f000 f98d 	bl	8007e00 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2180      	movs	r1, #128	; 0x80
 8007af2:	0109      	lsls	r1, r1, #4
 8007af4:	430a      	orrs	r2, r1
 8007af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699a      	ldr	r2, [r3, #24]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	492f      	ldr	r1, [pc, #188]	; (8007bc0 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007b04:	400a      	ands	r2, r1
 8007b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6999      	ldr	r1, [r3, #24]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	021a      	lsls	r2, r3, #8
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	619a      	str	r2, [r3, #24]
      break;
 8007b1c:	e043      	b.n	8007ba6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	0011      	movs	r1, r2
 8007b26:	0018      	movs	r0, r3
 8007b28:	f000 f9ee 	bl	8007f08 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69da      	ldr	r2, [r3, #28]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2108      	movs	r1, #8
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	69da      	ldr	r2, [r3, #28]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2104      	movs	r1, #4
 8007b48:	438a      	bics	r2, r1
 8007b4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69d9      	ldr	r1, [r3, #28]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	61da      	str	r2, [r3, #28]
      break;
 8007b5e:	e022      	b.n	8007ba6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	0011      	movs	r1, r2
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f000 fa53 	bl	8008014 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69da      	ldr	r2, [r3, #28]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2180      	movs	r1, #128	; 0x80
 8007b7a:	0109      	lsls	r1, r1, #4
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69da      	ldr	r2, [r3, #28]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	490d      	ldr	r1, [pc, #52]	; (8007bc0 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007b8c:	400a      	ands	r2, r1
 8007b8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	69d9      	ldr	r1, [r3, #28]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	021a      	lsls	r2, r3, #8
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	61da      	str	r2, [r3, #28]
      break;
 8007ba4:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	223d      	movs	r2, #61	; 0x3d
 8007baa:	2101      	movs	r1, #1
 8007bac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	223c      	movs	r2, #60	; 0x3c
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	0018      	movs	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b004      	add	sp, #16
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	fffffbff 	.word	0xfffffbff

08007bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bcc:	46c0      	nop			; (mov r8, r8)
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	b002      	add	sp, #8
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bdc:	46c0      	nop			; (mov r8, r8)
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b002      	add	sp, #8
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bec:	46c0      	nop			; (mov r8, r8)
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	b002      	add	sp, #8
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bfc:	46c0      	nop			; (mov r8, r8)
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	b002      	add	sp, #8
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a2f      	ldr	r2, [pc, #188]	; (8007cd4 <TIM_Base_SetConfig+0xd0>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d003      	beq.n	8007c24 <TIM_Base_SetConfig+0x20>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a2e      	ldr	r2, [pc, #184]	; (8007cd8 <TIM_Base_SetConfig+0xd4>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d108      	bne.n	8007c36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2270      	movs	r2, #112	; 0x70
 8007c28:	4393      	bics	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a26      	ldr	r2, [pc, #152]	; (8007cd4 <TIM_Base_SetConfig+0xd0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <TIM_Base_SetConfig+0x62>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a25      	ldr	r2, [pc, #148]	; (8007cd8 <TIM_Base_SetConfig+0xd4>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00f      	beq.n	8007c66 <TIM_Base_SetConfig+0x62>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a24      	ldr	r2, [pc, #144]	; (8007cdc <TIM_Base_SetConfig+0xd8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00b      	beq.n	8007c66 <TIM_Base_SetConfig+0x62>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a23      	ldr	r2, [pc, #140]	; (8007ce0 <TIM_Base_SetConfig+0xdc>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d007      	beq.n	8007c66 <TIM_Base_SetConfig+0x62>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a22      	ldr	r2, [pc, #136]	; (8007ce4 <TIM_Base_SetConfig+0xe0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_Base_SetConfig+0x62>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a21      	ldr	r2, [pc, #132]	; (8007ce8 <TIM_Base_SetConfig+0xe4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d108      	bne.n	8007c78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4a20      	ldr	r2, [pc, #128]	; (8007cec <TIM_Base_SetConfig+0xe8>)
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2280      	movs	r2, #128	; 0x80
 8007c7c:	4393      	bics	r3, r2
 8007c7e:	001a      	movs	r2, r3
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a0c      	ldr	r2, [pc, #48]	; (8007cd4 <TIM_Base_SetConfig+0xd0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00b      	beq.n	8007cbe <TIM_Base_SetConfig+0xba>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a0d      	ldr	r2, [pc, #52]	; (8007ce0 <TIM_Base_SetConfig+0xdc>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d007      	beq.n	8007cbe <TIM_Base_SetConfig+0xba>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a0c      	ldr	r2, [pc, #48]	; (8007ce4 <TIM_Base_SetConfig+0xe0>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d003      	beq.n	8007cbe <TIM_Base_SetConfig+0xba>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a0b      	ldr	r2, [pc, #44]	; (8007ce8 <TIM_Base_SetConfig+0xe4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d103      	bne.n	8007cc6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	691a      	ldr	r2, [r3, #16]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	615a      	str	r2, [r3, #20]
}
 8007ccc:	46c0      	nop			; (mov r8, r8)
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	b004      	add	sp, #16
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	40012c00 	.word	0x40012c00
 8007cd8:	40000400 	.word	0x40000400
 8007cdc:	40002000 	.word	0x40002000
 8007ce0:	40014000 	.word	0x40014000
 8007ce4:	40014400 	.word	0x40014400
 8007ce8:	40014800 	.word	0x40014800
 8007cec:	fffffcff 	.word	0xfffffcff

08007cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4393      	bics	r3, r2
 8007d02:	001a      	movs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2270      	movs	r2, #112	; 0x70
 8007d1e:	4393      	bics	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2203      	movs	r2, #3
 8007d26:	4393      	bics	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2202      	movs	r2, #2
 8007d38:	4393      	bics	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a27      	ldr	r2, [pc, #156]	; (8007de8 <TIM_OC1_SetConfig+0xf8>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d00b      	beq.n	8007d66 <TIM_OC1_SetConfig+0x76>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a26      	ldr	r2, [pc, #152]	; (8007dec <TIM_OC1_SetConfig+0xfc>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d007      	beq.n	8007d66 <TIM_OC1_SetConfig+0x76>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a25      	ldr	r2, [pc, #148]	; (8007df0 <TIM_OC1_SetConfig+0x100>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d003      	beq.n	8007d66 <TIM_OC1_SetConfig+0x76>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a24      	ldr	r2, [pc, #144]	; (8007df4 <TIM_OC1_SetConfig+0x104>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d10c      	bne.n	8007d80 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2208      	movs	r2, #8
 8007d6a:	4393      	bics	r3, r2
 8007d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	4393      	bics	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a19      	ldr	r2, [pc, #100]	; (8007de8 <TIM_OC1_SetConfig+0xf8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00b      	beq.n	8007da0 <TIM_OC1_SetConfig+0xb0>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a18      	ldr	r2, [pc, #96]	; (8007dec <TIM_OC1_SetConfig+0xfc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d007      	beq.n	8007da0 <TIM_OC1_SetConfig+0xb0>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a17      	ldr	r2, [pc, #92]	; (8007df0 <TIM_OC1_SetConfig+0x100>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_OC1_SetConfig+0xb0>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a16      	ldr	r2, [pc, #88]	; (8007df4 <TIM_OC1_SetConfig+0x104>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d111      	bne.n	8007dc4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <TIM_OC1_SetConfig+0x108>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	4a14      	ldr	r2, [pc, #80]	; (8007dfc <TIM_OC1_SetConfig+0x10c>)
 8007dac:	4013      	ands	r3, r2
 8007dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	621a      	str	r2, [r3, #32]
}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	46bd      	mov	sp, r7
 8007de2:	b006      	add	sp, #24
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	46c0      	nop			; (mov r8, r8)
 8007de8:	40012c00 	.word	0x40012c00
 8007dec:	40014000 	.word	0x40014000
 8007df0:	40014400 	.word	0x40014400
 8007df4:	40014800 	.word	0x40014800
 8007df8:	fffffeff 	.word	0xfffffeff
 8007dfc:	fffffdff 	.word	0xfffffdff

08007e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	2210      	movs	r2, #16
 8007e10:	4393      	bics	r3, r2
 8007e12:	001a      	movs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a2e      	ldr	r2, [pc, #184]	; (8007ee8 <TIM_OC2_SetConfig+0xe8>)
 8007e2e:	4013      	ands	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a2d      	ldr	r2, [pc, #180]	; (8007eec <TIM_OC2_SetConfig+0xec>)
 8007e36:	4013      	ands	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	4393      	bics	r3, r2
 8007e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a24      	ldr	r2, [pc, #144]	; (8007ef0 <TIM_OC2_SetConfig+0xf0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d10d      	bne.n	8007e7e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2280      	movs	r2, #128	; 0x80
 8007e66:	4393      	bics	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2240      	movs	r2, #64	; 0x40
 8007e7a:	4393      	bics	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a1b      	ldr	r2, [pc, #108]	; (8007ef0 <TIM_OC2_SetConfig+0xf0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d00b      	beq.n	8007e9e <TIM_OC2_SetConfig+0x9e>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a1a      	ldr	r2, [pc, #104]	; (8007ef4 <TIM_OC2_SetConfig+0xf4>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d007      	beq.n	8007e9e <TIM_OC2_SetConfig+0x9e>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a19      	ldr	r2, [pc, #100]	; (8007ef8 <TIM_OC2_SetConfig+0xf8>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d003      	beq.n	8007e9e <TIM_OC2_SetConfig+0x9e>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a18      	ldr	r2, [pc, #96]	; (8007efc <TIM_OC2_SetConfig+0xfc>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d113      	bne.n	8007ec6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	4a17      	ldr	r2, [pc, #92]	; (8007f00 <TIM_OC2_SetConfig+0x100>)
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	4a16      	ldr	r2, [pc, #88]	; (8007f04 <TIM_OC2_SetConfig+0x104>)
 8007eaa:	4013      	ands	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	621a      	str	r2, [r3, #32]
}
 8007ee0:	46c0      	nop			; (mov r8, r8)
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	b006      	add	sp, #24
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	ffff8fff 	.word	0xffff8fff
 8007eec:	fffffcff 	.word	0xfffffcff
 8007ef0:	40012c00 	.word	0x40012c00
 8007ef4:	40014000 	.word	0x40014000
 8007ef8:	40014400 	.word	0x40014400
 8007efc:	40014800 	.word	0x40014800
 8007f00:	fffffbff 	.word	0xfffffbff
 8007f04:	fffff7ff 	.word	0xfffff7ff

08007f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	4a35      	ldr	r2, [pc, #212]	; (8007fec <TIM_OC3_SetConfig+0xe4>)
 8007f18:	401a      	ands	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2270      	movs	r2, #112	; 0x70
 8007f34:	4393      	bics	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2203      	movs	r2, #3
 8007f3c:	4393      	bics	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	4a28      	ldr	r2, [pc, #160]	; (8007ff0 <TIM_OC3_SetConfig+0xe8>)
 8007f4e:	4013      	ands	r3, r2
 8007f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	021b      	lsls	r3, r3, #8
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a24      	ldr	r2, [pc, #144]	; (8007ff4 <TIM_OC3_SetConfig+0xec>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d10d      	bne.n	8007f82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	4a23      	ldr	r2, [pc, #140]	; (8007ff8 <TIM_OC3_SetConfig+0xf0>)
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <TIM_OC3_SetConfig+0xf4>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a1b      	ldr	r2, [pc, #108]	; (8007ff4 <TIM_OC3_SetConfig+0xec>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00b      	beq.n	8007fa2 <TIM_OC3_SetConfig+0x9a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a1c      	ldr	r2, [pc, #112]	; (8008000 <TIM_OC3_SetConfig+0xf8>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d007      	beq.n	8007fa2 <TIM_OC3_SetConfig+0x9a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a1b      	ldr	r2, [pc, #108]	; (8008004 <TIM_OC3_SetConfig+0xfc>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d003      	beq.n	8007fa2 <TIM_OC3_SetConfig+0x9a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a1a      	ldr	r2, [pc, #104]	; (8008008 <TIM_OC3_SetConfig+0x100>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d113      	bne.n	8007fca <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	4a19      	ldr	r2, [pc, #100]	; (800800c <TIM_OC3_SetConfig+0x104>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	4a18      	ldr	r2, [pc, #96]	; (8008010 <TIM_OC3_SetConfig+0x108>)
 8007fae:	4013      	ands	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	621a      	str	r2, [r3, #32]
}
 8007fe4:	46c0      	nop			; (mov r8, r8)
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b006      	add	sp, #24
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	fffffeff 	.word	0xfffffeff
 8007ff0:	fffffdff 	.word	0xfffffdff
 8007ff4:	40012c00 	.word	0x40012c00
 8007ff8:	fffff7ff 	.word	0xfffff7ff
 8007ffc:	fffffbff 	.word	0xfffffbff
 8008000:	40014000 	.word	0x40014000
 8008004:	40014400 	.word	0x40014400
 8008008:	40014800 	.word	0x40014800
 800800c:	ffffefff 	.word	0xffffefff
 8008010:	ffffdfff 	.word	0xffffdfff

08008014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	4a28      	ldr	r2, [pc, #160]	; (80080c4 <TIM_OC4_SetConfig+0xb0>)
 8008024:	401a      	ands	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4a22      	ldr	r2, [pc, #136]	; (80080c8 <TIM_OC4_SetConfig+0xb4>)
 8008040:	4013      	ands	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4a21      	ldr	r2, [pc, #132]	; (80080cc <TIM_OC4_SetConfig+0xb8>)
 8008048:	4013      	ands	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	4313      	orrs	r3, r2
 8008056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	4a1d      	ldr	r2, [pc, #116]	; (80080d0 <TIM_OC4_SetConfig+0xbc>)
 800805c:	4013      	ands	r3, r2
 800805e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	031b      	lsls	r3, r3, #12
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a19      	ldr	r2, [pc, #100]	; (80080d4 <TIM_OC4_SetConfig+0xc0>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00b      	beq.n	800808c <TIM_OC4_SetConfig+0x78>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <TIM_OC4_SetConfig+0xc4>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d007      	beq.n	800808c <TIM_OC4_SetConfig+0x78>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a17      	ldr	r2, [pc, #92]	; (80080dc <TIM_OC4_SetConfig+0xc8>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d003      	beq.n	800808c <TIM_OC4_SetConfig+0x78>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <TIM_OC4_SetConfig+0xcc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d109      	bne.n	80080a0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	4a15      	ldr	r2, [pc, #84]	; (80080e4 <TIM_OC4_SetConfig+0xd0>)
 8008090:	4013      	ands	r3, r2
 8008092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	019b      	lsls	r3, r3, #6
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4313      	orrs	r3, r2
 800809e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	621a      	str	r2, [r3, #32]
}
 80080ba:	46c0      	nop			; (mov r8, r8)
 80080bc:	46bd      	mov	sp, r7
 80080be:	b006      	add	sp, #24
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	ffffefff 	.word	0xffffefff
 80080c8:	ffff8fff 	.word	0xffff8fff
 80080cc:	fffffcff 	.word	0xfffffcff
 80080d0:	ffffdfff 	.word	0xffffdfff
 80080d4:	40012c00 	.word	0x40012c00
 80080d8:	40014000 	.word	0x40014000
 80080dc:	40014400 	.word	0x40014400
 80080e0:	40014800 	.word	0x40014800
 80080e4:	ffffbfff 	.word	0xffffbfff

080080e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	221f      	movs	r2, #31
 80080f8:	4013      	ands	r3, r2
 80080fa:	2201      	movs	r2, #1
 80080fc:	409a      	lsls	r2, r3
 80080fe:	0013      	movs	r3, r2
 8008100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	43d2      	mvns	r2, r2
 800810a:	401a      	ands	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a1a      	ldr	r2, [r3, #32]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	211f      	movs	r1, #31
 8008118:	400b      	ands	r3, r1
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4099      	lsls	r1, r3
 800811e:	000b      	movs	r3, r1
 8008120:	431a      	orrs	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	621a      	str	r2, [r3, #32]
}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	46bd      	mov	sp, r7
 800812a:	b006      	add	sp, #24
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	223c      	movs	r2, #60	; 0x3c
 800813e:	5c9b      	ldrb	r3, [r3, r2]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d101      	bne.n	8008148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008144:	2302      	movs	r3, #2
 8008146:	e041      	b.n	80081cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	223c      	movs	r2, #60	; 0x3c
 800814c:	2101      	movs	r1, #1
 800814e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	223d      	movs	r2, #61	; 0x3d
 8008154:	2102      	movs	r1, #2
 8008156:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2270      	movs	r2, #112	; 0x70
 800816c:	4393      	bics	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a13      	ldr	r2, [pc, #76]	; (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d009      	beq.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a11      	ldr	r2, [pc, #68]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d004      	beq.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a10      	ldr	r2, [pc, #64]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d10c      	bne.n	80081ba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2280      	movs	r2, #128	; 0x80
 80081a4:	4393      	bics	r3, r2
 80081a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	223d      	movs	r2, #61	; 0x3d
 80081be:	2101      	movs	r1, #1
 80081c0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	223c      	movs	r2, #60	; 0x3c
 80081c6:	2100      	movs	r1, #0
 80081c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	0018      	movs	r0, r3
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b004      	add	sp, #16
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	40012c00 	.word	0x40012c00
 80081d8:	40000400 	.word	0x40000400
 80081dc:	40014000 	.word	0x40014000

080081e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081e8:	46c0      	nop			; (mov r8, r8)
 80081ea:	46bd      	mov	sp, r7
 80081ec:	b002      	add	sp, #8
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081f8:	46c0      	nop			; (mov r8, r8)
 80081fa:	46bd      	mov	sp, r7
 80081fc:	b002      	add	sp, #8
 80081fe:	bd80      	pop	{r7, pc}

08008200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e044      	b.n	800829c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008216:	2b00      	cmp	r3, #0
 8008218:	d107      	bne.n	800822a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2270      	movs	r2, #112	; 0x70
 800821e:	2100      	movs	r1, #0
 8008220:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	0018      	movs	r0, r3
 8008226:	f7fb feb7 	bl	8003f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2224      	movs	r2, #36	; 0x24
 800822e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2101      	movs	r1, #1
 800823c:	438a      	bics	r2, r1
 800823e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	0018      	movs	r0, r3
 8008244:	f000 fa10 	bl	8008668 <UART_SetConfig>
 8008248:	0003      	movs	r3, r0
 800824a:	2b01      	cmp	r3, #1
 800824c:	d101      	bne.n	8008252 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e024      	b.n	800829c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	0018      	movs	r0, r3
 800825e:	f000 fb89 	bl	8008974 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	490d      	ldr	r1, [pc, #52]	; (80082a4 <HAL_UART_Init+0xa4>)
 800826e:	400a      	ands	r2, r1
 8008270:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2108      	movs	r1, #8
 800827e:	438a      	bics	r2, r1
 8008280:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2101      	movs	r1, #1
 800828e:	430a      	orrs	r2, r1
 8008290:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	0018      	movs	r0, r3
 8008296:	f000 fc21 	bl	8008adc <UART_CheckIdleState>
 800829a:	0003      	movs	r3, r0
}
 800829c:	0018      	movs	r0, r3
 800829e:	46bd      	mov	sp, r7
 80082a0:	b002      	add	sp, #8
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	fffff7ff 	.word	0xfffff7ff

080082a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	1dbb      	adds	r3, r7, #6
 80082b6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082bc:	2b20      	cmp	r3, #32
 80082be:	d000      	beq.n	80082c2 <HAL_UART_Transmit+0x1a>
 80082c0:	e095      	b.n	80083ee <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_UART_Transmit+0x28>
 80082c8:	1dbb      	adds	r3, r7, #6
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e08d      	b.n	80083f0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	2380      	movs	r3, #128	; 0x80
 80082da:	015b      	lsls	r3, r3, #5
 80082dc:	429a      	cmp	r2, r3
 80082de:	d109      	bne.n	80082f4 <HAL_UART_Transmit+0x4c>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d105      	bne.n	80082f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2201      	movs	r2, #1
 80082ec:	4013      	ands	r3, r2
 80082ee:	d001      	beq.n	80082f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e07d      	b.n	80083f0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2270      	movs	r2, #112	; 0x70
 80082f8:	5c9b      	ldrb	r3, [r3, r2]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_UART_Transmit+0x5a>
 80082fe:	2302      	movs	r3, #2
 8008300:	e076      	b.n	80083f0 <HAL_UART_Transmit+0x148>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2270      	movs	r2, #112	; 0x70
 8008306:	2101      	movs	r1, #1
 8008308:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2221      	movs	r2, #33	; 0x21
 8008314:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008316:	f7fc f869 	bl	80043ec <HAL_GetTick>
 800831a:	0003      	movs	r3, r0
 800831c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	1dba      	adds	r2, r7, #6
 8008322:	2150      	movs	r1, #80	; 0x50
 8008324:	8812      	ldrh	r2, [r2, #0]
 8008326:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	1dba      	adds	r2, r7, #6
 800832c:	2152      	movs	r1, #82	; 0x52
 800832e:	8812      	ldrh	r2, [r2, #0]
 8008330:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689a      	ldr	r2, [r3, #8]
 8008336:	2380      	movs	r3, #128	; 0x80
 8008338:	015b      	lsls	r3, r3, #5
 800833a:	429a      	cmp	r2, r3
 800833c:	d108      	bne.n	8008350 <HAL_UART_Transmit+0xa8>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d104      	bne.n	8008350 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	61bb      	str	r3, [r7, #24]
 800834e:	e003      	b.n	8008358 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008354:	2300      	movs	r3, #0
 8008356:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008358:	e02d      	b.n	80083b6 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	0013      	movs	r3, r2
 8008364:	2200      	movs	r2, #0
 8008366:	2180      	movs	r1, #128	; 0x80
 8008368:	f000 fbfe 	bl	8008b68 <UART_WaitOnFlagUntilTimeout>
 800836c:	1e03      	subs	r3, r0, #0
 800836e:	d001      	beq.n	8008374 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e03d      	b.n	80083f0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10b      	bne.n	8008392 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	881a      	ldrh	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	05d2      	lsls	r2, r2, #23
 8008384:	0dd2      	lsrs	r2, r2, #23
 8008386:	b292      	uxth	r2, r2
 8008388:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	3302      	adds	r3, #2
 800838e:	61bb      	str	r3, [r7, #24]
 8008390:	e008      	b.n	80083a4 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	781a      	ldrb	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	b292      	uxth	r2, r2
 800839c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	3301      	adds	r3, #1
 80083a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2252      	movs	r2, #82	; 0x52
 80083a8:	5a9b      	ldrh	r3, [r3, r2]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	3b01      	subs	r3, #1
 80083ae:	b299      	uxth	r1, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2252      	movs	r2, #82	; 0x52
 80083b4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2252      	movs	r2, #82	; 0x52
 80083ba:	5a9b      	ldrh	r3, [r3, r2]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1cb      	bne.n	800835a <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	0013      	movs	r3, r2
 80083cc:	2200      	movs	r2, #0
 80083ce:	2140      	movs	r1, #64	; 0x40
 80083d0:	f000 fbca 	bl	8008b68 <UART_WaitOnFlagUntilTimeout>
 80083d4:	1e03      	subs	r3, r0, #0
 80083d6:	d001      	beq.n	80083dc <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e009      	b.n	80083f0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2220      	movs	r2, #32
 80083e0:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2270      	movs	r2, #112	; 0x70
 80083e6:	2100      	movs	r1, #0
 80083e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e000      	b.n	80083f0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80083ee:	2302      	movs	r3, #2
  }
}
 80083f0:	0018      	movs	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	b008      	add	sp, #32
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4a89      	ldr	r2, [pc, #548]	; (8008640 <HAL_UART_IRQHandler+0x248>)
 800841c:	4013      	ands	r3, r2
 800841e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d112      	bne.n	800844c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	2220      	movs	r2, #32
 800842a:	4013      	ands	r3, r2
 800842c:	d00e      	beq.n	800844c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	2220      	movs	r2, #32
 8008432:	4013      	ands	r3, r2
 8008434:	d00a      	beq.n	800844c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800843a:	2b00      	cmp	r3, #0
 800843c:	d100      	bne.n	8008440 <HAL_UART_IRQHandler+0x48>
 800843e:	e0f7      	b.n	8008630 <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	0010      	movs	r0, r2
 8008448:	4798      	blx	r3
      }
      return;
 800844a:	e0f1      	b.n	8008630 <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d100      	bne.n	8008454 <HAL_UART_IRQHandler+0x5c>
 8008452:	e0cd      	b.n	80085f0 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2201      	movs	r2, #1
 8008458:	4013      	ands	r3, r2
 800845a:	d105      	bne.n	8008468 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	2390      	movs	r3, #144	; 0x90
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	4013      	ands	r3, r2
 8008464:	d100      	bne.n	8008468 <HAL_UART_IRQHandler+0x70>
 8008466:	e0c3      	b.n	80085f0 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	2201      	movs	r2, #1
 800846c:	4013      	ands	r3, r2
 800846e:	d00e      	beq.n	800848e <HAL_UART_IRQHandler+0x96>
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	2380      	movs	r3, #128	; 0x80
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	4013      	ands	r3, r2
 8008478:	d009      	beq.n	800848e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2201      	movs	r2, #1
 8008480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008486:	2201      	movs	r2, #1
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	2202      	movs	r2, #2
 8008492:	4013      	ands	r3, r2
 8008494:	d00d      	beq.n	80084b2 <HAL_UART_IRQHandler+0xba>
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2201      	movs	r2, #1
 800849a:	4013      	ands	r3, r2
 800849c:	d009      	beq.n	80084b2 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2202      	movs	r2, #2
 80084a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084aa:	2204      	movs	r2, #4
 80084ac:	431a      	orrs	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	2204      	movs	r2, #4
 80084b6:	4013      	ands	r3, r2
 80084b8:	d00d      	beq.n	80084d6 <HAL_UART_IRQHandler+0xde>
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2201      	movs	r2, #1
 80084be:	4013      	ands	r3, r2
 80084c0:	d009      	beq.n	80084d6 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2204      	movs	r2, #4
 80084c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ce:	2202      	movs	r2, #2
 80084d0:	431a      	orrs	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	2208      	movs	r2, #8
 80084da:	4013      	ands	r3, r2
 80084dc:	d011      	beq.n	8008502 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2220      	movs	r2, #32
 80084e2:	4013      	ands	r3, r2
 80084e4:	d103      	bne.n	80084ee <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2201      	movs	r2, #1
 80084ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084ec:	d009      	beq.n	8008502 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2208      	movs	r2, #8
 80084f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fa:	2208      	movs	r2, #8
 80084fc:	431a      	orrs	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	2380      	movs	r3, #128	; 0x80
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	4013      	ands	r3, r2
 800850a:	d00f      	beq.n	800852c <HAL_UART_IRQHandler+0x134>
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	2380      	movs	r3, #128	; 0x80
 8008510:	04db      	lsls	r3, r3, #19
 8008512:	4013      	ands	r3, r2
 8008514:	d00a      	beq.n	800852c <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2280      	movs	r2, #128	; 0x80
 800851c:	0112      	lsls	r2, r2, #4
 800851e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008524:	2220      	movs	r2, #32
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d100      	bne.n	8008536 <HAL_UART_IRQHandler+0x13e>
 8008534:	e07e      	b.n	8008634 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	2220      	movs	r2, #32
 800853a:	4013      	ands	r3, r2
 800853c:	d00c      	beq.n	8008558 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	2220      	movs	r2, #32
 8008542:	4013      	ands	r3, r2
 8008544:	d008      	beq.n	8008558 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	0010      	movs	r0, r2
 8008556:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800855c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	2240      	movs	r2, #64	; 0x40
 8008566:	4013      	ands	r3, r2
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d003      	beq.n	8008574 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2228      	movs	r2, #40	; 0x28
 8008570:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008572:	d033      	beq.n	80085dc <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	0018      	movs	r0, r3
 8008578:	f000 fb74 	bl	8008c64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2240      	movs	r2, #64	; 0x40
 8008584:	4013      	ands	r3, r2
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	d123      	bne.n	80085d2 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2140      	movs	r1, #64	; 0x40
 8008596:	438a      	bics	r2, r1
 8008598:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d012      	beq.n	80085c8 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a6:	4a27      	ldr	r2, [pc, #156]	; (8008644 <HAL_UART_IRQHandler+0x24c>)
 80085a8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ae:	0018      	movs	r0, r3
 80085b0:	f7fc fca4 	bl	8004efc <HAL_DMA_Abort_IT>
 80085b4:	1e03      	subs	r3, r0, #0
 80085b6:	d019      	beq.n	80085ec <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085c2:	0018      	movs	r0, r3
 80085c4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c6:	e011      	b.n	80085ec <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	0018      	movs	r0, r3
 80085cc:	f000 f844 	bl	8008658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d0:	e00c      	b.n	80085ec <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	0018      	movs	r0, r3
 80085d6:	f000 f83f 	bl	8008658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085da:	e007      	b.n	80085ec <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	0018      	movs	r0, r3
 80085e0:	f000 f83a 	bl	8008658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80085ea:	e023      	b.n	8008634 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ec:	46c0      	nop			; (mov r8, r8)
    return;
 80085ee:	e021      	b.n	8008634 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	2280      	movs	r2, #128	; 0x80
 80085f4:	4013      	ands	r3, r2
 80085f6:	d00d      	beq.n	8008614 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	2280      	movs	r2, #128	; 0x80
 80085fc:	4013      	ands	r3, r2
 80085fe:	d009      	beq.n	8008614 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008604:	2b00      	cmp	r3, #0
 8008606:	d017      	beq.n	8008638 <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	0010      	movs	r0, r2
 8008610:	4798      	blx	r3
    }
    return;
 8008612:	e011      	b.n	8008638 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	2240      	movs	r2, #64	; 0x40
 8008618:	4013      	ands	r3, r2
 800861a:	d00e      	beq.n	800863a <HAL_UART_IRQHandler+0x242>
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	2240      	movs	r2, #64	; 0x40
 8008620:	4013      	ands	r3, r2
 8008622:	d00a      	beq.n	800863a <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	0018      	movs	r0, r3
 8008628:	f000 fb53 	bl	8008cd2 <UART_EndTransmit_IT>
    return;
 800862c:	46c0      	nop			; (mov r8, r8)
 800862e:	e004      	b.n	800863a <HAL_UART_IRQHandler+0x242>
      return;
 8008630:	46c0      	nop			; (mov r8, r8)
 8008632:	e002      	b.n	800863a <HAL_UART_IRQHandler+0x242>
    return;
 8008634:	46c0      	nop			; (mov r8, r8)
 8008636:	e000      	b.n	800863a <HAL_UART_IRQHandler+0x242>
    return;
 8008638:	46c0      	nop			; (mov r8, r8)
  }

}
 800863a:	46bd      	mov	sp, r7
 800863c:	b008      	add	sp, #32
 800863e:	bd80      	pop	{r7, pc}
 8008640:	0000080f 	.word	0x0000080f
 8008644:	08008ca5 	.word	0x08008ca5

08008648 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008650:	46c0      	nop			; (mov r8, r8)
 8008652:	46bd      	mov	sp, r7
 8008654:	b002      	add	sp, #8
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008660:	46c0      	nop			; (mov r8, r8)
 8008662:	46bd      	mov	sp, r7
 8008664:	b002      	add	sp, #8
 8008666:	bd80      	pop	{r7, pc}

08008668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008670:	2300      	movs	r3, #0
 8008672:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008674:	2317      	movs	r3, #23
 8008676:	18fb      	adds	r3, r7, r3
 8008678:	2200      	movs	r2, #0
 800867a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	431a      	orrs	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	4313      	orrs	r3, r2
 8008692:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4aad      	ldr	r2, [pc, #692]	; (8008950 <UART_SetConfig+0x2e8>)
 800869c:	4013      	ands	r3, r2
 800869e:	0019      	movs	r1, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	4aa8      	ldr	r2, [pc, #672]	; (8008954 <UART_SetConfig+0x2ec>)
 80086b2:	4013      	ands	r3, r2
 80086b4:	0019      	movs	r1, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	4a9f      	ldr	r2, [pc, #636]	; (8008958 <UART_SetConfig+0x2f0>)
 80086da:	4013      	ands	r3, r2
 80086dc:	0019      	movs	r1, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a9b      	ldr	r2, [pc, #620]	; (800895c <UART_SetConfig+0x2f4>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d125      	bne.n	800873e <UART_SetConfig+0xd6>
 80086f2:	4b9b      	ldr	r3, [pc, #620]	; (8008960 <UART_SetConfig+0x2f8>)
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	2203      	movs	r2, #3
 80086f8:	4013      	ands	r3, r2
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d00f      	beq.n	800871e <UART_SetConfig+0xb6>
 80086fe:	d304      	bcc.n	800870a <UART_SetConfig+0xa2>
 8008700:	2b02      	cmp	r3, #2
 8008702:	d011      	beq.n	8008728 <UART_SetConfig+0xc0>
 8008704:	2b03      	cmp	r3, #3
 8008706:	d005      	beq.n	8008714 <UART_SetConfig+0xac>
 8008708:	e013      	b.n	8008732 <UART_SetConfig+0xca>
 800870a:	231f      	movs	r3, #31
 800870c:	18fb      	adds	r3, r7, r3
 800870e:	2200      	movs	r2, #0
 8008710:	701a      	strb	r2, [r3, #0]
 8008712:	e022      	b.n	800875a <UART_SetConfig+0xf2>
 8008714:	231f      	movs	r3, #31
 8008716:	18fb      	adds	r3, r7, r3
 8008718:	2202      	movs	r2, #2
 800871a:	701a      	strb	r2, [r3, #0]
 800871c:	e01d      	b.n	800875a <UART_SetConfig+0xf2>
 800871e:	231f      	movs	r3, #31
 8008720:	18fb      	adds	r3, r7, r3
 8008722:	2204      	movs	r2, #4
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	e018      	b.n	800875a <UART_SetConfig+0xf2>
 8008728:	231f      	movs	r3, #31
 800872a:	18fb      	adds	r3, r7, r3
 800872c:	2208      	movs	r2, #8
 800872e:	701a      	strb	r2, [r3, #0]
 8008730:	e013      	b.n	800875a <UART_SetConfig+0xf2>
 8008732:	231f      	movs	r3, #31
 8008734:	18fb      	adds	r3, r7, r3
 8008736:	2210      	movs	r2, #16
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	46c0      	nop			; (mov r8, r8)
 800873c:	e00d      	b.n	800875a <UART_SetConfig+0xf2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a88      	ldr	r2, [pc, #544]	; (8008964 <UART_SetConfig+0x2fc>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d104      	bne.n	8008752 <UART_SetConfig+0xea>
 8008748:	231f      	movs	r3, #31
 800874a:	18fb      	adds	r3, r7, r3
 800874c:	2200      	movs	r2, #0
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	e003      	b.n	800875a <UART_SetConfig+0xf2>
 8008752:	231f      	movs	r3, #31
 8008754:	18fb      	adds	r3, r7, r3
 8008756:	2210      	movs	r2, #16
 8008758:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	69da      	ldr	r2, [r3, #28]
 800875e:	2380      	movs	r3, #128	; 0x80
 8008760:	021b      	lsls	r3, r3, #8
 8008762:	429a      	cmp	r2, r3
 8008764:	d000      	beq.n	8008768 <UART_SetConfig+0x100>
 8008766:	e07d      	b.n	8008864 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8008768:	231f      	movs	r3, #31
 800876a:	18fb      	adds	r3, r7, r3
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d01c      	beq.n	80087ac <UART_SetConfig+0x144>
 8008772:	dc02      	bgt.n	800877a <UART_SetConfig+0x112>
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <UART_SetConfig+0x11c>
 8008778:	e04b      	b.n	8008812 <UART_SetConfig+0x1aa>
 800877a:	2b04      	cmp	r3, #4
 800877c:	d025      	beq.n	80087ca <UART_SetConfig+0x162>
 800877e:	2b08      	cmp	r3, #8
 8008780:	d037      	beq.n	80087f2 <UART_SetConfig+0x18a>
 8008782:	e046      	b.n	8008812 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008784:	f7fd fb2e 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8008788:	0003      	movs	r3, r0
 800878a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	005a      	lsls	r2, r3, #1
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	085b      	lsrs	r3, r3, #1
 8008796:	18d2      	adds	r2, r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	0019      	movs	r1, r3
 800879e:	0010      	movs	r0, r2
 80087a0:	f7f7 fcc4 	bl	800012c <__udivsi3>
 80087a4:	0003      	movs	r3, r0
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	61bb      	str	r3, [r7, #24]
        break;
 80087aa:	e037      	b.n	800881c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	085b      	lsrs	r3, r3, #1
 80087b2:	4a6d      	ldr	r2, [pc, #436]	; (8008968 <UART_SetConfig+0x300>)
 80087b4:	189a      	adds	r2, r3, r2
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	0019      	movs	r1, r3
 80087bc:	0010      	movs	r0, r2
 80087be:	f7f7 fcb5 	bl	800012c <__udivsi3>
 80087c2:	0003      	movs	r3, r0
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	61bb      	str	r3, [r7, #24]
        break;
 80087c8:	e028      	b.n	800881c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087ca:	f7fd fa9d 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 80087ce:	0003      	movs	r3, r0
 80087d0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	005a      	lsls	r2, r3, #1
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	085b      	lsrs	r3, r3, #1
 80087dc:	18d2      	adds	r2, r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	0019      	movs	r1, r3
 80087e4:	0010      	movs	r0, r2
 80087e6:	f7f7 fca1 	bl	800012c <__udivsi3>
 80087ea:	0003      	movs	r3, r0
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	61bb      	str	r3, [r7, #24]
        break;
 80087f0:	e014      	b.n	800881c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	085b      	lsrs	r3, r3, #1
 80087f8:	2280      	movs	r2, #128	; 0x80
 80087fa:	0252      	lsls	r2, r2, #9
 80087fc:	189a      	adds	r2, r3, r2
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	0019      	movs	r1, r3
 8008804:	0010      	movs	r0, r2
 8008806:	f7f7 fc91 	bl	800012c <__udivsi3>
 800880a:	0003      	movs	r3, r0
 800880c:	b29b      	uxth	r3, r3
 800880e:	61bb      	str	r3, [r7, #24]
        break;
 8008810:	e004      	b.n	800881c <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8008812:	2317      	movs	r3, #23
 8008814:	18fb      	adds	r3, r7, r3
 8008816:	2201      	movs	r2, #1
 8008818:	701a      	strb	r2, [r3, #0]
        break;
 800881a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	2b0f      	cmp	r3, #15
 8008820:	d91b      	bls.n	800885a <UART_SetConfig+0x1f2>
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	4a51      	ldr	r2, [pc, #324]	; (800896c <UART_SetConfig+0x304>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d817      	bhi.n	800885a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	b29a      	uxth	r2, r3
 800882e:	200a      	movs	r0, #10
 8008830:	183b      	adds	r3, r7, r0
 8008832:	210f      	movs	r1, #15
 8008834:	438a      	bics	r2, r1
 8008836:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	085b      	lsrs	r3, r3, #1
 800883c:	b29b      	uxth	r3, r3
 800883e:	2207      	movs	r2, #7
 8008840:	4013      	ands	r3, r2
 8008842:	b299      	uxth	r1, r3
 8008844:	183b      	adds	r3, r7, r0
 8008846:	183a      	adds	r2, r7, r0
 8008848:	8812      	ldrh	r2, [r2, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	183a      	adds	r2, r7, r0
 8008854:	8812      	ldrh	r2, [r2, #0]
 8008856:	60da      	str	r2, [r3, #12]
 8008858:	e06c      	b.n	8008934 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800885a:	2317      	movs	r3, #23
 800885c:	18fb      	adds	r3, r7, r3
 800885e:	2201      	movs	r2, #1
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	e067      	b.n	8008934 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8008864:	231f      	movs	r3, #31
 8008866:	18fb      	adds	r3, r7, r3
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b02      	cmp	r3, #2
 800886c:	d01b      	beq.n	80088a6 <UART_SetConfig+0x23e>
 800886e:	dc02      	bgt.n	8008876 <UART_SetConfig+0x20e>
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <UART_SetConfig+0x218>
 8008874:	e049      	b.n	800890a <UART_SetConfig+0x2a2>
 8008876:	2b04      	cmp	r3, #4
 8008878:	d024      	beq.n	80088c4 <UART_SetConfig+0x25c>
 800887a:	2b08      	cmp	r3, #8
 800887c:	d035      	beq.n	80088ea <UART_SetConfig+0x282>
 800887e:	e044      	b.n	800890a <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008880:	f7fd fab0 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8008884:	0003      	movs	r3, r0
 8008886:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	085a      	lsrs	r2, r3, #1
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	18d2      	adds	r2, r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	0019      	movs	r1, r3
 8008898:	0010      	movs	r0, r2
 800889a:	f7f7 fc47 	bl	800012c <__udivsi3>
 800889e:	0003      	movs	r3, r0
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	61bb      	str	r3, [r7, #24]
        break;
 80088a4:	e036      	b.n	8008914 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	4a30      	ldr	r2, [pc, #192]	; (8008970 <UART_SetConfig+0x308>)
 80088ae:	189a      	adds	r2, r3, r2
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	0019      	movs	r1, r3
 80088b6:	0010      	movs	r0, r2
 80088b8:	f7f7 fc38 	bl	800012c <__udivsi3>
 80088bc:	0003      	movs	r3, r0
 80088be:	b29b      	uxth	r3, r3
 80088c0:	61bb      	str	r3, [r7, #24]
        break;
 80088c2:	e027      	b.n	8008914 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088c4:	f7fd fa20 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 80088c8:	0003      	movs	r3, r0
 80088ca:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	085a      	lsrs	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	18d2      	adds	r2, r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	0019      	movs	r1, r3
 80088dc:	0010      	movs	r0, r2
 80088de:	f7f7 fc25 	bl	800012c <__udivsi3>
 80088e2:	0003      	movs	r3, r0
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	61bb      	str	r3, [r7, #24]
        break;
 80088e8:	e014      	b.n	8008914 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	085b      	lsrs	r3, r3, #1
 80088f0:	2280      	movs	r2, #128	; 0x80
 80088f2:	0212      	lsls	r2, r2, #8
 80088f4:	189a      	adds	r2, r3, r2
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	0019      	movs	r1, r3
 80088fc:	0010      	movs	r0, r2
 80088fe:	f7f7 fc15 	bl	800012c <__udivsi3>
 8008902:	0003      	movs	r3, r0
 8008904:	b29b      	uxth	r3, r3
 8008906:	61bb      	str	r3, [r7, #24]
        break;
 8008908:	e004      	b.n	8008914 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 800890a:	2317      	movs	r3, #23
 800890c:	18fb      	adds	r3, r7, r3
 800890e:	2201      	movs	r2, #1
 8008910:	701a      	strb	r2, [r3, #0]
        break;
 8008912:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	2b0f      	cmp	r3, #15
 8008918:	d908      	bls.n	800892c <UART_SetConfig+0x2c4>
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	4a13      	ldr	r2, [pc, #76]	; (800896c <UART_SetConfig+0x304>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d804      	bhi.n	800892c <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	60da      	str	r2, [r3, #12]
 800892a:	e003      	b.n	8008934 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800892c:	2317      	movs	r3, #23
 800892e:	18fb      	adds	r3, r7, r3
 8008930:	2201      	movs	r2, #1
 8008932:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008940:	2317      	movs	r3, #23
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	781b      	ldrb	r3, [r3, #0]
}
 8008946:	0018      	movs	r0, r3
 8008948:	46bd      	mov	sp, r7
 800894a:	b008      	add	sp, #32
 800894c:	bd80      	pop	{r7, pc}
 800894e:	46c0      	nop			; (mov r8, r8)
 8008950:	ffff69f3 	.word	0xffff69f3
 8008954:	ffffcfff 	.word	0xffffcfff
 8008958:	fffff4ff 	.word	0xfffff4ff
 800895c:	40013800 	.word	0x40013800
 8008960:	40021000 	.word	0x40021000
 8008964:	40004400 	.word	0x40004400
 8008968:	00f42400 	.word	0x00f42400
 800896c:	0000ffff 	.word	0x0000ffff
 8008970:	007a1200 	.word	0x007a1200

08008974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	2201      	movs	r2, #1
 8008982:	4013      	ands	r3, r2
 8008984:	d00b      	beq.n	800899e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4a4a      	ldr	r2, [pc, #296]	; (8008ab8 <UART_AdvFeatureConfig+0x144>)
 800898e:	4013      	ands	r3, r2
 8008990:	0019      	movs	r1, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	2202      	movs	r2, #2
 80089a4:	4013      	ands	r3, r2
 80089a6:	d00b      	beq.n	80089c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	4a43      	ldr	r2, [pc, #268]	; (8008abc <UART_AdvFeatureConfig+0x148>)
 80089b0:	4013      	ands	r3, r2
 80089b2:	0019      	movs	r1, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	2204      	movs	r2, #4
 80089c6:	4013      	ands	r3, r2
 80089c8:	d00b      	beq.n	80089e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	4a3b      	ldr	r2, [pc, #236]	; (8008ac0 <UART_AdvFeatureConfig+0x14c>)
 80089d2:	4013      	ands	r3, r2
 80089d4:	0019      	movs	r1, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	2208      	movs	r2, #8
 80089e8:	4013      	ands	r3, r2
 80089ea:	d00b      	beq.n	8008a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	4a34      	ldr	r2, [pc, #208]	; (8008ac4 <UART_AdvFeatureConfig+0x150>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	0019      	movs	r1, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	2210      	movs	r2, #16
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	d00b      	beq.n	8008a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	4a2c      	ldr	r2, [pc, #176]	; (8008ac8 <UART_AdvFeatureConfig+0x154>)
 8008a16:	4013      	ands	r3, r2
 8008a18:	0019      	movs	r1, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	d00b      	beq.n	8008a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	4a25      	ldr	r2, [pc, #148]	; (8008acc <UART_AdvFeatureConfig+0x158>)
 8008a38:	4013      	ands	r3, r2
 8008a3a:	0019      	movs	r1, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2240      	movs	r2, #64	; 0x40
 8008a4e:	4013      	ands	r3, r2
 8008a50:	d01d      	beq.n	8008a8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	4a1d      	ldr	r2, [pc, #116]	; (8008ad0 <UART_AdvFeatureConfig+0x15c>)
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	0019      	movs	r1, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a6e:	2380      	movs	r3, #128	; 0x80
 8008a70:	035b      	lsls	r3, r3, #13
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d10b      	bne.n	8008a8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	4a15      	ldr	r2, [pc, #84]	; (8008ad4 <UART_AdvFeatureConfig+0x160>)
 8008a7e:	4013      	ands	r3, r2
 8008a80:	0019      	movs	r1, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	2280      	movs	r2, #128	; 0x80
 8008a94:	4013      	ands	r3, r2
 8008a96:	d00b      	beq.n	8008ab0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	4a0e      	ldr	r2, [pc, #56]	; (8008ad8 <UART_AdvFeatureConfig+0x164>)
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	0019      	movs	r1, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	605a      	str	r2, [r3, #4]
  }
}
 8008ab0:	46c0      	nop			; (mov r8, r8)
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	b002      	add	sp, #8
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	fffdffff 	.word	0xfffdffff
 8008abc:	fffeffff 	.word	0xfffeffff
 8008ac0:	fffbffff 	.word	0xfffbffff
 8008ac4:	ffff7fff 	.word	0xffff7fff
 8008ac8:	ffffefff 	.word	0xffffefff
 8008acc:	ffffdfff 	.word	0xffffdfff
 8008ad0:	ffefffff 	.word	0xffefffff
 8008ad4:	ff9fffff 	.word	0xff9fffff
 8008ad8:	fff7ffff 	.word	0xfff7ffff

08008adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af02      	add	r7, sp, #8
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008aea:	f7fb fc7f 	bl	80043ec <HAL_GetTick>
 8008aee:	0003      	movs	r3, r0
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2208      	movs	r2, #8
 8008afa:	4013      	ands	r3, r2
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d10d      	bne.n	8008b1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	2380      	movs	r3, #128	; 0x80
 8008b04:	0399      	lsls	r1, r3, #14
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4b16      	ldr	r3, [pc, #88]	; (8008b64 <UART_CheckIdleState+0x88>)
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	0013      	movs	r3, r2
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f000 f82a 	bl	8008b68 <UART_WaitOnFlagUntilTimeout>
 8008b14:	1e03      	subs	r3, r0, #0
 8008b16:	d001      	beq.n	8008b1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e01f      	b.n	8008b5c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2204      	movs	r2, #4
 8008b24:	4013      	ands	r3, r2
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d10d      	bne.n	8008b46 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	2380      	movs	r3, #128	; 0x80
 8008b2e:	03d9      	lsls	r1, r3, #15
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	4b0c      	ldr	r3, [pc, #48]	; (8008b64 <UART_CheckIdleState+0x88>)
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	0013      	movs	r3, r2
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f000 f815 	bl	8008b68 <UART_WaitOnFlagUntilTimeout>
 8008b3e:	1e03      	subs	r3, r0, #0
 8008b40:	d001      	beq.n	8008b46 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e00a      	b.n	8008b5c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2220      	movs	r2, #32
 8008b50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2270      	movs	r2, #112	; 0x70
 8008b56:	2100      	movs	r1, #0
 8008b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	0018      	movs	r0, r3
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	b004      	add	sp, #16
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	01ffffff 	.word	0x01ffffff

08008b68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	603b      	str	r3, [r7, #0]
 8008b74:	1dfb      	adds	r3, r7, #7
 8008b76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b78:	e05d      	b.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	d05a      	beq.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b80:	f7fb fc34 	bl	80043ec <HAL_GetTick>
 8008b84:	0002      	movs	r2, r0
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d302      	bcc.n	8008b96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d11b      	bne.n	8008bce <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	492f      	ldr	r1, [pc, #188]	; (8008c60 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8008ba2:	400a      	ands	r2, r1
 8008ba4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	438a      	bics	r2, r1
 8008bb4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2270      	movs	r2, #112	; 0x70
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e043      	b.n	8008c56 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	d02d      	beq.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	69da      	ldr	r2, [r3, #28]
 8008be0:	2380      	movs	r3, #128	; 0x80
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	401a      	ands	r2, r3
 8008be6:	2380      	movs	r3, #128	; 0x80
 8008be8:	011b      	lsls	r3, r3, #4
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d123      	bne.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2280      	movs	r2, #128	; 0x80
 8008bf4:	0112      	lsls	r2, r2, #4
 8008bf6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4917      	ldr	r1, [pc, #92]	; (8008c60 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8008c04:	400a      	ands	r2, r1
 8008c06:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2101      	movs	r1, #1
 8008c14:	438a      	bics	r2, r1
 8008c16:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2220      	movs	r2, #32
 8008c22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2220      	movs	r2, #32
 8008c28:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2270      	movs	r2, #112	; 0x70
 8008c2e:	2100      	movs	r1, #0
 8008c30:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e00f      	b.n	8008c56 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	425a      	negs	r2, r3
 8008c46:	4153      	adcs	r3, r2
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	001a      	movs	r2, r3
 8008c4c:	1dfb      	adds	r3, r7, #7
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d092      	beq.n	8008b7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	0018      	movs	r0, r3
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	b004      	add	sp, #16
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	46c0      	nop			; (mov r8, r8)
 8008c60:	fffffe5f 	.word	0xfffffe5f

08008c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	490a      	ldr	r1, [pc, #40]	; (8008ca0 <UART_EndRxTransfer+0x3c>)
 8008c78:	400a      	ands	r2, r1
 8008c7a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689a      	ldr	r2, [r3, #8]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2101      	movs	r1, #1
 8008c88:	438a      	bics	r2, r1
 8008c8a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008c98:	46c0      	nop			; (mov r8, r8)
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	b002      	add	sp, #8
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	fffffedf 	.word	0xfffffedf

08008ca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	225a      	movs	r2, #90	; 0x5a
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2252      	movs	r2, #82	; 0x52
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	f7ff fcc7 	bl	8008658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cca:	46c0      	nop			; (mov r8, r8)
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	b004      	add	sp, #16
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2140      	movs	r1, #64	; 0x40
 8008ce6:	438a      	bics	r2, r1
 8008ce8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2220      	movs	r2, #32
 8008cee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7ff fca5 	bl	8008648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cfe:	46c0      	nop			; (mov r8, r8)
 8008d00:	46bd      	mov	sp, r7
 8008d02:	b002      	add	sp, #8
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <__errno>:
 8008d08:	4b01      	ldr	r3, [pc, #4]	; (8008d10 <__errno+0x8>)
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	4770      	bx	lr
 8008d0e:	46c0      	nop			; (mov r8, r8)
 8008d10:	2000002c 	.word	0x2000002c

08008d14 <__libc_init_array>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	2600      	movs	r6, #0
 8008d18:	4d0c      	ldr	r5, [pc, #48]	; (8008d4c <__libc_init_array+0x38>)
 8008d1a:	4c0d      	ldr	r4, [pc, #52]	; (8008d50 <__libc_init_array+0x3c>)
 8008d1c:	1b64      	subs	r4, r4, r5
 8008d1e:	10a4      	asrs	r4, r4, #2
 8008d20:	42a6      	cmp	r6, r4
 8008d22:	d109      	bne.n	8008d38 <__libc_init_array+0x24>
 8008d24:	2600      	movs	r6, #0
 8008d26:	f002 f8b3 	bl	800ae90 <_init>
 8008d2a:	4d0a      	ldr	r5, [pc, #40]	; (8008d54 <__libc_init_array+0x40>)
 8008d2c:	4c0a      	ldr	r4, [pc, #40]	; (8008d58 <__libc_init_array+0x44>)
 8008d2e:	1b64      	subs	r4, r4, r5
 8008d30:	10a4      	asrs	r4, r4, #2
 8008d32:	42a6      	cmp	r6, r4
 8008d34:	d105      	bne.n	8008d42 <__libc_init_array+0x2e>
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	00b3      	lsls	r3, r6, #2
 8008d3a:	58eb      	ldr	r3, [r5, r3]
 8008d3c:	4798      	blx	r3
 8008d3e:	3601      	adds	r6, #1
 8008d40:	e7ee      	b.n	8008d20 <__libc_init_array+0xc>
 8008d42:	00b3      	lsls	r3, r6, #2
 8008d44:	58eb      	ldr	r3, [r5, r3]
 8008d46:	4798      	blx	r3
 8008d48:	3601      	adds	r6, #1
 8008d4a:	e7f2      	b.n	8008d32 <__libc_init_array+0x1e>
 8008d4c:	0800b308 	.word	0x0800b308
 8008d50:	0800b308 	.word	0x0800b308
 8008d54:	0800b308 	.word	0x0800b308
 8008d58:	0800b30c 	.word	0x0800b30c

08008d5c <memcpy>:
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	b510      	push	{r4, lr}
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d100      	bne.n	8008d66 <memcpy+0xa>
 8008d64:	bd10      	pop	{r4, pc}
 8008d66:	5ccc      	ldrb	r4, [r1, r3]
 8008d68:	54c4      	strb	r4, [r0, r3]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	e7f8      	b.n	8008d60 <memcpy+0x4>

08008d6e <memset>:
 8008d6e:	0003      	movs	r3, r0
 8008d70:	1812      	adds	r2, r2, r0
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d100      	bne.n	8008d78 <memset+0xa>
 8008d76:	4770      	bx	lr
 8008d78:	7019      	strb	r1, [r3, #0]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	e7f9      	b.n	8008d72 <memset+0x4>

08008d7e <__cvt>:
 8008d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d80:	b08b      	sub	sp, #44	; 0x2c
 8008d82:	0014      	movs	r4, r2
 8008d84:	1e1d      	subs	r5, r3, #0
 8008d86:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008d88:	da53      	bge.n	8008e32 <__cvt+0xb4>
 8008d8a:	2480      	movs	r4, #128	; 0x80
 8008d8c:	0624      	lsls	r4, r4, #24
 8008d8e:	191b      	adds	r3, r3, r4
 8008d90:	001d      	movs	r5, r3
 8008d92:	0014      	movs	r4, r2
 8008d94:	232d      	movs	r3, #45	; 0x2d
 8008d96:	700b      	strb	r3, [r1, #0]
 8008d98:	2320      	movs	r3, #32
 8008d9a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008d9c:	2203      	movs	r2, #3
 8008d9e:	439e      	bics	r6, r3
 8008da0:	2e46      	cmp	r6, #70	; 0x46
 8008da2:	d007      	beq.n	8008db4 <__cvt+0x36>
 8008da4:	0033      	movs	r3, r6
 8008da6:	3b45      	subs	r3, #69	; 0x45
 8008da8:	4259      	negs	r1, r3
 8008daa:	414b      	adcs	r3, r1
 8008dac:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008dae:	3a01      	subs	r2, #1
 8008db0:	18cb      	adds	r3, r1, r3
 8008db2:	9310      	str	r3, [sp, #64]	; 0x40
 8008db4:	ab09      	add	r3, sp, #36	; 0x24
 8008db6:	9304      	str	r3, [sp, #16]
 8008db8:	ab08      	add	r3, sp, #32
 8008dba:	9303      	str	r3, [sp, #12]
 8008dbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dbe:	9200      	str	r2, [sp, #0]
 8008dc0:	9302      	str	r3, [sp, #8]
 8008dc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dc4:	0022      	movs	r2, r4
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	002b      	movs	r3, r5
 8008dca:	f000 fcef 	bl	80097ac <_dtoa_r>
 8008dce:	0007      	movs	r7, r0
 8008dd0:	2e47      	cmp	r6, #71	; 0x47
 8008dd2:	d102      	bne.n	8008dda <__cvt+0x5c>
 8008dd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dd6:	07db      	lsls	r3, r3, #31
 8008dd8:	d524      	bpl.n	8008e24 <__cvt+0xa6>
 8008dda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ddc:	18fb      	adds	r3, r7, r3
 8008dde:	9307      	str	r3, [sp, #28]
 8008de0:	2e46      	cmp	r6, #70	; 0x46
 8008de2:	d114      	bne.n	8008e0e <__cvt+0x90>
 8008de4:	783b      	ldrb	r3, [r7, #0]
 8008de6:	2b30      	cmp	r3, #48	; 0x30
 8008de8:	d10c      	bne.n	8008e04 <__cvt+0x86>
 8008dea:	2200      	movs	r2, #0
 8008dec:	2300      	movs	r3, #0
 8008dee:	0020      	movs	r0, r4
 8008df0:	0029      	movs	r1, r5
 8008df2:	f7f7 fb21 	bl	8000438 <__aeabi_dcmpeq>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d104      	bne.n	8008e04 <__cvt+0x86>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008dfe:	1a9b      	subs	r3, r3, r2
 8008e00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e06:	9a07      	ldr	r2, [sp, #28]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	18d3      	adds	r3, r2, r3
 8008e0c:	9307      	str	r3, [sp, #28]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2300      	movs	r3, #0
 8008e12:	0020      	movs	r0, r4
 8008e14:	0029      	movs	r1, r5
 8008e16:	f7f7 fb0f 	bl	8000438 <__aeabi_dcmpeq>
 8008e1a:	2230      	movs	r2, #48	; 0x30
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d00d      	beq.n	8008e3c <__cvt+0xbe>
 8008e20:	9b07      	ldr	r3, [sp, #28]
 8008e22:	9309      	str	r3, [sp, #36]	; 0x24
 8008e24:	0038      	movs	r0, r7
 8008e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e2a:	1bdb      	subs	r3, r3, r7
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	b00b      	add	sp, #44	; 0x2c
 8008e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e32:	2300      	movs	r3, #0
 8008e34:	e7af      	b.n	8008d96 <__cvt+0x18>
 8008e36:	1c59      	adds	r1, r3, #1
 8008e38:	9109      	str	r1, [sp, #36]	; 0x24
 8008e3a:	701a      	strb	r2, [r3, #0]
 8008e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3e:	9907      	ldr	r1, [sp, #28]
 8008e40:	428b      	cmp	r3, r1
 8008e42:	d3f8      	bcc.n	8008e36 <__cvt+0xb8>
 8008e44:	e7ee      	b.n	8008e24 <__cvt+0xa6>

08008e46 <__exponent>:
 8008e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e48:	1c83      	adds	r3, r0, #2
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	0006      	movs	r6, r0
 8008e50:	000c      	movs	r4, r1
 8008e52:	7002      	strb	r2, [r0, #0]
 8008e54:	232b      	movs	r3, #43	; 0x2b
 8008e56:	2900      	cmp	r1, #0
 8008e58:	da01      	bge.n	8008e5e <__exponent+0x18>
 8008e5a:	232d      	movs	r3, #45	; 0x2d
 8008e5c:	424c      	negs	r4, r1
 8008e5e:	7073      	strb	r3, [r6, #1]
 8008e60:	2c09      	cmp	r4, #9
 8008e62:	dd22      	ble.n	8008eaa <__exponent+0x64>
 8008e64:	ab02      	add	r3, sp, #8
 8008e66:	1ddd      	adds	r5, r3, #7
 8008e68:	0020      	movs	r0, r4
 8008e6a:	210a      	movs	r1, #10
 8008e6c:	f7f7 face 	bl	800040c <__aeabi_idivmod>
 8008e70:	1e6f      	subs	r7, r5, #1
 8008e72:	3130      	adds	r1, #48	; 0x30
 8008e74:	7039      	strb	r1, [r7, #0]
 8008e76:	0020      	movs	r0, r4
 8008e78:	210a      	movs	r1, #10
 8008e7a:	f7f7 f9e1 	bl	8000240 <__divsi3>
 8008e7e:	0004      	movs	r4, r0
 8008e80:	2809      	cmp	r0, #9
 8008e82:	dc0b      	bgt.n	8008e9c <__exponent+0x56>
 8008e84:	3d02      	subs	r5, #2
 8008e86:	3430      	adds	r4, #48	; 0x30
 8008e88:	9b01      	ldr	r3, [sp, #4]
 8008e8a:	702c      	strb	r4, [r5, #0]
 8008e8c:	aa02      	add	r2, sp, #8
 8008e8e:	3207      	adds	r2, #7
 8008e90:	0018      	movs	r0, r3
 8008e92:	42aa      	cmp	r2, r5
 8008e94:	d804      	bhi.n	8008ea0 <__exponent+0x5a>
 8008e96:	1b80      	subs	r0, r0, r6
 8008e98:	b005      	add	sp, #20
 8008e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9c:	003d      	movs	r5, r7
 8008e9e:	e7e3      	b.n	8008e68 <__exponent+0x22>
 8008ea0:	782a      	ldrb	r2, [r5, #0]
 8008ea2:	3501      	adds	r5, #1
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	e7f0      	b.n	8008e8c <__exponent+0x46>
 8008eaa:	2330      	movs	r3, #48	; 0x30
 8008eac:	18e4      	adds	r4, r4, r3
 8008eae:	70b3      	strb	r3, [r6, #2]
 8008eb0:	1d30      	adds	r0, r6, #4
 8008eb2:	70f4      	strb	r4, [r6, #3]
 8008eb4:	e7ef      	b.n	8008e96 <__exponent+0x50>
	...

08008eb8 <_printf_float>:
 8008eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eba:	b095      	sub	sp, #84	; 0x54
 8008ebc:	000c      	movs	r4, r1
 8008ebe:	920a      	str	r2, [sp, #40]	; 0x28
 8008ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ec2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008ec4:	9009      	str	r0, [sp, #36]	; 0x24
 8008ec6:	f001 fa51 	bl	800a36c <_localeconv_r>
 8008eca:	6803      	ldr	r3, [r0, #0]
 8008ecc:	0018      	movs	r0, r3
 8008ece:	930c      	str	r3, [sp, #48]	; 0x30
 8008ed0:	f7f7 f91a 	bl	8000108 <strlen>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9312      	str	r3, [sp, #72]	; 0x48
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	900e      	str	r0, [sp, #56]	; 0x38
 8008edc:	930d      	str	r3, [sp, #52]	; 0x34
 8008ede:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ee0:	7e27      	ldrb	r7, [r4, #24]
 8008ee2:	682b      	ldr	r3, [r5, #0]
 8008ee4:	2207      	movs	r2, #7
 8008ee6:	05c9      	lsls	r1, r1, #23
 8008ee8:	d545      	bpl.n	8008f76 <_printf_float+0xbe>
 8008eea:	189b      	adds	r3, r3, r2
 8008eec:	4393      	bics	r3, r2
 8008eee:	001a      	movs	r2, r3
 8008ef0:	3208      	adds	r2, #8
 8008ef2:	602a      	str	r2, [r5, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	64a2      	str	r2, [r4, #72]	; 0x48
 8008efa:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008efc:	2201      	movs	r2, #1
 8008efe:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008f00:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8008f02:	006b      	lsls	r3, r5, #1
 8008f04:	085b      	lsrs	r3, r3, #1
 8008f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f08:	4252      	negs	r2, r2
 8008f0a:	4bac      	ldr	r3, [pc, #688]	; (80091bc <_printf_float+0x304>)
 8008f0c:	0030      	movs	r0, r6
 8008f0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f10:	f7f9 fc20 	bl	8002754 <__aeabi_dcmpun>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d130      	bne.n	8008f7a <_printf_float+0xc2>
 8008f18:	2201      	movs	r2, #1
 8008f1a:	4ba8      	ldr	r3, [pc, #672]	; (80091bc <_printf_float+0x304>)
 8008f1c:	4252      	negs	r2, r2
 8008f1e:	0030      	movs	r0, r6
 8008f20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f22:	f7f7 fa99 	bl	8000458 <__aeabi_dcmple>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d127      	bne.n	8008f7a <_printf_float+0xc2>
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	0030      	movs	r0, r6
 8008f30:	0029      	movs	r1, r5
 8008f32:	f7f7 fa87 	bl	8000444 <__aeabi_dcmplt>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d003      	beq.n	8008f42 <_printf_float+0x8a>
 8008f3a:	0023      	movs	r3, r4
 8008f3c:	222d      	movs	r2, #45	; 0x2d
 8008f3e:	3343      	adds	r3, #67	; 0x43
 8008f40:	701a      	strb	r2, [r3, #0]
 8008f42:	4d9f      	ldr	r5, [pc, #636]	; (80091c0 <_printf_float+0x308>)
 8008f44:	2f47      	cmp	r7, #71	; 0x47
 8008f46:	d800      	bhi.n	8008f4a <_printf_float+0x92>
 8008f48:	4d9e      	ldr	r5, [pc, #632]	; (80091c4 <_printf_float+0x30c>)
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	2600      	movs	r6, #0
 8008f4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f50:	6123      	str	r3, [r4, #16]
 8008f52:	3301      	adds	r3, #1
 8008f54:	439a      	bics	r2, r3
 8008f56:	6022      	str	r2, [r4, #0]
 8008f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f5a:	aa13      	add	r2, sp, #76	; 0x4c
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	0021      	movs	r1, r4
 8008f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f64:	f000 f9f4 	bl	8009350 <_printf_common>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d000      	beq.n	8008f6e <_printf_float+0xb6>
 8008f6c:	e093      	b.n	8009096 <_printf_float+0x1de>
 8008f6e:	2001      	movs	r0, #1
 8008f70:	4240      	negs	r0, r0
 8008f72:	b015      	add	sp, #84	; 0x54
 8008f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f76:	3307      	adds	r3, #7
 8008f78:	e7b8      	b.n	8008eec <_printf_float+0x34>
 8008f7a:	0032      	movs	r2, r6
 8008f7c:	002b      	movs	r3, r5
 8008f7e:	0030      	movs	r0, r6
 8008f80:	0029      	movs	r1, r5
 8008f82:	f7f9 fbe7 	bl	8002754 <__aeabi_dcmpun>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d004      	beq.n	8008f94 <_printf_float+0xdc>
 8008f8a:	4d8f      	ldr	r5, [pc, #572]	; (80091c8 <_printf_float+0x310>)
 8008f8c:	2f47      	cmp	r7, #71	; 0x47
 8008f8e:	d8dc      	bhi.n	8008f4a <_printf_float+0x92>
 8008f90:	4d8e      	ldr	r5, [pc, #568]	; (80091cc <_printf_float+0x314>)
 8008f92:	e7da      	b.n	8008f4a <_printf_float+0x92>
 8008f94:	2380      	movs	r3, #128	; 0x80
 8008f96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008f98:	6862      	ldr	r2, [r4, #4]
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	1c51      	adds	r1, r2, #1
 8008fa0:	d143      	bne.n	800902a <_printf_float+0x172>
 8008fa2:	3207      	adds	r2, #7
 8008fa4:	6062      	str	r2, [r4, #4]
 8008fa6:	aa12      	add	r2, sp, #72	; 0x48
 8008fa8:	2100      	movs	r1, #0
 8008faa:	9205      	str	r2, [sp, #20]
 8008fac:	aa11      	add	r2, sp, #68	; 0x44
 8008fae:	9203      	str	r2, [sp, #12]
 8008fb0:	2223      	movs	r2, #35	; 0x23
 8008fb2:	6023      	str	r3, [r4, #0]
 8008fb4:	9106      	str	r1, [sp, #24]
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	a908      	add	r1, sp, #32
 8008fba:	6863      	ldr	r3, [r4, #4]
 8008fbc:	1852      	adds	r2, r2, r1
 8008fbe:	9202      	str	r2, [sp, #8]
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	0032      	movs	r2, r6
 8008fc4:	002b      	movs	r3, r5
 8008fc6:	9704      	str	r7, [sp, #16]
 8008fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fca:	f7ff fed8 	bl	8008d7e <__cvt>
 8008fce:	2320      	movs	r3, #32
 8008fd0:	003a      	movs	r2, r7
 8008fd2:	0005      	movs	r5, r0
 8008fd4:	439a      	bics	r2, r3
 8008fd6:	2a47      	cmp	r2, #71	; 0x47
 8008fd8:	d107      	bne.n	8008fea <_printf_float+0x132>
 8008fda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fdc:	1cda      	adds	r2, r3, #3
 8008fde:	db02      	blt.n	8008fe6 <_printf_float+0x12e>
 8008fe0:	6862      	ldr	r2, [r4, #4]
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	dd45      	ble.n	8009072 <_printf_float+0x1ba>
 8008fe6:	3f02      	subs	r7, #2
 8008fe8:	b2ff      	uxtb	r7, r7
 8008fea:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008fec:	2f65      	cmp	r7, #101	; 0x65
 8008fee:	d825      	bhi.n	800903c <_printf_float+0x184>
 8008ff0:	0020      	movs	r0, r4
 8008ff2:	3901      	subs	r1, #1
 8008ff4:	003a      	movs	r2, r7
 8008ff6:	3050      	adds	r0, #80	; 0x50
 8008ff8:	9111      	str	r1, [sp, #68]	; 0x44
 8008ffa:	f7ff ff24 	bl	8008e46 <__exponent>
 8008ffe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009000:	0006      	movs	r6, r0
 8009002:	1813      	adds	r3, r2, r0
 8009004:	6123      	str	r3, [r4, #16]
 8009006:	2a01      	cmp	r2, #1
 8009008:	dc02      	bgt.n	8009010 <_printf_float+0x158>
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	07d2      	lsls	r2, r2, #31
 800900e:	d501      	bpl.n	8009014 <_printf_float+0x15c>
 8009010:	3301      	adds	r3, #1
 8009012:	6123      	str	r3, [r4, #16]
 8009014:	2323      	movs	r3, #35	; 0x23
 8009016:	aa08      	add	r2, sp, #32
 8009018:	189b      	adds	r3, r3, r2
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d09b      	beq.n	8008f58 <_printf_float+0xa0>
 8009020:	0023      	movs	r3, r4
 8009022:	222d      	movs	r2, #45	; 0x2d
 8009024:	3343      	adds	r3, #67	; 0x43
 8009026:	701a      	strb	r2, [r3, #0]
 8009028:	e796      	b.n	8008f58 <_printf_float+0xa0>
 800902a:	2f67      	cmp	r7, #103	; 0x67
 800902c:	d100      	bne.n	8009030 <_printf_float+0x178>
 800902e:	e176      	b.n	800931e <_printf_float+0x466>
 8009030:	2f47      	cmp	r7, #71	; 0x47
 8009032:	d1b8      	bne.n	8008fa6 <_printf_float+0xee>
 8009034:	2a00      	cmp	r2, #0
 8009036:	d1b6      	bne.n	8008fa6 <_printf_float+0xee>
 8009038:	2201      	movs	r2, #1
 800903a:	e7b3      	b.n	8008fa4 <_printf_float+0xec>
 800903c:	2f66      	cmp	r7, #102	; 0x66
 800903e:	d119      	bne.n	8009074 <_printf_float+0x1bc>
 8009040:	6863      	ldr	r3, [r4, #4]
 8009042:	2900      	cmp	r1, #0
 8009044:	dd0c      	ble.n	8009060 <_printf_float+0x1a8>
 8009046:	6121      	str	r1, [r4, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d102      	bne.n	8009052 <_printf_float+0x19a>
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	07d2      	lsls	r2, r2, #31
 8009050:	d502      	bpl.n	8009058 <_printf_float+0x1a0>
 8009052:	3301      	adds	r3, #1
 8009054:	185b      	adds	r3, r3, r1
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800905a:	2600      	movs	r6, #0
 800905c:	65a3      	str	r3, [r4, #88]	; 0x58
 800905e:	e7d9      	b.n	8009014 <_printf_float+0x15c>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d103      	bne.n	800906c <_printf_float+0x1b4>
 8009064:	2201      	movs	r2, #1
 8009066:	6821      	ldr	r1, [r4, #0]
 8009068:	4211      	tst	r1, r2
 800906a:	d000      	beq.n	800906e <_printf_float+0x1b6>
 800906c:	1c9a      	adds	r2, r3, #2
 800906e:	6122      	str	r2, [r4, #16]
 8009070:	e7f2      	b.n	8009058 <_printf_float+0x1a0>
 8009072:	2767      	movs	r7, #103	; 0x67
 8009074:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009076:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009078:	4293      	cmp	r3, r2
 800907a:	db05      	blt.n	8009088 <_printf_float+0x1d0>
 800907c:	6822      	ldr	r2, [r4, #0]
 800907e:	6123      	str	r3, [r4, #16]
 8009080:	07d2      	lsls	r2, r2, #31
 8009082:	d5e9      	bpl.n	8009058 <_printf_float+0x1a0>
 8009084:	3301      	adds	r3, #1
 8009086:	e7e6      	b.n	8009056 <_printf_float+0x19e>
 8009088:	2101      	movs	r1, #1
 800908a:	2b00      	cmp	r3, #0
 800908c:	dc01      	bgt.n	8009092 <_printf_float+0x1da>
 800908e:	1849      	adds	r1, r1, r1
 8009090:	1ac9      	subs	r1, r1, r3
 8009092:	1852      	adds	r2, r2, r1
 8009094:	e7eb      	b.n	800906e <_printf_float+0x1b6>
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	0553      	lsls	r3, r2, #21
 800909a:	d408      	bmi.n	80090ae <_printf_float+0x1f6>
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	002a      	movs	r2, r5
 80090a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80090a6:	47a8      	blx	r5
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d129      	bne.n	8009100 <_printf_float+0x248>
 80090ac:	e75f      	b.n	8008f6e <_printf_float+0xb6>
 80090ae:	2f65      	cmp	r7, #101	; 0x65
 80090b0:	d800      	bhi.n	80090b4 <_printf_float+0x1fc>
 80090b2:	e0e0      	b.n	8009276 <_printf_float+0x3be>
 80090b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80090b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80090b8:	2200      	movs	r2, #0
 80090ba:	2300      	movs	r3, #0
 80090bc:	f7f7 f9bc 	bl	8000438 <__aeabi_dcmpeq>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d034      	beq.n	800912e <_printf_float+0x276>
 80090c4:	2301      	movs	r3, #1
 80090c6:	4a42      	ldr	r2, [pc, #264]	; (80091d0 <_printf_float+0x318>)
 80090c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80090ce:	47a8      	blx	r5
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d100      	bne.n	80090d6 <_printf_float+0x21e>
 80090d4:	e74b      	b.n	8008f6e <_printf_float+0xb6>
 80090d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090da:	4293      	cmp	r3, r2
 80090dc:	db02      	blt.n	80090e4 <_printf_float+0x22c>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	07db      	lsls	r3, r3, #31
 80090e2:	d50d      	bpl.n	8009100 <_printf_float+0x248>
 80090e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80090e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ee:	47a8      	blx	r5
 80090f0:	2500      	movs	r5, #0
 80090f2:	1c43      	adds	r3, r0, #1
 80090f4:	d100      	bne.n	80090f8 <_printf_float+0x240>
 80090f6:	e73a      	b.n	8008f6e <_printf_float+0xb6>
 80090f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090fa:	3b01      	subs	r3, #1
 80090fc:	42ab      	cmp	r3, r5
 80090fe:	dc0a      	bgt.n	8009116 <_printf_float+0x25e>
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	079b      	lsls	r3, r3, #30
 8009104:	d500      	bpl.n	8009108 <_printf_float+0x250>
 8009106:	e108      	b.n	800931a <_printf_float+0x462>
 8009108:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800910a:	68e0      	ldr	r0, [r4, #12]
 800910c:	4298      	cmp	r0, r3
 800910e:	db00      	blt.n	8009112 <_printf_float+0x25a>
 8009110:	e72f      	b.n	8008f72 <_printf_float+0xba>
 8009112:	0018      	movs	r0, r3
 8009114:	e72d      	b.n	8008f72 <_printf_float+0xba>
 8009116:	0022      	movs	r2, r4
 8009118:	2301      	movs	r3, #1
 800911a:	321a      	adds	r2, #26
 800911c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800911e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009120:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009122:	47b0      	blx	r6
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d100      	bne.n	800912a <_printf_float+0x272>
 8009128:	e721      	b.n	8008f6e <_printf_float+0xb6>
 800912a:	3501      	adds	r5, #1
 800912c:	e7e4      	b.n	80090f8 <_printf_float+0x240>
 800912e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc2d      	bgt.n	8009190 <_printf_float+0x2d8>
 8009134:	2301      	movs	r3, #1
 8009136:	4a26      	ldr	r2, [pc, #152]	; (80091d0 <_printf_float+0x318>)
 8009138:	990a      	ldr	r1, [sp, #40]	; 0x28
 800913a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800913c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800913e:	47b0      	blx	r6
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d100      	bne.n	8009146 <_printf_float+0x28e>
 8009144:	e713      	b.n	8008f6e <_printf_float+0xb6>
 8009146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009148:	2b00      	cmp	r3, #0
 800914a:	d105      	bne.n	8009158 <_printf_float+0x2a0>
 800914c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800914e:	2b00      	cmp	r3, #0
 8009150:	d102      	bne.n	8009158 <_printf_float+0x2a0>
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	07db      	lsls	r3, r3, #31
 8009156:	d5d3      	bpl.n	8009100 <_printf_float+0x248>
 8009158:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800915a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800915c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800915e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009162:	47b0      	blx	r6
 8009164:	2600      	movs	r6, #0
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d100      	bne.n	800916c <_printf_float+0x2b4>
 800916a:	e700      	b.n	8008f6e <_printf_float+0xb6>
 800916c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800916e:	425b      	negs	r3, r3
 8009170:	42b3      	cmp	r3, r6
 8009172:	dc01      	bgt.n	8009178 <_printf_float+0x2c0>
 8009174:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009176:	e792      	b.n	800909e <_printf_float+0x1e6>
 8009178:	0022      	movs	r2, r4
 800917a:	2301      	movs	r3, #1
 800917c:	321a      	adds	r2, #26
 800917e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009182:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009184:	47b8      	blx	r7
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	d100      	bne.n	800918c <_printf_float+0x2d4>
 800918a:	e6f0      	b.n	8008f6e <_printf_float+0xb6>
 800918c:	3601      	adds	r6, #1
 800918e:	e7ed      	b.n	800916c <_printf_float+0x2b4>
 8009190:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009192:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009194:	429f      	cmp	r7, r3
 8009196:	dd00      	ble.n	800919a <_printf_float+0x2e2>
 8009198:	001f      	movs	r7, r3
 800919a:	2f00      	cmp	r7, #0
 800919c:	dd08      	ble.n	80091b0 <_printf_float+0x2f8>
 800919e:	003b      	movs	r3, r7
 80091a0:	002a      	movs	r2, r5
 80091a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80091a8:	47b0      	blx	r6
 80091aa:	1c43      	adds	r3, r0, #1
 80091ac:	d100      	bne.n	80091b0 <_printf_float+0x2f8>
 80091ae:	e6de      	b.n	8008f6e <_printf_float+0xb6>
 80091b0:	2300      	movs	r3, #0
 80091b2:	930d      	str	r3, [sp, #52]	; 0x34
 80091b4:	43fb      	mvns	r3, r7
 80091b6:	17db      	asrs	r3, r3, #31
 80091b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80091ba:	e018      	b.n	80091ee <_printf_float+0x336>
 80091bc:	7fefffff 	.word	0x7fefffff
 80091c0:	0800b0b0 	.word	0x0800b0b0
 80091c4:	0800b0ac 	.word	0x0800b0ac
 80091c8:	0800b0b8 	.word	0x0800b0b8
 80091cc:	0800b0b4 	.word	0x0800b0b4
 80091d0:	0800b0bc 	.word	0x0800b0bc
 80091d4:	0022      	movs	r2, r4
 80091d6:	2301      	movs	r3, #1
 80091d8:	321a      	adds	r2, #26
 80091da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80091e0:	47b0      	blx	r6
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	d100      	bne.n	80091e8 <_printf_float+0x330>
 80091e6:	e6c2      	b.n	8008f6e <_printf_float+0xb6>
 80091e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ea:	3301      	adds	r3, #1
 80091ec:	930d      	str	r3, [sp, #52]	; 0x34
 80091ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091f0:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80091f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091f4:	403b      	ands	r3, r7
 80091f6:	1af3      	subs	r3, r6, r3
 80091f8:	4293      	cmp	r3, r2
 80091fa:	dceb      	bgt.n	80091d4 <_printf_float+0x31c>
 80091fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009200:	19ad      	adds	r5, r5, r6
 8009202:	4293      	cmp	r3, r2
 8009204:	db10      	blt.n	8009228 <_printf_float+0x370>
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	07db      	lsls	r3, r3, #31
 800920a:	d40d      	bmi.n	8009228 <_printf_float+0x370>
 800920c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800920e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009210:	1bbe      	subs	r6, r7, r6
 8009212:	1aff      	subs	r7, r7, r3
 8009214:	42b7      	cmp	r7, r6
 8009216:	dd00      	ble.n	800921a <_printf_float+0x362>
 8009218:	0037      	movs	r7, r6
 800921a:	2f00      	cmp	r7, #0
 800921c:	dc0d      	bgt.n	800923a <_printf_float+0x382>
 800921e:	43fe      	mvns	r6, r7
 8009220:	17f3      	asrs	r3, r6, #31
 8009222:	2500      	movs	r5, #0
 8009224:	930c      	str	r3, [sp, #48]	; 0x30
 8009226:	e01c      	b.n	8009262 <_printf_float+0x3aa>
 8009228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800922a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800922c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800922e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009230:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009232:	47b8      	blx	r7
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d1e9      	bne.n	800920c <_printf_float+0x354>
 8009238:	e699      	b.n	8008f6e <_printf_float+0xb6>
 800923a:	003b      	movs	r3, r7
 800923c:	002a      	movs	r2, r5
 800923e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009242:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009244:	47a8      	blx	r5
 8009246:	1c43      	adds	r3, r0, #1
 8009248:	d1e9      	bne.n	800921e <_printf_float+0x366>
 800924a:	e690      	b.n	8008f6e <_printf_float+0xb6>
 800924c:	0022      	movs	r2, r4
 800924e:	2301      	movs	r3, #1
 8009250:	321a      	adds	r2, #26
 8009252:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009256:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009258:	47b0      	blx	r6
 800925a:	1c43      	adds	r3, r0, #1
 800925c:	d100      	bne.n	8009260 <_printf_float+0x3a8>
 800925e:	e686      	b.n	8008f6e <_printf_float+0xb6>
 8009260:	3501      	adds	r5, #1
 8009262:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009264:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009266:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	003a      	movs	r2, r7
 800926c:	400a      	ands	r2, r1
 800926e:	1a9b      	subs	r3, r3, r2
 8009270:	42ab      	cmp	r3, r5
 8009272:	dceb      	bgt.n	800924c <_printf_float+0x394>
 8009274:	e744      	b.n	8009100 <_printf_float+0x248>
 8009276:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009278:	2b01      	cmp	r3, #1
 800927a:	dc02      	bgt.n	8009282 <_printf_float+0x3ca>
 800927c:	2301      	movs	r3, #1
 800927e:	421a      	tst	r2, r3
 8009280:	d032      	beq.n	80092e8 <_printf_float+0x430>
 8009282:	2301      	movs	r3, #1
 8009284:	002a      	movs	r2, r5
 8009286:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800928a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800928c:	47b8      	blx	r7
 800928e:	1c43      	adds	r3, r0, #1
 8009290:	d100      	bne.n	8009294 <_printf_float+0x3dc>
 8009292:	e66c      	b.n	8008f6e <_printf_float+0xb6>
 8009294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009298:	990a      	ldr	r1, [sp, #40]	; 0x28
 800929a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800929c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800929e:	3501      	adds	r5, #1
 80092a0:	47b8      	blx	r7
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	d100      	bne.n	80092a8 <_printf_float+0x3f0>
 80092a6:	e662      	b.n	8008f6e <_printf_float+0xb6>
 80092a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80092aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80092ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092ae:	2200      	movs	r2, #0
 80092b0:	1e5f      	subs	r7, r3, #1
 80092b2:	2300      	movs	r3, #0
 80092b4:	f7f7 f8c0 	bl	8000438 <__aeabi_dcmpeq>
 80092b8:	003b      	movs	r3, r7
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d014      	beq.n	80092e8 <_printf_float+0x430>
 80092be:	2500      	movs	r5, #0
 80092c0:	e00a      	b.n	80092d8 <_printf_float+0x420>
 80092c2:	0022      	movs	r2, r4
 80092c4:	2301      	movs	r3, #1
 80092c6:	321a      	adds	r2, #26
 80092c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80092ce:	47b8      	blx	r7
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d100      	bne.n	80092d6 <_printf_float+0x41e>
 80092d4:	e64b      	b.n	8008f6e <_printf_float+0xb6>
 80092d6:	3501      	adds	r5, #1
 80092d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092da:	3b01      	subs	r3, #1
 80092dc:	42ab      	cmp	r3, r5
 80092de:	dcf0      	bgt.n	80092c2 <_printf_float+0x40a>
 80092e0:	0022      	movs	r2, r4
 80092e2:	0033      	movs	r3, r6
 80092e4:	3250      	adds	r2, #80	; 0x50
 80092e6:	e6db      	b.n	80090a0 <_printf_float+0x1e8>
 80092e8:	002a      	movs	r2, r5
 80092ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80092f0:	47a8      	blx	r5
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d1f4      	bne.n	80092e0 <_printf_float+0x428>
 80092f6:	e63a      	b.n	8008f6e <_printf_float+0xb6>
 80092f8:	0022      	movs	r2, r4
 80092fa:	2301      	movs	r3, #1
 80092fc:	3219      	adds	r2, #25
 80092fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009302:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009304:	47b0      	blx	r6
 8009306:	1c43      	adds	r3, r0, #1
 8009308:	d100      	bne.n	800930c <_printf_float+0x454>
 800930a:	e630      	b.n	8008f6e <_printf_float+0xb6>
 800930c:	3501      	adds	r5, #1
 800930e:	68e3      	ldr	r3, [r4, #12]
 8009310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009312:	1a9b      	subs	r3, r3, r2
 8009314:	42ab      	cmp	r3, r5
 8009316:	dcef      	bgt.n	80092f8 <_printf_float+0x440>
 8009318:	e6f6      	b.n	8009108 <_printf_float+0x250>
 800931a:	2500      	movs	r5, #0
 800931c:	e7f7      	b.n	800930e <_printf_float+0x456>
 800931e:	2a00      	cmp	r2, #0
 8009320:	d100      	bne.n	8009324 <_printf_float+0x46c>
 8009322:	e689      	b.n	8009038 <_printf_float+0x180>
 8009324:	2100      	movs	r1, #0
 8009326:	9106      	str	r1, [sp, #24]
 8009328:	a912      	add	r1, sp, #72	; 0x48
 800932a:	9105      	str	r1, [sp, #20]
 800932c:	a911      	add	r1, sp, #68	; 0x44
 800932e:	9103      	str	r1, [sp, #12]
 8009330:	2123      	movs	r1, #35	; 0x23
 8009332:	a808      	add	r0, sp, #32
 8009334:	1809      	adds	r1, r1, r0
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	9301      	str	r3, [sp, #4]
 800933a:	9200      	str	r2, [sp, #0]
 800933c:	002b      	movs	r3, r5
 800933e:	9704      	str	r7, [sp, #16]
 8009340:	9102      	str	r1, [sp, #8]
 8009342:	0032      	movs	r2, r6
 8009344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009346:	f7ff fd1a 	bl	8008d7e <__cvt>
 800934a:	0005      	movs	r5, r0
 800934c:	e645      	b.n	8008fda <_printf_float+0x122>
 800934e:	46c0      	nop			; (mov r8, r8)

08009350 <_printf_common>:
 8009350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009352:	0015      	movs	r5, r2
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	688a      	ldr	r2, [r1, #8]
 8009358:	690b      	ldr	r3, [r1, #16]
 800935a:	9000      	str	r0, [sp, #0]
 800935c:	000c      	movs	r4, r1
 800935e:	4293      	cmp	r3, r2
 8009360:	da00      	bge.n	8009364 <_printf_common+0x14>
 8009362:	0013      	movs	r3, r2
 8009364:	0022      	movs	r2, r4
 8009366:	602b      	str	r3, [r5, #0]
 8009368:	3243      	adds	r2, #67	; 0x43
 800936a:	7812      	ldrb	r2, [r2, #0]
 800936c:	2a00      	cmp	r2, #0
 800936e:	d001      	beq.n	8009374 <_printf_common+0x24>
 8009370:	3301      	adds	r3, #1
 8009372:	602b      	str	r3, [r5, #0]
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	069b      	lsls	r3, r3, #26
 8009378:	d502      	bpl.n	8009380 <_printf_common+0x30>
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	3302      	adds	r3, #2
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	2706      	movs	r7, #6
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	401f      	ands	r7, r3
 8009386:	d027      	beq.n	80093d8 <_printf_common+0x88>
 8009388:	0023      	movs	r3, r4
 800938a:	3343      	adds	r3, #67	; 0x43
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	1e5a      	subs	r2, r3, #1
 8009390:	4193      	sbcs	r3, r2
 8009392:	6822      	ldr	r2, [r4, #0]
 8009394:	0692      	lsls	r2, r2, #26
 8009396:	d430      	bmi.n	80093fa <_printf_common+0xaa>
 8009398:	0022      	movs	r2, r4
 800939a:	9901      	ldr	r1, [sp, #4]
 800939c:	3243      	adds	r2, #67	; 0x43
 800939e:	9800      	ldr	r0, [sp, #0]
 80093a0:	9e08      	ldr	r6, [sp, #32]
 80093a2:	47b0      	blx	r6
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d025      	beq.n	80093f4 <_printf_common+0xa4>
 80093a8:	2306      	movs	r3, #6
 80093aa:	6820      	ldr	r0, [r4, #0]
 80093ac:	682a      	ldr	r2, [r5, #0]
 80093ae:	68e1      	ldr	r1, [r4, #12]
 80093b0:	4003      	ands	r3, r0
 80093b2:	2500      	movs	r5, #0
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d103      	bne.n	80093c0 <_printf_common+0x70>
 80093b8:	1a8d      	subs	r5, r1, r2
 80093ba:	43eb      	mvns	r3, r5
 80093bc:	17db      	asrs	r3, r3, #31
 80093be:	401d      	ands	r5, r3
 80093c0:	68a3      	ldr	r3, [r4, #8]
 80093c2:	6922      	ldr	r2, [r4, #16]
 80093c4:	4293      	cmp	r3, r2
 80093c6:	dd01      	ble.n	80093cc <_printf_common+0x7c>
 80093c8:	1a9b      	subs	r3, r3, r2
 80093ca:	18ed      	adds	r5, r5, r3
 80093cc:	2700      	movs	r7, #0
 80093ce:	42bd      	cmp	r5, r7
 80093d0:	d120      	bne.n	8009414 <_printf_common+0xc4>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e010      	b.n	80093f8 <_printf_common+0xa8>
 80093d6:	3701      	adds	r7, #1
 80093d8:	68e3      	ldr	r3, [r4, #12]
 80093da:	682a      	ldr	r2, [r5, #0]
 80093dc:	1a9b      	subs	r3, r3, r2
 80093de:	42bb      	cmp	r3, r7
 80093e0:	ddd2      	ble.n	8009388 <_printf_common+0x38>
 80093e2:	0022      	movs	r2, r4
 80093e4:	2301      	movs	r3, #1
 80093e6:	3219      	adds	r2, #25
 80093e8:	9901      	ldr	r1, [sp, #4]
 80093ea:	9800      	ldr	r0, [sp, #0]
 80093ec:	9e08      	ldr	r6, [sp, #32]
 80093ee:	47b0      	blx	r6
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d1f0      	bne.n	80093d6 <_printf_common+0x86>
 80093f4:	2001      	movs	r0, #1
 80093f6:	4240      	negs	r0, r0
 80093f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093fa:	2030      	movs	r0, #48	; 0x30
 80093fc:	18e1      	adds	r1, r4, r3
 80093fe:	3143      	adds	r1, #67	; 0x43
 8009400:	7008      	strb	r0, [r1, #0]
 8009402:	0021      	movs	r1, r4
 8009404:	1c5a      	adds	r2, r3, #1
 8009406:	3145      	adds	r1, #69	; 0x45
 8009408:	7809      	ldrb	r1, [r1, #0]
 800940a:	18a2      	adds	r2, r4, r2
 800940c:	3243      	adds	r2, #67	; 0x43
 800940e:	3302      	adds	r3, #2
 8009410:	7011      	strb	r1, [r2, #0]
 8009412:	e7c1      	b.n	8009398 <_printf_common+0x48>
 8009414:	0022      	movs	r2, r4
 8009416:	2301      	movs	r3, #1
 8009418:	321a      	adds	r2, #26
 800941a:	9901      	ldr	r1, [sp, #4]
 800941c:	9800      	ldr	r0, [sp, #0]
 800941e:	9e08      	ldr	r6, [sp, #32]
 8009420:	47b0      	blx	r6
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	d0e6      	beq.n	80093f4 <_printf_common+0xa4>
 8009426:	3701      	adds	r7, #1
 8009428:	e7d1      	b.n	80093ce <_printf_common+0x7e>
	...

0800942c <_printf_i>:
 800942c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942e:	b089      	sub	sp, #36	; 0x24
 8009430:	9204      	str	r2, [sp, #16]
 8009432:	000a      	movs	r2, r1
 8009434:	3243      	adds	r2, #67	; 0x43
 8009436:	9305      	str	r3, [sp, #20]
 8009438:	9003      	str	r0, [sp, #12]
 800943a:	9202      	str	r2, [sp, #8]
 800943c:	7e0a      	ldrb	r2, [r1, #24]
 800943e:	000c      	movs	r4, r1
 8009440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009442:	2a6e      	cmp	r2, #110	; 0x6e
 8009444:	d100      	bne.n	8009448 <_printf_i+0x1c>
 8009446:	e086      	b.n	8009556 <_printf_i+0x12a>
 8009448:	d81f      	bhi.n	800948a <_printf_i+0x5e>
 800944a:	2a63      	cmp	r2, #99	; 0x63
 800944c:	d033      	beq.n	80094b6 <_printf_i+0x8a>
 800944e:	d808      	bhi.n	8009462 <_printf_i+0x36>
 8009450:	2a00      	cmp	r2, #0
 8009452:	d100      	bne.n	8009456 <_printf_i+0x2a>
 8009454:	e08c      	b.n	8009570 <_printf_i+0x144>
 8009456:	2a58      	cmp	r2, #88	; 0x58
 8009458:	d04d      	beq.n	80094f6 <_printf_i+0xca>
 800945a:	0025      	movs	r5, r4
 800945c:	3542      	adds	r5, #66	; 0x42
 800945e:	702a      	strb	r2, [r5, #0]
 8009460:	e030      	b.n	80094c4 <_printf_i+0x98>
 8009462:	2a64      	cmp	r2, #100	; 0x64
 8009464:	d001      	beq.n	800946a <_printf_i+0x3e>
 8009466:	2a69      	cmp	r2, #105	; 0x69
 8009468:	d1f7      	bne.n	800945a <_printf_i+0x2e>
 800946a:	6819      	ldr	r1, [r3, #0]
 800946c:	6825      	ldr	r5, [r4, #0]
 800946e:	1d0a      	adds	r2, r1, #4
 8009470:	0628      	lsls	r0, r5, #24
 8009472:	d529      	bpl.n	80094c8 <_printf_i+0x9c>
 8009474:	6808      	ldr	r0, [r1, #0]
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	2800      	cmp	r0, #0
 800947a:	da03      	bge.n	8009484 <_printf_i+0x58>
 800947c:	232d      	movs	r3, #45	; 0x2d
 800947e:	9a02      	ldr	r2, [sp, #8]
 8009480:	4240      	negs	r0, r0
 8009482:	7013      	strb	r3, [r2, #0]
 8009484:	4e6b      	ldr	r6, [pc, #428]	; (8009634 <_printf_i+0x208>)
 8009486:	270a      	movs	r7, #10
 8009488:	e04f      	b.n	800952a <_printf_i+0xfe>
 800948a:	2a73      	cmp	r2, #115	; 0x73
 800948c:	d074      	beq.n	8009578 <_printf_i+0x14c>
 800948e:	d808      	bhi.n	80094a2 <_printf_i+0x76>
 8009490:	2a6f      	cmp	r2, #111	; 0x6f
 8009492:	d01f      	beq.n	80094d4 <_printf_i+0xa8>
 8009494:	2a70      	cmp	r2, #112	; 0x70
 8009496:	d1e0      	bne.n	800945a <_printf_i+0x2e>
 8009498:	2220      	movs	r2, #32
 800949a:	6809      	ldr	r1, [r1, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	6022      	str	r2, [r4, #0]
 80094a0:	e003      	b.n	80094aa <_printf_i+0x7e>
 80094a2:	2a75      	cmp	r2, #117	; 0x75
 80094a4:	d016      	beq.n	80094d4 <_printf_i+0xa8>
 80094a6:	2a78      	cmp	r2, #120	; 0x78
 80094a8:	d1d7      	bne.n	800945a <_printf_i+0x2e>
 80094aa:	0022      	movs	r2, r4
 80094ac:	2178      	movs	r1, #120	; 0x78
 80094ae:	3245      	adds	r2, #69	; 0x45
 80094b0:	7011      	strb	r1, [r2, #0]
 80094b2:	4e61      	ldr	r6, [pc, #388]	; (8009638 <_printf_i+0x20c>)
 80094b4:	e022      	b.n	80094fc <_printf_i+0xd0>
 80094b6:	0025      	movs	r5, r4
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	3542      	adds	r5, #66	; 0x42
 80094bc:	1d11      	adds	r1, r2, #4
 80094be:	6019      	str	r1, [r3, #0]
 80094c0:	6813      	ldr	r3, [r2, #0]
 80094c2:	702b      	strb	r3, [r5, #0]
 80094c4:	2301      	movs	r3, #1
 80094c6:	e065      	b.n	8009594 <_printf_i+0x168>
 80094c8:	6808      	ldr	r0, [r1, #0]
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	0669      	lsls	r1, r5, #25
 80094ce:	d5d3      	bpl.n	8009478 <_printf_i+0x4c>
 80094d0:	b200      	sxth	r0, r0
 80094d2:	e7d1      	b.n	8009478 <_printf_i+0x4c>
 80094d4:	6819      	ldr	r1, [r3, #0]
 80094d6:	6825      	ldr	r5, [r4, #0]
 80094d8:	1d08      	adds	r0, r1, #4
 80094da:	6018      	str	r0, [r3, #0]
 80094dc:	6808      	ldr	r0, [r1, #0]
 80094de:	062e      	lsls	r6, r5, #24
 80094e0:	d505      	bpl.n	80094ee <_printf_i+0xc2>
 80094e2:	4e54      	ldr	r6, [pc, #336]	; (8009634 <_printf_i+0x208>)
 80094e4:	2708      	movs	r7, #8
 80094e6:	2a6f      	cmp	r2, #111	; 0x6f
 80094e8:	d01b      	beq.n	8009522 <_printf_i+0xf6>
 80094ea:	270a      	movs	r7, #10
 80094ec:	e019      	b.n	8009522 <_printf_i+0xf6>
 80094ee:	066d      	lsls	r5, r5, #25
 80094f0:	d5f7      	bpl.n	80094e2 <_printf_i+0xb6>
 80094f2:	b280      	uxth	r0, r0
 80094f4:	e7f5      	b.n	80094e2 <_printf_i+0xb6>
 80094f6:	3145      	adds	r1, #69	; 0x45
 80094f8:	4e4e      	ldr	r6, [pc, #312]	; (8009634 <_printf_i+0x208>)
 80094fa:	700a      	strb	r2, [r1, #0]
 80094fc:	6818      	ldr	r0, [r3, #0]
 80094fe:	6822      	ldr	r2, [r4, #0]
 8009500:	1d01      	adds	r1, r0, #4
 8009502:	6800      	ldr	r0, [r0, #0]
 8009504:	6019      	str	r1, [r3, #0]
 8009506:	0615      	lsls	r5, r2, #24
 8009508:	d521      	bpl.n	800954e <_printf_i+0x122>
 800950a:	07d3      	lsls	r3, r2, #31
 800950c:	d502      	bpl.n	8009514 <_printf_i+0xe8>
 800950e:	2320      	movs	r3, #32
 8009510:	431a      	orrs	r2, r3
 8009512:	6022      	str	r2, [r4, #0]
 8009514:	2710      	movs	r7, #16
 8009516:	2800      	cmp	r0, #0
 8009518:	d103      	bne.n	8009522 <_printf_i+0xf6>
 800951a:	2320      	movs	r3, #32
 800951c:	6822      	ldr	r2, [r4, #0]
 800951e:	439a      	bics	r2, r3
 8009520:	6022      	str	r2, [r4, #0]
 8009522:	0023      	movs	r3, r4
 8009524:	2200      	movs	r2, #0
 8009526:	3343      	adds	r3, #67	; 0x43
 8009528:	701a      	strb	r2, [r3, #0]
 800952a:	6863      	ldr	r3, [r4, #4]
 800952c:	60a3      	str	r3, [r4, #8]
 800952e:	2b00      	cmp	r3, #0
 8009530:	db58      	blt.n	80095e4 <_printf_i+0x1b8>
 8009532:	2204      	movs	r2, #4
 8009534:	6821      	ldr	r1, [r4, #0]
 8009536:	4391      	bics	r1, r2
 8009538:	6021      	str	r1, [r4, #0]
 800953a:	2800      	cmp	r0, #0
 800953c:	d154      	bne.n	80095e8 <_printf_i+0x1bc>
 800953e:	9d02      	ldr	r5, [sp, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d05a      	beq.n	80095fa <_printf_i+0x1ce>
 8009544:	0025      	movs	r5, r4
 8009546:	7833      	ldrb	r3, [r6, #0]
 8009548:	3542      	adds	r5, #66	; 0x42
 800954a:	702b      	strb	r3, [r5, #0]
 800954c:	e055      	b.n	80095fa <_printf_i+0x1ce>
 800954e:	0655      	lsls	r5, r2, #25
 8009550:	d5db      	bpl.n	800950a <_printf_i+0xde>
 8009552:	b280      	uxth	r0, r0
 8009554:	e7d9      	b.n	800950a <_printf_i+0xde>
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	680d      	ldr	r5, [r1, #0]
 800955a:	1d10      	adds	r0, r2, #4
 800955c:	6949      	ldr	r1, [r1, #20]
 800955e:	6018      	str	r0, [r3, #0]
 8009560:	6813      	ldr	r3, [r2, #0]
 8009562:	062e      	lsls	r6, r5, #24
 8009564:	d501      	bpl.n	800956a <_printf_i+0x13e>
 8009566:	6019      	str	r1, [r3, #0]
 8009568:	e002      	b.n	8009570 <_printf_i+0x144>
 800956a:	066d      	lsls	r5, r5, #25
 800956c:	d5fb      	bpl.n	8009566 <_printf_i+0x13a>
 800956e:	8019      	strh	r1, [r3, #0]
 8009570:	2300      	movs	r3, #0
 8009572:	9d02      	ldr	r5, [sp, #8]
 8009574:	6123      	str	r3, [r4, #16]
 8009576:	e04f      	b.n	8009618 <_printf_i+0x1ec>
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	1d11      	adds	r1, r2, #4
 800957c:	6019      	str	r1, [r3, #0]
 800957e:	6815      	ldr	r5, [r2, #0]
 8009580:	2100      	movs	r1, #0
 8009582:	6862      	ldr	r2, [r4, #4]
 8009584:	0028      	movs	r0, r5
 8009586:	f000 ff07 	bl	800a398 <memchr>
 800958a:	2800      	cmp	r0, #0
 800958c:	d001      	beq.n	8009592 <_printf_i+0x166>
 800958e:	1b40      	subs	r0, r0, r5
 8009590:	6060      	str	r0, [r4, #4]
 8009592:	6863      	ldr	r3, [r4, #4]
 8009594:	6123      	str	r3, [r4, #16]
 8009596:	2300      	movs	r3, #0
 8009598:	9a02      	ldr	r2, [sp, #8]
 800959a:	7013      	strb	r3, [r2, #0]
 800959c:	e03c      	b.n	8009618 <_printf_i+0x1ec>
 800959e:	6923      	ldr	r3, [r4, #16]
 80095a0:	002a      	movs	r2, r5
 80095a2:	9904      	ldr	r1, [sp, #16]
 80095a4:	9803      	ldr	r0, [sp, #12]
 80095a6:	9d05      	ldr	r5, [sp, #20]
 80095a8:	47a8      	blx	r5
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	d03e      	beq.n	800962c <_printf_i+0x200>
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	079b      	lsls	r3, r3, #30
 80095b2:	d415      	bmi.n	80095e0 <_printf_i+0x1b4>
 80095b4:	9b07      	ldr	r3, [sp, #28]
 80095b6:	68e0      	ldr	r0, [r4, #12]
 80095b8:	4298      	cmp	r0, r3
 80095ba:	da39      	bge.n	8009630 <_printf_i+0x204>
 80095bc:	0018      	movs	r0, r3
 80095be:	e037      	b.n	8009630 <_printf_i+0x204>
 80095c0:	0022      	movs	r2, r4
 80095c2:	2301      	movs	r3, #1
 80095c4:	3219      	adds	r2, #25
 80095c6:	9904      	ldr	r1, [sp, #16]
 80095c8:	9803      	ldr	r0, [sp, #12]
 80095ca:	9e05      	ldr	r6, [sp, #20]
 80095cc:	47b0      	blx	r6
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d02c      	beq.n	800962c <_printf_i+0x200>
 80095d2:	3501      	adds	r5, #1
 80095d4:	68e3      	ldr	r3, [r4, #12]
 80095d6:	9a07      	ldr	r2, [sp, #28]
 80095d8:	1a9b      	subs	r3, r3, r2
 80095da:	42ab      	cmp	r3, r5
 80095dc:	dcf0      	bgt.n	80095c0 <_printf_i+0x194>
 80095de:	e7e9      	b.n	80095b4 <_printf_i+0x188>
 80095e0:	2500      	movs	r5, #0
 80095e2:	e7f7      	b.n	80095d4 <_printf_i+0x1a8>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d0ad      	beq.n	8009544 <_printf_i+0x118>
 80095e8:	9d02      	ldr	r5, [sp, #8]
 80095ea:	0039      	movs	r1, r7
 80095ec:	f7f6 fe24 	bl	8000238 <__aeabi_uidivmod>
 80095f0:	5c73      	ldrb	r3, [r6, r1]
 80095f2:	3d01      	subs	r5, #1
 80095f4:	702b      	strb	r3, [r5, #0]
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d1f7      	bne.n	80095ea <_printf_i+0x1be>
 80095fa:	2f08      	cmp	r7, #8
 80095fc:	d109      	bne.n	8009612 <_printf_i+0x1e6>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	07db      	lsls	r3, r3, #31
 8009602:	d506      	bpl.n	8009612 <_printf_i+0x1e6>
 8009604:	6863      	ldr	r3, [r4, #4]
 8009606:	6922      	ldr	r2, [r4, #16]
 8009608:	4293      	cmp	r3, r2
 800960a:	dc02      	bgt.n	8009612 <_printf_i+0x1e6>
 800960c:	2330      	movs	r3, #48	; 0x30
 800960e:	3d01      	subs	r5, #1
 8009610:	702b      	strb	r3, [r5, #0]
 8009612:	9b02      	ldr	r3, [sp, #8]
 8009614:	1b5b      	subs	r3, r3, r5
 8009616:	6123      	str	r3, [r4, #16]
 8009618:	9b05      	ldr	r3, [sp, #20]
 800961a:	aa07      	add	r2, sp, #28
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	0021      	movs	r1, r4
 8009620:	9b04      	ldr	r3, [sp, #16]
 8009622:	9803      	ldr	r0, [sp, #12]
 8009624:	f7ff fe94 	bl	8009350 <_printf_common>
 8009628:	1c43      	adds	r3, r0, #1
 800962a:	d1b8      	bne.n	800959e <_printf_i+0x172>
 800962c:	2001      	movs	r0, #1
 800962e:	4240      	negs	r0, r0
 8009630:	b009      	add	sp, #36	; 0x24
 8009632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009634:	0800b0be 	.word	0x0800b0be
 8009638:	0800b0cf 	.word	0x0800b0cf

0800963c <siprintf>:
 800963c:	b40e      	push	{r1, r2, r3}
 800963e:	b500      	push	{lr}
 8009640:	490b      	ldr	r1, [pc, #44]	; (8009670 <siprintf+0x34>)
 8009642:	b09c      	sub	sp, #112	; 0x70
 8009644:	ab1d      	add	r3, sp, #116	; 0x74
 8009646:	9002      	str	r0, [sp, #8]
 8009648:	9006      	str	r0, [sp, #24]
 800964a:	9107      	str	r1, [sp, #28]
 800964c:	9104      	str	r1, [sp, #16]
 800964e:	4809      	ldr	r0, [pc, #36]	; (8009674 <siprintf+0x38>)
 8009650:	4909      	ldr	r1, [pc, #36]	; (8009678 <siprintf+0x3c>)
 8009652:	cb04      	ldmia	r3!, {r2}
 8009654:	9105      	str	r1, [sp, #20]
 8009656:	6800      	ldr	r0, [r0, #0]
 8009658:	a902      	add	r1, sp, #8
 800965a:	9301      	str	r3, [sp, #4]
 800965c:	f001 faa6 	bl	800abac <_svfiprintf_r>
 8009660:	2300      	movs	r3, #0
 8009662:	9a02      	ldr	r2, [sp, #8]
 8009664:	7013      	strb	r3, [r2, #0]
 8009666:	b01c      	add	sp, #112	; 0x70
 8009668:	bc08      	pop	{r3}
 800966a:	b003      	add	sp, #12
 800966c:	4718      	bx	r3
 800966e:	46c0      	nop			; (mov r8, r8)
 8009670:	7fffffff 	.word	0x7fffffff
 8009674:	2000002c 	.word	0x2000002c
 8009678:	ffff0208 	.word	0xffff0208

0800967c <strncmp>:
 800967c:	2300      	movs	r3, #0
 800967e:	b530      	push	{r4, r5, lr}
 8009680:	429a      	cmp	r2, r3
 8009682:	d00a      	beq.n	800969a <strncmp+0x1e>
 8009684:	3a01      	subs	r2, #1
 8009686:	5cc4      	ldrb	r4, [r0, r3]
 8009688:	5ccd      	ldrb	r5, [r1, r3]
 800968a:	42ac      	cmp	r4, r5
 800968c:	d104      	bne.n	8009698 <strncmp+0x1c>
 800968e:	4293      	cmp	r3, r2
 8009690:	d002      	beq.n	8009698 <strncmp+0x1c>
 8009692:	3301      	adds	r3, #1
 8009694:	2c00      	cmp	r4, #0
 8009696:	d1f6      	bne.n	8009686 <strncmp+0xa>
 8009698:	1b63      	subs	r3, r4, r5
 800969a:	0018      	movs	r0, r3
 800969c:	bd30      	pop	{r4, r5, pc}

0800969e <quorem>:
 800969e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a0:	6903      	ldr	r3, [r0, #16]
 80096a2:	690c      	ldr	r4, [r1, #16]
 80096a4:	b089      	sub	sp, #36	; 0x24
 80096a6:	0007      	movs	r7, r0
 80096a8:	9105      	str	r1, [sp, #20]
 80096aa:	2600      	movs	r6, #0
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	db65      	blt.n	800977c <quorem+0xde>
 80096b0:	000b      	movs	r3, r1
 80096b2:	3c01      	subs	r4, #1
 80096b4:	3314      	adds	r3, #20
 80096b6:	00a5      	lsls	r5, r4, #2
 80096b8:	9303      	str	r3, [sp, #12]
 80096ba:	195b      	adds	r3, r3, r5
 80096bc:	9304      	str	r3, [sp, #16]
 80096be:	0003      	movs	r3, r0
 80096c0:	3314      	adds	r3, #20
 80096c2:	9302      	str	r3, [sp, #8]
 80096c4:	195d      	adds	r5, r3, r5
 80096c6:	9b04      	ldr	r3, [sp, #16]
 80096c8:	6828      	ldr	r0, [r5, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	1c59      	adds	r1, r3, #1
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	f7f6 fd2c 	bl	800012c <__udivsi3>
 80096d4:	9001      	str	r0, [sp, #4]
 80096d6:	42b0      	cmp	r0, r6
 80096d8:	d029      	beq.n	800972e <quorem+0x90>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	9802      	ldr	r0, [sp, #8]
 80096de:	469c      	mov	ip, r3
 80096e0:	9606      	str	r6, [sp, #24]
 80096e2:	4662      	mov	r2, ip
 80096e4:	ca08      	ldmia	r2!, {r3}
 80096e6:	4694      	mov	ip, r2
 80096e8:	9a01      	ldr	r2, [sp, #4]
 80096ea:	b299      	uxth	r1, r3
 80096ec:	4351      	muls	r1, r2
 80096ee:	0c1b      	lsrs	r3, r3, #16
 80096f0:	4353      	muls	r3, r2
 80096f2:	1989      	adds	r1, r1, r6
 80096f4:	0c0a      	lsrs	r2, r1, #16
 80096f6:	189b      	adds	r3, r3, r2
 80096f8:	9307      	str	r3, [sp, #28]
 80096fa:	0c1e      	lsrs	r6, r3, #16
 80096fc:	6803      	ldr	r3, [r0, #0]
 80096fe:	b289      	uxth	r1, r1
 8009700:	b29a      	uxth	r2, r3
 8009702:	9b06      	ldr	r3, [sp, #24]
 8009704:	18d2      	adds	r2, r2, r3
 8009706:	6803      	ldr	r3, [r0, #0]
 8009708:	1a52      	subs	r2, r2, r1
 800970a:	0c19      	lsrs	r1, r3, #16
 800970c:	466b      	mov	r3, sp
 800970e:	8b9b      	ldrh	r3, [r3, #28]
 8009710:	1acb      	subs	r3, r1, r3
 8009712:	1411      	asrs	r1, r2, #16
 8009714:	185b      	adds	r3, r3, r1
 8009716:	1419      	asrs	r1, r3, #16
 8009718:	b292      	uxth	r2, r2
 800971a:	041b      	lsls	r3, r3, #16
 800971c:	431a      	orrs	r2, r3
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	9106      	str	r1, [sp, #24]
 8009722:	c004      	stmia	r0!, {r2}
 8009724:	4563      	cmp	r3, ip
 8009726:	d2dc      	bcs.n	80096e2 <quorem+0x44>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d02d      	beq.n	800978a <quorem+0xec>
 800972e:	9905      	ldr	r1, [sp, #20]
 8009730:	0038      	movs	r0, r7
 8009732:	f001 f851 	bl	800a7d8 <__mcmp>
 8009736:	2800      	cmp	r0, #0
 8009738:	db1f      	blt.n	800977a <quorem+0xdc>
 800973a:	2500      	movs	r5, #0
 800973c:	9b01      	ldr	r3, [sp, #4]
 800973e:	9802      	ldr	r0, [sp, #8]
 8009740:	3301      	adds	r3, #1
 8009742:	9903      	ldr	r1, [sp, #12]
 8009744:	9301      	str	r3, [sp, #4]
 8009746:	6802      	ldr	r2, [r0, #0]
 8009748:	c908      	ldmia	r1!, {r3}
 800974a:	b292      	uxth	r2, r2
 800974c:	1955      	adds	r5, r2, r5
 800974e:	b29a      	uxth	r2, r3
 8009750:	1aaa      	subs	r2, r5, r2
 8009752:	6805      	ldr	r5, [r0, #0]
 8009754:	0c1b      	lsrs	r3, r3, #16
 8009756:	0c2d      	lsrs	r5, r5, #16
 8009758:	1aeb      	subs	r3, r5, r3
 800975a:	1415      	asrs	r5, r2, #16
 800975c:	195b      	adds	r3, r3, r5
 800975e:	141d      	asrs	r5, r3, #16
 8009760:	b292      	uxth	r2, r2
 8009762:	041b      	lsls	r3, r3, #16
 8009764:	4313      	orrs	r3, r2
 8009766:	c008      	stmia	r0!, {r3}
 8009768:	9b04      	ldr	r3, [sp, #16]
 800976a:	428b      	cmp	r3, r1
 800976c:	d2eb      	bcs.n	8009746 <quorem+0xa8>
 800976e:	9a02      	ldr	r2, [sp, #8]
 8009770:	00a3      	lsls	r3, r4, #2
 8009772:	18d3      	adds	r3, r2, r3
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	2a00      	cmp	r2, #0
 8009778:	d011      	beq.n	800979e <quorem+0x100>
 800977a:	9e01      	ldr	r6, [sp, #4]
 800977c:	0030      	movs	r0, r6
 800977e:	b009      	add	sp, #36	; 0x24
 8009780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009782:	682b      	ldr	r3, [r5, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d104      	bne.n	8009792 <quorem+0xf4>
 8009788:	3c01      	subs	r4, #1
 800978a:	9b02      	ldr	r3, [sp, #8]
 800978c:	3d04      	subs	r5, #4
 800978e:	42ab      	cmp	r3, r5
 8009790:	d3f7      	bcc.n	8009782 <quorem+0xe4>
 8009792:	613c      	str	r4, [r7, #16]
 8009794:	e7cb      	b.n	800972e <quorem+0x90>
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	2a00      	cmp	r2, #0
 800979a:	d104      	bne.n	80097a6 <quorem+0x108>
 800979c:	3c01      	subs	r4, #1
 800979e:	9a02      	ldr	r2, [sp, #8]
 80097a0:	3b04      	subs	r3, #4
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d3f7      	bcc.n	8009796 <quorem+0xf8>
 80097a6:	613c      	str	r4, [r7, #16]
 80097a8:	e7e7      	b.n	800977a <quorem+0xdc>
	...

080097ac <_dtoa_r>:
 80097ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ae:	0016      	movs	r6, r2
 80097b0:	001f      	movs	r7, r3
 80097b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097b4:	b09b      	sub	sp, #108	; 0x6c
 80097b6:	9002      	str	r0, [sp, #8]
 80097b8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80097ba:	9606      	str	r6, [sp, #24]
 80097bc:	9707      	str	r7, [sp, #28]
 80097be:	2c00      	cmp	r4, #0
 80097c0:	d108      	bne.n	80097d4 <_dtoa_r+0x28>
 80097c2:	2010      	movs	r0, #16
 80097c4:	f000 fdde 	bl	800a384 <malloc>
 80097c8:	9b02      	ldr	r3, [sp, #8]
 80097ca:	6258      	str	r0, [r3, #36]	; 0x24
 80097cc:	6044      	str	r4, [r0, #4]
 80097ce:	6084      	str	r4, [r0, #8]
 80097d0:	6004      	str	r4, [r0, #0]
 80097d2:	60c4      	str	r4, [r0, #12]
 80097d4:	9b02      	ldr	r3, [sp, #8]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d8:	6819      	ldr	r1, [r3, #0]
 80097da:	2900      	cmp	r1, #0
 80097dc:	d00b      	beq.n	80097f6 <_dtoa_r+0x4a>
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	2301      	movs	r3, #1
 80097e2:	4093      	lsls	r3, r2
 80097e4:	604a      	str	r2, [r1, #4]
 80097e6:	608b      	str	r3, [r1, #8]
 80097e8:	9802      	ldr	r0, [sp, #8]
 80097ea:	f000 fe18 	bl	800a41e <_Bfree>
 80097ee:	2200      	movs	r2, #0
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	2f00      	cmp	r7, #0
 80097f8:	da20      	bge.n	800983c <_dtoa_r+0x90>
 80097fa:	2301      	movs	r3, #1
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	007b      	lsls	r3, r7, #1
 8009800:	085b      	lsrs	r3, r3, #1
 8009802:	9307      	str	r3, [sp, #28]
 8009804:	9c07      	ldr	r4, [sp, #28]
 8009806:	4bb2      	ldr	r3, [pc, #712]	; (8009ad0 <_dtoa_r+0x324>)
 8009808:	0022      	movs	r2, r4
 800980a:	9317      	str	r3, [sp, #92]	; 0x5c
 800980c:	401a      	ands	r2, r3
 800980e:	429a      	cmp	r2, r3
 8009810:	d117      	bne.n	8009842 <_dtoa_r+0x96>
 8009812:	4bb0      	ldr	r3, [pc, #704]	; (8009ad4 <_dtoa_r+0x328>)
 8009814:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	9b06      	ldr	r3, [sp, #24]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d103      	bne.n	8009826 <_dtoa_r+0x7a>
 800981e:	0324      	lsls	r4, r4, #12
 8009820:	d101      	bne.n	8009826 <_dtoa_r+0x7a>
 8009822:	f000 fd87 	bl	800a334 <_dtoa_r+0xb88>
 8009826:	4bac      	ldr	r3, [pc, #688]	; (8009ad8 <_dtoa_r+0x32c>)
 8009828:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800982a:	9308      	str	r3, [sp, #32]
 800982c:	2a00      	cmp	r2, #0
 800982e:	d002      	beq.n	8009836 <_dtoa_r+0x8a>
 8009830:	4baa      	ldr	r3, [pc, #680]	; (8009adc <_dtoa_r+0x330>)
 8009832:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	9808      	ldr	r0, [sp, #32]
 8009838:	b01b      	add	sp, #108	; 0x6c
 800983a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800983c:	2300      	movs	r3, #0
 800983e:	602b      	str	r3, [r5, #0]
 8009840:	e7e0      	b.n	8009804 <_dtoa_r+0x58>
 8009842:	9e06      	ldr	r6, [sp, #24]
 8009844:	9f07      	ldr	r7, [sp, #28]
 8009846:	2200      	movs	r2, #0
 8009848:	2300      	movs	r3, #0
 800984a:	0030      	movs	r0, r6
 800984c:	0039      	movs	r1, r7
 800984e:	f7f6 fdf3 	bl	8000438 <__aeabi_dcmpeq>
 8009852:	1e05      	subs	r5, r0, #0
 8009854:	d00b      	beq.n	800986e <_dtoa_r+0xc2>
 8009856:	2301      	movs	r3, #1
 8009858:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800985a:	6013      	str	r3, [r2, #0]
 800985c:	4ba0      	ldr	r3, [pc, #640]	; (8009ae0 <_dtoa_r+0x334>)
 800985e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009860:	9308      	str	r3, [sp, #32]
 8009862:	2a00      	cmp	r2, #0
 8009864:	d0e7      	beq.n	8009836 <_dtoa_r+0x8a>
 8009866:	4a9f      	ldr	r2, [pc, #636]	; (8009ae4 <_dtoa_r+0x338>)
 8009868:	9924      	ldr	r1, [sp, #144]	; 0x90
 800986a:	600a      	str	r2, [r1, #0]
 800986c:	e7e3      	b.n	8009836 <_dtoa_r+0x8a>
 800986e:	ab18      	add	r3, sp, #96	; 0x60
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	ab19      	add	r3, sp, #100	; 0x64
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	0032      	movs	r2, r6
 8009878:	003b      	movs	r3, r7
 800987a:	9802      	ldr	r0, [sp, #8]
 800987c:	f001 f82a 	bl	800a8d4 <__d2b>
 8009880:	0063      	lsls	r3, r4, #1
 8009882:	9003      	str	r0, [sp, #12]
 8009884:	0d5b      	lsrs	r3, r3, #21
 8009886:	d074      	beq.n	8009972 <_dtoa_r+0x1c6>
 8009888:	033a      	lsls	r2, r7, #12
 800988a:	4c97      	ldr	r4, [pc, #604]	; (8009ae8 <_dtoa_r+0x33c>)
 800988c:	0b12      	lsrs	r2, r2, #12
 800988e:	4314      	orrs	r4, r2
 8009890:	0021      	movs	r1, r4
 8009892:	4a96      	ldr	r2, [pc, #600]	; (8009aec <_dtoa_r+0x340>)
 8009894:	0030      	movs	r0, r6
 8009896:	9516      	str	r5, [sp, #88]	; 0x58
 8009898:	189e      	adds	r6, r3, r2
 800989a:	2200      	movs	r2, #0
 800989c:	4b94      	ldr	r3, [pc, #592]	; (8009af0 <_dtoa_r+0x344>)
 800989e:	f7f8 fc11 	bl	80020c4 <__aeabi_dsub>
 80098a2:	4a94      	ldr	r2, [pc, #592]	; (8009af4 <_dtoa_r+0x348>)
 80098a4:	4b94      	ldr	r3, [pc, #592]	; (8009af8 <_dtoa_r+0x34c>)
 80098a6:	f7f8 f99b 	bl	8001be0 <__aeabi_dmul>
 80098aa:	4a94      	ldr	r2, [pc, #592]	; (8009afc <_dtoa_r+0x350>)
 80098ac:	4b94      	ldr	r3, [pc, #592]	; (8009b00 <_dtoa_r+0x354>)
 80098ae:	f7f7 fa71 	bl	8000d94 <__aeabi_dadd>
 80098b2:	0004      	movs	r4, r0
 80098b4:	0030      	movs	r0, r6
 80098b6:	000d      	movs	r5, r1
 80098b8:	f7f8 ff9e 	bl	80027f8 <__aeabi_i2d>
 80098bc:	4a91      	ldr	r2, [pc, #580]	; (8009b04 <_dtoa_r+0x358>)
 80098be:	4b92      	ldr	r3, [pc, #584]	; (8009b08 <_dtoa_r+0x35c>)
 80098c0:	f7f8 f98e 	bl	8001be0 <__aeabi_dmul>
 80098c4:	0002      	movs	r2, r0
 80098c6:	000b      	movs	r3, r1
 80098c8:	0020      	movs	r0, r4
 80098ca:	0029      	movs	r1, r5
 80098cc:	f7f7 fa62 	bl	8000d94 <__aeabi_dadd>
 80098d0:	0004      	movs	r4, r0
 80098d2:	000d      	movs	r5, r1
 80098d4:	f7f8 ff5a 	bl	800278c <__aeabi_d2iz>
 80098d8:	2200      	movs	r2, #0
 80098da:	0007      	movs	r7, r0
 80098dc:	2300      	movs	r3, #0
 80098de:	0020      	movs	r0, r4
 80098e0:	0029      	movs	r1, r5
 80098e2:	f7f6 fdaf 	bl	8000444 <__aeabi_dcmplt>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d009      	beq.n	80098fe <_dtoa_r+0x152>
 80098ea:	0038      	movs	r0, r7
 80098ec:	f7f8 ff84 	bl	80027f8 <__aeabi_i2d>
 80098f0:	002b      	movs	r3, r5
 80098f2:	0022      	movs	r2, r4
 80098f4:	f7f6 fda0 	bl	8000438 <__aeabi_dcmpeq>
 80098f8:	4243      	negs	r3, r0
 80098fa:	4158      	adcs	r0, r3
 80098fc:	1a3f      	subs	r7, r7, r0
 80098fe:	2301      	movs	r3, #1
 8009900:	9314      	str	r3, [sp, #80]	; 0x50
 8009902:	2f16      	cmp	r7, #22
 8009904:	d80d      	bhi.n	8009922 <_dtoa_r+0x176>
 8009906:	4981      	ldr	r1, [pc, #516]	; (8009b0c <_dtoa_r+0x360>)
 8009908:	00fb      	lsls	r3, r7, #3
 800990a:	18c9      	adds	r1, r1, r3
 800990c:	6808      	ldr	r0, [r1, #0]
 800990e:	6849      	ldr	r1, [r1, #4]
 8009910:	9a06      	ldr	r2, [sp, #24]
 8009912:	9b07      	ldr	r3, [sp, #28]
 8009914:	f7f6 fdaa 	bl	800046c <__aeabi_dcmpgt>
 8009918:	2800      	cmp	r0, #0
 800991a:	d046      	beq.n	80099aa <_dtoa_r+0x1fe>
 800991c:	2300      	movs	r3, #0
 800991e:	3f01      	subs	r7, #1
 8009920:	9314      	str	r3, [sp, #80]	; 0x50
 8009922:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009924:	1b9e      	subs	r6, r3, r6
 8009926:	2300      	movs	r3, #0
 8009928:	930a      	str	r3, [sp, #40]	; 0x28
 800992a:	0033      	movs	r3, r6
 800992c:	3b01      	subs	r3, #1
 800992e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009930:	d504      	bpl.n	800993c <_dtoa_r+0x190>
 8009932:	2301      	movs	r3, #1
 8009934:	1b9b      	subs	r3, r3, r6
 8009936:	930a      	str	r3, [sp, #40]	; 0x28
 8009938:	2300      	movs	r3, #0
 800993a:	930b      	str	r3, [sp, #44]	; 0x2c
 800993c:	2f00      	cmp	r7, #0
 800993e:	db36      	blt.n	80099ae <_dtoa_r+0x202>
 8009940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009942:	9711      	str	r7, [sp, #68]	; 0x44
 8009944:	19db      	adds	r3, r3, r7
 8009946:	930b      	str	r3, [sp, #44]	; 0x2c
 8009948:	2300      	movs	r3, #0
 800994a:	9304      	str	r3, [sp, #16]
 800994c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800994e:	2401      	movs	r4, #1
 8009950:	2b09      	cmp	r3, #9
 8009952:	d900      	bls.n	8009956 <_dtoa_r+0x1aa>
 8009954:	e084      	b.n	8009a60 <_dtoa_r+0x2b4>
 8009956:	2b05      	cmp	r3, #5
 8009958:	dd02      	ble.n	8009960 <_dtoa_r+0x1b4>
 800995a:	2400      	movs	r4, #0
 800995c:	3b04      	subs	r3, #4
 800995e:	9320      	str	r3, [sp, #128]	; 0x80
 8009960:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009962:	1e98      	subs	r0, r3, #2
 8009964:	2803      	cmp	r0, #3
 8009966:	d900      	bls.n	800996a <_dtoa_r+0x1be>
 8009968:	e084      	b.n	8009a74 <_dtoa_r+0x2c8>
 800996a:	f7f6 fbd5 	bl	8000118 <__gnu_thumb1_case_uqi>
 800996e:	7775      	.short	0x7775
 8009970:	6a28      	.short	0x6a28
 8009972:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009974:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009976:	189e      	adds	r6, r3, r2
 8009978:	4b65      	ldr	r3, [pc, #404]	; (8009b10 <_dtoa_r+0x364>)
 800997a:	18f2      	adds	r2, r6, r3
 800997c:	2a20      	cmp	r2, #32
 800997e:	dd0f      	ble.n	80099a0 <_dtoa_r+0x1f4>
 8009980:	2340      	movs	r3, #64	; 0x40
 8009982:	1a9b      	subs	r3, r3, r2
 8009984:	409c      	lsls	r4, r3
 8009986:	4b63      	ldr	r3, [pc, #396]	; (8009b14 <_dtoa_r+0x368>)
 8009988:	9806      	ldr	r0, [sp, #24]
 800998a:	18f3      	adds	r3, r6, r3
 800998c:	40d8      	lsrs	r0, r3
 800998e:	4320      	orrs	r0, r4
 8009990:	f7f8 ff6c 	bl	800286c <__aeabi_ui2d>
 8009994:	2301      	movs	r3, #1
 8009996:	4c60      	ldr	r4, [pc, #384]	; (8009b18 <_dtoa_r+0x36c>)
 8009998:	3e01      	subs	r6, #1
 800999a:	1909      	adds	r1, r1, r4
 800999c:	9316      	str	r3, [sp, #88]	; 0x58
 800999e:	e77c      	b.n	800989a <_dtoa_r+0xee>
 80099a0:	2320      	movs	r3, #32
 80099a2:	9806      	ldr	r0, [sp, #24]
 80099a4:	1a9b      	subs	r3, r3, r2
 80099a6:	4098      	lsls	r0, r3
 80099a8:	e7f2      	b.n	8009990 <_dtoa_r+0x1e4>
 80099aa:	9014      	str	r0, [sp, #80]	; 0x50
 80099ac:	e7b9      	b.n	8009922 <_dtoa_r+0x176>
 80099ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b0:	1bdb      	subs	r3, r3, r7
 80099b2:	930a      	str	r3, [sp, #40]	; 0x28
 80099b4:	427b      	negs	r3, r7
 80099b6:	9304      	str	r3, [sp, #16]
 80099b8:	2300      	movs	r3, #0
 80099ba:	9311      	str	r3, [sp, #68]	; 0x44
 80099bc:	e7c6      	b.n	800994c <_dtoa_r+0x1a0>
 80099be:	2301      	movs	r3, #1
 80099c0:	930d      	str	r3, [sp, #52]	; 0x34
 80099c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	dd59      	ble.n	8009a7c <_dtoa_r+0x2d0>
 80099c8:	930c      	str	r3, [sp, #48]	; 0x30
 80099ca:	9309      	str	r3, [sp, #36]	; 0x24
 80099cc:	9a02      	ldr	r2, [sp, #8]
 80099ce:	6a55      	ldr	r5, [r2, #36]	; 0x24
 80099d0:	2200      	movs	r2, #0
 80099d2:	606a      	str	r2, [r5, #4]
 80099d4:	3204      	adds	r2, #4
 80099d6:	0010      	movs	r0, r2
 80099d8:	3014      	adds	r0, #20
 80099da:	6869      	ldr	r1, [r5, #4]
 80099dc:	4298      	cmp	r0, r3
 80099de:	d952      	bls.n	8009a86 <_dtoa_r+0x2da>
 80099e0:	9802      	ldr	r0, [sp, #8]
 80099e2:	f000 fce4 	bl	800a3ae <_Balloc>
 80099e6:	9b02      	ldr	r3, [sp, #8]
 80099e8:	6028      	str	r0, [r5, #0]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	9308      	str	r3, [sp, #32]
 80099f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f2:	2b0e      	cmp	r3, #14
 80099f4:	d900      	bls.n	80099f8 <_dtoa_r+0x24c>
 80099f6:	e10a      	b.n	8009c0e <_dtoa_r+0x462>
 80099f8:	2c00      	cmp	r4, #0
 80099fa:	d100      	bne.n	80099fe <_dtoa_r+0x252>
 80099fc:	e107      	b.n	8009c0e <_dtoa_r+0x462>
 80099fe:	9b06      	ldr	r3, [sp, #24]
 8009a00:	9c07      	ldr	r4, [sp, #28]
 8009a02:	9312      	str	r3, [sp, #72]	; 0x48
 8009a04:	9413      	str	r4, [sp, #76]	; 0x4c
 8009a06:	2f00      	cmp	r7, #0
 8009a08:	dc00      	bgt.n	8009a0c <_dtoa_r+0x260>
 8009a0a:	e089      	b.n	8009b20 <_dtoa_r+0x374>
 8009a0c:	210f      	movs	r1, #15
 8009a0e:	003a      	movs	r2, r7
 8009a10:	4b3e      	ldr	r3, [pc, #248]	; (8009b0c <_dtoa_r+0x360>)
 8009a12:	400a      	ands	r2, r1
 8009a14:	00d2      	lsls	r2, r2, #3
 8009a16:	189b      	adds	r3, r3, r2
 8009a18:	681d      	ldr	r5, [r3, #0]
 8009a1a:	685e      	ldr	r6, [r3, #4]
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	113c      	asrs	r4, r7, #4
 8009a20:	930e      	str	r3, [sp, #56]	; 0x38
 8009a22:	06e3      	lsls	r3, r4, #27
 8009a24:	d50b      	bpl.n	8009a3e <_dtoa_r+0x292>
 8009a26:	4b3d      	ldr	r3, [pc, #244]	; (8009b1c <_dtoa_r+0x370>)
 8009a28:	400c      	ands	r4, r1
 8009a2a:	6a1a      	ldr	r2, [r3, #32]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009a30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009a32:	f7f7 fccb 	bl	80013cc <__aeabi_ddiv>
 8009a36:	2303      	movs	r3, #3
 8009a38:	9006      	str	r0, [sp, #24]
 8009a3a:	9107      	str	r1, [sp, #28]
 8009a3c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a3e:	2300      	movs	r3, #0
 8009a40:	e03a      	b.n	8009ab8 <_dtoa_r+0x30c>
 8009a42:	2301      	movs	r3, #1
 8009a44:	930d      	str	r3, [sp, #52]	; 0x34
 8009a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a48:	18fb      	adds	r3, r7, r3
 8009a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	dcbb      	bgt.n	80099cc <_dtoa_r+0x220>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e7b9      	b.n	80099cc <_dtoa_r+0x220>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	e7b1      	b.n	80099c0 <_dtoa_r+0x214>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	e7f1      	b.n	8009a44 <_dtoa_r+0x298>
 8009a60:	2300      	movs	r3, #0
 8009a62:	940d      	str	r4, [sp, #52]	; 0x34
 8009a64:	9320      	str	r3, [sp, #128]	; 0x80
 8009a66:	3b01      	subs	r3, #1
 8009a68:	2200      	movs	r2, #0
 8009a6a:	930c      	str	r3, [sp, #48]	; 0x30
 8009a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6e:	3313      	adds	r3, #19
 8009a70:	9221      	str	r2, [sp, #132]	; 0x84
 8009a72:	e7ab      	b.n	80099cc <_dtoa_r+0x220>
 8009a74:	2301      	movs	r3, #1
 8009a76:	930d      	str	r3, [sp, #52]	; 0x34
 8009a78:	3b02      	subs	r3, #2
 8009a7a:	e7f5      	b.n	8009a68 <_dtoa_r+0x2bc>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009a80:	9309      	str	r3, [sp, #36]	; 0x24
 8009a82:	001a      	movs	r2, r3
 8009a84:	e7f4      	b.n	8009a70 <_dtoa_r+0x2c4>
 8009a86:	3101      	adds	r1, #1
 8009a88:	6069      	str	r1, [r5, #4]
 8009a8a:	0052      	lsls	r2, r2, #1
 8009a8c:	e7a3      	b.n	80099d6 <_dtoa_r+0x22a>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	421c      	tst	r4, r3
 8009a92:	d00e      	beq.n	8009ab2 <_dtoa_r+0x306>
 8009a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a96:	4a21      	ldr	r2, [pc, #132]	; (8009b1c <_dtoa_r+0x370>)
 8009a98:	3301      	adds	r3, #1
 8009a9a:	930e      	str	r3, [sp, #56]	; 0x38
 8009a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a9e:	0028      	movs	r0, r5
 8009aa0:	00db      	lsls	r3, r3, #3
 8009aa2:	189b      	adds	r3, r3, r2
 8009aa4:	0031      	movs	r1, r6
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f7f8 f899 	bl	8001be0 <__aeabi_dmul>
 8009aae:	0005      	movs	r5, r0
 8009ab0:	000e      	movs	r6, r1
 8009ab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ab4:	1064      	asrs	r4, r4, #1
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	9310      	str	r3, [sp, #64]	; 0x40
 8009aba:	2c00      	cmp	r4, #0
 8009abc:	d1e7      	bne.n	8009a8e <_dtoa_r+0x2e2>
 8009abe:	9806      	ldr	r0, [sp, #24]
 8009ac0:	9907      	ldr	r1, [sp, #28]
 8009ac2:	002a      	movs	r2, r5
 8009ac4:	0033      	movs	r3, r6
 8009ac6:	f7f7 fc81 	bl	80013cc <__aeabi_ddiv>
 8009aca:	9006      	str	r0, [sp, #24]
 8009acc:	9107      	str	r1, [sp, #28]
 8009ace:	e042      	b.n	8009b56 <_dtoa_r+0x3aa>
 8009ad0:	7ff00000 	.word	0x7ff00000
 8009ad4:	0000270f 	.word	0x0000270f
 8009ad8:	0800b0e9 	.word	0x0800b0e9
 8009adc:	0800b0ec 	.word	0x0800b0ec
 8009ae0:	0800b0bc 	.word	0x0800b0bc
 8009ae4:	0800b0bd 	.word	0x0800b0bd
 8009ae8:	3ff00000 	.word	0x3ff00000
 8009aec:	fffffc01 	.word	0xfffffc01
 8009af0:	3ff80000 	.word	0x3ff80000
 8009af4:	636f4361 	.word	0x636f4361
 8009af8:	3fd287a7 	.word	0x3fd287a7
 8009afc:	8b60c8b3 	.word	0x8b60c8b3
 8009b00:	3fc68a28 	.word	0x3fc68a28
 8009b04:	509f79fb 	.word	0x509f79fb
 8009b08:	3fd34413 	.word	0x3fd34413
 8009b0c:	0800b118 	.word	0x0800b118
 8009b10:	00000432 	.word	0x00000432
 8009b14:	00000412 	.word	0x00000412
 8009b18:	fe100000 	.word	0xfe100000
 8009b1c:	0800b0f0 	.word	0x0800b0f0
 8009b20:	2302      	movs	r3, #2
 8009b22:	930e      	str	r3, [sp, #56]	; 0x38
 8009b24:	2f00      	cmp	r7, #0
 8009b26:	d016      	beq.n	8009b56 <_dtoa_r+0x3aa>
 8009b28:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009b2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009b2c:	427c      	negs	r4, r7
 8009b2e:	330d      	adds	r3, #13
 8009b30:	4023      	ands	r3, r4
 8009b32:	4ace      	ldr	r2, [pc, #824]	; (8009e6c <_dtoa_r+0x6c0>)
 8009b34:	00db      	lsls	r3, r3, #3
 8009b36:	18d3      	adds	r3, r2, r3
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f7f8 f850 	bl	8001be0 <__aeabi_dmul>
 8009b40:	2300      	movs	r3, #0
 8009b42:	2601      	movs	r6, #1
 8009b44:	001d      	movs	r5, r3
 8009b46:	9006      	str	r0, [sp, #24]
 8009b48:	9107      	str	r1, [sp, #28]
 8009b4a:	1124      	asrs	r4, r4, #4
 8009b4c:	2c00      	cmp	r4, #0
 8009b4e:	d000      	beq.n	8009b52 <_dtoa_r+0x3a6>
 8009b50:	e08c      	b.n	8009c6c <_dtoa_r+0x4c0>
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1b9      	bne.n	8009aca <_dtoa_r+0x31e>
 8009b56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d100      	bne.n	8009b5e <_dtoa_r+0x3b2>
 8009b5c:	e096      	b.n	8009c8c <_dtoa_r+0x4e0>
 8009b5e:	9c06      	ldr	r4, [sp, #24]
 8009b60:	9d07      	ldr	r5, [sp, #28]
 8009b62:	2200      	movs	r2, #0
 8009b64:	4bc2      	ldr	r3, [pc, #776]	; (8009e70 <_dtoa_r+0x6c4>)
 8009b66:	0020      	movs	r0, r4
 8009b68:	0029      	movs	r1, r5
 8009b6a:	f7f6 fc6b 	bl	8000444 <__aeabi_dcmplt>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d100      	bne.n	8009b74 <_dtoa_r+0x3c8>
 8009b72:	e08b      	b.n	8009c8c <_dtoa_r+0x4e0>
 8009b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d100      	bne.n	8009b7c <_dtoa_r+0x3d0>
 8009b7a:	e087      	b.n	8009c8c <_dtoa_r+0x4e0>
 8009b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	dd41      	ble.n	8009c06 <_dtoa_r+0x45a>
 8009b82:	4bbc      	ldr	r3, [pc, #752]	; (8009e74 <_dtoa_r+0x6c8>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	0020      	movs	r0, r4
 8009b88:	0029      	movs	r1, r5
 8009b8a:	f7f8 f829 	bl	8001be0 <__aeabi_dmul>
 8009b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b90:	9006      	str	r0, [sp, #24]
 8009b92:	9107      	str	r1, [sp, #28]
 8009b94:	3301      	adds	r3, #1
 8009b96:	930e      	str	r3, [sp, #56]	; 0x38
 8009b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b9a:	1e7e      	subs	r6, r7, #1
 8009b9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009b9e:	9310      	str	r3, [sp, #64]	; 0x40
 8009ba0:	f7f8 fe2a 	bl	80027f8 <__aeabi_i2d>
 8009ba4:	9a06      	ldr	r2, [sp, #24]
 8009ba6:	9b07      	ldr	r3, [sp, #28]
 8009ba8:	f7f8 f81a 	bl	8001be0 <__aeabi_dmul>
 8009bac:	2200      	movs	r2, #0
 8009bae:	4bb2      	ldr	r3, [pc, #712]	; (8009e78 <_dtoa_r+0x6cc>)
 8009bb0:	f7f7 f8f0 	bl	8000d94 <__aeabi_dadd>
 8009bb4:	4ab1      	ldr	r2, [pc, #708]	; (8009e7c <_dtoa_r+0x6d0>)
 8009bb6:	900e      	str	r0, [sp, #56]	; 0x38
 8009bb8:	910f      	str	r1, [sp, #60]	; 0x3c
 8009bba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009bbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bbe:	4694      	mov	ip, r2
 8009bc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bc2:	4463      	add	r3, ip
 8009bc4:	9315      	str	r3, [sp, #84]	; 0x54
 8009bc6:	001d      	movs	r5, r3
 8009bc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d161      	bne.n	8009c92 <_dtoa_r+0x4e6>
 8009bce:	9806      	ldr	r0, [sp, #24]
 8009bd0:	9907      	ldr	r1, [sp, #28]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	4baa      	ldr	r3, [pc, #680]	; (8009e80 <_dtoa_r+0x6d4>)
 8009bd6:	f7f8 fa75 	bl	80020c4 <__aeabi_dsub>
 8009bda:	0022      	movs	r2, r4
 8009bdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bde:	9006      	str	r0, [sp, #24]
 8009be0:	9107      	str	r1, [sp, #28]
 8009be2:	f7f6 fc43 	bl	800046c <__aeabi_dcmpgt>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d000      	beq.n	8009bec <_dtoa_r+0x440>
 8009bea:	e2a8      	b.n	800a13e <_dtoa_r+0x992>
 8009bec:	48a5      	ldr	r0, [pc, #660]	; (8009e84 <_dtoa_r+0x6d8>)
 8009bee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009bf0:	4684      	mov	ip, r0
 8009bf2:	4461      	add	r1, ip
 8009bf4:	000b      	movs	r3, r1
 8009bf6:	9806      	ldr	r0, [sp, #24]
 8009bf8:	9907      	ldr	r1, [sp, #28]
 8009bfa:	0022      	movs	r2, r4
 8009bfc:	f7f6 fc22 	bl	8000444 <__aeabi_dcmplt>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d000      	beq.n	8009c06 <_dtoa_r+0x45a>
 8009c04:	e295      	b.n	800a132 <_dtoa_r+0x986>
 8009c06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c08:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009c0a:	9306      	str	r3, [sp, #24]
 8009c0c:	9407      	str	r4, [sp, #28]
 8009c0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	da00      	bge.n	8009c16 <_dtoa_r+0x46a>
 8009c14:	e15c      	b.n	8009ed0 <_dtoa_r+0x724>
 8009c16:	2f0e      	cmp	r7, #14
 8009c18:	dd00      	ble.n	8009c1c <_dtoa_r+0x470>
 8009c1a:	e159      	b.n	8009ed0 <_dtoa_r+0x724>
 8009c1c:	4b93      	ldr	r3, [pc, #588]	; (8009e6c <_dtoa_r+0x6c0>)
 8009c1e:	00fa      	lsls	r2, r7, #3
 8009c20:	189b      	adds	r3, r3, r2
 8009c22:	685c      	ldr	r4, [r3, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	9304      	str	r3, [sp, #16]
 8009c28:	9405      	str	r4, [sp, #20]
 8009c2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	db00      	blt.n	8009c32 <_dtoa_r+0x486>
 8009c30:	e0d8      	b.n	8009de4 <_dtoa_r+0x638>
 8009c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	dd00      	ble.n	8009c3a <_dtoa_r+0x48e>
 8009c38:	e0d4      	b.n	8009de4 <_dtoa_r+0x638>
 8009c3a:	d000      	beq.n	8009c3e <_dtoa_r+0x492>
 8009c3c:	e27d      	b.n	800a13a <_dtoa_r+0x98e>
 8009c3e:	9804      	ldr	r0, [sp, #16]
 8009c40:	9905      	ldr	r1, [sp, #20]
 8009c42:	2200      	movs	r2, #0
 8009c44:	4b8e      	ldr	r3, [pc, #568]	; (8009e80 <_dtoa_r+0x6d4>)
 8009c46:	f7f7 ffcb 	bl	8001be0 <__aeabi_dmul>
 8009c4a:	9a06      	ldr	r2, [sp, #24]
 8009c4c:	9b07      	ldr	r3, [sp, #28]
 8009c4e:	f7f6 fc17 	bl	8000480 <__aeabi_dcmpge>
 8009c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c54:	9304      	str	r3, [sp, #16]
 8009c56:	001e      	movs	r6, r3
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d000      	beq.n	8009c5e <_dtoa_r+0x4b2>
 8009c5c:	e24f      	b.n	800a0fe <_dtoa_r+0x952>
 8009c5e:	9b08      	ldr	r3, [sp, #32]
 8009c60:	9a08      	ldr	r2, [sp, #32]
 8009c62:	1c5d      	adds	r5, r3, #1
 8009c64:	2331      	movs	r3, #49	; 0x31
 8009c66:	3701      	adds	r7, #1
 8009c68:	7013      	strb	r3, [r2, #0]
 8009c6a:	e24b      	b.n	800a104 <_dtoa_r+0x958>
 8009c6c:	4234      	tst	r4, r6
 8009c6e:	d00a      	beq.n	8009c86 <_dtoa_r+0x4da>
 8009c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c72:	4a85      	ldr	r2, [pc, #532]	; (8009e88 <_dtoa_r+0x6dc>)
 8009c74:	3301      	adds	r3, #1
 8009c76:	930e      	str	r3, [sp, #56]	; 0x38
 8009c78:	00eb      	lsls	r3, r5, #3
 8009c7a:	189b      	adds	r3, r3, r2
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f7f7 ffae 	bl	8001be0 <__aeabi_dmul>
 8009c84:	0033      	movs	r3, r6
 8009c86:	1064      	asrs	r4, r4, #1
 8009c88:	3501      	adds	r5, #1
 8009c8a:	e75f      	b.n	8009b4c <_dtoa_r+0x3a0>
 8009c8c:	003e      	movs	r6, r7
 8009c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c90:	e784      	b.n	8009b9c <_dtoa_r+0x3f0>
 8009c92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c96:	1e5a      	subs	r2, r3, #1
 8009c98:	4b74      	ldr	r3, [pc, #464]	; (8009e6c <_dtoa_r+0x6c0>)
 8009c9a:	00d2      	lsls	r2, r2, #3
 8009c9c:	189b      	adds	r3, r3, r2
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	d049      	beq.n	8009d3a <_dtoa_r+0x58e>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	4978      	ldr	r1, [pc, #480]	; (8009e8c <_dtoa_r+0x6e0>)
 8009caa:	f7f7 fb8f 	bl	80013cc <__aeabi_ddiv>
 8009cae:	002b      	movs	r3, r5
 8009cb0:	0022      	movs	r2, r4
 8009cb2:	f7f8 fa07 	bl	80020c4 <__aeabi_dsub>
 8009cb6:	9b08      	ldr	r3, [sp, #32]
 8009cb8:	900e      	str	r0, [sp, #56]	; 0x38
 8009cba:	910f      	str	r1, [sp, #60]	; 0x3c
 8009cbc:	9315      	str	r3, [sp, #84]	; 0x54
 8009cbe:	9806      	ldr	r0, [sp, #24]
 8009cc0:	9907      	ldr	r1, [sp, #28]
 8009cc2:	f7f8 fd63 	bl	800278c <__aeabi_d2iz>
 8009cc6:	0004      	movs	r4, r0
 8009cc8:	f7f8 fd96 	bl	80027f8 <__aeabi_i2d>
 8009ccc:	0002      	movs	r2, r0
 8009cce:	000b      	movs	r3, r1
 8009cd0:	9806      	ldr	r0, [sp, #24]
 8009cd2:	9907      	ldr	r1, [sp, #28]
 8009cd4:	f7f8 f9f6 	bl	80020c4 <__aeabi_dsub>
 8009cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cda:	3430      	adds	r4, #48	; 0x30
 8009cdc:	1c5d      	adds	r5, r3, #1
 8009cde:	701c      	strb	r4, [r3, #0]
 8009ce0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ce4:	9006      	str	r0, [sp, #24]
 8009ce6:	9107      	str	r1, [sp, #28]
 8009ce8:	f7f6 fbac 	bl	8000444 <__aeabi_dcmplt>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d16c      	bne.n	8009dca <_dtoa_r+0x61e>
 8009cf0:	9a06      	ldr	r2, [sp, #24]
 8009cf2:	9b07      	ldr	r3, [sp, #28]
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	495e      	ldr	r1, [pc, #376]	; (8009e70 <_dtoa_r+0x6c4>)
 8009cf8:	f7f8 f9e4 	bl	80020c4 <__aeabi_dsub>
 8009cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d00:	f7f6 fba0 	bl	8000444 <__aeabi_dcmplt>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d000      	beq.n	8009d0a <_dtoa_r+0x55e>
 8009d08:	e0c3      	b.n	8009e92 <_dtoa_r+0x6e6>
 8009d0a:	9b08      	ldr	r3, [sp, #32]
 8009d0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d0e:	1aeb      	subs	r3, r5, r3
 8009d10:	429a      	cmp	r2, r3
 8009d12:	dc00      	bgt.n	8009d16 <_dtoa_r+0x56a>
 8009d14:	e777      	b.n	8009c06 <_dtoa_r+0x45a>
 8009d16:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009d18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4b55      	ldr	r3, [pc, #340]	; (8009e74 <_dtoa_r+0x6c8>)
 8009d1e:	f7f7 ff5f 	bl	8001be0 <__aeabi_dmul>
 8009d22:	2200      	movs	r2, #0
 8009d24:	900e      	str	r0, [sp, #56]	; 0x38
 8009d26:	910f      	str	r1, [sp, #60]	; 0x3c
 8009d28:	9806      	ldr	r0, [sp, #24]
 8009d2a:	9907      	ldr	r1, [sp, #28]
 8009d2c:	4b51      	ldr	r3, [pc, #324]	; (8009e74 <_dtoa_r+0x6c8>)
 8009d2e:	f7f7 ff57 	bl	8001be0 <__aeabi_dmul>
 8009d32:	9515      	str	r5, [sp, #84]	; 0x54
 8009d34:	9006      	str	r0, [sp, #24]
 8009d36:	9107      	str	r1, [sp, #28]
 8009d38:	e7c1      	b.n	8009cbe <_dtoa_r+0x512>
 8009d3a:	0020      	movs	r0, r4
 8009d3c:	0029      	movs	r1, r5
 8009d3e:	f7f7 ff4f 	bl	8001be0 <__aeabi_dmul>
 8009d42:	9c08      	ldr	r4, [sp, #32]
 8009d44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d46:	0023      	movs	r3, r4
 8009d48:	4694      	mov	ip, r2
 8009d4a:	900e      	str	r0, [sp, #56]	; 0x38
 8009d4c:	910f      	str	r1, [sp, #60]	; 0x3c
 8009d4e:	4463      	add	r3, ip
 8009d50:	9315      	str	r3, [sp, #84]	; 0x54
 8009d52:	9806      	ldr	r0, [sp, #24]
 8009d54:	9907      	ldr	r1, [sp, #28]
 8009d56:	f7f8 fd19 	bl	800278c <__aeabi_d2iz>
 8009d5a:	0005      	movs	r5, r0
 8009d5c:	f7f8 fd4c 	bl	80027f8 <__aeabi_i2d>
 8009d60:	000b      	movs	r3, r1
 8009d62:	0002      	movs	r2, r0
 8009d64:	9806      	ldr	r0, [sp, #24]
 8009d66:	9907      	ldr	r1, [sp, #28]
 8009d68:	f7f8 f9ac 	bl	80020c4 <__aeabi_dsub>
 8009d6c:	3530      	adds	r5, #48	; 0x30
 8009d6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d70:	7025      	strb	r5, [r4, #0]
 8009d72:	3401      	adds	r4, #1
 8009d74:	9006      	str	r0, [sp, #24]
 8009d76:	9107      	str	r1, [sp, #28]
 8009d78:	42a3      	cmp	r3, r4
 8009d7a:	d12a      	bne.n	8009dd2 <_dtoa_r+0x626>
 8009d7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009d7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d80:	9a08      	ldr	r2, [sp, #32]
 8009d82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d84:	4694      	mov	ip, r2
 8009d86:	4463      	add	r3, ip
 8009d88:	2200      	movs	r2, #0
 8009d8a:	001d      	movs	r5, r3
 8009d8c:	4b3f      	ldr	r3, [pc, #252]	; (8009e8c <_dtoa_r+0x6e0>)
 8009d8e:	f7f7 f801 	bl	8000d94 <__aeabi_dadd>
 8009d92:	0002      	movs	r2, r0
 8009d94:	000b      	movs	r3, r1
 8009d96:	9806      	ldr	r0, [sp, #24]
 8009d98:	9907      	ldr	r1, [sp, #28]
 8009d9a:	f7f6 fb67 	bl	800046c <__aeabi_dcmpgt>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d000      	beq.n	8009da4 <_dtoa_r+0x5f8>
 8009da2:	e076      	b.n	8009e92 <_dtoa_r+0x6e6>
 8009da4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009da6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009da8:	2000      	movs	r0, #0
 8009daa:	4938      	ldr	r1, [pc, #224]	; (8009e8c <_dtoa_r+0x6e0>)
 8009dac:	f7f8 f98a 	bl	80020c4 <__aeabi_dsub>
 8009db0:	0002      	movs	r2, r0
 8009db2:	000b      	movs	r3, r1
 8009db4:	9806      	ldr	r0, [sp, #24]
 8009db6:	9907      	ldr	r1, [sp, #28]
 8009db8:	f7f6 fb44 	bl	8000444 <__aeabi_dcmplt>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d100      	bne.n	8009dc2 <_dtoa_r+0x616>
 8009dc0:	e721      	b.n	8009c06 <_dtoa_r+0x45a>
 8009dc2:	1e6b      	subs	r3, r5, #1
 8009dc4:	781a      	ldrb	r2, [r3, #0]
 8009dc6:	2a30      	cmp	r2, #48	; 0x30
 8009dc8:	d001      	beq.n	8009dce <_dtoa_r+0x622>
 8009dca:	0037      	movs	r7, r6
 8009dcc:	e03f      	b.n	8009e4e <_dtoa_r+0x6a2>
 8009dce:	001d      	movs	r5, r3
 8009dd0:	e7f7      	b.n	8009dc2 <_dtoa_r+0x616>
 8009dd2:	9806      	ldr	r0, [sp, #24]
 8009dd4:	9907      	ldr	r1, [sp, #28]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	4b26      	ldr	r3, [pc, #152]	; (8009e74 <_dtoa_r+0x6c8>)
 8009dda:	f7f7 ff01 	bl	8001be0 <__aeabi_dmul>
 8009dde:	9006      	str	r0, [sp, #24]
 8009de0:	9107      	str	r1, [sp, #28]
 8009de2:	e7b6      	b.n	8009d52 <_dtoa_r+0x5a6>
 8009de4:	9e08      	ldr	r6, [sp, #32]
 8009de6:	9a04      	ldr	r2, [sp, #16]
 8009de8:	9b05      	ldr	r3, [sp, #20]
 8009dea:	9806      	ldr	r0, [sp, #24]
 8009dec:	9907      	ldr	r1, [sp, #28]
 8009dee:	f7f7 faed 	bl	80013cc <__aeabi_ddiv>
 8009df2:	f7f8 fccb 	bl	800278c <__aeabi_d2iz>
 8009df6:	0004      	movs	r4, r0
 8009df8:	f7f8 fcfe 	bl	80027f8 <__aeabi_i2d>
 8009dfc:	9a04      	ldr	r2, [sp, #16]
 8009dfe:	9b05      	ldr	r3, [sp, #20]
 8009e00:	f7f7 feee 	bl	8001be0 <__aeabi_dmul>
 8009e04:	0002      	movs	r2, r0
 8009e06:	000b      	movs	r3, r1
 8009e08:	9806      	ldr	r0, [sp, #24]
 8009e0a:	9907      	ldr	r1, [sp, #28]
 8009e0c:	f7f8 f95a 	bl	80020c4 <__aeabi_dsub>
 8009e10:	0023      	movs	r3, r4
 8009e12:	3330      	adds	r3, #48	; 0x30
 8009e14:	7033      	strb	r3, [r6, #0]
 8009e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e18:	9b08      	ldr	r3, [sp, #32]
 8009e1a:	1c75      	adds	r5, r6, #1
 8009e1c:	1aeb      	subs	r3, r5, r3
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d148      	bne.n	8009eb4 <_dtoa_r+0x708>
 8009e22:	0002      	movs	r2, r0
 8009e24:	000b      	movs	r3, r1
 8009e26:	f7f6 ffb5 	bl	8000d94 <__aeabi_dadd>
 8009e2a:	9a04      	ldr	r2, [sp, #16]
 8009e2c:	9b05      	ldr	r3, [sp, #20]
 8009e2e:	9006      	str	r0, [sp, #24]
 8009e30:	9107      	str	r1, [sp, #28]
 8009e32:	f7f6 fb1b 	bl	800046c <__aeabi_dcmpgt>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d12a      	bne.n	8009e90 <_dtoa_r+0x6e4>
 8009e3a:	9a04      	ldr	r2, [sp, #16]
 8009e3c:	9b05      	ldr	r3, [sp, #20]
 8009e3e:	9806      	ldr	r0, [sp, #24]
 8009e40:	9907      	ldr	r1, [sp, #28]
 8009e42:	f7f6 faf9 	bl	8000438 <__aeabi_dcmpeq>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d001      	beq.n	8009e4e <_dtoa_r+0x6a2>
 8009e4a:	07e3      	lsls	r3, r4, #31
 8009e4c:	d420      	bmi.n	8009e90 <_dtoa_r+0x6e4>
 8009e4e:	9903      	ldr	r1, [sp, #12]
 8009e50:	9802      	ldr	r0, [sp, #8]
 8009e52:	f000 fae4 	bl	800a41e <_Bfree>
 8009e56:	2300      	movs	r3, #0
 8009e58:	702b      	strb	r3, [r5, #0]
 8009e5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e5c:	3701      	adds	r7, #1
 8009e5e:	601f      	str	r7, [r3, #0]
 8009e60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d100      	bne.n	8009e68 <_dtoa_r+0x6bc>
 8009e66:	e4e6      	b.n	8009836 <_dtoa_r+0x8a>
 8009e68:	601d      	str	r5, [r3, #0]
 8009e6a:	e4e4      	b.n	8009836 <_dtoa_r+0x8a>
 8009e6c:	0800b118 	.word	0x0800b118
 8009e70:	3ff00000 	.word	0x3ff00000
 8009e74:	40240000 	.word	0x40240000
 8009e78:	401c0000 	.word	0x401c0000
 8009e7c:	fcc00000 	.word	0xfcc00000
 8009e80:	40140000 	.word	0x40140000
 8009e84:	7cc00000 	.word	0x7cc00000
 8009e88:	0800b0f0 	.word	0x0800b0f0
 8009e8c:	3fe00000 	.word	0x3fe00000
 8009e90:	003e      	movs	r6, r7
 8009e92:	1e6b      	subs	r3, r5, #1
 8009e94:	781a      	ldrb	r2, [r3, #0]
 8009e96:	2a39      	cmp	r2, #57	; 0x39
 8009e98:	d106      	bne.n	8009ea8 <_dtoa_r+0x6fc>
 8009e9a:	9a08      	ldr	r2, [sp, #32]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d107      	bne.n	8009eb0 <_dtoa_r+0x704>
 8009ea0:	2330      	movs	r3, #48	; 0x30
 8009ea2:	7013      	strb	r3, [r2, #0]
 8009ea4:	0013      	movs	r3, r2
 8009ea6:	3601      	adds	r6, #1
 8009ea8:	781a      	ldrb	r2, [r3, #0]
 8009eaa:	3201      	adds	r2, #1
 8009eac:	701a      	strb	r2, [r3, #0]
 8009eae:	e78c      	b.n	8009dca <_dtoa_r+0x61e>
 8009eb0:	001d      	movs	r5, r3
 8009eb2:	e7ee      	b.n	8009e92 <_dtoa_r+0x6e6>
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	4ba4      	ldr	r3, [pc, #656]	; (800a148 <_dtoa_r+0x99c>)
 8009eb8:	f7f7 fe92 	bl	8001be0 <__aeabi_dmul>
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	9006      	str	r0, [sp, #24]
 8009ec2:	9107      	str	r1, [sp, #28]
 8009ec4:	002e      	movs	r6, r5
 8009ec6:	f7f6 fab7 	bl	8000438 <__aeabi_dcmpeq>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d08b      	beq.n	8009de6 <_dtoa_r+0x63a>
 8009ece:	e7be      	b.n	8009e4e <_dtoa_r+0x6a2>
 8009ed0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ed2:	2a00      	cmp	r2, #0
 8009ed4:	d100      	bne.n	8009ed8 <_dtoa_r+0x72c>
 8009ed6:	e0da      	b.n	800a08e <_dtoa_r+0x8e2>
 8009ed8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009eda:	2a01      	cmp	r2, #1
 8009edc:	dd00      	ble.n	8009ee0 <_dtoa_r+0x734>
 8009ede:	e0bd      	b.n	800a05c <_dtoa_r+0x8b0>
 8009ee0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	d100      	bne.n	8009ee8 <_dtoa_r+0x73c>
 8009ee6:	e0b5      	b.n	800a054 <_dtoa_r+0x8a8>
 8009ee8:	4a98      	ldr	r2, [pc, #608]	; (800a14c <_dtoa_r+0x9a0>)
 8009eea:	189b      	adds	r3, r3, r2
 8009eec:	9d04      	ldr	r5, [sp, #16]
 8009eee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ef2:	2101      	movs	r1, #1
 8009ef4:	18d2      	adds	r2, r2, r3
 8009ef6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ef8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009efa:	9802      	ldr	r0, [sp, #8]
 8009efc:	18d3      	adds	r3, r2, r3
 8009efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f00:	f000 fb2d 	bl	800a55e <__i2b>
 8009f04:	0006      	movs	r6, r0
 8009f06:	2c00      	cmp	r4, #0
 8009f08:	dd0e      	ble.n	8009f28 <_dtoa_r+0x77c>
 8009f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	dd0b      	ble.n	8009f28 <_dtoa_r+0x77c>
 8009f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f12:	0023      	movs	r3, r4
 8009f14:	4294      	cmp	r4, r2
 8009f16:	dd00      	ble.n	8009f1a <_dtoa_r+0x76e>
 8009f18:	0013      	movs	r3, r2
 8009f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f1c:	1ae4      	subs	r4, r4, r3
 8009f1e:	1ad2      	subs	r2, r2, r3
 8009f20:	920a      	str	r2, [sp, #40]	; 0x28
 8009f22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f28:	9b04      	ldr	r3, [sp, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d01f      	beq.n	8009f6e <_dtoa_r+0x7c2>
 8009f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d100      	bne.n	8009f36 <_dtoa_r+0x78a>
 8009f34:	e0af      	b.n	800a096 <_dtoa_r+0x8ea>
 8009f36:	2d00      	cmp	r5, #0
 8009f38:	d011      	beq.n	8009f5e <_dtoa_r+0x7b2>
 8009f3a:	0031      	movs	r1, r6
 8009f3c:	002a      	movs	r2, r5
 8009f3e:	9802      	ldr	r0, [sp, #8]
 8009f40:	f000 fba6 	bl	800a690 <__pow5mult>
 8009f44:	9a03      	ldr	r2, [sp, #12]
 8009f46:	0001      	movs	r1, r0
 8009f48:	0006      	movs	r6, r0
 8009f4a:	9802      	ldr	r0, [sp, #8]
 8009f4c:	f000 fb10 	bl	800a570 <__multiply>
 8009f50:	9903      	ldr	r1, [sp, #12]
 8009f52:	9010      	str	r0, [sp, #64]	; 0x40
 8009f54:	9802      	ldr	r0, [sp, #8]
 8009f56:	f000 fa62 	bl	800a41e <_Bfree>
 8009f5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f5c:	9303      	str	r3, [sp, #12]
 8009f5e:	9b04      	ldr	r3, [sp, #16]
 8009f60:	1b5a      	subs	r2, r3, r5
 8009f62:	d004      	beq.n	8009f6e <_dtoa_r+0x7c2>
 8009f64:	9903      	ldr	r1, [sp, #12]
 8009f66:	9802      	ldr	r0, [sp, #8]
 8009f68:	f000 fb92 	bl	800a690 <__pow5mult>
 8009f6c:	9003      	str	r0, [sp, #12]
 8009f6e:	2101      	movs	r1, #1
 8009f70:	9802      	ldr	r0, [sp, #8]
 8009f72:	f000 faf4 	bl	800a55e <__i2b>
 8009f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f78:	9004      	str	r0, [sp, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d100      	bne.n	8009f80 <_dtoa_r+0x7d4>
 8009f7e:	e1e3      	b.n	800a348 <_dtoa_r+0xb9c>
 8009f80:	001a      	movs	r2, r3
 8009f82:	0001      	movs	r1, r0
 8009f84:	9802      	ldr	r0, [sp, #8]
 8009f86:	f000 fb83 	bl	800a690 <__pow5mult>
 8009f8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f8c:	9004      	str	r0, [sp, #16]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	dd00      	ble.n	8009f94 <_dtoa_r+0x7e8>
 8009f92:	e082      	b.n	800a09a <_dtoa_r+0x8ee>
 8009f94:	2500      	movs	r5, #0
 8009f96:	9b06      	ldr	r3, [sp, #24]
 8009f98:	42ab      	cmp	r3, r5
 8009f9a:	d10e      	bne.n	8009fba <_dtoa_r+0x80e>
 8009f9c:	9b07      	ldr	r3, [sp, #28]
 8009f9e:	031b      	lsls	r3, r3, #12
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	d10a      	bne.n	8009fba <_dtoa_r+0x80e>
 8009fa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fa6:	9a07      	ldr	r2, [sp, #28]
 8009fa8:	4213      	tst	r3, r2
 8009faa:	d006      	beq.n	8009fba <_dtoa_r+0x80e>
 8009fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fae:	3501      	adds	r5, #1
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8009fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d16c      	bne.n	800a09c <_dtoa_r+0x8f0>
 8009fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fc4:	1818      	adds	r0, r3, r0
 8009fc6:	231f      	movs	r3, #31
 8009fc8:	4018      	ands	r0, r3
 8009fca:	d07e      	beq.n	800a0ca <_dtoa_r+0x91e>
 8009fcc:	3301      	adds	r3, #1
 8009fce:	1a1b      	subs	r3, r3, r0
 8009fd0:	2b04      	cmp	r3, #4
 8009fd2:	dd70      	ble.n	800a0b6 <_dtoa_r+0x90a>
 8009fd4:	231c      	movs	r3, #28
 8009fd6:	1a18      	subs	r0, r3, r0
 8009fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fda:	1824      	adds	r4, r4, r0
 8009fdc:	181b      	adds	r3, r3, r0
 8009fde:	930a      	str	r3, [sp, #40]	; 0x28
 8009fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe2:	181b      	adds	r3, r3, r0
 8009fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	dd05      	ble.n	8009ff8 <_dtoa_r+0x84c>
 8009fec:	001a      	movs	r2, r3
 8009fee:	9903      	ldr	r1, [sp, #12]
 8009ff0:	9802      	ldr	r0, [sp, #8]
 8009ff2:	f000 fb9f 	bl	800a734 <__lshift>
 8009ff6:	9003      	str	r0, [sp, #12]
 8009ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dd05      	ble.n	800a00a <_dtoa_r+0x85e>
 8009ffe:	001a      	movs	r2, r3
 800a000:	9904      	ldr	r1, [sp, #16]
 800a002:	9802      	ldr	r0, [sp, #8]
 800a004:	f000 fb96 	bl	800a734 <__lshift>
 800a008:	9004      	str	r0, [sp, #16]
 800a00a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d05e      	beq.n	800a0ce <_dtoa_r+0x922>
 800a010:	9904      	ldr	r1, [sp, #16]
 800a012:	9803      	ldr	r0, [sp, #12]
 800a014:	f000 fbe0 	bl	800a7d8 <__mcmp>
 800a018:	2800      	cmp	r0, #0
 800a01a:	da58      	bge.n	800a0ce <_dtoa_r+0x922>
 800a01c:	2300      	movs	r3, #0
 800a01e:	220a      	movs	r2, #10
 800a020:	9903      	ldr	r1, [sp, #12]
 800a022:	9802      	ldr	r0, [sp, #8]
 800a024:	f000 fa14 	bl	800a450 <__multadd>
 800a028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a02a:	3f01      	subs	r7, #1
 800a02c:	9003      	str	r0, [sp, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d100      	bne.n	800a034 <_dtoa_r+0x888>
 800a032:	e190      	b.n	800a356 <_dtoa_r+0xbaa>
 800a034:	2300      	movs	r3, #0
 800a036:	0031      	movs	r1, r6
 800a038:	220a      	movs	r2, #10
 800a03a:	9802      	ldr	r0, [sp, #8]
 800a03c:	f000 fa08 	bl	800a450 <__multadd>
 800a040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a042:	0006      	movs	r6, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	dd00      	ble.n	800a04a <_dtoa_r+0x89e>
 800a048:	e088      	b.n	800a15c <_dtoa_r+0x9b0>
 800a04a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	dc00      	bgt.n	800a052 <_dtoa_r+0x8a6>
 800a050:	e084      	b.n	800a15c <_dtoa_r+0x9b0>
 800a052:	e044      	b.n	800a0de <_dtoa_r+0x932>
 800a054:	2336      	movs	r3, #54	; 0x36
 800a056:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a058:	1a9b      	subs	r3, r3, r2
 800a05a:	e747      	b.n	8009eec <_dtoa_r+0x740>
 800a05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05e:	1e5d      	subs	r5, r3, #1
 800a060:	9b04      	ldr	r3, [sp, #16]
 800a062:	42ab      	cmp	r3, r5
 800a064:	db08      	blt.n	800a078 <_dtoa_r+0x8cc>
 800a066:	1b5d      	subs	r5, r3, r5
 800a068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	da0c      	bge.n	800a088 <_dtoa_r+0x8dc>
 800a06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a072:	1a9c      	subs	r4, r3, r2
 800a074:	2300      	movs	r3, #0
 800a076:	e73b      	b.n	8009ef0 <_dtoa_r+0x744>
 800a078:	9b04      	ldr	r3, [sp, #16]
 800a07a:	9504      	str	r5, [sp, #16]
 800a07c:	1aea      	subs	r2, r5, r3
 800a07e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a080:	2500      	movs	r5, #0
 800a082:	189b      	adds	r3, r3, r2
 800a084:	9311      	str	r3, [sp, #68]	; 0x44
 800a086:	e7ef      	b.n	800a068 <_dtoa_r+0x8bc>
 800a088:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a08c:	e730      	b.n	8009ef0 <_dtoa_r+0x744>
 800a08e:	9d04      	ldr	r5, [sp, #16]
 800a090:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a092:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a094:	e737      	b.n	8009f06 <_dtoa_r+0x75a>
 800a096:	9a04      	ldr	r2, [sp, #16]
 800a098:	e764      	b.n	8009f64 <_dtoa_r+0x7b8>
 800a09a:	2500      	movs	r5, #0
 800a09c:	9b04      	ldr	r3, [sp, #16]
 800a09e:	9a04      	ldr	r2, [sp, #16]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	9310      	str	r3, [sp, #64]	; 0x40
 800a0a4:	3303      	adds	r3, #3
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	18d3      	adds	r3, r2, r3
 800a0aa:	6858      	ldr	r0, [r3, #4]
 800a0ac:	f000 fa0e 	bl	800a4cc <__hi0bits>
 800a0b0:	2320      	movs	r3, #32
 800a0b2:	1a18      	subs	r0, r3, r0
 800a0b4:	e785      	b.n	8009fc2 <_dtoa_r+0x816>
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d095      	beq.n	8009fe6 <_dtoa_r+0x83a>
 800a0ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0bc:	331c      	adds	r3, #28
 800a0be:	18d2      	adds	r2, r2, r3
 800a0c0:	920a      	str	r2, [sp, #40]	; 0x28
 800a0c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0c4:	18e4      	adds	r4, r4, r3
 800a0c6:	18d3      	adds	r3, r2, r3
 800a0c8:	e78c      	b.n	8009fe4 <_dtoa_r+0x838>
 800a0ca:	0003      	movs	r3, r0
 800a0cc:	e7f5      	b.n	800a0ba <_dtoa_r+0x90e>
 800a0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	dc3d      	bgt.n	800a150 <_dtoa_r+0x9a4>
 800a0d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	dd3a      	ble.n	800a150 <_dtoa_r+0x9a4>
 800a0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0dc:	930c      	str	r3, [sp, #48]	; 0x30
 800a0de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10c      	bne.n	800a0fe <_dtoa_r+0x952>
 800a0e4:	9904      	ldr	r1, [sp, #16]
 800a0e6:	2205      	movs	r2, #5
 800a0e8:	9802      	ldr	r0, [sp, #8]
 800a0ea:	f000 f9b1 	bl	800a450 <__multadd>
 800a0ee:	9004      	str	r0, [sp, #16]
 800a0f0:	0001      	movs	r1, r0
 800a0f2:	9803      	ldr	r0, [sp, #12]
 800a0f4:	f000 fb70 	bl	800a7d8 <__mcmp>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	dd00      	ble.n	800a0fe <_dtoa_r+0x952>
 800a0fc:	e5af      	b.n	8009c5e <_dtoa_r+0x4b2>
 800a0fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a100:	9d08      	ldr	r5, [sp, #32]
 800a102:	43df      	mvns	r7, r3
 800a104:	2300      	movs	r3, #0
 800a106:	9309      	str	r3, [sp, #36]	; 0x24
 800a108:	9904      	ldr	r1, [sp, #16]
 800a10a:	9802      	ldr	r0, [sp, #8]
 800a10c:	f000 f987 	bl	800a41e <_Bfree>
 800a110:	2e00      	cmp	r6, #0
 800a112:	d100      	bne.n	800a116 <_dtoa_r+0x96a>
 800a114:	e69b      	b.n	8009e4e <_dtoa_r+0x6a2>
 800a116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d005      	beq.n	800a128 <_dtoa_r+0x97c>
 800a11c:	42b3      	cmp	r3, r6
 800a11e:	d003      	beq.n	800a128 <_dtoa_r+0x97c>
 800a120:	0019      	movs	r1, r3
 800a122:	9802      	ldr	r0, [sp, #8]
 800a124:	f000 f97b 	bl	800a41e <_Bfree>
 800a128:	0031      	movs	r1, r6
 800a12a:	9802      	ldr	r0, [sp, #8]
 800a12c:	f000 f977 	bl	800a41e <_Bfree>
 800a130:	e68d      	b.n	8009e4e <_dtoa_r+0x6a2>
 800a132:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	001e      	movs	r6, r3
 800a138:	e7e1      	b.n	800a0fe <_dtoa_r+0x952>
 800a13a:	2300      	movs	r3, #0
 800a13c:	e7fa      	b.n	800a134 <_dtoa_r+0x988>
 800a13e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a140:	0037      	movs	r7, r6
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	001e      	movs	r6, r3
 800a146:	e58a      	b.n	8009c5e <_dtoa_r+0x4b2>
 800a148:	40240000 	.word	0x40240000
 800a14c:	00000433 	.word	0x00000433
 800a150:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a152:	2b00      	cmp	r3, #0
 800a154:	d100      	bne.n	800a158 <_dtoa_r+0x9ac>
 800a156:	e0b2      	b.n	800a2be <_dtoa_r+0xb12>
 800a158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a15a:	930c      	str	r3, [sp, #48]	; 0x30
 800a15c:	2c00      	cmp	r4, #0
 800a15e:	dd05      	ble.n	800a16c <_dtoa_r+0x9c0>
 800a160:	0031      	movs	r1, r6
 800a162:	0022      	movs	r2, r4
 800a164:	9802      	ldr	r0, [sp, #8]
 800a166:	f000 fae5 	bl	800a734 <__lshift>
 800a16a:	0006      	movs	r6, r0
 800a16c:	0030      	movs	r0, r6
 800a16e:	2d00      	cmp	r5, #0
 800a170:	d011      	beq.n	800a196 <_dtoa_r+0x9ea>
 800a172:	6871      	ldr	r1, [r6, #4]
 800a174:	9802      	ldr	r0, [sp, #8]
 800a176:	f000 f91a 	bl	800a3ae <_Balloc>
 800a17a:	0031      	movs	r1, r6
 800a17c:	0004      	movs	r4, r0
 800a17e:	6933      	ldr	r3, [r6, #16]
 800a180:	310c      	adds	r1, #12
 800a182:	1c9a      	adds	r2, r3, #2
 800a184:	0092      	lsls	r2, r2, #2
 800a186:	300c      	adds	r0, #12
 800a188:	f7fe fde8 	bl	8008d5c <memcpy>
 800a18c:	2201      	movs	r2, #1
 800a18e:	0021      	movs	r1, r4
 800a190:	9802      	ldr	r0, [sp, #8]
 800a192:	f000 facf 	bl	800a734 <__lshift>
 800a196:	9609      	str	r6, [sp, #36]	; 0x24
 800a198:	0006      	movs	r6, r0
 800a19a:	9b08      	ldr	r3, [sp, #32]
 800a19c:	930a      	str	r3, [sp, #40]	; 0x28
 800a19e:	9904      	ldr	r1, [sp, #16]
 800a1a0:	9803      	ldr	r0, [sp, #12]
 800a1a2:	f7ff fa7c 	bl	800969e <quorem>
 800a1a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1a8:	900d      	str	r0, [sp, #52]	; 0x34
 800a1aa:	0004      	movs	r4, r0
 800a1ac:	9803      	ldr	r0, [sp, #12]
 800a1ae:	f000 fb13 	bl	800a7d8 <__mcmp>
 800a1b2:	0032      	movs	r2, r6
 800a1b4:	9010      	str	r0, [sp, #64]	; 0x40
 800a1b6:	9904      	ldr	r1, [sp, #16]
 800a1b8:	9802      	ldr	r0, [sp, #8]
 800a1ba:	f000 fb27 	bl	800a80c <__mdiff>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1c2:	68c3      	ldr	r3, [r0, #12]
 800a1c4:	3430      	adds	r4, #48	; 0x30
 800a1c6:	0005      	movs	r5, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <_dtoa_r+0xa2a>
 800a1cc:	0001      	movs	r1, r0
 800a1ce:	9803      	ldr	r0, [sp, #12]
 800a1d0:	f000 fb02 	bl	800a7d8 <__mcmp>
 800a1d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1d6:	0029      	movs	r1, r5
 800a1d8:	9802      	ldr	r0, [sp, #8]
 800a1da:	f000 f920 	bl	800a41e <_Bfree>
 800a1de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	d10e      	bne.n	800a204 <_dtoa_r+0xa58>
 800a1e6:	9a06      	ldr	r2, [sp, #24]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	4213      	tst	r3, r2
 800a1ec:	d10a      	bne.n	800a204 <_dtoa_r+0xa58>
 800a1ee:	2c39      	cmp	r4, #57	; 0x39
 800a1f0:	d026      	beq.n	800a240 <_dtoa_r+0xa94>
 800a1f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	dd01      	ble.n	800a1fc <_dtoa_r+0xa50>
 800a1f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a1fa:	3431      	adds	r4, #49	; 0x31
 800a1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1fe:	1c5d      	adds	r5, r3, #1
 800a200:	701c      	strb	r4, [r3, #0]
 800a202:	e781      	b.n	800a108 <_dtoa_r+0x95c>
 800a204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a206:	2b00      	cmp	r3, #0
 800a208:	db07      	blt.n	800a21a <_dtoa_r+0xa6e>
 800a20a:	001d      	movs	r5, r3
 800a20c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a20e:	431d      	orrs	r5, r3
 800a210:	d122      	bne.n	800a258 <_dtoa_r+0xaac>
 800a212:	2301      	movs	r3, #1
 800a214:	9a06      	ldr	r2, [sp, #24]
 800a216:	4213      	tst	r3, r2
 800a218:	d11e      	bne.n	800a258 <_dtoa_r+0xaac>
 800a21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	dded      	ble.n	800a1fc <_dtoa_r+0xa50>
 800a220:	9903      	ldr	r1, [sp, #12]
 800a222:	2201      	movs	r2, #1
 800a224:	9802      	ldr	r0, [sp, #8]
 800a226:	f000 fa85 	bl	800a734 <__lshift>
 800a22a:	9904      	ldr	r1, [sp, #16]
 800a22c:	9003      	str	r0, [sp, #12]
 800a22e:	f000 fad3 	bl	800a7d8 <__mcmp>
 800a232:	2800      	cmp	r0, #0
 800a234:	dc02      	bgt.n	800a23c <_dtoa_r+0xa90>
 800a236:	d1e1      	bne.n	800a1fc <_dtoa_r+0xa50>
 800a238:	07e3      	lsls	r3, r4, #31
 800a23a:	d5df      	bpl.n	800a1fc <_dtoa_r+0xa50>
 800a23c:	2c39      	cmp	r4, #57	; 0x39
 800a23e:	d1db      	bne.n	800a1f8 <_dtoa_r+0xa4c>
 800a240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a244:	1c5d      	adds	r5, r3, #1
 800a246:	2339      	movs	r3, #57	; 0x39
 800a248:	7013      	strb	r3, [r2, #0]
 800a24a:	1e6b      	subs	r3, r5, #1
 800a24c:	781a      	ldrb	r2, [r3, #0]
 800a24e:	2a39      	cmp	r2, #57	; 0x39
 800a250:	d067      	beq.n	800a322 <_dtoa_r+0xb76>
 800a252:	3201      	adds	r2, #1
 800a254:	701a      	strb	r2, [r3, #0]
 800a256:	e757      	b.n	800a108 <_dtoa_r+0x95c>
 800a258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a25a:	1c5d      	adds	r5, r3, #1
 800a25c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	dd04      	ble.n	800a26c <_dtoa_r+0xac0>
 800a262:	2c39      	cmp	r4, #57	; 0x39
 800a264:	d0ec      	beq.n	800a240 <_dtoa_r+0xa94>
 800a266:	3401      	adds	r4, #1
 800a268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a26a:	e7c9      	b.n	800a200 <_dtoa_r+0xa54>
 800a26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a26e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a270:	701c      	strb	r4, [r3, #0]
 800a272:	9b08      	ldr	r3, [sp, #32]
 800a274:	1aeb      	subs	r3, r5, r3
 800a276:	4293      	cmp	r3, r2
 800a278:	d03e      	beq.n	800a2f8 <_dtoa_r+0xb4c>
 800a27a:	2300      	movs	r3, #0
 800a27c:	220a      	movs	r2, #10
 800a27e:	9903      	ldr	r1, [sp, #12]
 800a280:	9802      	ldr	r0, [sp, #8]
 800a282:	f000 f8e5 	bl	800a450 <__multadd>
 800a286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a288:	9003      	str	r0, [sp, #12]
 800a28a:	42b3      	cmp	r3, r6
 800a28c:	d109      	bne.n	800a2a2 <_dtoa_r+0xaf6>
 800a28e:	2300      	movs	r3, #0
 800a290:	220a      	movs	r2, #10
 800a292:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a294:	9802      	ldr	r0, [sp, #8]
 800a296:	f000 f8db 	bl	800a450 <__multadd>
 800a29a:	9009      	str	r0, [sp, #36]	; 0x24
 800a29c:	0006      	movs	r6, r0
 800a29e:	950a      	str	r5, [sp, #40]	; 0x28
 800a2a0:	e77d      	b.n	800a19e <_dtoa_r+0x9f2>
 800a2a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	220a      	movs	r2, #10
 800a2a8:	9802      	ldr	r0, [sp, #8]
 800a2aa:	f000 f8d1 	bl	800a450 <__multadd>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	9009      	str	r0, [sp, #36]	; 0x24
 800a2b2:	220a      	movs	r2, #10
 800a2b4:	0031      	movs	r1, r6
 800a2b6:	9802      	ldr	r0, [sp, #8]
 800a2b8:	f000 f8ca 	bl	800a450 <__multadd>
 800a2bc:	e7ee      	b.n	800a29c <_dtoa_r+0xaf0>
 800a2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c0:	930c      	str	r3, [sp, #48]	; 0x30
 800a2c2:	9b08      	ldr	r3, [sp, #32]
 800a2c4:	9306      	str	r3, [sp, #24]
 800a2c6:	9904      	ldr	r1, [sp, #16]
 800a2c8:	9803      	ldr	r0, [sp, #12]
 800a2ca:	f7ff f9e8 	bl	800969e <quorem>
 800a2ce:	9b06      	ldr	r3, [sp, #24]
 800a2d0:	3030      	adds	r0, #48	; 0x30
 800a2d2:	1c5d      	adds	r5, r3, #1
 800a2d4:	7018      	strb	r0, [r3, #0]
 800a2d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2d8:	9b08      	ldr	r3, [sp, #32]
 800a2da:	0004      	movs	r4, r0
 800a2dc:	1aeb      	subs	r3, r5, r3
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	dd08      	ble.n	800a2f4 <_dtoa_r+0xb48>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	220a      	movs	r2, #10
 800a2e6:	9903      	ldr	r1, [sp, #12]
 800a2e8:	9802      	ldr	r0, [sp, #8]
 800a2ea:	f000 f8b1 	bl	800a450 <__multadd>
 800a2ee:	9506      	str	r5, [sp, #24]
 800a2f0:	9003      	str	r0, [sp, #12]
 800a2f2:	e7e8      	b.n	800a2c6 <_dtoa_r+0xb1a>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f8:	9903      	ldr	r1, [sp, #12]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	9802      	ldr	r0, [sp, #8]
 800a2fe:	f000 fa19 	bl	800a734 <__lshift>
 800a302:	9904      	ldr	r1, [sp, #16]
 800a304:	9003      	str	r0, [sp, #12]
 800a306:	f000 fa67 	bl	800a7d8 <__mcmp>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	dc9d      	bgt.n	800a24a <_dtoa_r+0xa9e>
 800a30e:	d101      	bne.n	800a314 <_dtoa_r+0xb68>
 800a310:	07e3      	lsls	r3, r4, #31
 800a312:	d49a      	bmi.n	800a24a <_dtoa_r+0xa9e>
 800a314:	1e6b      	subs	r3, r5, #1
 800a316:	781a      	ldrb	r2, [r3, #0]
 800a318:	2a30      	cmp	r2, #48	; 0x30
 800a31a:	d000      	beq.n	800a31e <_dtoa_r+0xb72>
 800a31c:	e6f4      	b.n	800a108 <_dtoa_r+0x95c>
 800a31e:	001d      	movs	r5, r3
 800a320:	e7f8      	b.n	800a314 <_dtoa_r+0xb68>
 800a322:	9a08      	ldr	r2, [sp, #32]
 800a324:	429a      	cmp	r2, r3
 800a326:	d103      	bne.n	800a330 <_dtoa_r+0xb84>
 800a328:	2331      	movs	r3, #49	; 0x31
 800a32a:	3701      	adds	r7, #1
 800a32c:	7013      	strb	r3, [r2, #0]
 800a32e:	e6eb      	b.n	800a108 <_dtoa_r+0x95c>
 800a330:	001d      	movs	r5, r3
 800a332:	e78a      	b.n	800a24a <_dtoa_r+0xa9e>
 800a334:	4b0b      	ldr	r3, [pc, #44]	; (800a364 <_dtoa_r+0xbb8>)
 800a336:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a338:	9308      	str	r3, [sp, #32]
 800a33a:	4b0b      	ldr	r3, [pc, #44]	; (800a368 <_dtoa_r+0xbbc>)
 800a33c:	2a00      	cmp	r2, #0
 800a33e:	d001      	beq.n	800a344 <_dtoa_r+0xb98>
 800a340:	f7ff fa77 	bl	8009832 <_dtoa_r+0x86>
 800a344:	f7ff fa77 	bl	8009836 <_dtoa_r+0x8a>
 800a348:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	dc00      	bgt.n	800a350 <_dtoa_r+0xba4>
 800a34e:	e621      	b.n	8009f94 <_dtoa_r+0x7e8>
 800a350:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a352:	2001      	movs	r0, #1
 800a354:	e635      	b.n	8009fc2 <_dtoa_r+0x816>
 800a356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a358:	2b00      	cmp	r3, #0
 800a35a:	dcb2      	bgt.n	800a2c2 <_dtoa_r+0xb16>
 800a35c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a35e:	2b02      	cmp	r3, #2
 800a360:	ddaf      	ble.n	800a2c2 <_dtoa_r+0xb16>
 800a362:	e6bc      	b.n	800a0de <_dtoa_r+0x932>
 800a364:	0800b0e0 	.word	0x0800b0e0
 800a368:	0800b0e8 	.word	0x0800b0e8

0800a36c <_localeconv_r>:
 800a36c:	4b03      	ldr	r3, [pc, #12]	; (800a37c <_localeconv_r+0x10>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6a18      	ldr	r0, [r3, #32]
 800a372:	2800      	cmp	r0, #0
 800a374:	d100      	bne.n	800a378 <_localeconv_r+0xc>
 800a376:	4802      	ldr	r0, [pc, #8]	; (800a380 <_localeconv_r+0x14>)
 800a378:	30f0      	adds	r0, #240	; 0xf0
 800a37a:	4770      	bx	lr
 800a37c:	2000002c 	.word	0x2000002c
 800a380:	20000090 	.word	0x20000090

0800a384 <malloc>:
 800a384:	b510      	push	{r4, lr}
 800a386:	4b03      	ldr	r3, [pc, #12]	; (800a394 <malloc+0x10>)
 800a388:	0001      	movs	r1, r0
 800a38a:	6818      	ldr	r0, [r3, #0]
 800a38c:	f000 fb4e 	bl	800aa2c <_malloc_r>
 800a390:	bd10      	pop	{r4, pc}
 800a392:	46c0      	nop			; (mov r8, r8)
 800a394:	2000002c 	.word	0x2000002c

0800a398 <memchr>:
 800a398:	b2c9      	uxtb	r1, r1
 800a39a:	1882      	adds	r2, r0, r2
 800a39c:	4290      	cmp	r0, r2
 800a39e:	d101      	bne.n	800a3a4 <memchr+0xc>
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	4770      	bx	lr
 800a3a4:	7803      	ldrb	r3, [r0, #0]
 800a3a6:	428b      	cmp	r3, r1
 800a3a8:	d0fb      	beq.n	800a3a2 <memchr+0xa>
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	e7f6      	b.n	800a39c <memchr+0x4>

0800a3ae <_Balloc>:
 800a3ae:	b570      	push	{r4, r5, r6, lr}
 800a3b0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3b2:	0004      	movs	r4, r0
 800a3b4:	000d      	movs	r5, r1
 800a3b6:	2e00      	cmp	r6, #0
 800a3b8:	d107      	bne.n	800a3ca <_Balloc+0x1c>
 800a3ba:	2010      	movs	r0, #16
 800a3bc:	f7ff ffe2 	bl	800a384 <malloc>
 800a3c0:	6260      	str	r0, [r4, #36]	; 0x24
 800a3c2:	6046      	str	r6, [r0, #4]
 800a3c4:	6086      	str	r6, [r0, #8]
 800a3c6:	6006      	str	r6, [r0, #0]
 800a3c8:	60c6      	str	r6, [r0, #12]
 800a3ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3cc:	68f3      	ldr	r3, [r6, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d013      	beq.n	800a3fa <_Balloc+0x4c>
 800a3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3d4:	00aa      	lsls	r2, r5, #2
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	189b      	adds	r3, r3, r2
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d118      	bne.n	800a412 <_Balloc+0x64>
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	000e      	movs	r6, r1
 800a3e4:	40ae      	lsls	r6, r5
 800a3e6:	1d72      	adds	r2, r6, #5
 800a3e8:	0092      	lsls	r2, r2, #2
 800a3ea:	0020      	movs	r0, r4
 800a3ec:	f000 fac6 	bl	800a97c <_calloc_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d00c      	beq.n	800a40e <_Balloc+0x60>
 800a3f4:	6045      	str	r5, [r0, #4]
 800a3f6:	6086      	str	r6, [r0, #8]
 800a3f8:	e00d      	b.n	800a416 <_Balloc+0x68>
 800a3fa:	2221      	movs	r2, #33	; 0x21
 800a3fc:	2104      	movs	r1, #4
 800a3fe:	0020      	movs	r0, r4
 800a400:	f000 fabc 	bl	800a97c <_calloc_r>
 800a404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a406:	60f0      	str	r0, [r6, #12]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e1      	bne.n	800a3d2 <_Balloc+0x24>
 800a40e:	2000      	movs	r0, #0
 800a410:	bd70      	pop	{r4, r5, r6, pc}
 800a412:	6802      	ldr	r2, [r0, #0]
 800a414:	601a      	str	r2, [r3, #0]
 800a416:	2300      	movs	r3, #0
 800a418:	6103      	str	r3, [r0, #16]
 800a41a:	60c3      	str	r3, [r0, #12]
 800a41c:	e7f8      	b.n	800a410 <_Balloc+0x62>

0800a41e <_Bfree>:
 800a41e:	b570      	push	{r4, r5, r6, lr}
 800a420:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a422:	0006      	movs	r6, r0
 800a424:	000d      	movs	r5, r1
 800a426:	2c00      	cmp	r4, #0
 800a428:	d107      	bne.n	800a43a <_Bfree+0x1c>
 800a42a:	2010      	movs	r0, #16
 800a42c:	f7ff ffaa 	bl	800a384 <malloc>
 800a430:	6270      	str	r0, [r6, #36]	; 0x24
 800a432:	6044      	str	r4, [r0, #4]
 800a434:	6084      	str	r4, [r0, #8]
 800a436:	6004      	str	r4, [r0, #0]
 800a438:	60c4      	str	r4, [r0, #12]
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	d007      	beq.n	800a44e <_Bfree+0x30>
 800a43e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a440:	686a      	ldr	r2, [r5, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	0092      	lsls	r2, r2, #2
 800a446:	189b      	adds	r3, r3, r2
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	602a      	str	r2, [r5, #0]
 800a44c:	601d      	str	r5, [r3, #0]
 800a44e:	bd70      	pop	{r4, r5, r6, pc}

0800a450 <__multadd>:
 800a450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a452:	001e      	movs	r6, r3
 800a454:	2314      	movs	r3, #20
 800a456:	469c      	mov	ip, r3
 800a458:	0007      	movs	r7, r0
 800a45a:	000c      	movs	r4, r1
 800a45c:	2000      	movs	r0, #0
 800a45e:	690d      	ldr	r5, [r1, #16]
 800a460:	448c      	add	ip, r1
 800a462:	4663      	mov	r3, ip
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3001      	adds	r0, #1
 800a468:	b299      	uxth	r1, r3
 800a46a:	4663      	mov	r3, ip
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4351      	muls	r1, r2
 800a470:	0c1b      	lsrs	r3, r3, #16
 800a472:	4353      	muls	r3, r2
 800a474:	1989      	adds	r1, r1, r6
 800a476:	0c0e      	lsrs	r6, r1, #16
 800a478:	199b      	adds	r3, r3, r6
 800a47a:	b289      	uxth	r1, r1
 800a47c:	0c1e      	lsrs	r6, r3, #16
 800a47e:	041b      	lsls	r3, r3, #16
 800a480:	185b      	adds	r3, r3, r1
 800a482:	4661      	mov	r1, ip
 800a484:	c108      	stmia	r1!, {r3}
 800a486:	468c      	mov	ip, r1
 800a488:	4285      	cmp	r5, r0
 800a48a:	dcea      	bgt.n	800a462 <__multadd+0x12>
 800a48c:	2e00      	cmp	r6, #0
 800a48e:	d01b      	beq.n	800a4c8 <__multadd+0x78>
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	42ab      	cmp	r3, r5
 800a494:	dc12      	bgt.n	800a4bc <__multadd+0x6c>
 800a496:	6863      	ldr	r3, [r4, #4]
 800a498:	0038      	movs	r0, r7
 800a49a:	1c59      	adds	r1, r3, #1
 800a49c:	f7ff ff87 	bl	800a3ae <_Balloc>
 800a4a0:	0021      	movs	r1, r4
 800a4a2:	6923      	ldr	r3, [r4, #16]
 800a4a4:	9001      	str	r0, [sp, #4]
 800a4a6:	1c9a      	adds	r2, r3, #2
 800a4a8:	0092      	lsls	r2, r2, #2
 800a4aa:	310c      	adds	r1, #12
 800a4ac:	300c      	adds	r0, #12
 800a4ae:	f7fe fc55 	bl	8008d5c <memcpy>
 800a4b2:	0021      	movs	r1, r4
 800a4b4:	0038      	movs	r0, r7
 800a4b6:	f7ff ffb2 	bl	800a41e <_Bfree>
 800a4ba:	9c01      	ldr	r4, [sp, #4]
 800a4bc:	1d2b      	adds	r3, r5, #4
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	18e3      	adds	r3, r4, r3
 800a4c2:	3501      	adds	r5, #1
 800a4c4:	605e      	str	r6, [r3, #4]
 800a4c6:	6125      	str	r5, [r4, #16]
 800a4c8:	0020      	movs	r0, r4
 800a4ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800a4cc <__hi0bits>:
 800a4cc:	0003      	movs	r3, r0
 800a4ce:	0c02      	lsrs	r2, r0, #16
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	4282      	cmp	r2, r0
 800a4d4:	d101      	bne.n	800a4da <__hi0bits+0xe>
 800a4d6:	041b      	lsls	r3, r3, #16
 800a4d8:	3010      	adds	r0, #16
 800a4da:	0e1a      	lsrs	r2, r3, #24
 800a4dc:	d101      	bne.n	800a4e2 <__hi0bits+0x16>
 800a4de:	3008      	adds	r0, #8
 800a4e0:	021b      	lsls	r3, r3, #8
 800a4e2:	0f1a      	lsrs	r2, r3, #28
 800a4e4:	d101      	bne.n	800a4ea <__hi0bits+0x1e>
 800a4e6:	3004      	adds	r0, #4
 800a4e8:	011b      	lsls	r3, r3, #4
 800a4ea:	0f9a      	lsrs	r2, r3, #30
 800a4ec:	d101      	bne.n	800a4f2 <__hi0bits+0x26>
 800a4ee:	3002      	adds	r0, #2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	db03      	blt.n	800a4fe <__hi0bits+0x32>
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	005b      	lsls	r3, r3, #1
 800a4fa:	d400      	bmi.n	800a4fe <__hi0bits+0x32>
 800a4fc:	2020      	movs	r0, #32
 800a4fe:	4770      	bx	lr

0800a500 <__lo0bits>:
 800a500:	2207      	movs	r2, #7
 800a502:	6803      	ldr	r3, [r0, #0]
 800a504:	b510      	push	{r4, lr}
 800a506:	0001      	movs	r1, r0
 800a508:	401a      	ands	r2, r3
 800a50a:	d00d      	beq.n	800a528 <__lo0bits+0x28>
 800a50c:	2401      	movs	r4, #1
 800a50e:	2000      	movs	r0, #0
 800a510:	4223      	tst	r3, r4
 800a512:	d105      	bne.n	800a520 <__lo0bits+0x20>
 800a514:	3002      	adds	r0, #2
 800a516:	4203      	tst	r3, r0
 800a518:	d003      	beq.n	800a522 <__lo0bits+0x22>
 800a51a:	40e3      	lsrs	r3, r4
 800a51c:	0020      	movs	r0, r4
 800a51e:	600b      	str	r3, [r1, #0]
 800a520:	bd10      	pop	{r4, pc}
 800a522:	089b      	lsrs	r3, r3, #2
 800a524:	600b      	str	r3, [r1, #0]
 800a526:	e7fb      	b.n	800a520 <__lo0bits+0x20>
 800a528:	b29c      	uxth	r4, r3
 800a52a:	0010      	movs	r0, r2
 800a52c:	2c00      	cmp	r4, #0
 800a52e:	d101      	bne.n	800a534 <__lo0bits+0x34>
 800a530:	2010      	movs	r0, #16
 800a532:	0c1b      	lsrs	r3, r3, #16
 800a534:	b2da      	uxtb	r2, r3
 800a536:	2a00      	cmp	r2, #0
 800a538:	d101      	bne.n	800a53e <__lo0bits+0x3e>
 800a53a:	3008      	adds	r0, #8
 800a53c:	0a1b      	lsrs	r3, r3, #8
 800a53e:	071a      	lsls	r2, r3, #28
 800a540:	d101      	bne.n	800a546 <__lo0bits+0x46>
 800a542:	3004      	adds	r0, #4
 800a544:	091b      	lsrs	r3, r3, #4
 800a546:	079a      	lsls	r2, r3, #30
 800a548:	d101      	bne.n	800a54e <__lo0bits+0x4e>
 800a54a:	3002      	adds	r0, #2
 800a54c:	089b      	lsrs	r3, r3, #2
 800a54e:	07da      	lsls	r2, r3, #31
 800a550:	d4e8      	bmi.n	800a524 <__lo0bits+0x24>
 800a552:	085b      	lsrs	r3, r3, #1
 800a554:	d001      	beq.n	800a55a <__lo0bits+0x5a>
 800a556:	3001      	adds	r0, #1
 800a558:	e7e4      	b.n	800a524 <__lo0bits+0x24>
 800a55a:	2020      	movs	r0, #32
 800a55c:	e7e0      	b.n	800a520 <__lo0bits+0x20>

0800a55e <__i2b>:
 800a55e:	b510      	push	{r4, lr}
 800a560:	000c      	movs	r4, r1
 800a562:	2101      	movs	r1, #1
 800a564:	f7ff ff23 	bl	800a3ae <_Balloc>
 800a568:	2301      	movs	r3, #1
 800a56a:	6144      	str	r4, [r0, #20]
 800a56c:	6103      	str	r3, [r0, #16]
 800a56e:	bd10      	pop	{r4, pc}

0800a570 <__multiply>:
 800a570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a572:	690b      	ldr	r3, [r1, #16]
 800a574:	0014      	movs	r4, r2
 800a576:	6912      	ldr	r2, [r2, #16]
 800a578:	b089      	sub	sp, #36	; 0x24
 800a57a:	000d      	movs	r5, r1
 800a57c:	4293      	cmp	r3, r2
 800a57e:	da01      	bge.n	800a584 <__multiply+0x14>
 800a580:	0025      	movs	r5, r4
 800a582:	000c      	movs	r4, r1
 800a584:	692f      	ldr	r7, [r5, #16]
 800a586:	6926      	ldr	r6, [r4, #16]
 800a588:	6869      	ldr	r1, [r5, #4]
 800a58a:	19bb      	adds	r3, r7, r6
 800a58c:	9302      	str	r3, [sp, #8]
 800a58e:	68ab      	ldr	r3, [r5, #8]
 800a590:	19ba      	adds	r2, r7, r6
 800a592:	4293      	cmp	r3, r2
 800a594:	da00      	bge.n	800a598 <__multiply+0x28>
 800a596:	3101      	adds	r1, #1
 800a598:	f7ff ff09 	bl	800a3ae <_Balloc>
 800a59c:	0002      	movs	r2, r0
 800a59e:	19bb      	adds	r3, r7, r6
 800a5a0:	3214      	adds	r2, #20
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	18d3      	adds	r3, r2, r3
 800a5a6:	469c      	mov	ip, r3
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	0013      	movs	r3, r2
 800a5ac:	9004      	str	r0, [sp, #16]
 800a5ae:	4563      	cmp	r3, ip
 800a5b0:	d31d      	bcc.n	800a5ee <__multiply+0x7e>
 800a5b2:	3514      	adds	r5, #20
 800a5b4:	00bf      	lsls	r7, r7, #2
 800a5b6:	19eb      	adds	r3, r5, r7
 800a5b8:	3414      	adds	r4, #20
 800a5ba:	00b6      	lsls	r6, r6, #2
 800a5bc:	9305      	str	r3, [sp, #20]
 800a5be:	19a3      	adds	r3, r4, r6
 800a5c0:	9503      	str	r5, [sp, #12]
 800a5c2:	9401      	str	r4, [sp, #4]
 800a5c4:	9307      	str	r3, [sp, #28]
 800a5c6:	9b07      	ldr	r3, [sp, #28]
 800a5c8:	9901      	ldr	r1, [sp, #4]
 800a5ca:	4299      	cmp	r1, r3
 800a5cc:	d311      	bcc.n	800a5f2 <__multiply+0x82>
 800a5ce:	9b02      	ldr	r3, [sp, #8]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	dd06      	ble.n	800a5e2 <__multiply+0x72>
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	425b      	negs	r3, r3
 800a5d8:	449c      	add	ip, r3
 800a5da:	4663      	mov	r3, ip
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d051      	beq.n	800a686 <__multiply+0x116>
 800a5e2:	9b04      	ldr	r3, [sp, #16]
 800a5e4:	9a02      	ldr	r2, [sp, #8]
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	611a      	str	r2, [r3, #16]
 800a5ea:	b009      	add	sp, #36	; 0x24
 800a5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ee:	c302      	stmia	r3!, {r1}
 800a5f0:	e7dd      	b.n	800a5ae <__multiply+0x3e>
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	b298      	uxth	r0, r3
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d01c      	beq.n	800a636 <__multiply+0xc6>
 800a5fc:	0015      	movs	r5, r2
 800a5fe:	2600      	movs	r6, #0
 800a600:	9f03      	ldr	r7, [sp, #12]
 800a602:	cf02      	ldmia	r7!, {r1}
 800a604:	682c      	ldr	r4, [r5, #0]
 800a606:	b28b      	uxth	r3, r1
 800a608:	4343      	muls	r3, r0
 800a60a:	0c09      	lsrs	r1, r1, #16
 800a60c:	4341      	muls	r1, r0
 800a60e:	b2a4      	uxth	r4, r4
 800a610:	191b      	adds	r3, r3, r4
 800a612:	199b      	adds	r3, r3, r6
 800a614:	000e      	movs	r6, r1
 800a616:	6829      	ldr	r1, [r5, #0]
 800a618:	9506      	str	r5, [sp, #24]
 800a61a:	0c09      	lsrs	r1, r1, #16
 800a61c:	1871      	adds	r1, r6, r1
 800a61e:	0c1e      	lsrs	r6, r3, #16
 800a620:	1989      	adds	r1, r1, r6
 800a622:	0c0e      	lsrs	r6, r1, #16
 800a624:	b29b      	uxth	r3, r3
 800a626:	0409      	lsls	r1, r1, #16
 800a628:	430b      	orrs	r3, r1
 800a62a:	c508      	stmia	r5!, {r3}
 800a62c:	9b05      	ldr	r3, [sp, #20]
 800a62e:	42bb      	cmp	r3, r7
 800a630:	d8e7      	bhi.n	800a602 <__multiply+0x92>
 800a632:	9b06      	ldr	r3, [sp, #24]
 800a634:	605e      	str	r6, [r3, #4]
 800a636:	9b01      	ldr	r3, [sp, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	0c1d      	lsrs	r5, r3, #16
 800a63c:	d01e      	beq.n	800a67c <__multiply+0x10c>
 800a63e:	0010      	movs	r0, r2
 800a640:	2700      	movs	r7, #0
 800a642:	6813      	ldr	r3, [r2, #0]
 800a644:	9e03      	ldr	r6, [sp, #12]
 800a646:	6831      	ldr	r1, [r6, #0]
 800a648:	6804      	ldr	r4, [r0, #0]
 800a64a:	b289      	uxth	r1, r1
 800a64c:	4369      	muls	r1, r5
 800a64e:	0c24      	lsrs	r4, r4, #16
 800a650:	1909      	adds	r1, r1, r4
 800a652:	19c9      	adds	r1, r1, r7
 800a654:	040f      	lsls	r7, r1, #16
 800a656:	b29b      	uxth	r3, r3
 800a658:	433b      	orrs	r3, r7
 800a65a:	6003      	str	r3, [r0, #0]
 800a65c:	ce80      	ldmia	r6!, {r7}
 800a65e:	6843      	ldr	r3, [r0, #4]
 800a660:	0c3f      	lsrs	r7, r7, #16
 800a662:	436f      	muls	r7, r5
 800a664:	b29b      	uxth	r3, r3
 800a666:	18fb      	adds	r3, r7, r3
 800a668:	0c09      	lsrs	r1, r1, #16
 800a66a:	185b      	adds	r3, r3, r1
 800a66c:	9905      	ldr	r1, [sp, #20]
 800a66e:	9006      	str	r0, [sp, #24]
 800a670:	0c1f      	lsrs	r7, r3, #16
 800a672:	3004      	adds	r0, #4
 800a674:	42b1      	cmp	r1, r6
 800a676:	d8e6      	bhi.n	800a646 <__multiply+0xd6>
 800a678:	9906      	ldr	r1, [sp, #24]
 800a67a:	604b      	str	r3, [r1, #4]
 800a67c:	9b01      	ldr	r3, [sp, #4]
 800a67e:	3204      	adds	r2, #4
 800a680:	3304      	adds	r3, #4
 800a682:	9301      	str	r3, [sp, #4]
 800a684:	e79f      	b.n	800a5c6 <__multiply+0x56>
 800a686:	9b02      	ldr	r3, [sp, #8]
 800a688:	3b01      	subs	r3, #1
 800a68a:	9302      	str	r3, [sp, #8]
 800a68c:	e79f      	b.n	800a5ce <__multiply+0x5e>
	...

0800a690 <__pow5mult>:
 800a690:	2303      	movs	r3, #3
 800a692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a694:	4013      	ands	r3, r2
 800a696:	0005      	movs	r5, r0
 800a698:	000e      	movs	r6, r1
 800a69a:	0014      	movs	r4, r2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d008      	beq.n	800a6b2 <__pow5mult+0x22>
 800a6a0:	4922      	ldr	r1, [pc, #136]	; (800a72c <__pow5mult+0x9c>)
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	009a      	lsls	r2, r3, #2
 800a6a6:	5852      	ldr	r2, [r2, r1]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	0031      	movs	r1, r6
 800a6ac:	f7ff fed0 	bl	800a450 <__multadd>
 800a6b0:	0006      	movs	r6, r0
 800a6b2:	10a3      	asrs	r3, r4, #2
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	d036      	beq.n	800a726 <__pow5mult+0x96>
 800a6b8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800a6ba:	2c00      	cmp	r4, #0
 800a6bc:	d107      	bne.n	800a6ce <__pow5mult+0x3e>
 800a6be:	2010      	movs	r0, #16
 800a6c0:	f7ff fe60 	bl	800a384 <malloc>
 800a6c4:	6268      	str	r0, [r5, #36]	; 0x24
 800a6c6:	6044      	str	r4, [r0, #4]
 800a6c8:	6084      	str	r4, [r0, #8]
 800a6ca:	6004      	str	r4, [r0, #0]
 800a6cc:	60c4      	str	r4, [r0, #12]
 800a6ce:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800a6d0:	68bc      	ldr	r4, [r7, #8]
 800a6d2:	2c00      	cmp	r4, #0
 800a6d4:	d107      	bne.n	800a6e6 <__pow5mult+0x56>
 800a6d6:	4916      	ldr	r1, [pc, #88]	; (800a730 <__pow5mult+0xa0>)
 800a6d8:	0028      	movs	r0, r5
 800a6da:	f7ff ff40 	bl	800a55e <__i2b>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	0004      	movs	r4, r0
 800a6e2:	60b8      	str	r0, [r7, #8]
 800a6e4:	6003      	str	r3, [r0, #0]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	9b01      	ldr	r3, [sp, #4]
 800a6ea:	4213      	tst	r3, r2
 800a6ec:	d00a      	beq.n	800a704 <__pow5mult+0x74>
 800a6ee:	0031      	movs	r1, r6
 800a6f0:	0022      	movs	r2, r4
 800a6f2:	0028      	movs	r0, r5
 800a6f4:	f7ff ff3c 	bl	800a570 <__multiply>
 800a6f8:	0007      	movs	r7, r0
 800a6fa:	0031      	movs	r1, r6
 800a6fc:	0028      	movs	r0, r5
 800a6fe:	f7ff fe8e 	bl	800a41e <_Bfree>
 800a702:	003e      	movs	r6, r7
 800a704:	9b01      	ldr	r3, [sp, #4]
 800a706:	105b      	asrs	r3, r3, #1
 800a708:	9301      	str	r3, [sp, #4]
 800a70a:	d00c      	beq.n	800a726 <__pow5mult+0x96>
 800a70c:	6820      	ldr	r0, [r4, #0]
 800a70e:	2800      	cmp	r0, #0
 800a710:	d107      	bne.n	800a722 <__pow5mult+0x92>
 800a712:	0022      	movs	r2, r4
 800a714:	0021      	movs	r1, r4
 800a716:	0028      	movs	r0, r5
 800a718:	f7ff ff2a 	bl	800a570 <__multiply>
 800a71c:	2300      	movs	r3, #0
 800a71e:	6020      	str	r0, [r4, #0]
 800a720:	6003      	str	r3, [r0, #0]
 800a722:	0004      	movs	r4, r0
 800a724:	e7df      	b.n	800a6e6 <__pow5mult+0x56>
 800a726:	0030      	movs	r0, r6
 800a728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a72a:	46c0      	nop			; (mov r8, r8)
 800a72c:	0800b1e0 	.word	0x0800b1e0
 800a730:	00000271 	.word	0x00000271

0800a734 <__lshift>:
 800a734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a736:	000d      	movs	r5, r1
 800a738:	0017      	movs	r7, r2
 800a73a:	692b      	ldr	r3, [r5, #16]
 800a73c:	1154      	asrs	r4, r2, #5
 800a73e:	b085      	sub	sp, #20
 800a740:	18e3      	adds	r3, r4, r3
 800a742:	9301      	str	r3, [sp, #4]
 800a744:	3301      	adds	r3, #1
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	6849      	ldr	r1, [r1, #4]
 800a74a:	68ab      	ldr	r3, [r5, #8]
 800a74c:	9002      	str	r0, [sp, #8]
 800a74e:	9a00      	ldr	r2, [sp, #0]
 800a750:	4293      	cmp	r3, r2
 800a752:	db35      	blt.n	800a7c0 <__lshift+0x8c>
 800a754:	9802      	ldr	r0, [sp, #8]
 800a756:	f7ff fe2a 	bl	800a3ae <_Balloc>
 800a75a:	2300      	movs	r3, #0
 800a75c:	0002      	movs	r2, r0
 800a75e:	0006      	movs	r6, r0
 800a760:	0019      	movs	r1, r3
 800a762:	3214      	adds	r2, #20
 800a764:	42a3      	cmp	r3, r4
 800a766:	db2e      	blt.n	800a7c6 <__lshift+0x92>
 800a768:	43e3      	mvns	r3, r4
 800a76a:	17db      	asrs	r3, r3, #31
 800a76c:	401c      	ands	r4, r3
 800a76e:	002b      	movs	r3, r5
 800a770:	00a4      	lsls	r4, r4, #2
 800a772:	1914      	adds	r4, r2, r4
 800a774:	692a      	ldr	r2, [r5, #16]
 800a776:	3314      	adds	r3, #20
 800a778:	0092      	lsls	r2, r2, #2
 800a77a:	189a      	adds	r2, r3, r2
 800a77c:	4694      	mov	ip, r2
 800a77e:	221f      	movs	r2, #31
 800a780:	4017      	ands	r7, r2
 800a782:	d024      	beq.n	800a7ce <__lshift+0x9a>
 800a784:	3201      	adds	r2, #1
 800a786:	1bd2      	subs	r2, r2, r7
 800a788:	9203      	str	r2, [sp, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	6819      	ldr	r1, [r3, #0]
 800a78e:	0020      	movs	r0, r4
 800a790:	40b9      	lsls	r1, r7
 800a792:	430a      	orrs	r2, r1
 800a794:	c404      	stmia	r4!, {r2}
 800a796:	cb04      	ldmia	r3!, {r2}
 800a798:	9903      	ldr	r1, [sp, #12]
 800a79a:	40ca      	lsrs	r2, r1
 800a79c:	459c      	cmp	ip, r3
 800a79e:	d8f5      	bhi.n	800a78c <__lshift+0x58>
 800a7a0:	6042      	str	r2, [r0, #4]
 800a7a2:	2a00      	cmp	r2, #0
 800a7a4:	d002      	beq.n	800a7ac <__lshift+0x78>
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	3302      	adds	r3, #2
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	9b00      	ldr	r3, [sp, #0]
 800a7ae:	9802      	ldr	r0, [sp, #8]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	6133      	str	r3, [r6, #16]
 800a7b4:	0029      	movs	r1, r5
 800a7b6:	f7ff fe32 	bl	800a41e <_Bfree>
 800a7ba:	0030      	movs	r0, r6
 800a7bc:	b005      	add	sp, #20
 800a7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7c0:	3101      	adds	r1, #1
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	e7c3      	b.n	800a74e <__lshift+0x1a>
 800a7c6:	0098      	lsls	r0, r3, #2
 800a7c8:	5011      	str	r1, [r2, r0]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	e7ca      	b.n	800a764 <__lshift+0x30>
 800a7ce:	cb04      	ldmia	r3!, {r2}
 800a7d0:	c404      	stmia	r4!, {r2}
 800a7d2:	459c      	cmp	ip, r3
 800a7d4:	d8fb      	bhi.n	800a7ce <__lshift+0x9a>
 800a7d6:	e7e9      	b.n	800a7ac <__lshift+0x78>

0800a7d8 <__mcmp>:
 800a7d8:	690a      	ldr	r2, [r1, #16]
 800a7da:	6903      	ldr	r3, [r0, #16]
 800a7dc:	b530      	push	{r4, r5, lr}
 800a7de:	1a9b      	subs	r3, r3, r2
 800a7e0:	d10d      	bne.n	800a7fe <__mcmp+0x26>
 800a7e2:	0092      	lsls	r2, r2, #2
 800a7e4:	3014      	adds	r0, #20
 800a7e6:	3114      	adds	r1, #20
 800a7e8:	1884      	adds	r4, r0, r2
 800a7ea:	1889      	adds	r1, r1, r2
 800a7ec:	3c04      	subs	r4, #4
 800a7ee:	3904      	subs	r1, #4
 800a7f0:	6825      	ldr	r5, [r4, #0]
 800a7f2:	680a      	ldr	r2, [r1, #0]
 800a7f4:	4295      	cmp	r5, r2
 800a7f6:	d004      	beq.n	800a802 <__mcmp+0x2a>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	4295      	cmp	r5, r2
 800a7fc:	d304      	bcc.n	800a808 <__mcmp+0x30>
 800a7fe:	0018      	movs	r0, r3
 800a800:	bd30      	pop	{r4, r5, pc}
 800a802:	42a0      	cmp	r0, r4
 800a804:	d3f2      	bcc.n	800a7ec <__mcmp+0x14>
 800a806:	e7fa      	b.n	800a7fe <__mcmp+0x26>
 800a808:	425b      	negs	r3, r3
 800a80a:	e7f8      	b.n	800a7fe <__mcmp+0x26>

0800a80c <__mdiff>:
 800a80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a80e:	000d      	movs	r5, r1
 800a810:	b085      	sub	sp, #20
 800a812:	0007      	movs	r7, r0
 800a814:	0011      	movs	r1, r2
 800a816:	0028      	movs	r0, r5
 800a818:	0014      	movs	r4, r2
 800a81a:	f7ff ffdd 	bl	800a7d8 <__mcmp>
 800a81e:	1e06      	subs	r6, r0, #0
 800a820:	d108      	bne.n	800a834 <__mdiff+0x28>
 800a822:	0001      	movs	r1, r0
 800a824:	0038      	movs	r0, r7
 800a826:	f7ff fdc2 	bl	800a3ae <_Balloc>
 800a82a:	2301      	movs	r3, #1
 800a82c:	6146      	str	r6, [r0, #20]
 800a82e:	6103      	str	r3, [r0, #16]
 800a830:	b005      	add	sp, #20
 800a832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a834:	2301      	movs	r3, #1
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	2800      	cmp	r0, #0
 800a83a:	db04      	blt.n	800a846 <__mdiff+0x3a>
 800a83c:	0023      	movs	r3, r4
 800a83e:	002c      	movs	r4, r5
 800a840:	001d      	movs	r5, r3
 800a842:	2300      	movs	r3, #0
 800a844:	9301      	str	r3, [sp, #4]
 800a846:	6861      	ldr	r1, [r4, #4]
 800a848:	0038      	movs	r0, r7
 800a84a:	f7ff fdb0 	bl	800a3ae <_Balloc>
 800a84e:	002f      	movs	r7, r5
 800a850:	2200      	movs	r2, #0
 800a852:	9b01      	ldr	r3, [sp, #4]
 800a854:	6926      	ldr	r6, [r4, #16]
 800a856:	60c3      	str	r3, [r0, #12]
 800a858:	3414      	adds	r4, #20
 800a85a:	00b3      	lsls	r3, r6, #2
 800a85c:	18e3      	adds	r3, r4, r3
 800a85e:	9302      	str	r3, [sp, #8]
 800a860:	692b      	ldr	r3, [r5, #16]
 800a862:	3714      	adds	r7, #20
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	18fb      	adds	r3, r7, r3
 800a868:	9303      	str	r3, [sp, #12]
 800a86a:	0003      	movs	r3, r0
 800a86c:	4694      	mov	ip, r2
 800a86e:	3314      	adds	r3, #20
 800a870:	cc20      	ldmia	r4!, {r5}
 800a872:	cf04      	ldmia	r7!, {r2}
 800a874:	9201      	str	r2, [sp, #4]
 800a876:	b2aa      	uxth	r2, r5
 800a878:	4494      	add	ip, r2
 800a87a:	466a      	mov	r2, sp
 800a87c:	4661      	mov	r1, ip
 800a87e:	8892      	ldrh	r2, [r2, #4]
 800a880:	0c2d      	lsrs	r5, r5, #16
 800a882:	1a8a      	subs	r2, r1, r2
 800a884:	9901      	ldr	r1, [sp, #4]
 800a886:	0c09      	lsrs	r1, r1, #16
 800a888:	1a69      	subs	r1, r5, r1
 800a88a:	1415      	asrs	r5, r2, #16
 800a88c:	1949      	adds	r1, r1, r5
 800a88e:	140d      	asrs	r5, r1, #16
 800a890:	b292      	uxth	r2, r2
 800a892:	0409      	lsls	r1, r1, #16
 800a894:	430a      	orrs	r2, r1
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	9a03      	ldr	r2, [sp, #12]
 800a89a:	46ac      	mov	ip, r5
 800a89c:	3304      	adds	r3, #4
 800a89e:	42ba      	cmp	r2, r7
 800a8a0:	d8e6      	bhi.n	800a870 <__mdiff+0x64>
 800a8a2:	9902      	ldr	r1, [sp, #8]
 800a8a4:	001a      	movs	r2, r3
 800a8a6:	428c      	cmp	r4, r1
 800a8a8:	d305      	bcc.n	800a8b6 <__mdiff+0xaa>
 800a8aa:	3a04      	subs	r2, #4
 800a8ac:	6813      	ldr	r3, [r2, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00e      	beq.n	800a8d0 <__mdiff+0xc4>
 800a8b2:	6106      	str	r6, [r0, #16]
 800a8b4:	e7bc      	b.n	800a830 <__mdiff+0x24>
 800a8b6:	cc04      	ldmia	r4!, {r2}
 800a8b8:	b291      	uxth	r1, r2
 800a8ba:	4461      	add	r1, ip
 800a8bc:	140d      	asrs	r5, r1, #16
 800a8be:	0c12      	lsrs	r2, r2, #16
 800a8c0:	1952      	adds	r2, r2, r5
 800a8c2:	1415      	asrs	r5, r2, #16
 800a8c4:	b289      	uxth	r1, r1
 800a8c6:	0412      	lsls	r2, r2, #16
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	46ac      	mov	ip, r5
 800a8cc:	c304      	stmia	r3!, {r2}
 800a8ce:	e7e8      	b.n	800a8a2 <__mdiff+0x96>
 800a8d0:	3e01      	subs	r6, #1
 800a8d2:	e7ea      	b.n	800a8aa <__mdiff+0x9e>

0800a8d4 <__d2b>:
 800a8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8d6:	001d      	movs	r5, r3
 800a8d8:	2101      	movs	r1, #1
 800a8da:	0014      	movs	r4, r2
 800a8dc:	9f08      	ldr	r7, [sp, #32]
 800a8de:	f7ff fd66 	bl	800a3ae <_Balloc>
 800a8e2:	032b      	lsls	r3, r5, #12
 800a8e4:	006d      	lsls	r5, r5, #1
 800a8e6:	0006      	movs	r6, r0
 800a8e8:	0b1b      	lsrs	r3, r3, #12
 800a8ea:	0d6d      	lsrs	r5, r5, #21
 800a8ec:	d124      	bne.n	800a938 <__d2b+0x64>
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	2c00      	cmp	r4, #0
 800a8f2:	d027      	beq.n	800a944 <__d2b+0x70>
 800a8f4:	4668      	mov	r0, sp
 800a8f6:	9400      	str	r4, [sp, #0]
 800a8f8:	f7ff fe02 	bl	800a500 <__lo0bits>
 800a8fc:	9c00      	ldr	r4, [sp, #0]
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d01e      	beq.n	800a940 <__d2b+0x6c>
 800a902:	9b01      	ldr	r3, [sp, #4]
 800a904:	2120      	movs	r1, #32
 800a906:	001a      	movs	r2, r3
 800a908:	1a09      	subs	r1, r1, r0
 800a90a:	408a      	lsls	r2, r1
 800a90c:	40c3      	lsrs	r3, r0
 800a90e:	4322      	orrs	r2, r4
 800a910:	6172      	str	r2, [r6, #20]
 800a912:	9301      	str	r3, [sp, #4]
 800a914:	9c01      	ldr	r4, [sp, #4]
 800a916:	61b4      	str	r4, [r6, #24]
 800a918:	1e63      	subs	r3, r4, #1
 800a91a:	419c      	sbcs	r4, r3
 800a91c:	3401      	adds	r4, #1
 800a91e:	6134      	str	r4, [r6, #16]
 800a920:	2d00      	cmp	r5, #0
 800a922:	d018      	beq.n	800a956 <__d2b+0x82>
 800a924:	4b12      	ldr	r3, [pc, #72]	; (800a970 <__d2b+0x9c>)
 800a926:	18ed      	adds	r5, r5, r3
 800a928:	2335      	movs	r3, #53	; 0x35
 800a92a:	182d      	adds	r5, r5, r0
 800a92c:	603d      	str	r5, [r7, #0]
 800a92e:	1a18      	subs	r0, r3, r0
 800a930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a932:	6018      	str	r0, [r3, #0]
 800a934:	0030      	movs	r0, r6
 800a936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a938:	2280      	movs	r2, #128	; 0x80
 800a93a:	0352      	lsls	r2, r2, #13
 800a93c:	4313      	orrs	r3, r2
 800a93e:	e7d6      	b.n	800a8ee <__d2b+0x1a>
 800a940:	6174      	str	r4, [r6, #20]
 800a942:	e7e7      	b.n	800a914 <__d2b+0x40>
 800a944:	a801      	add	r0, sp, #4
 800a946:	f7ff fddb 	bl	800a500 <__lo0bits>
 800a94a:	2401      	movs	r4, #1
 800a94c:	9b01      	ldr	r3, [sp, #4]
 800a94e:	6134      	str	r4, [r6, #16]
 800a950:	6173      	str	r3, [r6, #20]
 800a952:	3020      	adds	r0, #32
 800a954:	e7e4      	b.n	800a920 <__d2b+0x4c>
 800a956:	4b07      	ldr	r3, [pc, #28]	; (800a974 <__d2b+0xa0>)
 800a958:	18c0      	adds	r0, r0, r3
 800a95a:	4b07      	ldr	r3, [pc, #28]	; (800a978 <__d2b+0xa4>)
 800a95c:	6038      	str	r0, [r7, #0]
 800a95e:	18e3      	adds	r3, r4, r3
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	18f3      	adds	r3, r6, r3
 800a964:	6958      	ldr	r0, [r3, #20]
 800a966:	f7ff fdb1 	bl	800a4cc <__hi0bits>
 800a96a:	0164      	lsls	r4, r4, #5
 800a96c:	1a20      	subs	r0, r4, r0
 800a96e:	e7df      	b.n	800a930 <__d2b+0x5c>
 800a970:	fffffbcd 	.word	0xfffffbcd
 800a974:	fffffbce 	.word	0xfffffbce
 800a978:	3fffffff 	.word	0x3fffffff

0800a97c <_calloc_r>:
 800a97c:	434a      	muls	r2, r1
 800a97e:	b570      	push	{r4, r5, r6, lr}
 800a980:	0011      	movs	r1, r2
 800a982:	0014      	movs	r4, r2
 800a984:	f000 f852 	bl	800aa2c <_malloc_r>
 800a988:	1e05      	subs	r5, r0, #0
 800a98a:	d003      	beq.n	800a994 <_calloc_r+0x18>
 800a98c:	0022      	movs	r2, r4
 800a98e:	2100      	movs	r1, #0
 800a990:	f7fe f9ed 	bl	8008d6e <memset>
 800a994:	0028      	movs	r0, r5
 800a996:	bd70      	pop	{r4, r5, r6, pc}

0800a998 <_free_r>:
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	0005      	movs	r5, r0
 800a99c:	2900      	cmp	r1, #0
 800a99e:	d010      	beq.n	800a9c2 <_free_r+0x2a>
 800a9a0:	1f0c      	subs	r4, r1, #4
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	da00      	bge.n	800a9aa <_free_r+0x12>
 800a9a8:	18e4      	adds	r4, r4, r3
 800a9aa:	0028      	movs	r0, r5
 800a9ac:	f000 fa33 	bl	800ae16 <__malloc_lock>
 800a9b0:	4a1d      	ldr	r2, [pc, #116]	; (800aa28 <_free_r+0x90>)
 800a9b2:	6813      	ldr	r3, [r2, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d105      	bne.n	800a9c4 <_free_r+0x2c>
 800a9b8:	6063      	str	r3, [r4, #4]
 800a9ba:	6014      	str	r4, [r2, #0]
 800a9bc:	0028      	movs	r0, r5
 800a9be:	f000 fa2b 	bl	800ae18 <__malloc_unlock>
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	d909      	bls.n	800a9dc <_free_r+0x44>
 800a9c8:	6821      	ldr	r1, [r4, #0]
 800a9ca:	1860      	adds	r0, r4, r1
 800a9cc:	4283      	cmp	r3, r0
 800a9ce:	d1f3      	bne.n	800a9b8 <_free_r+0x20>
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	1841      	adds	r1, r0, r1
 800a9d6:	6021      	str	r1, [r4, #0]
 800a9d8:	e7ee      	b.n	800a9b8 <_free_r+0x20>
 800a9da:	0013      	movs	r3, r2
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	d001      	beq.n	800a9e6 <_free_r+0x4e>
 800a9e2:	42a2      	cmp	r2, r4
 800a9e4:	d9f9      	bls.n	800a9da <_free_r+0x42>
 800a9e6:	6819      	ldr	r1, [r3, #0]
 800a9e8:	1858      	adds	r0, r3, r1
 800a9ea:	42a0      	cmp	r0, r4
 800a9ec:	d10b      	bne.n	800aa06 <_free_r+0x6e>
 800a9ee:	6820      	ldr	r0, [r4, #0]
 800a9f0:	1809      	adds	r1, r1, r0
 800a9f2:	1858      	adds	r0, r3, r1
 800a9f4:	6019      	str	r1, [r3, #0]
 800a9f6:	4282      	cmp	r2, r0
 800a9f8:	d1e0      	bne.n	800a9bc <_free_r+0x24>
 800a9fa:	6810      	ldr	r0, [r2, #0]
 800a9fc:	6852      	ldr	r2, [r2, #4]
 800a9fe:	1841      	adds	r1, r0, r1
 800aa00:	6019      	str	r1, [r3, #0]
 800aa02:	605a      	str	r2, [r3, #4]
 800aa04:	e7da      	b.n	800a9bc <_free_r+0x24>
 800aa06:	42a0      	cmp	r0, r4
 800aa08:	d902      	bls.n	800aa10 <_free_r+0x78>
 800aa0a:	230c      	movs	r3, #12
 800aa0c:	602b      	str	r3, [r5, #0]
 800aa0e:	e7d5      	b.n	800a9bc <_free_r+0x24>
 800aa10:	6821      	ldr	r1, [r4, #0]
 800aa12:	1860      	adds	r0, r4, r1
 800aa14:	4282      	cmp	r2, r0
 800aa16:	d103      	bne.n	800aa20 <_free_r+0x88>
 800aa18:	6810      	ldr	r0, [r2, #0]
 800aa1a:	6852      	ldr	r2, [r2, #4]
 800aa1c:	1841      	adds	r1, r0, r1
 800aa1e:	6021      	str	r1, [r4, #0]
 800aa20:	6062      	str	r2, [r4, #4]
 800aa22:	605c      	str	r4, [r3, #4]
 800aa24:	e7ca      	b.n	800a9bc <_free_r+0x24>
 800aa26:	46c0      	nop			; (mov r8, r8)
 800aa28:	200002b0 	.word	0x200002b0

0800aa2c <_malloc_r>:
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	b570      	push	{r4, r5, r6, lr}
 800aa30:	1ccd      	adds	r5, r1, #3
 800aa32:	439d      	bics	r5, r3
 800aa34:	3508      	adds	r5, #8
 800aa36:	0006      	movs	r6, r0
 800aa38:	2d0c      	cmp	r5, #12
 800aa3a:	d21e      	bcs.n	800aa7a <_malloc_r+0x4e>
 800aa3c:	250c      	movs	r5, #12
 800aa3e:	42a9      	cmp	r1, r5
 800aa40:	d81d      	bhi.n	800aa7e <_malloc_r+0x52>
 800aa42:	0030      	movs	r0, r6
 800aa44:	f000 f9e7 	bl	800ae16 <__malloc_lock>
 800aa48:	4a25      	ldr	r2, [pc, #148]	; (800aae0 <_malloc_r+0xb4>)
 800aa4a:	6814      	ldr	r4, [r2, #0]
 800aa4c:	0021      	movs	r1, r4
 800aa4e:	2900      	cmp	r1, #0
 800aa50:	d119      	bne.n	800aa86 <_malloc_r+0x5a>
 800aa52:	4c24      	ldr	r4, [pc, #144]	; (800aae4 <_malloc_r+0xb8>)
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d103      	bne.n	800aa62 <_malloc_r+0x36>
 800aa5a:	0030      	movs	r0, r6
 800aa5c:	f000 f9a4 	bl	800ada8 <_sbrk_r>
 800aa60:	6020      	str	r0, [r4, #0]
 800aa62:	0029      	movs	r1, r5
 800aa64:	0030      	movs	r0, r6
 800aa66:	f000 f99f 	bl	800ada8 <_sbrk_r>
 800aa6a:	1c43      	adds	r3, r0, #1
 800aa6c:	d12b      	bne.n	800aac6 <_malloc_r+0x9a>
 800aa6e:	230c      	movs	r3, #12
 800aa70:	0030      	movs	r0, r6
 800aa72:	6033      	str	r3, [r6, #0]
 800aa74:	f000 f9d0 	bl	800ae18 <__malloc_unlock>
 800aa78:	e003      	b.n	800aa82 <_malloc_r+0x56>
 800aa7a:	2d00      	cmp	r5, #0
 800aa7c:	dadf      	bge.n	800aa3e <_malloc_r+0x12>
 800aa7e:	230c      	movs	r3, #12
 800aa80:	6033      	str	r3, [r6, #0]
 800aa82:	2000      	movs	r0, #0
 800aa84:	bd70      	pop	{r4, r5, r6, pc}
 800aa86:	680b      	ldr	r3, [r1, #0]
 800aa88:	1b5b      	subs	r3, r3, r5
 800aa8a:	d419      	bmi.n	800aac0 <_malloc_r+0x94>
 800aa8c:	2b0b      	cmp	r3, #11
 800aa8e:	d903      	bls.n	800aa98 <_malloc_r+0x6c>
 800aa90:	600b      	str	r3, [r1, #0]
 800aa92:	18cc      	adds	r4, r1, r3
 800aa94:	6025      	str	r5, [r4, #0]
 800aa96:	e003      	b.n	800aaa0 <_malloc_r+0x74>
 800aa98:	684b      	ldr	r3, [r1, #4]
 800aa9a:	428c      	cmp	r4, r1
 800aa9c:	d10d      	bne.n	800aaba <_malloc_r+0x8e>
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	0030      	movs	r0, r6
 800aaa2:	f000 f9b9 	bl	800ae18 <__malloc_unlock>
 800aaa6:	0020      	movs	r0, r4
 800aaa8:	2207      	movs	r2, #7
 800aaaa:	300b      	adds	r0, #11
 800aaac:	1d23      	adds	r3, r4, #4
 800aaae:	4390      	bics	r0, r2
 800aab0:	1ac3      	subs	r3, r0, r3
 800aab2:	d0e7      	beq.n	800aa84 <_malloc_r+0x58>
 800aab4:	425a      	negs	r2, r3
 800aab6:	50e2      	str	r2, [r4, r3]
 800aab8:	e7e4      	b.n	800aa84 <_malloc_r+0x58>
 800aaba:	6063      	str	r3, [r4, #4]
 800aabc:	000c      	movs	r4, r1
 800aabe:	e7ef      	b.n	800aaa0 <_malloc_r+0x74>
 800aac0:	000c      	movs	r4, r1
 800aac2:	6849      	ldr	r1, [r1, #4]
 800aac4:	e7c3      	b.n	800aa4e <_malloc_r+0x22>
 800aac6:	2303      	movs	r3, #3
 800aac8:	1cc4      	adds	r4, r0, #3
 800aaca:	439c      	bics	r4, r3
 800aacc:	42a0      	cmp	r0, r4
 800aace:	d0e1      	beq.n	800aa94 <_malloc_r+0x68>
 800aad0:	1a21      	subs	r1, r4, r0
 800aad2:	0030      	movs	r0, r6
 800aad4:	f000 f968 	bl	800ada8 <_sbrk_r>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d1db      	bne.n	800aa94 <_malloc_r+0x68>
 800aadc:	e7c7      	b.n	800aa6e <_malloc_r+0x42>
 800aade:	46c0      	nop			; (mov r8, r8)
 800aae0:	200002b0 	.word	0x200002b0
 800aae4:	200002b4 	.word	0x200002b4

0800aae8 <__ssputs_r>:
 800aae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaea:	688e      	ldr	r6, [r1, #8]
 800aaec:	b085      	sub	sp, #20
 800aaee:	0007      	movs	r7, r0
 800aaf0:	000c      	movs	r4, r1
 800aaf2:	9203      	str	r2, [sp, #12]
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	429e      	cmp	r6, r3
 800aaf8:	d83c      	bhi.n	800ab74 <__ssputs_r+0x8c>
 800aafa:	2390      	movs	r3, #144	; 0x90
 800aafc:	898a      	ldrh	r2, [r1, #12]
 800aafe:	00db      	lsls	r3, r3, #3
 800ab00:	421a      	tst	r2, r3
 800ab02:	d034      	beq.n	800ab6e <__ssputs_r+0x86>
 800ab04:	2503      	movs	r5, #3
 800ab06:	6909      	ldr	r1, [r1, #16]
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	1a5b      	subs	r3, r3, r1
 800ab0c:	9302      	str	r3, [sp, #8]
 800ab0e:	6963      	ldr	r3, [r4, #20]
 800ab10:	9802      	ldr	r0, [sp, #8]
 800ab12:	435d      	muls	r5, r3
 800ab14:	0feb      	lsrs	r3, r5, #31
 800ab16:	195d      	adds	r5, r3, r5
 800ab18:	9b01      	ldr	r3, [sp, #4]
 800ab1a:	106d      	asrs	r5, r5, #1
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	181b      	adds	r3, r3, r0
 800ab20:	42ab      	cmp	r3, r5
 800ab22:	d900      	bls.n	800ab26 <__ssputs_r+0x3e>
 800ab24:	001d      	movs	r5, r3
 800ab26:	0553      	lsls	r3, r2, #21
 800ab28:	d532      	bpl.n	800ab90 <__ssputs_r+0xa8>
 800ab2a:	0029      	movs	r1, r5
 800ab2c:	0038      	movs	r0, r7
 800ab2e:	f7ff ff7d 	bl	800aa2c <_malloc_r>
 800ab32:	1e06      	subs	r6, r0, #0
 800ab34:	d109      	bne.n	800ab4a <__ssputs_r+0x62>
 800ab36:	230c      	movs	r3, #12
 800ab38:	603b      	str	r3, [r7, #0]
 800ab3a:	2340      	movs	r3, #64	; 0x40
 800ab3c:	2001      	movs	r0, #1
 800ab3e:	89a2      	ldrh	r2, [r4, #12]
 800ab40:	4240      	negs	r0, r0
 800ab42:	4313      	orrs	r3, r2
 800ab44:	81a3      	strh	r3, [r4, #12]
 800ab46:	b005      	add	sp, #20
 800ab48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab4a:	9a02      	ldr	r2, [sp, #8]
 800ab4c:	6921      	ldr	r1, [r4, #16]
 800ab4e:	f7fe f905 	bl	8008d5c <memcpy>
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	4a14      	ldr	r2, [pc, #80]	; (800aba8 <__ssputs_r+0xc0>)
 800ab56:	401a      	ands	r2, r3
 800ab58:	2380      	movs	r3, #128	; 0x80
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	81a3      	strh	r3, [r4, #12]
 800ab5e:	9b02      	ldr	r3, [sp, #8]
 800ab60:	6126      	str	r6, [r4, #16]
 800ab62:	18f6      	adds	r6, r6, r3
 800ab64:	6026      	str	r6, [r4, #0]
 800ab66:	6165      	str	r5, [r4, #20]
 800ab68:	9e01      	ldr	r6, [sp, #4]
 800ab6a:	1aed      	subs	r5, r5, r3
 800ab6c:	60a5      	str	r5, [r4, #8]
 800ab6e:	9b01      	ldr	r3, [sp, #4]
 800ab70:	429e      	cmp	r6, r3
 800ab72:	d900      	bls.n	800ab76 <__ssputs_r+0x8e>
 800ab74:	9e01      	ldr	r6, [sp, #4]
 800ab76:	0032      	movs	r2, r6
 800ab78:	9903      	ldr	r1, [sp, #12]
 800ab7a:	6820      	ldr	r0, [r4, #0]
 800ab7c:	f000 f938 	bl	800adf0 <memmove>
 800ab80:	68a3      	ldr	r3, [r4, #8]
 800ab82:	2000      	movs	r0, #0
 800ab84:	1b9b      	subs	r3, r3, r6
 800ab86:	60a3      	str	r3, [r4, #8]
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	199e      	adds	r6, r3, r6
 800ab8c:	6026      	str	r6, [r4, #0]
 800ab8e:	e7da      	b.n	800ab46 <__ssputs_r+0x5e>
 800ab90:	002a      	movs	r2, r5
 800ab92:	0038      	movs	r0, r7
 800ab94:	f000 f941 	bl	800ae1a <_realloc_r>
 800ab98:	1e06      	subs	r6, r0, #0
 800ab9a:	d1e0      	bne.n	800ab5e <__ssputs_r+0x76>
 800ab9c:	6921      	ldr	r1, [r4, #16]
 800ab9e:	0038      	movs	r0, r7
 800aba0:	f7ff fefa 	bl	800a998 <_free_r>
 800aba4:	e7c7      	b.n	800ab36 <__ssputs_r+0x4e>
 800aba6:	46c0      	nop			; (mov r8, r8)
 800aba8:	fffffb7f 	.word	0xfffffb7f

0800abac <_svfiprintf_r>:
 800abac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abae:	b0a1      	sub	sp, #132	; 0x84
 800abb0:	9003      	str	r0, [sp, #12]
 800abb2:	001d      	movs	r5, r3
 800abb4:	898b      	ldrh	r3, [r1, #12]
 800abb6:	000f      	movs	r7, r1
 800abb8:	0016      	movs	r6, r2
 800abba:	061b      	lsls	r3, r3, #24
 800abbc:	d511      	bpl.n	800abe2 <_svfiprintf_r+0x36>
 800abbe:	690b      	ldr	r3, [r1, #16]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10e      	bne.n	800abe2 <_svfiprintf_r+0x36>
 800abc4:	2140      	movs	r1, #64	; 0x40
 800abc6:	f7ff ff31 	bl	800aa2c <_malloc_r>
 800abca:	6038      	str	r0, [r7, #0]
 800abcc:	6138      	str	r0, [r7, #16]
 800abce:	2800      	cmp	r0, #0
 800abd0:	d105      	bne.n	800abde <_svfiprintf_r+0x32>
 800abd2:	230c      	movs	r3, #12
 800abd4:	9a03      	ldr	r2, [sp, #12]
 800abd6:	3801      	subs	r0, #1
 800abd8:	6013      	str	r3, [r2, #0]
 800abda:	b021      	add	sp, #132	; 0x84
 800abdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abde:	2340      	movs	r3, #64	; 0x40
 800abe0:	617b      	str	r3, [r7, #20]
 800abe2:	2300      	movs	r3, #0
 800abe4:	ac08      	add	r4, sp, #32
 800abe6:	6163      	str	r3, [r4, #20]
 800abe8:	3320      	adds	r3, #32
 800abea:	7663      	strb	r3, [r4, #25]
 800abec:	3310      	adds	r3, #16
 800abee:	76a3      	strb	r3, [r4, #26]
 800abf0:	9507      	str	r5, [sp, #28]
 800abf2:	0035      	movs	r5, r6
 800abf4:	782b      	ldrb	r3, [r5, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <_svfiprintf_r+0x52>
 800abfa:	2b25      	cmp	r3, #37	; 0x25
 800abfc:	d146      	bne.n	800ac8c <_svfiprintf_r+0xe0>
 800abfe:	1bab      	subs	r3, r5, r6
 800ac00:	9305      	str	r3, [sp, #20]
 800ac02:	d00c      	beq.n	800ac1e <_svfiprintf_r+0x72>
 800ac04:	0032      	movs	r2, r6
 800ac06:	0039      	movs	r1, r7
 800ac08:	9803      	ldr	r0, [sp, #12]
 800ac0a:	f7ff ff6d 	bl	800aae8 <__ssputs_r>
 800ac0e:	1c43      	adds	r3, r0, #1
 800ac10:	d100      	bne.n	800ac14 <_svfiprintf_r+0x68>
 800ac12:	e0ae      	b.n	800ad72 <_svfiprintf_r+0x1c6>
 800ac14:	6962      	ldr	r2, [r4, #20]
 800ac16:	9b05      	ldr	r3, [sp, #20]
 800ac18:	4694      	mov	ip, r2
 800ac1a:	4463      	add	r3, ip
 800ac1c:	6163      	str	r3, [r4, #20]
 800ac1e:	782b      	ldrb	r3, [r5, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d100      	bne.n	800ac26 <_svfiprintf_r+0x7a>
 800ac24:	e0a5      	b.n	800ad72 <_svfiprintf_r+0x1c6>
 800ac26:	2201      	movs	r2, #1
 800ac28:	2300      	movs	r3, #0
 800ac2a:	4252      	negs	r2, r2
 800ac2c:	6062      	str	r2, [r4, #4]
 800ac2e:	a904      	add	r1, sp, #16
 800ac30:	3254      	adds	r2, #84	; 0x54
 800ac32:	1852      	adds	r2, r2, r1
 800ac34:	1c6e      	adds	r6, r5, #1
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	60e3      	str	r3, [r4, #12]
 800ac3a:	60a3      	str	r3, [r4, #8]
 800ac3c:	7013      	strb	r3, [r2, #0]
 800ac3e:	65a3      	str	r3, [r4, #88]	; 0x58
 800ac40:	7831      	ldrb	r1, [r6, #0]
 800ac42:	2205      	movs	r2, #5
 800ac44:	4853      	ldr	r0, [pc, #332]	; (800ad94 <_svfiprintf_r+0x1e8>)
 800ac46:	f7ff fba7 	bl	800a398 <memchr>
 800ac4a:	1c75      	adds	r5, r6, #1
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d11f      	bne.n	800ac90 <_svfiprintf_r+0xe4>
 800ac50:	6822      	ldr	r2, [r4, #0]
 800ac52:	06d3      	lsls	r3, r2, #27
 800ac54:	d504      	bpl.n	800ac60 <_svfiprintf_r+0xb4>
 800ac56:	2353      	movs	r3, #83	; 0x53
 800ac58:	a904      	add	r1, sp, #16
 800ac5a:	185b      	adds	r3, r3, r1
 800ac5c:	2120      	movs	r1, #32
 800ac5e:	7019      	strb	r1, [r3, #0]
 800ac60:	0713      	lsls	r3, r2, #28
 800ac62:	d504      	bpl.n	800ac6e <_svfiprintf_r+0xc2>
 800ac64:	2353      	movs	r3, #83	; 0x53
 800ac66:	a904      	add	r1, sp, #16
 800ac68:	185b      	adds	r3, r3, r1
 800ac6a:	212b      	movs	r1, #43	; 0x2b
 800ac6c:	7019      	strb	r1, [r3, #0]
 800ac6e:	7833      	ldrb	r3, [r6, #0]
 800ac70:	2b2a      	cmp	r3, #42	; 0x2a
 800ac72:	d016      	beq.n	800aca2 <_svfiprintf_r+0xf6>
 800ac74:	0035      	movs	r5, r6
 800ac76:	2100      	movs	r1, #0
 800ac78:	200a      	movs	r0, #10
 800ac7a:	68e3      	ldr	r3, [r4, #12]
 800ac7c:	782a      	ldrb	r2, [r5, #0]
 800ac7e:	1c6e      	adds	r6, r5, #1
 800ac80:	3a30      	subs	r2, #48	; 0x30
 800ac82:	2a09      	cmp	r2, #9
 800ac84:	d94e      	bls.n	800ad24 <_svfiprintf_r+0x178>
 800ac86:	2900      	cmp	r1, #0
 800ac88:	d018      	beq.n	800acbc <_svfiprintf_r+0x110>
 800ac8a:	e010      	b.n	800acae <_svfiprintf_r+0x102>
 800ac8c:	3501      	adds	r5, #1
 800ac8e:	e7b1      	b.n	800abf4 <_svfiprintf_r+0x48>
 800ac90:	4b40      	ldr	r3, [pc, #256]	; (800ad94 <_svfiprintf_r+0x1e8>)
 800ac92:	6822      	ldr	r2, [r4, #0]
 800ac94:	1ac0      	subs	r0, r0, r3
 800ac96:	2301      	movs	r3, #1
 800ac98:	4083      	lsls	r3, r0
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	002e      	movs	r6, r5
 800aca0:	e7ce      	b.n	800ac40 <_svfiprintf_r+0x94>
 800aca2:	9b07      	ldr	r3, [sp, #28]
 800aca4:	1d19      	adds	r1, r3, #4
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	9107      	str	r1, [sp, #28]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	db01      	blt.n	800acb2 <_svfiprintf_r+0x106>
 800acae:	930b      	str	r3, [sp, #44]	; 0x2c
 800acb0:	e004      	b.n	800acbc <_svfiprintf_r+0x110>
 800acb2:	425b      	negs	r3, r3
 800acb4:	60e3      	str	r3, [r4, #12]
 800acb6:	2302      	movs	r3, #2
 800acb8:	4313      	orrs	r3, r2
 800acba:	6023      	str	r3, [r4, #0]
 800acbc:	782b      	ldrb	r3, [r5, #0]
 800acbe:	2b2e      	cmp	r3, #46	; 0x2e
 800acc0:	d10a      	bne.n	800acd8 <_svfiprintf_r+0x12c>
 800acc2:	786b      	ldrb	r3, [r5, #1]
 800acc4:	2b2a      	cmp	r3, #42	; 0x2a
 800acc6:	d135      	bne.n	800ad34 <_svfiprintf_r+0x188>
 800acc8:	9b07      	ldr	r3, [sp, #28]
 800acca:	3502      	adds	r5, #2
 800accc:	1d1a      	adds	r2, r3, #4
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	9207      	str	r2, [sp, #28]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	db2b      	blt.n	800ad2e <_svfiprintf_r+0x182>
 800acd6:	9309      	str	r3, [sp, #36]	; 0x24
 800acd8:	4e2f      	ldr	r6, [pc, #188]	; (800ad98 <_svfiprintf_r+0x1ec>)
 800acda:	7829      	ldrb	r1, [r5, #0]
 800acdc:	2203      	movs	r2, #3
 800acde:	0030      	movs	r0, r6
 800ace0:	f7ff fb5a 	bl	800a398 <memchr>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d006      	beq.n	800acf6 <_svfiprintf_r+0x14a>
 800ace8:	2340      	movs	r3, #64	; 0x40
 800acea:	1b80      	subs	r0, r0, r6
 800acec:	4083      	lsls	r3, r0
 800acee:	6822      	ldr	r2, [r4, #0]
 800acf0:	3501      	adds	r5, #1
 800acf2:	4313      	orrs	r3, r2
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	7829      	ldrb	r1, [r5, #0]
 800acf8:	2206      	movs	r2, #6
 800acfa:	4828      	ldr	r0, [pc, #160]	; (800ad9c <_svfiprintf_r+0x1f0>)
 800acfc:	1c6e      	adds	r6, r5, #1
 800acfe:	7621      	strb	r1, [r4, #24]
 800ad00:	f7ff fb4a 	bl	800a398 <memchr>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d03c      	beq.n	800ad82 <_svfiprintf_r+0x1d6>
 800ad08:	4b25      	ldr	r3, [pc, #148]	; (800ada0 <_svfiprintf_r+0x1f4>)
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d125      	bne.n	800ad5a <_svfiprintf_r+0x1ae>
 800ad0e:	2207      	movs	r2, #7
 800ad10:	9b07      	ldr	r3, [sp, #28]
 800ad12:	3307      	adds	r3, #7
 800ad14:	4393      	bics	r3, r2
 800ad16:	3308      	adds	r3, #8
 800ad18:	9307      	str	r3, [sp, #28]
 800ad1a:	6963      	ldr	r3, [r4, #20]
 800ad1c:	9a04      	ldr	r2, [sp, #16]
 800ad1e:	189b      	adds	r3, r3, r2
 800ad20:	6163      	str	r3, [r4, #20]
 800ad22:	e766      	b.n	800abf2 <_svfiprintf_r+0x46>
 800ad24:	4343      	muls	r3, r0
 800ad26:	2101      	movs	r1, #1
 800ad28:	189b      	adds	r3, r3, r2
 800ad2a:	0035      	movs	r5, r6
 800ad2c:	e7a6      	b.n	800ac7c <_svfiprintf_r+0xd0>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	425b      	negs	r3, r3
 800ad32:	e7d0      	b.n	800acd6 <_svfiprintf_r+0x12a>
 800ad34:	2300      	movs	r3, #0
 800ad36:	200a      	movs	r0, #10
 800ad38:	001a      	movs	r2, r3
 800ad3a:	3501      	adds	r5, #1
 800ad3c:	6063      	str	r3, [r4, #4]
 800ad3e:	7829      	ldrb	r1, [r5, #0]
 800ad40:	1c6e      	adds	r6, r5, #1
 800ad42:	3930      	subs	r1, #48	; 0x30
 800ad44:	2909      	cmp	r1, #9
 800ad46:	d903      	bls.n	800ad50 <_svfiprintf_r+0x1a4>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d0c5      	beq.n	800acd8 <_svfiprintf_r+0x12c>
 800ad4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad4e:	e7c3      	b.n	800acd8 <_svfiprintf_r+0x12c>
 800ad50:	4342      	muls	r2, r0
 800ad52:	2301      	movs	r3, #1
 800ad54:	1852      	adds	r2, r2, r1
 800ad56:	0035      	movs	r5, r6
 800ad58:	e7f1      	b.n	800ad3e <_svfiprintf_r+0x192>
 800ad5a:	ab07      	add	r3, sp, #28
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	003a      	movs	r2, r7
 800ad60:	4b10      	ldr	r3, [pc, #64]	; (800ada4 <_svfiprintf_r+0x1f8>)
 800ad62:	0021      	movs	r1, r4
 800ad64:	9803      	ldr	r0, [sp, #12]
 800ad66:	f7fe f8a7 	bl	8008eb8 <_printf_float>
 800ad6a:	9004      	str	r0, [sp, #16]
 800ad6c:	9b04      	ldr	r3, [sp, #16]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	d1d3      	bne.n	800ad1a <_svfiprintf_r+0x16e>
 800ad72:	89bb      	ldrh	r3, [r7, #12]
 800ad74:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ad76:	065b      	lsls	r3, r3, #25
 800ad78:	d400      	bmi.n	800ad7c <_svfiprintf_r+0x1d0>
 800ad7a:	e72e      	b.n	800abda <_svfiprintf_r+0x2e>
 800ad7c:	2001      	movs	r0, #1
 800ad7e:	4240      	negs	r0, r0
 800ad80:	e72b      	b.n	800abda <_svfiprintf_r+0x2e>
 800ad82:	ab07      	add	r3, sp, #28
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	003a      	movs	r2, r7
 800ad88:	4b06      	ldr	r3, [pc, #24]	; (800ada4 <_svfiprintf_r+0x1f8>)
 800ad8a:	0021      	movs	r1, r4
 800ad8c:	9803      	ldr	r0, [sp, #12]
 800ad8e:	f7fe fb4d 	bl	800942c <_printf_i>
 800ad92:	e7ea      	b.n	800ad6a <_svfiprintf_r+0x1be>
 800ad94:	0800b1ec 	.word	0x0800b1ec
 800ad98:	0800b1f2 	.word	0x0800b1f2
 800ad9c:	0800b1f6 	.word	0x0800b1f6
 800ada0:	08008eb9 	.word	0x08008eb9
 800ada4:	0800aae9 	.word	0x0800aae9

0800ada8 <_sbrk_r>:
 800ada8:	2300      	movs	r3, #0
 800adaa:	b570      	push	{r4, r5, r6, lr}
 800adac:	4c06      	ldr	r4, [pc, #24]	; (800adc8 <_sbrk_r+0x20>)
 800adae:	0005      	movs	r5, r0
 800adb0:	0008      	movs	r0, r1
 800adb2:	6023      	str	r3, [r4, #0]
 800adb4:	f7f9 fa64 	bl	8004280 <_sbrk>
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	d103      	bne.n	800adc4 <_sbrk_r+0x1c>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d000      	beq.n	800adc4 <_sbrk_r+0x1c>
 800adc2:	602b      	str	r3, [r5, #0]
 800adc4:	bd70      	pop	{r4, r5, r6, pc}
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	200009c4 	.word	0x200009c4

0800adcc <__ascii_mbtowc>:
 800adcc:	b082      	sub	sp, #8
 800adce:	2900      	cmp	r1, #0
 800add0:	d100      	bne.n	800add4 <__ascii_mbtowc+0x8>
 800add2:	a901      	add	r1, sp, #4
 800add4:	1e10      	subs	r0, r2, #0
 800add6:	d006      	beq.n	800ade6 <__ascii_mbtowc+0x1a>
 800add8:	2b00      	cmp	r3, #0
 800adda:	d006      	beq.n	800adea <__ascii_mbtowc+0x1e>
 800addc:	7813      	ldrb	r3, [r2, #0]
 800adde:	600b      	str	r3, [r1, #0]
 800ade0:	7810      	ldrb	r0, [r2, #0]
 800ade2:	1e43      	subs	r3, r0, #1
 800ade4:	4198      	sbcs	r0, r3
 800ade6:	b002      	add	sp, #8
 800ade8:	4770      	bx	lr
 800adea:	2002      	movs	r0, #2
 800adec:	4240      	negs	r0, r0
 800adee:	e7fa      	b.n	800ade6 <__ascii_mbtowc+0x1a>

0800adf0 <memmove>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	4288      	cmp	r0, r1
 800adf4:	d902      	bls.n	800adfc <memmove+0xc>
 800adf6:	188b      	adds	r3, r1, r2
 800adf8:	4298      	cmp	r0, r3
 800adfa:	d303      	bcc.n	800ae04 <memmove+0x14>
 800adfc:	2300      	movs	r3, #0
 800adfe:	e007      	b.n	800ae10 <memmove+0x20>
 800ae00:	5c8b      	ldrb	r3, [r1, r2]
 800ae02:	5483      	strb	r3, [r0, r2]
 800ae04:	3a01      	subs	r2, #1
 800ae06:	d2fb      	bcs.n	800ae00 <memmove+0x10>
 800ae08:	bd10      	pop	{r4, pc}
 800ae0a:	5ccc      	ldrb	r4, [r1, r3]
 800ae0c:	54c4      	strb	r4, [r0, r3]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d1fa      	bne.n	800ae0a <memmove+0x1a>
 800ae14:	e7f8      	b.n	800ae08 <memmove+0x18>

0800ae16 <__malloc_lock>:
 800ae16:	4770      	bx	lr

0800ae18 <__malloc_unlock>:
 800ae18:	4770      	bx	lr

0800ae1a <_realloc_r>:
 800ae1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1c:	0007      	movs	r7, r0
 800ae1e:	000d      	movs	r5, r1
 800ae20:	0016      	movs	r6, r2
 800ae22:	2900      	cmp	r1, #0
 800ae24:	d105      	bne.n	800ae32 <_realloc_r+0x18>
 800ae26:	0011      	movs	r1, r2
 800ae28:	f7ff fe00 	bl	800aa2c <_malloc_r>
 800ae2c:	0004      	movs	r4, r0
 800ae2e:	0020      	movs	r0, r4
 800ae30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae32:	2a00      	cmp	r2, #0
 800ae34:	d103      	bne.n	800ae3e <_realloc_r+0x24>
 800ae36:	f7ff fdaf 	bl	800a998 <_free_r>
 800ae3a:	0034      	movs	r4, r6
 800ae3c:	e7f7      	b.n	800ae2e <_realloc_r+0x14>
 800ae3e:	f000 f81e 	bl	800ae7e <_malloc_usable_size_r>
 800ae42:	002c      	movs	r4, r5
 800ae44:	42b0      	cmp	r0, r6
 800ae46:	d2f2      	bcs.n	800ae2e <_realloc_r+0x14>
 800ae48:	0031      	movs	r1, r6
 800ae4a:	0038      	movs	r0, r7
 800ae4c:	f7ff fdee 	bl	800aa2c <_malloc_r>
 800ae50:	1e04      	subs	r4, r0, #0
 800ae52:	d0ec      	beq.n	800ae2e <_realloc_r+0x14>
 800ae54:	0029      	movs	r1, r5
 800ae56:	0032      	movs	r2, r6
 800ae58:	f7fd ff80 	bl	8008d5c <memcpy>
 800ae5c:	0029      	movs	r1, r5
 800ae5e:	0038      	movs	r0, r7
 800ae60:	f7ff fd9a 	bl	800a998 <_free_r>
 800ae64:	e7e3      	b.n	800ae2e <_realloc_r+0x14>

0800ae66 <__ascii_wctomb>:
 800ae66:	1e0b      	subs	r3, r1, #0
 800ae68:	d004      	beq.n	800ae74 <__ascii_wctomb+0xe>
 800ae6a:	2aff      	cmp	r2, #255	; 0xff
 800ae6c:	d904      	bls.n	800ae78 <__ascii_wctomb+0x12>
 800ae6e:	238a      	movs	r3, #138	; 0x8a
 800ae70:	6003      	str	r3, [r0, #0]
 800ae72:	3b8b      	subs	r3, #139	; 0x8b
 800ae74:	0018      	movs	r0, r3
 800ae76:	4770      	bx	lr
 800ae78:	700a      	strb	r2, [r1, #0]
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e7fa      	b.n	800ae74 <__ascii_wctomb+0xe>

0800ae7e <_malloc_usable_size_r>:
 800ae7e:	1f0b      	subs	r3, r1, #4
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	1f18      	subs	r0, r3, #4
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	da01      	bge.n	800ae8c <_malloc_usable_size_r+0xe>
 800ae88:	580b      	ldr	r3, [r1, r0]
 800ae8a:	18c0      	adds	r0, r0, r3
 800ae8c:	4770      	bx	lr
	...

0800ae90 <_init>:
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	46c0      	nop			; (mov r8, r8)
 800ae94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae96:	bc08      	pop	{r3}
 800ae98:	469e      	mov	lr, r3
 800ae9a:	4770      	bx	lr

0800ae9c <_fini>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea2:	bc08      	pop	{r3}
 800aea4:	469e      	mov	lr, r3
 800aea6:	4770      	bx	lr
