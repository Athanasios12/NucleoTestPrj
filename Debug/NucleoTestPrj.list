
NucleoTestPrj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d2c  08003d2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d2c  08003d2c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d2c  08003d2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000070  08003da4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08003da4  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd3b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cf0  00000000  00000000  0002bdd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  0002dac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  0002e748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000dcd1  00000000  00000000  0002f300  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e67  00000000  00000000  0003cfd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00051098  00000000  00000000  00046e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00097ed0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f5c  00000000  00000000  00097f4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c68 	.word	0x08003c68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003c68 	.word	0x08003c68

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
static void initBluetoothHC06(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if (TIM6 == htim->Instance)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0c      	ldr	r2, [pc, #48]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d107      	bne.n	8000252 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		timeCounter++;
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	b29b      	uxth	r3, r3
 8000248:	3301      	adds	r3, #1
 800024a:	b29a      	uxth	r2, r3
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800024e:	801a      	strh	r2, [r3, #0]
	}
	else if(TIM14 == htim->Instance)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
	}
}
 8000250:	e009      	b.n	8000266 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if(TIM14 == htim->Instance)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a08      	ldr	r2, [pc, #32]	; (8000278 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d104      	bne.n	8000266 <HAL_TIM_PeriodElapsedCallback+0x36>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800025e:	2104      	movs	r1, #4
 8000260:	0018      	movs	r0, r3
 8000262:	f001 f857 	bl	8001314 <HAL_GPIO_TogglePin>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	40001000 	.word	0x40001000
 8000274:	2000008c 	.word	0x2000008c
 8000278:	40002000 	.word	0x40002000
 800027c:	48000800 	.word	0x48000800

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	b0a5      	sub	sp, #148	; 0x94
 8000284:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fd13 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f8af 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 fa19 	bl	80006c4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000292:	f000 f915 	bl	80004c0 <MX_RTC_Init>
  MX_TIM6_Init();
 8000296:	f000 f975 	bl	8000584 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800029a:	f000 f9b3 	bl	8000604 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800029e:	f000 f9e1 	bl	8000664 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef sTime = {0};
 80002a2:	2358      	movs	r3, #88	; 0x58
 80002a4:	2208      	movs	r2, #8
 80002a6:	4694      	mov	ip, r2
 80002a8:	44bc      	add	ip, r7
 80002aa:	4463      	add	r3, ip
 80002ac:	0018      	movs	r0, r3
 80002ae:	2314      	movs	r3, #20
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f003 f8c8 	bl	8003448 <memset>
  RTC_DateTypeDef sDate = {0};
 80002b8:	2354      	movs	r3, #84	; 0x54
 80002ba:	2208      	movs	r2, #8
 80002bc:	4694      	mov	ip, r2
 80002be:	44bc      	add	ip, r7
 80002c0:	4463      	add	r3, ip
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
  char currentTimeDateData[80];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim14);
 80002c6:	4b42      	ldr	r3, [pc, #264]	; (80003d0 <main+0x150>)
 80002c8:	0018      	movs	r0, r3
 80002ca:	f002 f906 	bl	80024da <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //light ext led
	  GPIO_PinState moveSensorState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 80002ce:	256f      	movs	r5, #111	; 0x6f
 80002d0:	2608      	movs	r6, #8
 80002d2:	19bb      	adds	r3, r7, r6
 80002d4:	195c      	adds	r4, r3, r5
 80002d6:	2380      	movs	r3, #128	; 0x80
 80002d8:	015b      	lsls	r3, r3, #5
 80002da:	4a3e      	ldr	r2, [pc, #248]	; (80003d4 <main+0x154>)
 80002dc:	0019      	movs	r1, r3
 80002de:	0010      	movs	r0, r2
 80002e0:	f000 ffde 	bl	80012a0 <HAL_GPIO_ReadPin>
 80002e4:	0003      	movs	r3, r0
 80002e6:	7023      	strb	r3, [r4, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, moveSensorState);
 80002e8:	19bb      	adds	r3, r7, r6
 80002ea:	195b      	adds	r3, r3, r5
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	4839      	ldr	r0, [pc, #228]	; (80003d4 <main+0x154>)
 80002f0:	001a      	movs	r2, r3
 80002f2:	2108      	movs	r1, #8
 80002f4:	f000 fff1 	bl	80012da <HAL_GPIO_WritePin>

	  if (true == btnTrigger)
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <main+0x158>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0e5      	beq.n	80002ce <main+0x4e>
	  {
		  uint16_t timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000302:	4b33      	ldr	r3, [pc, #204]	; (80003d0 <main+0x150>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000308:	236c      	movs	r3, #108	; 0x6c
 800030a:	2108      	movs	r1, #8
 800030c:	468c      	mov	ip, r1
 800030e:	44bc      	add	ip, r7
 8000310:	4463      	add	r3, ip
 8000312:	801a      	strh	r2, [r3, #0]
		  //light led
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000314:	2390      	movs	r3, #144	; 0x90
 8000316:	05db      	lsls	r3, r3, #23
 8000318:	2120      	movs	r1, #32
 800031a:	0018      	movs	r0, r3
 800031c:	f000 fffa 	bl	8001314 <HAL_GPIO_TogglePin>
		  //get current rtc time and date
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000320:	2558      	movs	r5, #88	; 0x58
 8000322:	2608      	movs	r6, #8
 8000324:	19bb      	adds	r3, r7, r6
 8000326:	1959      	adds	r1, r3, r5
 8000328:	4b2c      	ldr	r3, [pc, #176]	; (80003dc <main+0x15c>)
 800032a:	2200      	movs	r2, #0
 800032c:	0018      	movs	r0, r3
 800032e:	f001 febf 	bl	80020b0 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000332:	2154      	movs	r1, #84	; 0x54
 8000334:	000c      	movs	r4, r1
 8000336:	2308      	movs	r3, #8
 8000338:	469c      	mov	ip, r3
 800033a:	44bc      	add	ip, r7
 800033c:	4461      	add	r1, ip
 800033e:	4b27      	ldr	r3, [pc, #156]	; (80003dc <main+0x15c>)
 8000340:	2200      	movs	r2, #0
 8000342:	0018      	movs	r0, r3
 8000344:	f001 ffb8 	bl	80022b8 <HAL_RTC_GetDate>
		  sprintf(currentTimeDateData,
			  "Date: %2d.%2d.202%d Time: %d:%d:%d\nMoveSensor : %d\nCounter : %d",
			  sDate.WeekDay, sDate.Month, sDate.Year,
 8000348:	0021      	movs	r1, r4
 800034a:	0032      	movs	r2, r6
 800034c:	18bb      	adds	r3, r7, r2
 800034e:	185b      	adds	r3, r3, r1
 8000350:	781b      	ldrb	r3, [r3, #0]
		  sprintf(currentTimeDateData,
 8000352:	607b      	str	r3, [r7, #4]
			  sDate.WeekDay, sDate.Month, sDate.Year,
 8000354:	18bb      	adds	r3, r7, r2
 8000356:	185b      	adds	r3, r3, r1
 8000358:	785b      	ldrb	r3, [r3, #1]
		  sprintf(currentTimeDateData,
 800035a:	603b      	str	r3, [r7, #0]
			  sDate.WeekDay, sDate.Month, sDate.Year,
 800035c:	18bb      	adds	r3, r7, r2
 800035e:	185b      	adds	r3, r3, r1
 8000360:	78db      	ldrb	r3, [r3, #3]
		  sprintf(currentTimeDateData,
 8000362:	001c      	movs	r4, r3
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000364:	0029      	movs	r1, r5
 8000366:	18bb      	adds	r3, r7, r2
 8000368:	185b      	adds	r3, r3, r1
 800036a:	781b      	ldrb	r3, [r3, #0]
		  sprintf(currentTimeDateData,
 800036c:	001d      	movs	r5, r3
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 800036e:	18bb      	adds	r3, r7, r2
 8000370:	185b      	adds	r3, r3, r1
 8000372:	785b      	ldrb	r3, [r3, #1]
		  sprintf(currentTimeDateData,
 8000374:	001e      	movs	r6, r3
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000376:	18bb      	adds	r3, r7, r2
 8000378:	185b      	adds	r3, r3, r1
 800037a:	789b      	ldrb	r3, [r3, #2]
		  sprintf(currentTimeDateData,
 800037c:	469c      	mov	ip, r3
 800037e:	216f      	movs	r1, #111	; 0x6f
 8000380:	18bb      	adds	r3, r7, r2
 8000382:	185b      	adds	r3, r3, r1
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	4a16      	ldr	r2, [pc, #88]	; (80003e0 <main+0x160>)
 8000388:	8812      	ldrh	r2, [r2, #0]
 800038a:	b292      	uxth	r2, r2
 800038c:	4915      	ldr	r1, [pc, #84]	; (80003e4 <main+0x164>)
 800038e:	200c      	movs	r0, #12
 8000390:	1838      	adds	r0, r7, r0
 8000392:	9205      	str	r2, [sp, #20]
 8000394:	9304      	str	r3, [sp, #16]
 8000396:	4662      	mov	r2, ip
 8000398:	9203      	str	r2, [sp, #12]
 800039a:	9602      	str	r6, [sp, #8]
 800039c:	9501      	str	r5, [sp, #4]
 800039e:	9400      	str	r4, [sp, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	f003 f858 	bl	8003458 <siprintf>
		  	  (int) moveSensorState, timeCounter);
		  HAL_UART_Transmit(&huart1, (uint8_t*)currentTimeDateData, strlen(currentTimeDateData), 100);
 80003a8:	240c      	movs	r4, #12
 80003aa:	193b      	adds	r3, r7, r4
 80003ac:	0018      	movs	r0, r3
 80003ae:	f7ff feab 	bl	8000108 <strlen>
 80003b2:	0003      	movs	r3, r0
 80003b4:	b29a      	uxth	r2, r3
 80003b6:	1939      	adds	r1, r7, r4
 80003b8:	480b      	ldr	r0, [pc, #44]	; (80003e8 <main+0x168>)
 80003ba:	2364      	movs	r3, #100	; 0x64
 80003bc:	f002 faea 	bl	8002994 <HAL_UART_Transmit>
		  btnTrigger = false;
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <main+0x158>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
		  timeCounter = 0U;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <main+0x160>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	801a      	strh	r2, [r3, #0]
  {
 80003cc:	e77f      	b.n	80002ce <main+0x4e>
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	200001fc 	.word	0x200001fc
 80003d4:	48000800 	.word	0x48000800
 80003d8:	2000008e 	.word	0x2000008e
 80003dc:	2000011c 	.word	0x2000011c
 80003e0:	2000008c 	.word	0x2000008c
 80003e4:	08003c80 	.word	0x08003c80
 80003e8:	2000009c 	.word	0x2000009c

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b095      	sub	sp, #84	; 0x54
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	2420      	movs	r4, #32
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	0018      	movs	r0, r3
 80003f8:	2330      	movs	r3, #48	; 0x30
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f003 f823 	bl	8003448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000402:	2310      	movs	r3, #16
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	0018      	movs	r0, r3
 8000408:	2310      	movs	r3, #16
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f003 f81b 	bl	8003448 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000412:	003b      	movs	r3, r7
 8000414:	0018      	movs	r0, r3
 8000416:	2310      	movs	r3, #16
 8000418:	001a      	movs	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	f003 f814 	bl	8003448 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000420:	0021      	movs	r1, r4
 8000422:	187b      	adds	r3, r7, r1
 8000424:	220a      	movs	r2, #10
 8000426:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2201      	movs	r2, #1
 800042c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2210      	movs	r2, #16
 8000432:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2201      	movs	r2, #1
 8000438:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2202      	movs	r2, #2
 800043e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2200      	movs	r2, #0
 8000444:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	22a0      	movs	r2, #160	; 0xa0
 800044a:	0392      	lsls	r2, r2, #14
 800044c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	187b      	adds	r3, r7, r1
 8000456:	0018      	movs	r0, r3
 8000458:	f000 ff9e 	bl	8001398 <HAL_RCC_OscConfig>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000460:	f000 f9e2 	bl	8000828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	2110      	movs	r1, #16
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2207      	movs	r2, #7
 800046a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2202      	movs	r2, #2
 8000470:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2101      	movs	r1, #1
 8000482:	0018      	movs	r0, r3
 8000484:	f001 faa4 	bl	80019d0 <HAL_RCC_ClockConfig>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800048c:	f000 f9cc 	bl	8000828 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000490:	003b      	movs	r3, r7
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <SystemClock_Config+0xd0>)
 8000494:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000496:	003b      	movs	r3, r7
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800049c:	003b      	movs	r3, r7
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	0092      	lsls	r2, r2, #2
 80004a2:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a4:	003b      	movs	r3, r7
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 fbe4 	bl	8001c74 <HAL_RCCEx_PeriphCLKConfig>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80004b0:	f000 f9ba 	bl	8000828 <Error_Handler>
  }
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b015      	add	sp, #84	; 0x54
 80004ba:	bd90      	pop	{r4, r7, pc}
 80004bc:	00010001 	.word	0x00010001

080004c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	0018      	movs	r0, r3
 80004ca:	2314      	movs	r3, #20
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f002 ffba 	bl	8003448 <memset>
  RTC_DateTypeDef sDate = {0};
 80004d4:	003b      	movs	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80004da:	4b28      	ldr	r3, [pc, #160]	; (800057c <MX_RTC_Init+0xbc>)
 80004dc:	4a28      	ldr	r2, [pc, #160]	; (8000580 <MX_RTC_Init+0xc0>)
 80004de:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80004e0:	4b26      	ldr	r3, [pc, #152]	; (800057c <MX_RTC_Init+0xbc>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <MX_RTC_Init+0xbc>)
 80004e8:	227f      	movs	r2, #127	; 0x7f
 80004ea:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80004ec:	4b23      	ldr	r3, [pc, #140]	; (800057c <MX_RTC_Init+0xbc>)
 80004ee:	22ff      	movs	r2, #255	; 0xff
 80004f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80004f2:	4b22      	ldr	r3, [pc, #136]	; (800057c <MX_RTC_Init+0xbc>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80004f8:	4b20      	ldr	r3, [pc, #128]	; (800057c <MX_RTC_Init+0xbc>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80004fe:	4b1f      	ldr	r3, [pc, #124]	; (800057c <MX_RTC_Init+0xbc>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <MX_RTC_Init+0xbc>)
 8000506:	0018      	movs	r0, r3
 8000508:	f001 fc82 	bl	8001e10 <HAL_RTC_Init>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000510:	f000 f98a 	bl	8000828 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2200      	movs	r2, #0
 800051e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000532:	1d39      	adds	r1, r7, #4
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_RTC_Init+0xbc>)
 8000536:	2200      	movs	r2, #0
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fcfd 	bl	8001f38 <HAL_RTC_SetTime>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000542:	f000 f971 	bl	8000828 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000546:	003b      	movs	r3, r7
 8000548:	2201      	movs	r2, #1
 800054a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800054c:	003b      	movs	r3, r7
 800054e:	2201      	movs	r2, #1
 8000550:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000552:	003b      	movs	r3, r7
 8000554:	2201      	movs	r2, #1
 8000556:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000558:	003b      	movs	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800055e:	0039      	movs	r1, r7
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_RTC_Init+0xbc>)
 8000562:	2200      	movs	r2, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f001 fe01 	bl	800216c <HAL_RTC_SetDate>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 800056e:	f000 f95b 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b006      	add	sp, #24
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	2000011c 	.word	0x2000011c
 8000580:	40002800 	.word	0x40002800

08000584 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_Init 1 */
  //Timer6 configuration - uses sys clock of 48Mhz
  //Desired frequency is 100Hz - counter will count to 10 - 1,
  // with prescaler 48000 - 1
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MX_TIM6_Init+0x68>)
 800058a:	4a19      	ldr	r2, [pc, #100]	; (80005f0 <MX_TIM6_Init+0x6c>)
 800058c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 480 - 1;
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <MX_TIM6_Init+0x68>)
 8000590:	22e0      	movs	r2, #224	; 0xe0
 8000592:	32ff      	adds	r2, #255	; 0xff
 8000594:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <MX_TIM6_Init+0x68>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <MX_TIM6_Init+0x68>)
 800059e:	4a15      	ldr	r2, [pc, #84]	; (80005f4 <MX_TIM6_Init+0x70>)
 80005a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <MX_TIM6_Init+0x68>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <MX_TIM6_Init+0x68>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 ff69 	bl	8002482 <HAL_TIM_Base_Init>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM6_Init+0x34>
  {
    Error_Handler();
 80005b4:	f000 f938 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  htim14.Instance = TIM14;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_TIM6_Init+0x74>)
 80005ba:	4a10      	ldr	r2, [pc, #64]	; (80005fc <MX_TIM6_Init+0x78>)
 80005bc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48000 - 1;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_TIM6_Init+0x74>)
 80005c0:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <MX_TIM6_Init+0x7c>)
 80005c2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_TIM6_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000 - 1;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_TIM6_Init+0x74>)
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <MX_TIM6_Init+0x70>)
 80005ce:	60da      	str	r2, [r3, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_TIM6_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <MX_TIM6_Init+0x74>)
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 ff52 	bl	8002482 <HAL_TIM_Base_Init>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80005e2:	f000 f921 	bl	8000828 <Error_Handler>
  }
  /* USER CODE END TIM6_Init 2 */

}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	2000013c 	.word	0x2000013c
 80005f0:	40001000 	.word	0x40001000
 80005f4:	000003e7 	.word	0x000003e7
 80005f8:	200001fc 	.word	0x200001fc
 80005fc:	40002000 	.word	0x40002000
 8000600:	0000bb7f 	.word	0x0000bb7f

08000604 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_USART1_UART_Init+0x58>)
 800060a:	4a15      	ldr	r2, [pc, #84]	; (8000660 <MX_USART1_UART_Init+0x5c>)
 800060c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_USART1_UART_Init+0x58>)
 8000610:	2296      	movs	r2, #150	; 0x96
 8000612:	0192      	lsls	r2, r2, #6
 8000614:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_USART1_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_USART1_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_USART1_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_USART1_UART_Init+0x58>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_USART1_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_USART1_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_USART1_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_USART1_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <MX_USART1_UART_Init+0x58>)
 8000648:	0018      	movs	r0, r3
 800064a:	f002 f94f 	bl	80028ec <HAL_UART_Init>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000652:	f000 f8e9 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000009c 	.word	0x2000009c
 8000660:	40013800 	.word	0x40013800

08000664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_USART2_UART_Init+0x58>)
 800066a:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <MX_USART2_UART_Init+0x5c>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_USART2_UART_Init+0x58>)
 8000670:	2296      	movs	r2, #150	; 0x96
 8000672:	0212      	lsls	r2, r2, #8
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_USART2_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_USART2_UART_Init+0x58>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_USART2_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_USART2_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <MX_USART2_UART_Init+0x58>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f002 f91f 	bl	80028ec <HAL_UART_Init>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006b2:	f000 f8b9 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000017c 	.word	0x2000017c
 80006c0:	40004400 	.word	0x40004400

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	240c      	movs	r4, #12
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	0018      	movs	r0, r3
 80006d0:	2314      	movs	r3, #20
 80006d2:	001a      	movs	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f002 feb7 	bl	8003448 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b50      	ldr	r3, [pc, #320]	; (800081c <MX_GPIO_Init+0x158>)
 80006dc:	695a      	ldr	r2, [r3, #20]
 80006de:	4b4f      	ldr	r3, [pc, #316]	; (800081c <MX_GPIO_Init+0x158>)
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	0309      	lsls	r1, r1, #12
 80006e4:	430a      	orrs	r2, r1
 80006e6:	615a      	str	r2, [r3, #20]
 80006e8:	4b4c      	ldr	r3, [pc, #304]	; (800081c <MX_GPIO_Init+0x158>)
 80006ea:	695a      	ldr	r2, [r3, #20]
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	031b      	lsls	r3, r3, #12
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f6:	4b49      	ldr	r3, [pc, #292]	; (800081c <MX_GPIO_Init+0x158>)
 80006f8:	695a      	ldr	r2, [r3, #20]
 80006fa:	4b48      	ldr	r3, [pc, #288]	; (800081c <MX_GPIO_Init+0x158>)
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	03c9      	lsls	r1, r1, #15
 8000700:	430a      	orrs	r2, r1
 8000702:	615a      	str	r2, [r3, #20]
 8000704:	4b45      	ldr	r3, [pc, #276]	; (800081c <MX_GPIO_Init+0x158>)
 8000706:	695a      	ldr	r2, [r3, #20]
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	03db      	lsls	r3, r3, #15
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b42      	ldr	r3, [pc, #264]	; (800081c <MX_GPIO_Init+0x158>)
 8000714:	695a      	ldr	r2, [r3, #20]
 8000716:	4b41      	ldr	r3, [pc, #260]	; (800081c <MX_GPIO_Init+0x158>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0289      	lsls	r1, r1, #10
 800071c:	430a      	orrs	r2, r1
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	4b3e      	ldr	r3, [pc, #248]	; (800081c <MX_GPIO_Init+0x158>)
 8000722:	695a      	ldr	r2, [r3, #20]
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	029b      	lsls	r3, r3, #10
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800072e:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <MX_GPIO_Init+0x15c>)
 8000730:	2200      	movs	r2, #0
 8000732:	2108      	movs	r1, #8
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fdd0 	bl	80012da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073a:	2390      	movs	r3, #144	; 0x90
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	0018      	movs	r0, r3
 8000744:	f000 fdc9 	bl	80012da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	22a0      	movs	r2, #160	; 0xa0
 800074c:	0192      	lsls	r2, r2, #6
 800074e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	4a34      	ldr	r2, [pc, #208]	; (8000824 <MX_GPIO_Init+0x160>)
 8000754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075c:	193b      	adds	r3, r7, r4
 800075e:	4a30      	ldr	r2, [pc, #192]	; (8000820 <MX_GPIO_Init+0x15c>)
 8000760:	0019      	movs	r1, r3
 8000762:	0010      	movs	r0, r2
 8000764:	f000 fc2c 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000768:	0021      	movs	r1, r4
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2208      	movs	r2, #8
 800076e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2201      	movs	r2, #1
 8000774:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000782:	000c      	movs	r4, r1
 8000784:	187b      	adds	r3, r7, r1
 8000786:	4a26      	ldr	r2, [pc, #152]	; (8000820 <MX_GPIO_Init+0x15c>)
 8000788:	0019      	movs	r1, r3
 800078a:	0010      	movs	r0, r2
 800078c:	f000 fc18 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000790:	0021      	movs	r1, r4
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2204      	movs	r2, #4
 8000796:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2201      	movs	r2, #1
 800079c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	000c      	movs	r4, r1
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_GPIO_Init+0x15c>)
 80007b0:	0019      	movs	r1, r3
 80007b2:	0010      	movs	r0, r2
 80007b4:	f000 fc04 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b8:	0021      	movs	r1, r4
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2220      	movs	r2, #32
 80007be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2201      	movs	r2, #1
 80007c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d2:	000c      	movs	r4, r1
 80007d4:	187a      	adds	r2, r7, r1
 80007d6:	2390      	movs	r3, #144	; 0x90
 80007d8:	05db      	lsls	r3, r3, #23
 80007da:	0011      	movs	r1, r2
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fbef 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007e2:	0021      	movs	r1, r4
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	0152      	lsls	r2, r2, #5
 80007ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	4a09      	ldr	r2, [pc, #36]	; (8000820 <MX_GPIO_Init+0x15c>)
 80007fc:	0019      	movs	r1, r3
 80007fe:	0010      	movs	r0, r2
 8000800:	f000 fbde 	bl	8000fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2007      	movs	r0, #7
 800080a:	f000 fb61 	bl	8000ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800080e:	2007      	movs	r0, #7
 8000810:	f000 fb73 	bl	8000efa <HAL_NVIC_EnableIRQ>

}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b009      	add	sp, #36	; 0x24
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	48000800 	.word	0x48000800
 8000824:	10310000 	.word	0x10310000

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x44>)
 800083c:	699a      	ldr	r2, [r3, #24]
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_MspInit+0x44>)
 8000840:	2101      	movs	r1, #1
 8000842:	430a      	orrs	r2, r1
 8000844:	619a      	str	r2, [r3, #24]
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_MspInit+0x44>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	2201      	movs	r2, #1
 800084c:	4013      	ands	r3, r2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x44>)
 8000854:	69da      	ldr	r2, [r3, #28]
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_MspInit+0x44>)
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0549      	lsls	r1, r1, #21
 800085c:	430a      	orrs	r2, r1
 800085e:	61da      	str	r2, [r3, #28]
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_MspInit+0x44>)
 8000862:	69da      	ldr	r2, [r3, #28]
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	055b      	lsls	r3, r3, #21
 8000868:	4013      	ands	r3, r2
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_RTC_MspInit+0x28>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d106      	bne.n	800089c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_RTC_MspInit+0x2c>)
 8000890:	6a1a      	ldr	r2, [r3, #32]
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_RTC_MspInit+0x2c>)
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	0209      	lsls	r1, r1, #8
 8000898:	430a      	orrs	r2, r1
 800089a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40002800 	.word	0x40002800
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <HAL_TIM_Base_MspInit+0x44>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d113      	bne.n	80008e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008c0:	69da      	ldr	r2, [r3, #28]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008c4:	2110      	movs	r1, #16
 80008c6:	430a      	orrs	r2, r1
 80008c8:	61da      	str	r2, [r3, #28]
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_TIM_Base_MspInit+0x48>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	2210      	movs	r2, #16
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2011      	movs	r0, #17
 80008dc:	f000 faf8 	bl	8000ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80008e0:	2011      	movs	r0, #17
 80008e2:	f000 fb0a 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b004      	add	sp, #16
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40001000 	.word	0x40001000
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	231c      	movs	r3, #28
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f002 fd9c 	bl	8003448 <memset>
  if(huart->Instance==USART1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a41      	ldr	r2, [pc, #260]	; (8000a1c <HAL_UART_MspInit+0x124>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d13c      	bne.n	8000994 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091a:	4b41      	ldr	r3, [pc, #260]	; (8000a20 <HAL_UART_MspInit+0x128>)
 800091c:	699a      	ldr	r2, [r3, #24]
 800091e:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <HAL_UART_MspInit+0x128>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	01c9      	lsls	r1, r1, #7
 8000924:	430a      	orrs	r2, r1
 8000926:	619a      	str	r2, [r3, #24]
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <HAL_UART_MspInit+0x128>)
 800092a:	699a      	ldr	r2, [r3, #24]
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	01db      	lsls	r3, r3, #7
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <HAL_UART_MspInit+0x128>)
 8000938:	695a      	ldr	r2, [r3, #20]
 800093a:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <HAL_UART_MspInit+0x128>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0289      	lsls	r1, r1, #10
 8000940:	430a      	orrs	r2, r1
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <HAL_UART_MspInit+0x128>)
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	029b      	lsls	r3, r3, #10
 800094c:	4013      	ands	r3, r2
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000952:	211c      	movs	r1, #28
 8000954:	187b      	adds	r3, r7, r1
 8000956:	22c0      	movs	r2, #192	; 0xc0
 8000958:	00d2      	lsls	r2, r2, #3
 800095a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2202      	movs	r2, #2
 8000960:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2203      	movs	r2, #3
 800096c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2201      	movs	r2, #1
 8000972:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	187a      	adds	r2, r7, r1
 8000976:	2390      	movs	r3, #144	; 0x90
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f000 fb1f 	bl	8000fc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	201b      	movs	r0, #27
 8000988:	f000 faa2 	bl	8000ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800098c:	201b      	movs	r0, #27
 800098e:	f000 fab4 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000992:	e03f      	b.n	8000a14 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <HAL_UART_MspInit+0x12c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d13a      	bne.n	8000a14 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <HAL_UART_MspInit+0x128>)
 80009a0:	69da      	ldr	r2, [r3, #28]
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <HAL_UART_MspInit+0x128>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0289      	lsls	r1, r1, #10
 80009a8:	430a      	orrs	r2, r1
 80009aa:	61da      	str	r2, [r3, #28]
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_UART_MspInit+0x128>)
 80009ae:	69da      	ldr	r2, [r3, #28]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	029b      	lsls	r3, r3, #10
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_UART_MspInit+0x128>)
 80009bc:	695a      	ldr	r2, [r3, #20]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0x128>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0289      	lsls	r1, r1, #10
 80009c4:	430a      	orrs	r2, r1
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_UART_MspInit+0x128>)
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	029b      	lsls	r3, r3, #10
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d6:	211c      	movs	r1, #28
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	220c      	movs	r2, #12
 80009dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2203      	movs	r2, #3
 80009ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2201      	movs	r2, #1
 80009f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	187a      	adds	r2, r7, r1
 80009f8:	2390      	movs	r3, #144	; 0x90
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fade 	bl	8000fc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	201c      	movs	r0, #28
 8000a0a:	f000 fa61 	bl	8000ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a0e:	201c      	movs	r0, #28
 8000a10:	f000 fa73 	bl	8000efa <HAL_NVIC_EnableIRQ>
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b00c      	add	sp, #48	; 0x30
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40004400 	.word	0x40004400

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 f976 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11) ||
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <EXTI4_15_IRQHandler+0x40>)
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	4013      	ands	r3, r2
 8000a6a:	d105      	bne.n	8000a78 <EXTI4_15_IRQHandler+0x1c>
		__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13))
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <EXTI4_15_IRQHandler+0x40>)
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	019b      	lsls	r3, r3, #6
 8000a74:	4013      	ands	r3, r2
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11) ||
 8000a76:	d003      	beq.n	8000a80 <EXTI4_15_IRQHandler+0x24>
	{
		handleGPIO_Pin11_Interrupt();
 8000a78:	f000 f842 	bl	8000b00 <handleGPIO_Pin11_Interrupt>
		handleGPIO_Pin13_Interrupt();
 8000a7c:	f000 f87e 	bl	8000b7c <handleGPIO_Pin13_Interrupt>
	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 fc61 	bl	800134c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	019b      	lsls	r3, r3, #6
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fc5c 	bl	800134c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	40010400 	.word	0x40010400

08000aa0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <TIM6_IRQHandler+0x14>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 fd64 	bl	8002574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	2000013c 	.word	0x2000013c

08000ab8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <USART1_IRQHandler+0x14>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f002 f810 	bl	8002ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	2000009c 	.word	0x2000009c

08000ad0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <USART2_IRQHandler+0x14>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f002 f804 	bl	8002ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	2000017c 	.word	0x2000017c

08000ae8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <TIM14_IRQHandler+0x14>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 fd40 	bl	8002574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	200001fc 	.word	0x200001fc

08000b00 <handleGPIO_Pin11_Interrupt>:

inline void handleGPIO_Pin11_Interrupt()
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
	//Use timer to handle debouncing
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11))
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <handleGPIO_Pin11_Interrupt+0x68>)
 8000b08:	695a      	ldr	r2, [r3, #20]
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	011b      	lsls	r3, r3, #4
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d026      	beq.n	8000b60 <handleGPIO_Pin11_Interrupt+0x60>
	{
		uint8_t pin11State = (uint8_t)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8000b12:	1dfc      	adds	r4, r7, #7
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	011b      	lsls	r3, r3, #4
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <handleGPIO_Pin11_Interrupt+0x6c>)
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	0010      	movs	r0, r2
 8000b1e:	f000 fbbf 	bl	80012a0 <HAL_GPIO_ReadPin>
 8000b22:	0003      	movs	r3, r0
 8000b24:	7023      	strb	r3, [r4, #0]
		if (GPIO_PIN_SET == pin11State)
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d107      	bne.n	8000b3e <handleGPIO_Pin11_Interrupt+0x3e>
		{
			//rising edge
			timeCounter = 0U;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <handleGPIO_Pin11_Interrupt+0x70>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	801a      	strh	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <handleGPIO_Pin11_Interrupt+0x74>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 fccf 	bl	80024da <HAL_TIM_Base_Start_IT>
				btnTrigger = true;
			}
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}
}
 8000b3c:	e010      	b.n	8000b60 <handleGPIO_Pin11_Interrupt+0x60>
		else if (GPIO_PIN_RESET == pin11State)
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10c      	bne.n	8000b60 <handleGPIO_Pin11_Interrupt+0x60>
			if (timeCounter > btnPressTimeThreshold)
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <handleGPIO_Pin11_Interrupt+0x70>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d902      	bls.n	8000b58 <handleGPIO_Pin11_Interrupt+0x58>
				btnTrigger = true;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <handleGPIO_Pin11_Interrupt+0x78>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <handleGPIO_Pin11_Interrupt+0x74>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 fce0 	bl	8002520 <HAL_TIM_Base_Stop_IT>
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b003      	add	sp, #12
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	40010400 	.word	0x40010400
 8000b6c:	48000800 	.word	0x48000800
 8000b70:	2000008c 	.word	0x2000008c
 8000b74:	2000013c 	.word	0x2000013c
 8000b78:	2000008e 	.word	0x2000008e

08000b7c <handleGPIO_Pin13_Interrupt>:

inline void handleGPIO_Pin13_Interrupt()
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
	//Use timer to handle debouncing
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13))
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <handleGPIO_Pin13_Interrupt+0x68>)
 8000b84:	695a      	ldr	r2, [r3, #20]
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	019b      	lsls	r3, r3, #6
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	d026      	beq.n	8000bdc <handleGPIO_Pin13_Interrupt+0x60>
	{
		uint8_t pin13State = (uint8_t)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000b8e:	1dfc      	adds	r4, r7, #7
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	019b      	lsls	r3, r3, #6
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <handleGPIO_Pin13_Interrupt+0x6c>)
 8000b96:	0019      	movs	r1, r3
 8000b98:	0010      	movs	r0, r2
 8000b9a:	f000 fb81 	bl	80012a0 <HAL_GPIO_ReadPin>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	7023      	strb	r3, [r4, #0]
		if (GPIO_PIN_RESET == pin13State)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d107      	bne.n	8000bba <handleGPIO_Pin13_Interrupt+0x3e>
		{
			//rising edge
			timeCounter = 0U;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <handleGPIO_Pin13_Interrupt+0x70>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	801a      	strh	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <handleGPIO_Pin13_Interrupt+0x74>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f001 fc91 	bl	80024da <HAL_TIM_Base_Start_IT>
				btnTrigger = true;
			}
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}
}
 8000bb8:	e010      	b.n	8000bdc <handleGPIO_Pin13_Interrupt+0x60>
		else if (GPIO_PIN_SET == pin13State)
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d10c      	bne.n	8000bdc <handleGPIO_Pin13_Interrupt+0x60>
			if (timeCounter > btnPressTimeThreshold)
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <handleGPIO_Pin13_Interrupt+0x70>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	220f      	movs	r2, #15
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d902      	bls.n	8000bd4 <handleGPIO_Pin13_Interrupt+0x58>
				btnTrigger = true;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <handleGPIO_Pin13_Interrupt+0x78>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <handleGPIO_Pin13_Interrupt+0x74>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 fca2 	bl	8002520 <HAL_TIM_Base_Stop_IT>
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b003      	add	sp, #12
 8000be2:	bd90      	pop	{r4, r7, pc}
 8000be4:	40010400 	.word	0x40010400
 8000be8:	48000800 	.word	0x48000800
 8000bec:	2000008c 	.word	0x2000008c
 8000bf0:	2000013c 	.word	0x2000013c
 8000bf4:	2000008e 	.word	0x2000008e

08000bf8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_sbrk+0x50>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x16>
		heap_end = &end;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <_sbrk+0x50>)
 8000c0a:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <_sbrk+0x54>)
 8000c0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <_sbrk+0x50>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <_sbrk+0x50>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	18d3      	adds	r3, r2, r3
 8000c1c:	466a      	mov	r2, sp
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d907      	bls.n	8000c32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c22:	f002 fbe7 	bl	80033f4 <__errno>
 8000c26:	0003      	movs	r3, r0
 8000c28:	220c      	movs	r2, #12
 8000c2a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	425b      	negs	r3, r3
 8000c30:	e006      	b.n	8000c40 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <_sbrk+0x50>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	18d2      	adds	r2, r2, r3
 8000c3a:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <_sbrk+0x50>)
 8000c3c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b004      	add	sp, #16
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000090 	.word	0x20000090
 8000c4c:	20000248 	.word	0x20000248

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490e      	ldr	r1, [pc, #56]	; (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c86:	f7ff ffe3 	bl	8000c50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c8a:	f002 fbb9 	bl	8003400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8e:	f7ff faf7 	bl	8000280 <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   r0, =_estack
 8000c94:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ca0:	08003d34 	.word	0x08003d34
  ldr r2, =_sbss
 8000ca4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ca8:	20000244 	.word	0x20000244

08000cac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_Init+0x24>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_Init+0x24>)
 8000cba:	2110      	movs	r1, #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f809 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc6:	f7ff fdb5 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_InitTick+0x5c>)
 8000ce2:	681c      	ldr	r4, [r3, #0]
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_InitTick+0x60>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	0019      	movs	r1, r3
 8000cea:	23fa      	movs	r3, #250	; 0xfa
 8000cec:	0098      	lsls	r0, r3, #2
 8000cee:	f7ff fa13 	bl	8000118 <__udivsi3>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	0020      	movs	r0, r4
 8000cf8:	f7ff fa0e 	bl	8000118 <__udivsi3>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 f90b 	bl	8000f1a <HAL_SYSTICK_Config>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e00f      	b.n	8000d2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d80b      	bhi.n	8000d2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	2301      	movs	r3, #1
 8000d16:	425b      	negs	r3, r3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 f8d8 	bl	8000ed0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_InitTick+0x64>)
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b003      	add	sp, #12
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	18d2      	adds	r2, r2, r3
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_IncTick+0x20>)
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	2000023c 	.word	0x2000023c

08000d64 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	2000023c 	.word	0x2000023c

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	0002      	movs	r2, r0
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b7f      	cmp	r3, #127	; 0x7f
 8000d8a:	d809      	bhi.n	8000da0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	001a      	movs	r2, r3
 8000d92:	231f      	movs	r3, #31
 8000d94:	401a      	ands	r2, r3
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_EnableIRQ+0x30>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4091      	lsls	r1, r2
 8000d9c:	000a      	movs	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
  }
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc0:	d828      	bhi.n	8000e14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc2:	4a2f      	ldr	r2, [pc, #188]	; (8000e80 <__NVIC_SetPriority+0xd4>)
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	33c0      	adds	r3, #192	; 0xc0
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	589b      	ldr	r3, [r3, r2]
 8000dd2:	1dfa      	adds	r2, r7, #7
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	2203      	movs	r2, #3
 8000dda:	400a      	ands	r2, r1
 8000ddc:	00d2      	lsls	r2, r2, #3
 8000dde:	21ff      	movs	r1, #255	; 0xff
 8000de0:	4091      	lsls	r1, r2
 8000de2:	000a      	movs	r2, r1
 8000de4:	43d2      	mvns	r2, r2
 8000de6:	401a      	ands	r2, r3
 8000de8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	019b      	lsls	r3, r3, #6
 8000dee:	22ff      	movs	r2, #255	; 0xff
 8000df0:	401a      	ands	r2, r3
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	0018      	movs	r0, r3
 8000df8:	2303      	movs	r3, #3
 8000dfa:	4003      	ands	r3, r0
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <__NVIC_SetPriority+0xd4>)
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	33c0      	adds	r3, #192	; 0xc0
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e12:	e031      	b.n	8000e78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <__NVIC_SetPriority+0xd8>)
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	400b      	ands	r3, r1
 8000e20:	3b08      	subs	r3, #8
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3306      	adds	r3, #6
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	18d3      	adds	r3, r2, r3
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	1dfa      	adds	r2, r7, #7
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	0011      	movs	r1, r2
 8000e34:	2203      	movs	r2, #3
 8000e36:	400a      	ands	r2, r1
 8000e38:	00d2      	lsls	r2, r2, #3
 8000e3a:	21ff      	movs	r1, #255	; 0xff
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	000a      	movs	r2, r1
 8000e40:	43d2      	mvns	r2, r2
 8000e42:	401a      	ands	r2, r3
 8000e44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	019b      	lsls	r3, r3, #6
 8000e4a:	22ff      	movs	r2, #255	; 0xff
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	0018      	movs	r0, r3
 8000e54:	2303      	movs	r3, #3
 8000e56:	4003      	ands	r3, r0
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <__NVIC_SetPriority+0xd8>)
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	001c      	movs	r4, r3
 8000e64:	230f      	movs	r3, #15
 8000e66:	4023      	ands	r3, r4
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	3306      	adds	r3, #6
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	18c3      	adds	r3, r0, r3
 8000e74:	3304      	adds	r3, #4
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b003      	add	sp, #12
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <SysTick_Config+0x40>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d901      	bls.n	8000e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e010      	b.n	8000ec0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <SysTick_Config+0x44>)
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	2103      	movs	r1, #3
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ff7d 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <SysTick_Config+0x44>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x44>)
 8000eba:	2207      	movs	r2, #7
 8000ebc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	00ffffff 	.word	0x00ffffff
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	210f      	movs	r1, #15
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	1c02      	adds	r2, r0, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff ff5d 	bl	8000dac <__NVIC_SetPriority>
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b004      	add	sp, #16
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	0002      	movs	r2, r0
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff ff33 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff ffaf 	bl	8000e88 <SysTick_Config>
 8000f2a:	0003      	movs	r3, r0
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2221      	movs	r2, #33	; 0x21
 8000f48:	5c9b      	ldrb	r3, [r3, r2]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d007      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2204      	movs	r2, #4
 8000f54:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f56:	230f      	movs	r3, #15
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e028      	b.n	8000fb2 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	210e      	movs	r1, #14
 8000f6c:	438a      	bics	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	438a      	bics	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4091      	lsls	r1, r2
 8000f8c:	000a      	movs	r2, r1
 8000f8e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2221      	movs	r2, #33	; 0x21
 8000f94:	2101      	movs	r1, #1
 8000f96:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	0010      	movs	r0, r2
 8000fb0:	4798      	blx	r3
    } 
  }
  return status;
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b004      	add	sp, #16
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e14f      	b.n	8001270 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <HAL_GPIO_Init+0x28>
 8000fe6:	e140      	b.n	800126a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d00b      	beq.n	8001008 <HAL_GPIO_Init+0x48>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d007      	beq.n	8001008 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffc:	2b11      	cmp	r3, #17
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b12      	cmp	r3, #18
 8001006:	d130      	bne.n	800106a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	409a      	lsls	r2, r3
 8001016:	0013      	movs	r3, r2
 8001018:	43da      	mvns	r2, r3
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	409a      	lsls	r2, r3
 800102a:	0013      	movs	r3, r2
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103e:	2201      	movs	r2, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	43da      	mvns	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	2201      	movs	r2, #1
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
 800105c:	0013      	movs	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0xea>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	58d3      	ldr	r3, [r2, r3]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2207      	movs	r2, #7
 80010bc:	4013      	ands	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2107      	movs	r1, #7
 80010d6:	400b      	ands	r3, r1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	6939      	ldr	r1, [r7, #16]
 80010f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	401a      	ands	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	055b      	lsls	r3, r3, #21
 800112e:	4013      	ands	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_GPIO_Init+0x174>
 8001132:	e09a      	b.n	800126a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001134:	4b54      	ldr	r3, [pc, #336]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 800113a:	2101      	movs	r1, #1
 800113c:	430a      	orrs	r2, r1
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	4b51      	ldr	r3, [pc, #324]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	2201      	movs	r2, #1
 8001146:	4013      	ands	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800114c:	4a4f      	ldr	r2, [pc, #316]	; (800128c <HAL_GPIO_Init+0x2cc>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	589b      	ldr	r3, [r3, r2]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	2390      	movs	r3, #144	; 0x90
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	429a      	cmp	r2, r3
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x1e2>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a44      	ldr	r2, [pc, #272]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x1de>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a43      	ldr	r2, [pc, #268]	; (8001294 <HAL_GPIO_Init+0x2d4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x1da>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a42      	ldr	r2, [pc, #264]	; (8001298 <HAL_GPIO_Init+0x2d8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x1d6>
 8001192:	2303      	movs	r3, #3
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 8001196:	2305      	movs	r3, #5
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 80011a2:	2300      	movs	r3, #0
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	2103      	movs	r1, #3
 80011a8:	400a      	ands	r2, r1
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b4:	4935      	ldr	r1, [pc, #212]	; (800128c <HAL_GPIO_Init+0x2cc>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	025b      	lsls	r3, r3, #9
 80011da:	4013      	ands	r3, r2
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43da      	mvns	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	4013      	ands	r3, r2
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43da      	mvns	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	035b      	lsls	r3, r3, #13
 800122e:	4013      	ands	r3, r2
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_GPIO_Init+0x2dc>)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	039b      	lsls	r3, r3, #14
 8001258:	4013      	ands	r3, r2
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	40da      	lsrs	r2, r3
 8001278:	1e13      	subs	r3, r2, #0
 800127a:	d000      	beq.n	800127e <HAL_GPIO_Init+0x2be>
 800127c:	e6a8      	b.n	8000fd0 <HAL_GPIO_Init+0x10>
  } 
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b006      	add	sp, #24
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800
 8001298:	48000c00 	.word	0x48000c00
 800129c:	40010400 	.word	0x40010400

080012a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	000a      	movs	r2, r1
 80012aa:	1cbb      	adds	r3, r7, #2
 80012ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	1cba      	adds	r2, r7, #2
 80012b4:	8812      	ldrh	r2, [r2, #0]
 80012b6:	4013      	ands	r3, r2
 80012b8:	d004      	beq.n	80012c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012ba:	230f      	movs	r3, #15
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e003      	b.n	80012cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012c4:	230f      	movs	r3, #15
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012cc:	230f      	movs	r3, #15
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	781b      	ldrb	r3, [r3, #0]
  }
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	0008      	movs	r0, r1
 80012e4:	0011      	movs	r1, r2
 80012e6:	1cbb      	adds	r3, r7, #2
 80012e8:	1c02      	adds	r2, r0, #0
 80012ea:	801a      	strh	r2, [r3, #0]
 80012ec:	1c7b      	adds	r3, r7, #1
 80012ee:	1c0a      	adds	r2, r1, #0
 80012f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f2:	1c7b      	adds	r3, r7, #1
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fa:	1cbb      	adds	r3, r7, #2
 80012fc:	881a      	ldrh	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001302:	e003      	b.n	800130c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001304:	1cbb      	adds	r3, r7, #2
 8001306:	881a      	ldrh	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	b002      	add	sp, #8
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	000a      	movs	r2, r1
 800131e:	1cbb      	adds	r3, r7, #2
 8001320:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4013      	ands	r3, r2
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	1cb9      	adds	r1, r7, #2
 8001338:	8809      	ldrh	r1, [r1, #0]
 800133a:	400b      	ands	r3, r1
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	0002      	movs	r2, r0
 8001354:	1dbb      	adds	r3, r7, #6
 8001356:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	1dba      	adds	r2, r7, #6
 800135e:	8812      	ldrh	r2, [r2, #0]
 8001360:	4013      	ands	r3, r2
 8001362:	d008      	beq.n	8001376 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001366:	1dba      	adds	r2, r7, #6
 8001368:	8812      	ldrh	r2, [r2, #0]
 800136a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800136c:	1dbb      	adds	r3, r7, #6
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	0018      	movs	r0, r3
 8001372:	f000 f807 	bl	8001384 <HAL_GPIO_EXTI_Callback>
  }
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b002      	add	sp, #8
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	40010400 	.word	0x40010400

08001384 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	0002      	movs	r2, r0
 800138c:	1dbb      	adds	r3, r7, #6
 800138e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e303      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2201      	movs	r2, #1
 80013b0:	4013      	ands	r3, r2
 80013b2:	d100      	bne.n	80013b6 <HAL_RCC_OscConfig+0x1e>
 80013b4:	e08d      	b.n	80014d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013b6:	4bc4      	ldr	r3, [pc, #784]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	220c      	movs	r2, #12
 80013bc:	4013      	ands	r3, r2
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d00e      	beq.n	80013e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c2:	4bc1      	ldr	r3, [pc, #772]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	220c      	movs	r2, #12
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d116      	bne.n	80013fc <HAL_RCC_OscConfig+0x64>
 80013ce:	4bbe      	ldr	r3, [pc, #760]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	025b      	lsls	r3, r3, #9
 80013d6:	401a      	ands	r2, r3
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	429a      	cmp	r2, r3
 80013de:	d10d      	bne.n	80013fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4bb9      	ldr	r3, [pc, #740]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	029b      	lsls	r3, r3, #10
 80013e8:	4013      	ands	r3, r2
 80013ea:	d100      	bne.n	80013ee <HAL_RCC_OscConfig+0x56>
 80013ec:	e070      	b.n	80014d0 <HAL_RCC_OscConfig+0x138>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d000      	beq.n	80013f8 <HAL_RCC_OscConfig+0x60>
 80013f6:	e06b      	b.n	80014d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e2da      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d107      	bne.n	8001414 <HAL_RCC_OscConfig+0x7c>
 8001404:	4bb0      	ldr	r3, [pc, #704]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4baf      	ldr	r3, [pc, #700]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	0249      	lsls	r1, r1, #9
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e02f      	b.n	8001474 <HAL_RCC_OscConfig+0xdc>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10c      	bne.n	8001436 <HAL_RCC_OscConfig+0x9e>
 800141c:	4baa      	ldr	r3, [pc, #680]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4ba9      	ldr	r3, [pc, #676]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001422:	49aa      	ldr	r1, [pc, #680]	; (80016cc <HAL_RCC_OscConfig+0x334>)
 8001424:	400a      	ands	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	4ba7      	ldr	r3, [pc, #668]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4ba6      	ldr	r3, [pc, #664]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800142e:	49a8      	ldr	r1, [pc, #672]	; (80016d0 <HAL_RCC_OscConfig+0x338>)
 8001430:	400a      	ands	r2, r1
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e01e      	b.n	8001474 <HAL_RCC_OscConfig+0xdc>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b05      	cmp	r3, #5
 800143c:	d10e      	bne.n	800145c <HAL_RCC_OscConfig+0xc4>
 800143e:	4ba2      	ldr	r3, [pc, #648]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4ba1      	ldr	r3, [pc, #644]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	02c9      	lsls	r1, r1, #11
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	4b9e      	ldr	r3, [pc, #632]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b9d      	ldr	r3, [pc, #628]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	0249      	lsls	r1, r1, #9
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0xdc>
 800145c:	4b9a      	ldr	r3, [pc, #616]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b99      	ldr	r3, [pc, #612]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001462:	499a      	ldr	r1, [pc, #616]	; (80016cc <HAL_RCC_OscConfig+0x334>)
 8001464:	400a      	ands	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	4b97      	ldr	r3, [pc, #604]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b96      	ldr	r3, [pc, #600]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800146e:	4998      	ldr	r1, [pc, #608]	; (80016d0 <HAL_RCC_OscConfig+0x338>)
 8001470:	400a      	ands	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d014      	beq.n	80014a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fc72 	bl	8000d64 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001486:	f7ff fc6d 	bl	8000d64 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e28c      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001498:	4b8b      	ldr	r3, [pc, #556]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	4013      	ands	r3, r2
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0xee>
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fc5d 	bl	8000d64 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fc58 	bl	8000d64 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e277      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c2:	4b81      	ldr	r3, [pc, #516]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	029b      	lsls	r3, r3, #10
 80014ca:	4013      	ands	r3, r2
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x118>
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d100      	bne.n	80014de <HAL_RCC_OscConfig+0x146>
 80014dc:	e069      	b.n	80015b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014de:	4b7a      	ldr	r3, [pc, #488]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	220c      	movs	r2, #12
 80014e4:	4013      	ands	r3, r2
 80014e6:	d00b      	beq.n	8001500 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014e8:	4b77      	ldr	r3, [pc, #476]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	220c      	movs	r2, #12
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d11c      	bne.n	800152e <HAL_RCC_OscConfig+0x196>
 80014f4:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	4013      	ands	r3, r2
 80014fe:	d116      	bne.n	800152e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001500:	4b71      	ldr	r3, [pc, #452]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x17e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e24d      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b6c      	ldr	r3, [pc, #432]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	22f8      	movs	r2, #248	; 0xf8
 800151c:	4393      	bics	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	00da      	lsls	r2, r3, #3
 8001526:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152c:	e041      	b.n	80015b2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d024      	beq.n	8001580 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001536:	4b64      	ldr	r3, [pc, #400]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800153c:	2101      	movs	r1, #1
 800153e:	430a      	orrs	r2, r1
 8001540:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff fc0f 	bl	8000d64 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fc0a 	bl	8000d64 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e229      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	4b5a      	ldr	r3, [pc, #360]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2202      	movs	r2, #2
 8001564:	4013      	ands	r3, r2
 8001566:	d0f1      	beq.n	800154c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	22f8      	movs	r2, #248	; 0xf8
 800156e:	4393      	bics	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	00da      	lsls	r2, r3, #3
 8001578:	4b53      	ldr	r3, [pc, #332]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e018      	b.n	80015b2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001586:	2101      	movs	r1, #1
 8001588:	438a      	bics	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fbea 	bl	8000d64 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fbe5 	bl	8000d64 <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e204      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a8:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d1f1      	bne.n	8001596 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2208      	movs	r2, #8
 80015b8:	4013      	ands	r3, r2
 80015ba:	d036      	beq.n	800162a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d019      	beq.n	80015f8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c4:	4b40      	ldr	r3, [pc, #256]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c8:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d0:	f7ff fbc8 	bl	8000d64 <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff fbc3 	bl	8000d64 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1e2      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ec:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	2202      	movs	r2, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d0f1      	beq.n	80015da <HAL_RCC_OscConfig+0x242>
 80015f6:	e018      	b.n	800162a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f8:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fc:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80015fe:	2101      	movs	r1, #1
 8001600:	438a      	bics	r2, r1
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff fbae 	bl	8000d64 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160e:	f7ff fba9 	bl	8000d64 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e1c8      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d1f1      	bne.n	800160e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2204      	movs	r2, #4
 8001630:	4013      	ands	r3, r2
 8001632:	d100      	bne.n	8001636 <HAL_RCC_OscConfig+0x29e>
 8001634:	e0b6      	b.n	80017a4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001636:	231f      	movs	r3, #31
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	055b      	lsls	r3, r3, #21
 8001646:	4013      	ands	r3, r2
 8001648:	d111      	bne.n	800166e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	0549      	lsls	r1, r1, #21
 8001654:	430a      	orrs	r2, r1
 8001656:	61da      	str	r2, [r3, #28]
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 800165a:	69da      	ldr	r2, [r3, #28]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	055b      	lsls	r3, r3, #21
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001666:	231f      	movs	r3, #31
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_RCC_OscConfig+0x33c>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4013      	ands	r3, r2
 8001678:	d11a      	bne.n	80016b0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_RCC_OscConfig+0x33c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_RCC_OscConfig+0x33c>)
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	0049      	lsls	r1, r1, #1
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001688:	f7ff fb6c 	bl	8000d64 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001692:	f7ff fb67 	bl	8000d64 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b64      	cmp	r3, #100	; 0x64
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e186      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_OscConfig+0x33c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d10f      	bne.n	80016d8 <HAL_RCC_OscConfig+0x340>
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80016ba:	6a1a      	ldr	r2, [r3, #32]
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 80016be:	2101      	movs	r1, #1
 80016c0:	430a      	orrs	r2, r1
 80016c2:	621a      	str	r2, [r3, #32]
 80016c4:	e036      	b.n	8001734 <HAL_RCC_OscConfig+0x39c>
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	40021000 	.word	0x40021000
 80016cc:	fffeffff 	.word	0xfffeffff
 80016d0:	fffbffff 	.word	0xfffbffff
 80016d4:	40007000 	.word	0x40007000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10c      	bne.n	80016fa <HAL_RCC_OscConfig+0x362>
 80016e0:	4bb6      	ldr	r3, [pc, #728]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80016e2:	6a1a      	ldr	r2, [r3, #32]
 80016e4:	4bb5      	ldr	r3, [pc, #724]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	438a      	bics	r2, r1
 80016ea:	621a      	str	r2, [r3, #32]
 80016ec:	4bb3      	ldr	r3, [pc, #716]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80016ee:	6a1a      	ldr	r2, [r3, #32]
 80016f0:	4bb2      	ldr	r3, [pc, #712]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80016f2:	2104      	movs	r1, #4
 80016f4:	438a      	bics	r2, r1
 80016f6:	621a      	str	r2, [r3, #32]
 80016f8:	e01c      	b.n	8001734 <HAL_RCC_OscConfig+0x39c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b05      	cmp	r3, #5
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x384>
 8001702:	4bae      	ldr	r3, [pc, #696]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001704:	6a1a      	ldr	r2, [r3, #32]
 8001706:	4bad      	ldr	r3, [pc, #692]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001708:	2104      	movs	r1, #4
 800170a:	430a      	orrs	r2, r1
 800170c:	621a      	str	r2, [r3, #32]
 800170e:	4bab      	ldr	r3, [pc, #684]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001710:	6a1a      	ldr	r2, [r3, #32]
 8001712:	4baa      	ldr	r3, [pc, #680]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001714:	2101      	movs	r1, #1
 8001716:	430a      	orrs	r2, r1
 8001718:	621a      	str	r2, [r3, #32]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0x39c>
 800171c:	4ba7      	ldr	r3, [pc, #668]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800171e:	6a1a      	ldr	r2, [r3, #32]
 8001720:	4ba6      	ldr	r3, [pc, #664]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001722:	2101      	movs	r1, #1
 8001724:	438a      	bics	r2, r1
 8001726:	621a      	str	r2, [r3, #32]
 8001728:	4ba4      	ldr	r3, [pc, #656]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800172a:	6a1a      	ldr	r2, [r3, #32]
 800172c:	4ba3      	ldr	r3, [pc, #652]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800172e:	2104      	movs	r1, #4
 8001730:	438a      	bics	r2, r1
 8001732:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d014      	beq.n	8001766 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173c:	f7ff fb12 	bl	8000d64 <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	e009      	b.n	800175a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff fb0d 	bl	8000d64 <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	4a9b      	ldr	r2, [pc, #620]	; (80019c0 <HAL_RCC_OscConfig+0x628>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e12b      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175a:	4b98      	ldr	r3, [pc, #608]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	2202      	movs	r2, #2
 8001760:	4013      	ands	r3, r2
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x3ae>
 8001764:	e013      	b.n	800178e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff fafd 	bl	8000d64 <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176e:	e009      	b.n	8001784 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7ff faf8 	bl	8000d64 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	4a91      	ldr	r2, [pc, #580]	; (80019c0 <HAL_RCC_OscConfig+0x628>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e116      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	4b8d      	ldr	r3, [pc, #564]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	2202      	movs	r2, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800178e:	231f      	movs	r3, #31
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001798:	4b88      	ldr	r3, [pc, #544]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800179a:	69da      	ldr	r2, [r3, #28]
 800179c:	4b87      	ldr	r3, [pc, #540]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800179e:	4989      	ldr	r1, [pc, #548]	; (80019c4 <HAL_RCC_OscConfig+0x62c>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2210      	movs	r2, #16
 80017aa:	4013      	ands	r3, r2
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d12a      	bne.n	800180c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017b6:	4b81      	ldr	r3, [pc, #516]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80017b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ba:	4b80      	ldr	r3, [pc, #512]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80017bc:	2104      	movs	r1, #4
 80017be:	430a      	orrs	r2, r1
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017c2:	4b7e      	ldr	r3, [pc, #504]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80017c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c6:	4b7d      	ldr	r3, [pc, #500]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fac9 	bl	8000d64 <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017d8:	f7ff fac4 	bl	8000d64 <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0e3      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017ea:	4b74      	ldr	r3, [pc, #464]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80017ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d0f1      	beq.n	80017d8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017f4:	4b71      	ldr	r3, [pc, #452]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f8:	22f8      	movs	r2, #248	; 0xf8
 80017fa:	4393      	bics	r3, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	00da      	lsls	r2, r3, #3
 8001804:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001806:	430a      	orrs	r2, r1
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
 800180a:	e034      	b.n	8001876 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	3305      	adds	r3, #5
 8001812:	d111      	bne.n	8001838 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001814:	4b69      	ldr	r3, [pc, #420]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001818:	4b68      	ldr	r3, [pc, #416]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800181a:	2104      	movs	r1, #4
 800181c:	438a      	bics	r2, r1
 800181e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001820:	4b66      	ldr	r3, [pc, #408]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001824:	22f8      	movs	r2, #248	; 0xf8
 8001826:	4393      	bics	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	00da      	lsls	r2, r3, #3
 8001830:	4b62      	ldr	r3, [pc, #392]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001832:	430a      	orrs	r2, r1
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
 8001836:	e01e      	b.n	8001876 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001838:	4b60      	ldr	r3, [pc, #384]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800183a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183c:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800183e:	2104      	movs	r1, #4
 8001840:	430a      	orrs	r2, r1
 8001842:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001844:	4b5d      	ldr	r3, [pc, #372]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001848:	4b5c      	ldr	r3, [pc, #368]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800184a:	2101      	movs	r1, #1
 800184c:	438a      	bics	r2, r1
 800184e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7ff fa88 	bl	8000d64 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800185a:	f7ff fa83 	bl	8000d64 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e0a2      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800186e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001870:	2202      	movs	r2, #2
 8001872:	4013      	ands	r3, r2
 8001874:	d1f1      	bne.n	800185a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d100      	bne.n	8001880 <HAL_RCC_OscConfig+0x4e8>
 800187e:	e097      	b.n	80019b0 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001880:	4b4e      	ldr	r3, [pc, #312]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	220c      	movs	r2, #12
 8001886:	4013      	ands	r3, r2
 8001888:	2b08      	cmp	r3, #8
 800188a:	d100      	bne.n	800188e <HAL_RCC_OscConfig+0x4f6>
 800188c:	e06b      	b.n	8001966 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d14c      	bne.n	8001930 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001896:	4b49      	ldr	r3, [pc, #292]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b48      	ldr	r3, [pc, #288]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800189c:	494a      	ldr	r1, [pc, #296]	; (80019c8 <HAL_RCC_OscConfig+0x630>)
 800189e:	400a      	ands	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fa5f 	bl	8000d64 <HAL_GetTick>
 80018a6:	0003      	movs	r3, r0
 80018a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff fa5a 	bl	8000d64 <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e079      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	049b      	lsls	r3, r3, #18
 80018c6:	4013      	ands	r3, r2
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ca:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	220f      	movs	r2, #15
 80018d0:	4393      	bics	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d8:	4b38      	ldr	r3, [pc, #224]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80018da:	430a      	orrs	r2, r1
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80018de:	4b37      	ldr	r3, [pc, #220]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a3a      	ldr	r2, [pc, #232]	; (80019cc <HAL_RCC_OscConfig+0x634>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	431a      	orrs	r2, r3
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80018f4:	430a      	orrs	r2, r1
 80018f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f8:	4b30      	ldr	r3, [pc, #192]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	0449      	lsls	r1, r1, #17
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fa2d 	bl	8000d64 <HAL_GetTick>
 800190a:	0003      	movs	r3, r0
 800190c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff fa28 	bl	8000d64 <HAL_GetTick>
 8001914:	0002      	movs	r2, r0
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e047      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	049b      	lsls	r3, r3, #18
 800192a:	4013      	ands	r3, r2
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x578>
 800192e:	e03f      	b.n	80019b0 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001936:	4924      	ldr	r1, [pc, #144]	; (80019c8 <HAL_RCC_OscConfig+0x630>)
 8001938:	400a      	ands	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fa12 	bl	8000d64 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001946:	f7ff fa0d 	bl	8000d64 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e02c      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	049b      	lsls	r3, r3, #18
 8001960:	4013      	ands	r3, r2
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x5ae>
 8001964:	e024      	b.n	80019b0 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e01f      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	401a      	ands	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	429a      	cmp	r2, r3
 800198c:	d10e      	bne.n	80019ac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	220f      	movs	r2, #15
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d107      	bne.n	80019ac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	23f0      	movs	r3, #240	; 0xf0
 80019a0:	039b      	lsls	r3, r3, #14
 80019a2:	401a      	ands	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b008      	add	sp, #32
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40021000 	.word	0x40021000
 80019c0:	00001388 	.word	0x00001388
 80019c4:	efffffff 	.word	0xefffffff
 80019c8:	feffffff 	.word	0xfeffffff
 80019cc:	ffc2ffff 	.word	0xffc2ffff

080019d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0b3      	b.n	8001b4c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b5b      	ldr	r3, [pc, #364]	; (8001b54 <HAL_RCC_ClockConfig+0x184>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d911      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <HAL_RCC_ClockConfig+0x184>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2201      	movs	r2, #1
 80019f8:	4393      	bics	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	4b55      	ldr	r3, [pc, #340]	; (8001b54 <HAL_RCC_ClockConfig+0x184>)
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a04:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_RCC_ClockConfig+0x184>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e09a      	b.n	8001b4c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d015      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2204      	movs	r2, #4
 8001a26:	4013      	ands	r3, r2
 8001a28:	d006      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a2a:	4b4b      	ldr	r3, [pc, #300]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001a30:	21e0      	movs	r1, #224	; 0xe0
 8001a32:	00c9      	lsls	r1, r1, #3
 8001a34:	430a      	orrs	r2, r1
 8001a36:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a38:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	22f0      	movs	r2, #240	; 0xf0
 8001a3e:	4393      	bics	r3, r2
 8001a40:	0019      	movs	r1, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	d040      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	029b      	lsls	r3, r3, #10
 8001a66:	4013      	ands	r3, r2
 8001a68:	d114      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e06e      	b.n	8001b4c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	049b      	lsls	r3, r3, #18
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d108      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e062      	b.n	8001b4c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a86:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e05b      	b.n	8001b4c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa8:	f7ff f95c 	bl	8000d64 <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab0:	e009      	b.n	8001ac6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab2:	f7ff f957 	bl	8000d64 <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <HAL_RCC_ClockConfig+0x18c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e042      	b.n	8001b4c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	220c      	movs	r2, #12
 8001acc:	401a      	ands	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1ec      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_RCC_ClockConfig+0x184>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d211      	bcs.n	8001b0a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_RCC_ClockConfig+0x184>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4393      	bics	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_RCC_ClockConfig+0x184>)
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <HAL_RCC_ClockConfig+0x184>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e020      	b.n	8001b4c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	4013      	ands	r3, r2
 8001b12:	d009      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <HAL_RCC_ClockConfig+0x190>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001b24:	430a      	orrs	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b28:	f000 f820 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_RCC_ClockConfig+0x188>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	220f      	movs	r2, #15
 8001b36:	4013      	ands	r3, r2
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x194>)
 8001b3a:	5cd3      	ldrb	r3, [r2, r3]
 8001b3c:	000a      	movs	r2, r1
 8001b3e:	40da      	lsrs	r2, r3
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x198>)
 8001b42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff f8c7 	bl	8000cd8 <HAL_InitTick>
  
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b004      	add	sp, #16
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	00001388 	.word	0x00001388
 8001b60:	fffff8ff 	.word	0xfffff8ff
 8001b64:	08003ce0 	.word	0x08003ce0
 8001b68:	20000000 	.word	0x20000000

08001b6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b08f      	sub	sp, #60	; 0x3c
 8001b70:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b72:	2314      	movs	r3, #20
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	4a2b      	ldr	r2, [pc, #172]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b7a:	c313      	stmia	r3!, {r0, r1, r4}
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4a29      	ldr	r2, [pc, #164]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b86:	c313      	stmia	r3!, {r0, r1, r4}
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b94:	2300      	movs	r3, #0
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	220c      	movs	r2, #12
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d002      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x4a>
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d003      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x50>
 8001bb4:	e02d      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bba:	e02d      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbe:	0c9b      	lsrs	r3, r3, #18
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2214      	movs	r2, #20
 8001bc6:	18ba      	adds	r2, r7, r2
 8001bc8:	5cd3      	ldrb	r3, [r2, r3]
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	1d3a      	adds	r2, r7, #4
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	025b      	lsls	r3, r3, #9
 8001be0:	4013      	ands	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001be6:	4812      	ldr	r0, [pc, #72]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001be8:	f7fe fa96 	bl	8000118 <__udivsi3>
 8001bec:	0003      	movs	r3, r0
 8001bee:	001a      	movs	r2, r3
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	4353      	muls	r3, r2
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf6:	e009      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bfa:	000a      	movs	r2, r1
 8001bfc:	0152      	lsls	r2, r2, #5
 8001bfe:	1a52      	subs	r2, r2, r1
 8001c00:	0193      	lsls	r3, r2, #6
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	185b      	adds	r3, r3, r1
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c10:	e002      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c16:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b00f      	add	sp, #60	; 0x3c
 8001c20:	bd90      	pop	{r4, r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	08003cc0 	.word	0x08003cc0
 8001c28:	08003cd0 	.word	0x08003cd0
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	007a1200 	.word	0x007a1200

08001c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c4c:	f7ff fff2 	bl	8001c34 <HAL_RCC_GetHCLKFreq>
 8001c50:	0001      	movs	r1, r0
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	2207      	movs	r2, #7
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	40d9      	lsrs	r1, r3
 8001c62:	000b      	movs	r3, r1
}    
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08003cf0 	.word	0x08003cf0

08001c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	025b      	lsls	r3, r3, #9
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d100      	bne.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c90:	e08f      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2317      	movs	r3, #23
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9a:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	055b      	lsls	r3, r3, #21
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d111      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b54      	ldr	r3, [pc, #336]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ca8:	69da      	ldr	r2, [r3, #28]
 8001caa:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	0549      	lsls	r1, r1, #21
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	61da      	str	r2, [r3, #28]
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cb6:	69da      	ldr	r2, [r3, #28]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	055b      	lsls	r3, r3, #21
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc2:	2317      	movs	r3, #23
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d11a      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd6:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b48      	ldr	r3, [pc, #288]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	0049      	lsls	r1, r1, #1
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f83e 	bl	8000d64 <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	e008      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cee:	f7ff f839 	bl	8000d64 <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b64      	cmp	r3, #100	; 0x64
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e077      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	23c0      	movs	r3, #192	; 0xc0
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d034      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	23c0      	movs	r3, #192	; 0xc0
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d02c      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d2e:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a33      	ldr	r2, [pc, #204]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d38:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d3a:	6a1a      	ldr	r2, [r3, #32]
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	0249      	lsls	r1, r1, #9
 8001d42:	430a      	orrs	r2, r1
 8001d44:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d4c:	492d      	ldr	r1, [pc, #180]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d52:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d013      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff f800 	bl	8000d64 <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	e009      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe fffb 	bl	8000d64 <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	4a24      	ldr	r2, [pc, #144]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e038      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d9c:	2317      	movs	r3, #23
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d105      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dac:	4917      	ldr	r1, [pc, #92]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001dae:	400a      	ands	r2, r1
 8001db0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2201      	movs	r2, #1
 8001db8:	4013      	ands	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d009      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	2210      	movs	r2, #16
 8001de0:	4393      	bics	r3, r2
 8001de2:	0019      	movs	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b006      	add	sp, #24
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	fffffcff 	.word	0xfffffcff
 8001e04:	fffeffff 	.word	0xfffeffff
 8001e08:	00001388 	.word	0x00001388
 8001e0c:	efffffff 	.word	0xefffffff

08001e10 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e081      	b.n	8001f26 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7f5b      	ldrb	r3, [r3, #29]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d106      	bne.n	8001e3a <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7fe fd21 	bl	800087c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	22ca      	movs	r2, #202	; 0xca
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2253      	movs	r2, #83	; 0x53
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 faa9 	bl	80023aa <RTC_EnterInitMode>
 8001e58:	1e03      	subs	r3, r0, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	22ff      	movs	r2, #255	; 0xff
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2204      	movs	r2, #4
 8001e68:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e05b      	b.n	8001f26 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	492d      	ldr	r1, [pc, #180]	; (8001f30 <HAL_RTC_Init+0x120>)
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6899      	ldr	r1, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	68d2      	ldr	r2, [r2, #12]
 8001ea4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6919      	ldr	r1, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	041a      	lsls	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	438a      	bics	r2, r1
 8001ec8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f000 fa3d 	bl	8002358 <HAL_RTC_WaitForSynchro>
 8001ede:	1e03      	subs	r3, r0, #0
 8001ee0:	d008      	beq.n	8001ef4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	22ff      	movs	r2, #255	; 0xff
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e018      	b.n	8001f26 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	490d      	ldr	r1, [pc, #52]	; (8001f34 <HAL_RTC_Init+0x124>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	22ff      	movs	r2, #255	; 0xff
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001f24:	2300      	movs	r3, #0
  }
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b002      	add	sp, #8
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	ff8fffbf 	.word	0xff8fffbf
 8001f34:	fffbffff 	.word	0xfffbffff

08001f38 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	7f1b      	ldrb	r3, [r3, #28]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_RTC_SetTime+0x1c>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e0a5      	b.n	80020a0 <HAL_RTC_SetTime+0x168>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d125      	bne.n	8001fb2 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2240      	movs	r2, #64	; 0x40
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d102      	bne.n	8001f78 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2200      	movs	r2, #0
 8001f76:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 fa40 	bl	8002402 <RTC_ByteToBcd2>
 8001f82:	0003      	movs	r3, r0
 8001f84:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	785b      	ldrb	r3, [r3, #1]
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f000 fa39 	bl	8002402 <RTC_ByteToBcd2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f94:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	789b      	ldrb	r3, [r3, #2]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 fa31 	bl	8002402 <RTC_ByteToBcd2>
 8001fa0:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fa2:	0022      	movs	r2, r4
 8001fa4:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	78db      	ldrb	r3, [r3, #3]
 8001faa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fac:	4313      	orrs	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	e017      	b.n	8001fe2 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d102      	bne.n	8001fc4 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fd0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fd6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	78db      	ldrb	r3, [r3, #3]
 8001fdc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	22ca      	movs	r2, #202	; 0xca
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2253      	movs	r2, #83	; 0x53
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f000 f9d8 	bl	80023aa <RTC_EnterInitMode>
 8001ffa:	1e03      	subs	r3, r0, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	22ff      	movs	r2, #255	; 0xff
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2204      	movs	r2, #4
 800200a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e044      	b.n	80020a0 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4922      	ldr	r1, [pc, #136]	; (80020a8 <HAL_RTC_SetTime+0x170>)
 800201e:	400a      	ands	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	491f      	ldr	r1, [pc, #124]	; (80020ac <HAL_RTC_SetTime+0x174>)
 800202e:	400a      	ands	r2, r1
 8002030:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6899      	ldr	r1, [r3, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	431a      	orrs	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2180      	movs	r1, #128	; 0x80
 8002056:	438a      	bics	r2, r1
 8002058:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2220      	movs	r2, #32
 8002062:	4013      	ands	r3, r2
 8002064:	d111      	bne.n	800208a <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f975 	bl	8002358 <HAL_RTC_WaitForSynchro>
 800206e:	1e03      	subs	r3, r0, #0
 8002070:	d00b      	beq.n	800208a <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	22ff      	movs	r2, #255	; 0xff
 8002078:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2204      	movs	r2, #4
 800207e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00a      	b.n	80020a0 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	22ff      	movs	r2, #255	; 0xff
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800209e:	2300      	movs	r3, #0
  }
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b007      	add	sp, #28
 80020a6:	bd90      	pop	{r4, r7, pc}
 80020a8:	007f7f7f 	.word	0x007f7f7f
 80020ac:	fffbffff 	.word	0xfffbffff

080020b0 <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	045b      	lsls	r3, r3, #17
 80020d2:	0c5a      	lsrs	r2, r3, #17
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a22      	ldr	r2, [pc, #136]	; (8002168 <HAL_RTC_GetTime+0xb8>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	0c1b      	lsrs	r3, r3, #16
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	223f      	movs	r2, #63	; 0x3f
 80020ec:	4013      	ands	r3, r2
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	0a1b      	lsrs	r3, r3, #8
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	227f      	movs	r2, #127	; 0x7f
 80020fc:	4013      	ands	r3, r2
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	227f      	movs	r2, #127	; 0x7f
 800210a:	4013      	ands	r3, r2
 800210c:	b2da      	uxtb	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	0c1b      	lsrs	r3, r3, #16
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2240      	movs	r2, #64	; 0x40
 800211a:	4013      	ands	r3, r2
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d11a      	bne.n	800215e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	0018      	movs	r0, r3
 800212e:	f000 f989 	bl	8002444 <RTC_Bcd2ToByte>
 8002132:	0003      	movs	r3, r0
 8002134:	001a      	movs	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	785b      	ldrb	r3, [r3, #1]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 f980 	bl	8002444 <RTC_Bcd2ToByte>
 8002144:	0003      	movs	r3, r0
 8002146:	001a      	movs	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	789b      	ldrb	r3, [r3, #2]
 8002150:	0018      	movs	r0, r3
 8002152:	f000 f977 	bl	8002444 <RTC_Bcd2ToByte>
 8002156:	0003      	movs	r3, r0
 8002158:	001a      	movs	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b006      	add	sp, #24
 8002166:	bd80      	pop	{r7, pc}
 8002168:	007f7f7f 	.word	0x007f7f7f

0800216c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	7f1b      	ldrb	r3, [r3, #28]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_RTC_SetDate+0x1c>
 8002184:	2302      	movs	r3, #2
 8002186:	e091      	b.n	80022ac <HAL_RTC_SetDate+0x140>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2202      	movs	r2, #2
 8002192:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10e      	bne.n	80021b8 <HAL_RTC_SetDate+0x4c>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	001a      	movs	r2, r3
 80021a0:	2310      	movs	r3, #16
 80021a2:	4013      	ands	r3, r2
 80021a4:	d008      	beq.n	80021b8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	2210      	movs	r2, #16
 80021ac:	4393      	bics	r3, r2
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	330a      	adds	r3, #10
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d11c      	bne.n	80021f8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	78db      	ldrb	r3, [r3, #3]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f91d 	bl	8002402 <RTC_ByteToBcd2>
 80021c8:	0003      	movs	r3, r0
 80021ca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	785b      	ldrb	r3, [r3, #1]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f000 f916 	bl	8002402 <RTC_ByteToBcd2>
 80021d6:	0003      	movs	r3, r0
 80021d8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021da:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	789b      	ldrb	r3, [r3, #2]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 f90e 	bl	8002402 <RTC_ByteToBcd2>
 80021e6:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021e8:	0022      	movs	r2, r4
 80021ea:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e00e      	b.n	8002216 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	78db      	ldrb	r3, [r3, #3]
 80021fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	785b      	ldrb	r3, [r3, #1]
 8002202:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002204:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800220a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	22ca      	movs	r2, #202	; 0xca
 800221c:	625a      	str	r2, [r3, #36]	; 0x24
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2253      	movs	r2, #83	; 0x53
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	0018      	movs	r0, r3
 800222a:	f000 f8be 	bl	80023aa <RTC_EnterInitMode>
 800222e:	1e03      	subs	r3, r0, #0
 8002230:	d00b      	beq.n	800224a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	22ff      	movs	r2, #255	; 0xff
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2204      	movs	r2, #4
 800223e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e030      	b.n	80022ac <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4918      	ldr	r1, [pc, #96]	; (80022b4 <HAL_RTC_SetDate+0x148>)
 8002252:	400a      	ands	r2, r1
 8002254:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	438a      	bics	r2, r1
 8002264:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2220      	movs	r2, #32
 800226e:	4013      	ands	r3, r2
 8002270:	d111      	bne.n	8002296 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	0018      	movs	r0, r3
 8002276:	f000 f86f 	bl	8002358 <HAL_RTC_WaitForSynchro>
 800227a:	1e03      	subs	r3, r0, #0
 800227c:	d00b      	beq.n	8002296 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	22ff      	movs	r2, #255	; 0xff
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2204      	movs	r2, #4
 800228a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e00a      	b.n	80022ac <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	22ff      	movs	r2, #255	; 0xff
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80022aa:	2300      	movs	r3, #0
  }
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b007      	add	sp, #28
 80022b2:	bd90      	pop	{r4, r7, pc}
 80022b4:	00ffff3f 	.word	0x00ffff3f

080022b8 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4a21      	ldr	r2, [pc, #132]	; (8002354 <HAL_RTC_GetDate+0x9c>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	221f      	movs	r2, #31
 80022e6:	4013      	ands	r3, r2
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	223f      	movs	r2, #63	; 0x3f
 80022f4:	4013      	ands	r3, r2
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	0b5b      	lsrs	r3, r3, #13
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2207      	movs	r2, #7
 8002304:	4013      	ands	r3, r2
 8002306:	b2da      	uxtb	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11a      	bne.n	8002348 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	78db      	ldrb	r3, [r3, #3]
 8002316:	0018      	movs	r0, r3
 8002318:	f000 f894 	bl	8002444 <RTC_Bcd2ToByte>
 800231c:	0003      	movs	r3, r0
 800231e:	001a      	movs	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	785b      	ldrb	r3, [r3, #1]
 8002328:	0018      	movs	r0, r3
 800232a:	f000 f88b 	bl	8002444 <RTC_Bcd2ToByte>
 800232e:	0003      	movs	r3, r0
 8002330:	001a      	movs	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	789b      	ldrb	r3, [r3, #2]
 800233a:	0018      	movs	r0, r3
 800233c:	f000 f882 	bl	8002444 <RTC_Bcd2ToByte>
 8002340:	0003      	movs	r3, r0
 8002342:	001a      	movs	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	b006      	add	sp, #24
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	00ffff3f 	.word	0x00ffff3f

08002358 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	21a0      	movs	r1, #160	; 0xa0
 8002370:	438a      	bics	r2, r1
 8002372:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002374:	f7fe fcf6 	bl	8000d64 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800237c:	e00a      	b.n	8002394 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800237e:	f7fe fcf1 	bl	8000d64 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad2      	subs	r2, r2, r3
 8002388:	23fa      	movs	r3, #250	; 0xfa
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	429a      	cmp	r2, r3
 800238e:	d901      	bls.n	8002394 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e006      	b.n	80023a2 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	4013      	ands	r3, r2
 800239e:	d0ee      	beq.n	800237e <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}

080023aa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	4013      	ands	r3, r2
 80023c0:	d11a      	bne.n	80023f8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4252      	negs	r2, r2
 80023ca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80023cc:	f7fe fcca 	bl	8000d64 <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023d4:	e00a      	b.n	80023ec <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023d6:	f7fe fcc5 	bl	8000d64 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	23fa      	movs	r3, #250	; 0xfa
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d901      	bls.n	80023ec <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e006      	b.n	80023fa <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2240      	movs	r2, #64	; 0x40
 80023f4:	4013      	ands	r3, r2
 80023f6:	d0ee      	beq.n	80023d6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b004      	add	sp, #16
 8002400:	bd80      	pop	{r7, pc}

08002402 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	0002      	movs	r2, r0
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002412:	e007      	b.n	8002424 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3301      	adds	r3, #1
 8002418:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800241a:	1dfb      	adds	r3, r7, #7
 800241c:	1dfa      	adds	r2, r7, #7
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	3a0a      	subs	r2, #10
 8002422:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8002424:	1dfb      	adds	r3, r7, #7
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b09      	cmp	r3, #9
 800242a:	d8f3      	bhi.n	8002414 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	b2da      	uxtb	r2, r3
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4313      	orrs	r3, r2
 800243a:	b2db      	uxtb	r3, r3
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b004      	add	sp, #16
 8002442:	bd80      	pop	{r7, pc}

08002444 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	0002      	movs	r2, r0
 800244c:	1dfb      	adds	r3, r7, #7
 800244e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	b2db      	uxtb	r3, r3
 800245c:	001a      	movs	r2, r3
 800245e:	0013      	movs	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	189b      	adds	r3, r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8002468:	1dfb      	adds	r3, r7, #7
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	220f      	movs	r2, #15
 800246e:	4013      	ands	r3, r2
 8002470:	b2da      	uxtb	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	18d3      	adds	r3, r2, r3
 8002478:	b2db      	uxtb	r3, r3
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b004      	add	sp, #16
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e01e      	b.n	80024d2 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	223d      	movs	r2, #61	; 0x3d
 8002498:	5c9b      	ldrb	r3, [r3, r2]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	223c      	movs	r2, #60	; 0x3c
 80024a4:	2100      	movs	r1, #0
 80024a6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7fe f9fe 	bl	80008ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	223d      	movs	r2, #61	; 0x3d
 80024b4:	2102      	movs	r1, #2
 80024b6:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3304      	adds	r3, #4
 80024c0:	0019      	movs	r1, r3
 80024c2:	0010      	movs	r0, r2
 80024c4:	f000 f98c 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	223d      	movs	r2, #61	; 0x3d
 80024cc:	2101      	movs	r1, #1
 80024ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2101      	movs	r1, #1
 80024ee:	430a      	orrs	r2, r1
 80024f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2207      	movs	r2, #7
 80024fa:	4013      	ands	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d007      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2101      	movs	r1, #1
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b004      	add	sp, #16
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2101      	movs	r1, #1
 8002534:	438a      	bics	r2, r1
 8002536:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a0b      	ldr	r2, [pc, #44]	; (800256c <HAL_TIM_Base_Stop_IT+0x4c>)
 8002540:	4013      	ands	r3, r2
 8002542:	d10d      	bne.n	8002560 <HAL_TIM_Base_Stop_IT+0x40>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_TIM_Base_Stop_IT+0x50>)
 800254c:	4013      	ands	r3, r2
 800254e:	d107      	bne.n	8002560 <HAL_TIM_Base_Stop_IT+0x40>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2101      	movs	r1, #1
 800255c:	438a      	bics	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b002      	add	sp, #8
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	00001111 	.word	0x00001111
 8002570:	00000444 	.word	0x00000444

08002574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2202      	movs	r2, #2
 8002584:	4013      	ands	r3, r2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d124      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2202      	movs	r2, #2
 8002592:	4013      	ands	r3, r2
 8002594:	2b02      	cmp	r3, #2
 8002596:	d11d      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2203      	movs	r2, #3
 800259e:	4252      	negs	r2, r2
 80025a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2203      	movs	r2, #3
 80025b0:	4013      	ands	r3, r2
 80025b2:	d004      	beq.n	80025be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 f8fa 	bl	80027b0 <HAL_TIM_IC_CaptureCallback>
 80025bc:	e007      	b.n	80025ce <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 f8ed 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 f8f9 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2204      	movs	r2, #4
 80025dc:	4013      	ands	r3, r2
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d125      	bne.n	800262e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2204      	movs	r2, #4
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d11e      	bne.n	800262e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2205      	movs	r2, #5
 80025f6:	4252      	negs	r2, r2
 80025f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2202      	movs	r2, #2
 80025fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	23c0      	movs	r3, #192	; 0xc0
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4013      	ands	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	0018      	movs	r0, r3
 8002612:	f000 f8cd 	bl	80027b0 <HAL_TIM_IC_CaptureCallback>
 8002616:	e007      	b.n	8002628 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f000 f8c0 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0018      	movs	r0, r3
 8002624:	f000 f8cc 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2208      	movs	r2, #8
 8002636:	4013      	ands	r3, r2
 8002638:	2b08      	cmp	r3, #8
 800263a:	d124      	bne.n	8002686 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2208      	movs	r2, #8
 8002644:	4013      	ands	r3, r2
 8002646:	2b08      	cmp	r3, #8
 8002648:	d11d      	bne.n	8002686 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2209      	movs	r2, #9
 8002650:	4252      	negs	r2, r2
 8002652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2204      	movs	r2, #4
 8002658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2203      	movs	r2, #3
 8002662:	4013      	ands	r3, r2
 8002664:	d004      	beq.n	8002670 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 f8a1 	bl	80027b0 <HAL_TIM_IC_CaptureCallback>
 800266e:	e007      	b.n	8002680 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	0018      	movs	r0, r3
 8002674:	f000 f894 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 f8a0 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2210      	movs	r2, #16
 800268e:	4013      	ands	r3, r2
 8002690:	2b10      	cmp	r3, #16
 8002692:	d125      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2210      	movs	r2, #16
 800269c:	4013      	ands	r3, r2
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d11e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2211      	movs	r2, #17
 80026a8:	4252      	negs	r2, r2
 80026aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2208      	movs	r2, #8
 80026b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	23c0      	movs	r3, #192	; 0xc0
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4013      	ands	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 f874 	bl	80027b0 <HAL_TIM_IC_CaptureCallback>
 80026c8:	e007      	b.n	80026da <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 f867 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 f873 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d10f      	bne.n	800270e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d108      	bne.n	800270e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2202      	movs	r2, #2
 8002702:	4252      	negs	r2, r2
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f7fd fd91 	bl	8000230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	4013      	ands	r3, r2
 8002718:	2b80      	cmp	r3, #128	; 0x80
 800271a:	d10f      	bne.n	800273c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2280      	movs	r2, #128	; 0x80
 8002724:	4013      	ands	r3, r2
 8002726:	2b80      	cmp	r3, #128	; 0x80
 8002728:	d108      	bne.n	800273c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2281      	movs	r2, #129	; 0x81
 8002730:	4252      	negs	r2, r2
 8002732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	0018      	movs	r0, r3
 8002738:	f000 f8d0 	bl	80028dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2240      	movs	r2, #64	; 0x40
 8002744:	4013      	ands	r3, r2
 8002746:	2b40      	cmp	r3, #64	; 0x40
 8002748:	d10f      	bne.n	800276a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2240      	movs	r2, #64	; 0x40
 8002752:	4013      	ands	r3, r2
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d108      	bne.n	800276a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2241      	movs	r2, #65	; 0x41
 800275e:	4252      	negs	r2, r2
 8002760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0018      	movs	r0, r3
 8002766:	f000 f833 	bl	80027d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2220      	movs	r2, #32
 8002772:	4013      	ands	r3, r2
 8002774:	2b20      	cmp	r3, #32
 8002776:	d10f      	bne.n	8002798 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	4013      	ands	r3, r2
 8002782:	2b20      	cmp	r3, #32
 8002784:	d108      	bne.n	8002798 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2221      	movs	r2, #33	; 0x21
 800278c:	4252      	negs	r2, r2
 800278e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f000 f89a 	bl	80028cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d8:	46c0      	nop			; (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}

080027e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a2f      	ldr	r2, [pc, #188]	; (80028b0 <TIM_Base_SetConfig+0xd0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d003      	beq.n	8002800 <TIM_Base_SetConfig+0x20>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a2e      	ldr	r2, [pc, #184]	; (80028b4 <TIM_Base_SetConfig+0xd4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d108      	bne.n	8002812 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2270      	movs	r2, #112	; 0x70
 8002804:	4393      	bics	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a26      	ldr	r2, [pc, #152]	; (80028b0 <TIM_Base_SetConfig+0xd0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <TIM_Base_SetConfig+0x62>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a25      	ldr	r2, [pc, #148]	; (80028b4 <TIM_Base_SetConfig+0xd4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00f      	beq.n	8002842 <TIM_Base_SetConfig+0x62>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <TIM_Base_SetConfig+0xd8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00b      	beq.n	8002842 <TIM_Base_SetConfig+0x62>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a23      	ldr	r2, [pc, #140]	; (80028bc <TIM_Base_SetConfig+0xdc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <TIM_Base_SetConfig+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <TIM_Base_SetConfig+0xe0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d003      	beq.n	8002842 <TIM_Base_SetConfig+0x62>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <TIM_Base_SetConfig+0xe4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d108      	bne.n	8002854 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <TIM_Base_SetConfig+0xe8>)
 8002846:	4013      	ands	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	4393      	bics	r3, r2
 800285a:	001a      	movs	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <TIM_Base_SetConfig+0xd0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00b      	beq.n	800289a <TIM_Base_SetConfig+0xba>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <TIM_Base_SetConfig+0xdc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <TIM_Base_SetConfig+0xba>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <TIM_Base_SetConfig+0xe0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_Base_SetConfig+0xba>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <TIM_Base_SetConfig+0xe4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d103      	bne.n	80028a2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	615a      	str	r2, [r3, #20]
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b004      	add	sp, #16
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40002000 	.word	0x40002000
 80028bc:	40014000 	.word	0x40014000
 80028c0:	40014400 	.word	0x40014400
 80028c4:	40014800 	.word	0x40014800
 80028c8:	fffffcff 	.word	0xfffffcff

080028cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e044      	b.n	8002988 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002902:	2b00      	cmp	r3, #0
 8002904:	d107      	bne.n	8002916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2270      	movs	r2, #112	; 0x70
 800290a:	2100      	movs	r1, #0
 800290c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f7fd fff1 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2224      	movs	r2, #36	; 0x24
 800291a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2101      	movs	r1, #1
 8002928:	438a      	bics	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	0018      	movs	r0, r3
 8002930:	f000 fa10 	bl	8002d54 <UART_SetConfig>
 8002934:	0003      	movs	r3, r0
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e024      	b.n	8002988 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	0018      	movs	r0, r3
 800294a:	f000 fb89 	bl	8003060 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	490d      	ldr	r1, [pc, #52]	; (8002990 <HAL_UART_Init+0xa4>)
 800295a:	400a      	ands	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2108      	movs	r1, #8
 800296a:	438a      	bics	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	0018      	movs	r0, r3
 8002982:	f000 fc21 	bl	80031c8 <UART_CheckIdleState>
 8002986:	0003      	movs	r3, r0
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}
 8002990:	fffff7ff 	.word	0xfffff7ff

08002994 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	1dbb      	adds	r3, r7, #6
 80029a2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d000      	beq.n	80029ae <HAL_UART_Transmit+0x1a>
 80029ac:	e095      	b.n	8002ada <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_UART_Transmit+0x28>
 80029b4:	1dbb      	adds	r3, r7, #6
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e08d      	b.n	8002adc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	015b      	lsls	r3, r3, #5
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d109      	bne.n	80029e0 <HAL_UART_Transmit+0x4c>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	d001      	beq.n	80029e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e07d      	b.n	8002adc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2270      	movs	r2, #112	; 0x70
 80029e4:	5c9b      	ldrb	r3, [r3, r2]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_UART_Transmit+0x5a>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e076      	b.n	8002adc <HAL_UART_Transmit+0x148>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2270      	movs	r2, #112	; 0x70
 80029f2:	2101      	movs	r1, #1
 80029f4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2221      	movs	r2, #33	; 0x21
 8002a00:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a02:	f7fe f9af 	bl	8000d64 <HAL_GetTick>
 8002a06:	0003      	movs	r3, r0
 8002a08:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1dba      	adds	r2, r7, #6
 8002a0e:	2150      	movs	r1, #80	; 0x50
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1dba      	adds	r2, r7, #6
 8002a18:	2152      	movs	r1, #82	; 0x52
 8002a1a:	8812      	ldrh	r2, [r2, #0]
 8002a1c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	015b      	lsls	r3, r3, #5
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d108      	bne.n	8002a3c <HAL_UART_Transmit+0xa8>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e003      	b.n	8002a44 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a44:	e02d      	b.n	8002aa2 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	0013      	movs	r3, r2
 8002a50:	2200      	movs	r2, #0
 8002a52:	2180      	movs	r1, #128	; 0x80
 8002a54:	f000 fbfe 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 8002a58:	1e03      	subs	r3, r0, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e03d      	b.n	8002adc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10b      	bne.n	8002a7e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	05d2      	lsls	r2, r2, #23
 8002a70:	0dd2      	lsrs	r2, r2, #23
 8002a72:	b292      	uxth	r2, r2
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	3302      	adds	r3, #2
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e008      	b.n	8002a90 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	b292      	uxth	r2, r2
 8002a88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2252      	movs	r2, #82	; 0x52
 8002a94:	5a9b      	ldrh	r3, [r3, r2]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b299      	uxth	r1, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2252      	movs	r2, #82	; 0x52
 8002aa0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2252      	movs	r2, #82	; 0x52
 8002aa6:	5a9b      	ldrh	r3, [r3, r2]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1cb      	bne.n	8002a46 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2140      	movs	r1, #64	; 0x40
 8002abc:	f000 fbca 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e009      	b.n	8002adc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2270      	movs	r2, #112	; 0x70
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e000      	b.n	8002adc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
  }
}
 8002adc:	0018      	movs	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b008      	add	sp, #32
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	4a89      	ldr	r2, [pc, #548]	; (8002d2c <HAL_UART_IRQHandler+0x248>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d112      	bne.n	8002b38 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2220      	movs	r2, #32
 8002b16:	4013      	ands	r3, r2
 8002b18:	d00e      	beq.n	8002b38 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d00a      	beq.n	8002b38 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d100      	bne.n	8002b2c <HAL_UART_IRQHandler+0x48>
 8002b2a:	e0f7      	b.n	8002d1c <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	0010      	movs	r0, r2
 8002b34:	4798      	blx	r3
      }
      return;
 8002b36:	e0f1      	b.n	8002d1c <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d100      	bne.n	8002b40 <HAL_UART_IRQHandler+0x5c>
 8002b3e:	e0cd      	b.n	8002cdc <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	d105      	bne.n	8002b54 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	2390      	movs	r3, #144	; 0x90
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d100      	bne.n	8002b54 <HAL_UART_IRQHandler+0x70>
 8002b52:	e0c3      	b.n	8002cdc <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2201      	movs	r2, #1
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d00e      	beq.n	8002b7a <HAL_UART_IRQHandler+0x96>
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b72:	2201      	movs	r2, #1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d00d      	beq.n	8002b9e <HAL_UART_IRQHandler+0xba>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b96:	2204      	movs	r2, #4
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xde>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d009      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bba:	2202      	movs	r2, #2
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d011      	beq.n	8002bee <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d103      	bne.n	8002bda <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bd8:	d009      	beq.n	8002bee <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2208      	movs	r2, #8
 8002be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be6:	2208      	movs	r2, #8
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d00f      	beq.n	8002c18 <HAL_UART_IRQHandler+0x134>
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	04db      	lsls	r3, r3, #19
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d00a      	beq.n	8002c18 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c10:	2220      	movs	r2, #32
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d100      	bne.n	8002c22 <HAL_UART_IRQHandler+0x13e>
 8002c20:	e07e      	b.n	8002d20 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	2220      	movs	r2, #32
 8002c26:	4013      	ands	r3, r2
 8002c28:	d00c      	beq.n	8002c44 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d008      	beq.n	8002c44 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d004      	beq.n	8002c44 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	0010      	movs	r0, r2
 8002c42:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c48:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2240      	movs	r2, #64	; 0x40
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b40      	cmp	r3, #64	; 0x40
 8002c56:	d003      	beq.n	8002c60 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2228      	movs	r2, #40	; 0x28
 8002c5c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c5e:	d033      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f000 fb74 	bl	8003350 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d123      	bne.n	8002cbe <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	438a      	bics	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d012      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c92:	4a27      	ldr	r2, [pc, #156]	; (8002d30 <HAL_UART_IRQHandler+0x24c>)
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7fe f94a 	bl	8000f34 <HAL_DMA_Abort_IT>
 8002ca0:	1e03      	subs	r3, r0, #0
 8002ca2:	d019      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cae:	0018      	movs	r0, r3
 8002cb0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb2:	e011      	b.n	8002cd8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 f844 	bl	8002d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cbc:	e00c      	b.n	8002cd8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 f83f 	bl	8002d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc6:	e007      	b.n	8002cd8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 f83a 	bl	8002d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002cd6:	e023      	b.n	8002d20 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd8:	46c0      	nop			; (mov r8, r8)
    return;
 8002cda:	e021      	b.n	8002d20 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d00d      	beq.n	8002d00 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d009      	beq.n	8002d00 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d017      	beq.n	8002d24 <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	0010      	movs	r0, r2
 8002cfc:	4798      	blx	r3
    }
    return;
 8002cfe:	e011      	b.n	8002d24 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2240      	movs	r2, #64	; 0x40
 8002d04:	4013      	ands	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_UART_IRQHandler+0x242>
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d00a      	beq.n	8002d26 <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 fb53 	bl	80033be <UART_EndTransmit_IT>
    return;
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	e004      	b.n	8002d26 <HAL_UART_IRQHandler+0x242>
      return;
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	e002      	b.n	8002d26 <HAL_UART_IRQHandler+0x242>
    return;
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	e000      	b.n	8002d26 <HAL_UART_IRQHandler+0x242>
    return;
 8002d24:	46c0      	nop			; (mov r8, r8)
  }

}
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b008      	add	sp, #32
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	0000080f 	.word	0x0000080f
 8002d30:	08003391 	.word	0x08003391

08002d34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d60:	2317      	movs	r3, #23
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4aad      	ldr	r2, [pc, #692]	; (800303c <UART_SetConfig+0x2e8>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4aa8      	ldr	r2, [pc, #672]	; (8003040 <UART_SetConfig+0x2ec>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a9f      	ldr	r2, [pc, #636]	; (8003044 <UART_SetConfig+0x2f0>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a9b      	ldr	r2, [pc, #620]	; (8003048 <UART_SetConfig+0x2f4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d125      	bne.n	8002e2a <UART_SetConfig+0xd6>
 8002dde:	4b9b      	ldr	r3, [pc, #620]	; (800304c <UART_SetConfig+0x2f8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	2203      	movs	r2, #3
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d00f      	beq.n	8002e0a <UART_SetConfig+0xb6>
 8002dea:	d304      	bcc.n	8002df6 <UART_SetConfig+0xa2>
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d011      	beq.n	8002e14 <UART_SetConfig+0xc0>
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d005      	beq.n	8002e00 <UART_SetConfig+0xac>
 8002df4:	e013      	b.n	8002e1e <UART_SetConfig+0xca>
 8002df6:	231f      	movs	r3, #31
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e022      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e00:	231f      	movs	r3, #31
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	2202      	movs	r2, #2
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e01d      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e0a:	231f      	movs	r3, #31
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	2204      	movs	r2, #4
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	e018      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e14:	231f      	movs	r3, #31
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	2208      	movs	r2, #8
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e013      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e1e:	231f      	movs	r3, #31
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	2210      	movs	r2, #16
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	e00d      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a88      	ldr	r2, [pc, #544]	; (8003050 <UART_SetConfig+0x2fc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d104      	bne.n	8002e3e <UART_SetConfig+0xea>
 8002e34:	231f      	movs	r3, #31
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e003      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e3e:	231f      	movs	r3, #31
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	2210      	movs	r2, #16
 8002e44:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d000      	beq.n	8002e54 <UART_SetConfig+0x100>
 8002e52:	e07d      	b.n	8002f50 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002e54:	231f      	movs	r3, #31
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d01c      	beq.n	8002e98 <UART_SetConfig+0x144>
 8002e5e:	dc02      	bgt.n	8002e66 <UART_SetConfig+0x112>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <UART_SetConfig+0x11c>
 8002e64:	e04b      	b.n	8002efe <UART_SetConfig+0x1aa>
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d025      	beq.n	8002eb6 <UART_SetConfig+0x162>
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d037      	beq.n	8002ede <UART_SetConfig+0x18a>
 8002e6e:	e046      	b.n	8002efe <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e70:	f7fe feea 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8002e74:	0003      	movs	r3, r0
 8002e76:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	005a      	lsls	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	18d2      	adds	r2, r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0019      	movs	r1, r3
 8002e8a:	0010      	movs	r0, r2
 8002e8c:	f7fd f944 	bl	8000118 <__udivsi3>
 8002e90:	0003      	movs	r3, r0
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	61bb      	str	r3, [r7, #24]
        break;
 8002e96:	e037      	b.n	8002f08 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	4a6d      	ldr	r2, [pc, #436]	; (8003054 <UART_SetConfig+0x300>)
 8002ea0:	189a      	adds	r2, r3, r2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	f7fd f935 	bl	8000118 <__udivsi3>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	61bb      	str	r3, [r7, #24]
        break;
 8002eb4:	e028      	b.n	8002f08 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb6:	f7fe fe59 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	005a      	lsls	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	18d2      	adds	r2, r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	0019      	movs	r1, r3
 8002ed0:	0010      	movs	r0, r2
 8002ed2:	f7fd f921 	bl	8000118 <__udivsi3>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	61bb      	str	r3, [r7, #24]
        break;
 8002edc:	e014      	b.n	8002f08 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	0252      	lsls	r2, r2, #9
 8002ee8:	189a      	adds	r2, r3, r2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	0019      	movs	r1, r3
 8002ef0:	0010      	movs	r0, r2
 8002ef2:	f7fd f911 	bl	8000118 <__udivsi3>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	61bb      	str	r3, [r7, #24]
        break;
 8002efc:	e004      	b.n	8002f08 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8002efe:	2317      	movs	r3, #23
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
        break;
 8002f06:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b0f      	cmp	r3, #15
 8002f0c:	d91b      	bls.n	8002f46 <UART_SetConfig+0x1f2>
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4a51      	ldr	r2, [pc, #324]	; (8003058 <UART_SetConfig+0x304>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d817      	bhi.n	8002f46 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	200a      	movs	r0, #10
 8002f1c:	183b      	adds	r3, r7, r0
 8002f1e:	210f      	movs	r1, #15
 8002f20:	438a      	bics	r2, r1
 8002f22:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b299      	uxth	r1, r3
 8002f30:	183b      	adds	r3, r7, r0
 8002f32:	183a      	adds	r2, r7, r0
 8002f34:	8812      	ldrh	r2, [r2, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	183a      	adds	r2, r7, r0
 8002f40:	8812      	ldrh	r2, [r2, #0]
 8002f42:	60da      	str	r2, [r3, #12]
 8002f44:	e06c      	b.n	8003020 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002f46:	2317      	movs	r3, #23
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e067      	b.n	8003020 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002f50:	231f      	movs	r3, #31
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d01b      	beq.n	8002f92 <UART_SetConfig+0x23e>
 8002f5a:	dc02      	bgt.n	8002f62 <UART_SetConfig+0x20e>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <UART_SetConfig+0x218>
 8002f60:	e049      	b.n	8002ff6 <UART_SetConfig+0x2a2>
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d024      	beq.n	8002fb0 <UART_SetConfig+0x25c>
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d035      	beq.n	8002fd6 <UART_SetConfig+0x282>
 8002f6a:	e044      	b.n	8002ff6 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f7fe fe6c 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8002f70:	0003      	movs	r3, r0
 8002f72:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	085a      	lsrs	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	18d2      	adds	r2, r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	0019      	movs	r1, r3
 8002f84:	0010      	movs	r0, r2
 8002f86:	f7fd f8c7 	bl	8000118 <__udivsi3>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	61bb      	str	r3, [r7, #24]
        break;
 8002f90:	e036      	b.n	8003000 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	4a30      	ldr	r2, [pc, #192]	; (800305c <UART_SetConfig+0x308>)
 8002f9a:	189a      	adds	r2, r3, r2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	0010      	movs	r0, r2
 8002fa4:	f7fd f8b8 	bl	8000118 <__udivsi3>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	61bb      	str	r3, [r7, #24]
        break;
 8002fae:	e027      	b.n	8003000 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb0:	f7fe fddc 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	085a      	lsrs	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	18d2      	adds	r2, r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	0010      	movs	r0, r2
 8002fca:	f7fd f8a5 	bl	8000118 <__udivsi3>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	61bb      	str	r3, [r7, #24]
        break;
 8002fd4:	e014      	b.n	8003000 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	0212      	lsls	r2, r2, #8
 8002fe0:	189a      	adds	r2, r3, r2
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	0010      	movs	r0, r2
 8002fea:	f7fd f895 	bl	8000118 <__udivsi3>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	61bb      	str	r3, [r7, #24]
        break;
 8002ff4:	e004      	b.n	8003000 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8002ff6:	2317      	movs	r3, #23
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
        break;
 8002ffe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	d908      	bls.n	8003018 <UART_SetConfig+0x2c4>
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4a13      	ldr	r2, [pc, #76]	; (8003058 <UART_SetConfig+0x304>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d804      	bhi.n	8003018 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	e003      	b.n	8003020 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003018:	2317      	movs	r3, #23
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800302c:	2317      	movs	r3, #23
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	781b      	ldrb	r3, [r3, #0]
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b008      	add	sp, #32
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	ffff69f3 	.word	0xffff69f3
 8003040:	ffffcfff 	.word	0xffffcfff
 8003044:	fffff4ff 	.word	0xfffff4ff
 8003048:	40013800 	.word	0x40013800
 800304c:	40021000 	.word	0x40021000
 8003050:	40004400 	.word	0x40004400
 8003054:	00f42400 	.word	0x00f42400
 8003058:	0000ffff 	.word	0x0000ffff
 800305c:	007a1200 	.word	0x007a1200

08003060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	2201      	movs	r2, #1
 800306e:	4013      	ands	r3, r2
 8003070:	d00b      	beq.n	800308a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <UART_AdvFeatureConfig+0x144>)
 800307a:	4013      	ands	r3, r2
 800307c:	0019      	movs	r1, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	2202      	movs	r2, #2
 8003090:	4013      	ands	r3, r2
 8003092:	d00b      	beq.n	80030ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4a43      	ldr	r2, [pc, #268]	; (80031a8 <UART_AdvFeatureConfig+0x148>)
 800309c:	4013      	ands	r3, r2
 800309e:	0019      	movs	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	2204      	movs	r2, #4
 80030b2:	4013      	ands	r3, r2
 80030b4:	d00b      	beq.n	80030ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4a3b      	ldr	r2, [pc, #236]	; (80031ac <UART_AdvFeatureConfig+0x14c>)
 80030be:	4013      	ands	r3, r2
 80030c0:	0019      	movs	r1, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2208      	movs	r2, #8
 80030d4:	4013      	ands	r3, r2
 80030d6:	d00b      	beq.n	80030f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4a34      	ldr	r2, [pc, #208]	; (80031b0 <UART_AdvFeatureConfig+0x150>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	2210      	movs	r2, #16
 80030f6:	4013      	ands	r3, r2
 80030f8:	d00b      	beq.n	8003112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a2c      	ldr	r2, [pc, #176]	; (80031b4 <UART_AdvFeatureConfig+0x154>)
 8003102:	4013      	ands	r3, r2
 8003104:	0019      	movs	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2220      	movs	r2, #32
 8003118:	4013      	ands	r3, r2
 800311a:	d00b      	beq.n	8003134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <UART_AdvFeatureConfig+0x158>)
 8003124:	4013      	ands	r3, r2
 8003126:	0019      	movs	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	2240      	movs	r2, #64	; 0x40
 800313a:	4013      	ands	r3, r2
 800313c:	d01d      	beq.n	800317a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <UART_AdvFeatureConfig+0x15c>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	035b      	lsls	r3, r3, #13
 800315e:	429a      	cmp	r2, r3
 8003160:	d10b      	bne.n	800317a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <UART_AdvFeatureConfig+0x160>)
 800316a:	4013      	ands	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	4013      	ands	r3, r2
 8003182:	d00b      	beq.n	800319c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <UART_AdvFeatureConfig+0x164>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
  }
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	fffdffff 	.word	0xfffdffff
 80031a8:	fffeffff 	.word	0xfffeffff
 80031ac:	fffbffff 	.word	0xfffbffff
 80031b0:	ffff7fff 	.word	0xffff7fff
 80031b4:	ffffefff 	.word	0xffffefff
 80031b8:	ffffdfff 	.word	0xffffdfff
 80031bc:	ffefffff 	.word	0xffefffff
 80031c0:	ff9fffff 	.word	0xff9fffff
 80031c4:	fff7ffff 	.word	0xfff7ffff

080031c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80031d6:	f7fd fdc5 	bl	8000d64 <HAL_GetTick>
 80031da:	0003      	movs	r3, r0
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2208      	movs	r2, #8
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d10d      	bne.n	8003208 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	0399      	lsls	r1, r3, #14
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <UART_CheckIdleState+0x88>)
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	0013      	movs	r3, r2
 80031fa:	2200      	movs	r2, #0
 80031fc:	f000 f82a 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 8003200:	1e03      	subs	r3, r0, #0
 8003202:	d001      	beq.n	8003208 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e01f      	b.n	8003248 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2204      	movs	r2, #4
 8003210:	4013      	ands	r3, r2
 8003212:	2b04      	cmp	r3, #4
 8003214:	d10d      	bne.n	8003232 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	03d9      	lsls	r1, r3, #15
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <UART_CheckIdleState+0x88>)
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	0013      	movs	r3, r2
 8003224:	2200      	movs	r2, #0
 8003226:	f000 f815 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 800322a:	1e03      	subs	r3, r0, #0
 800322c:	d001      	beq.n	8003232 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e00a      	b.n	8003248 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2270      	movs	r2, #112	; 0x70
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b004      	add	sp, #16
 800324e:	bd80      	pop	{r7, pc}
 8003250:	01ffffff 	.word	0x01ffffff

08003254 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	1dfb      	adds	r3, r7, #7
 8003262:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003264:	e05d      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	3301      	adds	r3, #1
 800326a:	d05a      	beq.n	8003322 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326c:	f7fd fd7a 	bl	8000d64 <HAL_GetTick>
 8003270:	0002      	movs	r2, r0
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	429a      	cmp	r2, r3
 800327a:	d302      	bcc.n	8003282 <UART_WaitOnFlagUntilTimeout+0x2e>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11b      	bne.n	80032ba <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	492f      	ldr	r1, [pc, #188]	; (800334c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800328e:	400a      	ands	r2, r1
 8003290:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2101      	movs	r1, #1
 800329e:	438a      	bics	r2, r1
 80032a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2270      	movs	r2, #112	; 0x70
 80032b2:	2100      	movs	r1, #0
 80032b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e043      	b.n	8003342 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2204      	movs	r2, #4
 80032c2:	4013      	ands	r3, r2
 80032c4:	d02d      	beq.n	8003322 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	401a      	ands	r2, r3
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d123      	bne.n	8003322 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	0112      	lsls	r2, r2, #4
 80032e2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4917      	ldr	r1, [pc, #92]	; (800334c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80032f0:	400a      	ands	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	438a      	bics	r2, r1
 8003302:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2270      	movs	r2, #112	; 0x70
 800331a:	2100      	movs	r1, #0
 800331c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e00f      	b.n	8003342 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	4013      	ands	r3, r2
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	425a      	negs	r2, r3
 8003332:	4153      	adcs	r3, r2
 8003334:	b2db      	uxtb	r3, r3
 8003336:	001a      	movs	r2, r3
 8003338:	1dfb      	adds	r3, r7, #7
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d092      	beq.n	8003266 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	0018      	movs	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	b004      	add	sp, #16
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	fffffe5f 	.word	0xfffffe5f

08003350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	490a      	ldr	r1, [pc, #40]	; (800338c <UART_EndRxTransfer+0x3c>)
 8003364:	400a      	ands	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2101      	movs	r1, #1
 8003374:	438a      	bics	r2, r1
 8003376:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}
 800338c:	fffffedf 	.word	0xfffffedf

08003390 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	225a      	movs	r2, #90	; 0x5a
 80033a2:	2100      	movs	r1, #0
 80033a4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2252      	movs	r2, #82	; 0x52
 80033aa:	2100      	movs	r1, #0
 80033ac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff fcc7 	bl	8002d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}

080033be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2140      	movs	r1, #64	; 0x40
 80033d2:	438a      	bics	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff fca5 	bl	8002d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b002      	add	sp, #8
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <__errno>:
 80033f4:	4b01      	ldr	r3, [pc, #4]	; (80033fc <__errno+0x8>)
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	4770      	bx	lr
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	2000000c 	.word	0x2000000c

08003400 <__libc_init_array>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	2600      	movs	r6, #0
 8003404:	4d0c      	ldr	r5, [pc, #48]	; (8003438 <__libc_init_array+0x38>)
 8003406:	4c0d      	ldr	r4, [pc, #52]	; (800343c <__libc_init_array+0x3c>)
 8003408:	1b64      	subs	r4, r4, r5
 800340a:	10a4      	asrs	r4, r4, #2
 800340c:	42a6      	cmp	r6, r4
 800340e:	d109      	bne.n	8003424 <__libc_init_array+0x24>
 8003410:	2600      	movs	r6, #0
 8003412:	f000 fc29 	bl	8003c68 <_init>
 8003416:	4d0a      	ldr	r5, [pc, #40]	; (8003440 <__libc_init_array+0x40>)
 8003418:	4c0a      	ldr	r4, [pc, #40]	; (8003444 <__libc_init_array+0x44>)
 800341a:	1b64      	subs	r4, r4, r5
 800341c:	10a4      	asrs	r4, r4, #2
 800341e:	42a6      	cmp	r6, r4
 8003420:	d105      	bne.n	800342e <__libc_init_array+0x2e>
 8003422:	bd70      	pop	{r4, r5, r6, pc}
 8003424:	00b3      	lsls	r3, r6, #2
 8003426:	58eb      	ldr	r3, [r5, r3]
 8003428:	4798      	blx	r3
 800342a:	3601      	adds	r6, #1
 800342c:	e7ee      	b.n	800340c <__libc_init_array+0xc>
 800342e:	00b3      	lsls	r3, r6, #2
 8003430:	58eb      	ldr	r3, [r5, r3]
 8003432:	4798      	blx	r3
 8003434:	3601      	adds	r6, #1
 8003436:	e7f2      	b.n	800341e <__libc_init_array+0x1e>
 8003438:	08003d2c 	.word	0x08003d2c
 800343c:	08003d2c 	.word	0x08003d2c
 8003440:	08003d2c 	.word	0x08003d2c
 8003444:	08003d30 	.word	0x08003d30

08003448 <memset>:
 8003448:	0003      	movs	r3, r0
 800344a:	1812      	adds	r2, r2, r0
 800344c:	4293      	cmp	r3, r2
 800344e:	d100      	bne.n	8003452 <memset+0xa>
 8003450:	4770      	bx	lr
 8003452:	7019      	strb	r1, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	e7f9      	b.n	800344c <memset+0x4>

08003458 <siprintf>:
 8003458:	b40e      	push	{r1, r2, r3}
 800345a:	b500      	push	{lr}
 800345c:	490b      	ldr	r1, [pc, #44]	; (800348c <siprintf+0x34>)
 800345e:	b09c      	sub	sp, #112	; 0x70
 8003460:	ab1d      	add	r3, sp, #116	; 0x74
 8003462:	9002      	str	r0, [sp, #8]
 8003464:	9006      	str	r0, [sp, #24]
 8003466:	9107      	str	r1, [sp, #28]
 8003468:	9104      	str	r1, [sp, #16]
 800346a:	4809      	ldr	r0, [pc, #36]	; (8003490 <siprintf+0x38>)
 800346c:	4909      	ldr	r1, [pc, #36]	; (8003494 <siprintf+0x3c>)
 800346e:	cb04      	ldmia	r3!, {r2}
 8003470:	9105      	str	r1, [sp, #20]
 8003472:	6800      	ldr	r0, [r0, #0]
 8003474:	a902      	add	r1, sp, #8
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	f000 f870 	bl	800355c <_svfiprintf_r>
 800347c:	2300      	movs	r3, #0
 800347e:	9a02      	ldr	r2, [sp, #8]
 8003480:	7013      	strb	r3, [r2, #0]
 8003482:	b01c      	add	sp, #112	; 0x70
 8003484:	bc08      	pop	{r3}
 8003486:	b003      	add	sp, #12
 8003488:	4718      	bx	r3
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	7fffffff 	.word	0x7fffffff
 8003490:	2000000c 	.word	0x2000000c
 8003494:	ffff0208 	.word	0xffff0208

08003498 <__ssputs_r>:
 8003498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800349a:	688e      	ldr	r6, [r1, #8]
 800349c:	b085      	sub	sp, #20
 800349e:	0007      	movs	r7, r0
 80034a0:	000c      	movs	r4, r1
 80034a2:	9203      	str	r2, [sp, #12]
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	429e      	cmp	r6, r3
 80034a8:	d83c      	bhi.n	8003524 <__ssputs_r+0x8c>
 80034aa:	2390      	movs	r3, #144	; 0x90
 80034ac:	898a      	ldrh	r2, [r1, #12]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	421a      	tst	r2, r3
 80034b2:	d034      	beq.n	800351e <__ssputs_r+0x86>
 80034b4:	2503      	movs	r5, #3
 80034b6:	6909      	ldr	r1, [r1, #16]
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	1a5b      	subs	r3, r3, r1
 80034bc:	9302      	str	r3, [sp, #8]
 80034be:	6963      	ldr	r3, [r4, #20]
 80034c0:	9802      	ldr	r0, [sp, #8]
 80034c2:	435d      	muls	r5, r3
 80034c4:	0feb      	lsrs	r3, r5, #31
 80034c6:	195d      	adds	r5, r3, r5
 80034c8:	9b01      	ldr	r3, [sp, #4]
 80034ca:	106d      	asrs	r5, r5, #1
 80034cc:	3301      	adds	r3, #1
 80034ce:	181b      	adds	r3, r3, r0
 80034d0:	42ab      	cmp	r3, r5
 80034d2:	d900      	bls.n	80034d6 <__ssputs_r+0x3e>
 80034d4:	001d      	movs	r5, r3
 80034d6:	0553      	lsls	r3, r2, #21
 80034d8:	d532      	bpl.n	8003540 <__ssputs_r+0xa8>
 80034da:	0029      	movs	r1, r5
 80034dc:	0038      	movs	r0, r7
 80034de:	f000 fb23 	bl	8003b28 <_malloc_r>
 80034e2:	1e06      	subs	r6, r0, #0
 80034e4:	d109      	bne.n	80034fa <__ssputs_r+0x62>
 80034e6:	230c      	movs	r3, #12
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	2340      	movs	r3, #64	; 0x40
 80034ec:	2001      	movs	r0, #1
 80034ee:	89a2      	ldrh	r2, [r4, #12]
 80034f0:	4240      	negs	r0, r0
 80034f2:	4313      	orrs	r3, r2
 80034f4:	81a3      	strh	r3, [r4, #12]
 80034f6:	b005      	add	sp, #20
 80034f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034fa:	9a02      	ldr	r2, [sp, #8]
 80034fc:	6921      	ldr	r1, [r4, #16]
 80034fe:	f000 faac 	bl	8003a5a <memcpy>
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	4a14      	ldr	r2, [pc, #80]	; (8003558 <__ssputs_r+0xc0>)
 8003506:	401a      	ands	r2, r3
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	4313      	orrs	r3, r2
 800350c:	81a3      	strh	r3, [r4, #12]
 800350e:	9b02      	ldr	r3, [sp, #8]
 8003510:	6126      	str	r6, [r4, #16]
 8003512:	18f6      	adds	r6, r6, r3
 8003514:	6026      	str	r6, [r4, #0]
 8003516:	6165      	str	r5, [r4, #20]
 8003518:	9e01      	ldr	r6, [sp, #4]
 800351a:	1aed      	subs	r5, r5, r3
 800351c:	60a5      	str	r5, [r4, #8]
 800351e:	9b01      	ldr	r3, [sp, #4]
 8003520:	429e      	cmp	r6, r3
 8003522:	d900      	bls.n	8003526 <__ssputs_r+0x8e>
 8003524:	9e01      	ldr	r6, [sp, #4]
 8003526:	0032      	movs	r2, r6
 8003528:	9903      	ldr	r1, [sp, #12]
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	f000 fa9e 	bl	8003a6c <memmove>
 8003530:	68a3      	ldr	r3, [r4, #8]
 8003532:	2000      	movs	r0, #0
 8003534:	1b9b      	subs	r3, r3, r6
 8003536:	60a3      	str	r3, [r4, #8]
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	199e      	adds	r6, r3, r6
 800353c:	6026      	str	r6, [r4, #0]
 800353e:	e7da      	b.n	80034f6 <__ssputs_r+0x5e>
 8003540:	002a      	movs	r2, r5
 8003542:	0038      	movs	r0, r7
 8003544:	f000 fb4e 	bl	8003be4 <_realloc_r>
 8003548:	1e06      	subs	r6, r0, #0
 800354a:	d1e0      	bne.n	800350e <__ssputs_r+0x76>
 800354c:	6921      	ldr	r1, [r4, #16]
 800354e:	0038      	movs	r0, r7
 8003550:	f000 faa0 	bl	8003a94 <_free_r>
 8003554:	e7c7      	b.n	80034e6 <__ssputs_r+0x4e>
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	fffffb7f 	.word	0xfffffb7f

0800355c <_svfiprintf_r>:
 800355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355e:	b0a1      	sub	sp, #132	; 0x84
 8003560:	9003      	str	r0, [sp, #12]
 8003562:	001d      	movs	r5, r3
 8003564:	898b      	ldrh	r3, [r1, #12]
 8003566:	000f      	movs	r7, r1
 8003568:	0016      	movs	r6, r2
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	d511      	bpl.n	8003592 <_svfiprintf_r+0x36>
 800356e:	690b      	ldr	r3, [r1, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10e      	bne.n	8003592 <_svfiprintf_r+0x36>
 8003574:	2140      	movs	r1, #64	; 0x40
 8003576:	f000 fad7 	bl	8003b28 <_malloc_r>
 800357a:	6038      	str	r0, [r7, #0]
 800357c:	6138      	str	r0, [r7, #16]
 800357e:	2800      	cmp	r0, #0
 8003580:	d105      	bne.n	800358e <_svfiprintf_r+0x32>
 8003582:	230c      	movs	r3, #12
 8003584:	9a03      	ldr	r2, [sp, #12]
 8003586:	3801      	subs	r0, #1
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	b021      	add	sp, #132	; 0x84
 800358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358e:	2340      	movs	r3, #64	; 0x40
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	2300      	movs	r3, #0
 8003594:	ac08      	add	r4, sp, #32
 8003596:	6163      	str	r3, [r4, #20]
 8003598:	3320      	adds	r3, #32
 800359a:	7663      	strb	r3, [r4, #25]
 800359c:	3310      	adds	r3, #16
 800359e:	76a3      	strb	r3, [r4, #26]
 80035a0:	9507      	str	r5, [sp, #28]
 80035a2:	0035      	movs	r5, r6
 80035a4:	782b      	ldrb	r3, [r5, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <_svfiprintf_r+0x52>
 80035aa:	2b25      	cmp	r3, #37	; 0x25
 80035ac:	d146      	bne.n	800363c <_svfiprintf_r+0xe0>
 80035ae:	1bab      	subs	r3, r5, r6
 80035b0:	9305      	str	r3, [sp, #20]
 80035b2:	d00c      	beq.n	80035ce <_svfiprintf_r+0x72>
 80035b4:	0032      	movs	r2, r6
 80035b6:	0039      	movs	r1, r7
 80035b8:	9803      	ldr	r0, [sp, #12]
 80035ba:	f7ff ff6d 	bl	8003498 <__ssputs_r>
 80035be:	1c43      	adds	r3, r0, #1
 80035c0:	d100      	bne.n	80035c4 <_svfiprintf_r+0x68>
 80035c2:	e0ae      	b.n	8003722 <_svfiprintf_r+0x1c6>
 80035c4:	6962      	ldr	r2, [r4, #20]
 80035c6:	9b05      	ldr	r3, [sp, #20]
 80035c8:	4694      	mov	ip, r2
 80035ca:	4463      	add	r3, ip
 80035cc:	6163      	str	r3, [r4, #20]
 80035ce:	782b      	ldrb	r3, [r5, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d100      	bne.n	80035d6 <_svfiprintf_r+0x7a>
 80035d4:	e0a5      	b.n	8003722 <_svfiprintf_r+0x1c6>
 80035d6:	2201      	movs	r2, #1
 80035d8:	2300      	movs	r3, #0
 80035da:	4252      	negs	r2, r2
 80035dc:	6062      	str	r2, [r4, #4]
 80035de:	a904      	add	r1, sp, #16
 80035e0:	3254      	adds	r2, #84	; 0x54
 80035e2:	1852      	adds	r2, r2, r1
 80035e4:	1c6e      	adds	r6, r5, #1
 80035e6:	6023      	str	r3, [r4, #0]
 80035e8:	60e3      	str	r3, [r4, #12]
 80035ea:	60a3      	str	r3, [r4, #8]
 80035ec:	7013      	strb	r3, [r2, #0]
 80035ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80035f0:	7831      	ldrb	r1, [r6, #0]
 80035f2:	2205      	movs	r2, #5
 80035f4:	4853      	ldr	r0, [pc, #332]	; (8003744 <_svfiprintf_r+0x1e8>)
 80035f6:	f000 fa25 	bl	8003a44 <memchr>
 80035fa:	1c75      	adds	r5, r6, #1
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d11f      	bne.n	8003640 <_svfiprintf_r+0xe4>
 8003600:	6822      	ldr	r2, [r4, #0]
 8003602:	06d3      	lsls	r3, r2, #27
 8003604:	d504      	bpl.n	8003610 <_svfiprintf_r+0xb4>
 8003606:	2353      	movs	r3, #83	; 0x53
 8003608:	a904      	add	r1, sp, #16
 800360a:	185b      	adds	r3, r3, r1
 800360c:	2120      	movs	r1, #32
 800360e:	7019      	strb	r1, [r3, #0]
 8003610:	0713      	lsls	r3, r2, #28
 8003612:	d504      	bpl.n	800361e <_svfiprintf_r+0xc2>
 8003614:	2353      	movs	r3, #83	; 0x53
 8003616:	a904      	add	r1, sp, #16
 8003618:	185b      	adds	r3, r3, r1
 800361a:	212b      	movs	r1, #43	; 0x2b
 800361c:	7019      	strb	r1, [r3, #0]
 800361e:	7833      	ldrb	r3, [r6, #0]
 8003620:	2b2a      	cmp	r3, #42	; 0x2a
 8003622:	d016      	beq.n	8003652 <_svfiprintf_r+0xf6>
 8003624:	0035      	movs	r5, r6
 8003626:	2100      	movs	r1, #0
 8003628:	200a      	movs	r0, #10
 800362a:	68e3      	ldr	r3, [r4, #12]
 800362c:	782a      	ldrb	r2, [r5, #0]
 800362e:	1c6e      	adds	r6, r5, #1
 8003630:	3a30      	subs	r2, #48	; 0x30
 8003632:	2a09      	cmp	r2, #9
 8003634:	d94e      	bls.n	80036d4 <_svfiprintf_r+0x178>
 8003636:	2900      	cmp	r1, #0
 8003638:	d018      	beq.n	800366c <_svfiprintf_r+0x110>
 800363a:	e010      	b.n	800365e <_svfiprintf_r+0x102>
 800363c:	3501      	adds	r5, #1
 800363e:	e7b1      	b.n	80035a4 <_svfiprintf_r+0x48>
 8003640:	4b40      	ldr	r3, [pc, #256]	; (8003744 <_svfiprintf_r+0x1e8>)
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	1ac0      	subs	r0, r0, r3
 8003646:	2301      	movs	r3, #1
 8003648:	4083      	lsls	r3, r0
 800364a:	4313      	orrs	r3, r2
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	002e      	movs	r6, r5
 8003650:	e7ce      	b.n	80035f0 <_svfiprintf_r+0x94>
 8003652:	9b07      	ldr	r3, [sp, #28]
 8003654:	1d19      	adds	r1, r3, #4
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	9107      	str	r1, [sp, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	db01      	blt.n	8003662 <_svfiprintf_r+0x106>
 800365e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003660:	e004      	b.n	800366c <_svfiprintf_r+0x110>
 8003662:	425b      	negs	r3, r3
 8003664:	60e3      	str	r3, [r4, #12]
 8003666:	2302      	movs	r3, #2
 8003668:	4313      	orrs	r3, r2
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	782b      	ldrb	r3, [r5, #0]
 800366e:	2b2e      	cmp	r3, #46	; 0x2e
 8003670:	d10a      	bne.n	8003688 <_svfiprintf_r+0x12c>
 8003672:	786b      	ldrb	r3, [r5, #1]
 8003674:	2b2a      	cmp	r3, #42	; 0x2a
 8003676:	d135      	bne.n	80036e4 <_svfiprintf_r+0x188>
 8003678:	9b07      	ldr	r3, [sp, #28]
 800367a:	3502      	adds	r5, #2
 800367c:	1d1a      	adds	r2, r3, #4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	9207      	str	r2, [sp, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	db2b      	blt.n	80036de <_svfiprintf_r+0x182>
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
 8003688:	4e2f      	ldr	r6, [pc, #188]	; (8003748 <_svfiprintf_r+0x1ec>)
 800368a:	7829      	ldrb	r1, [r5, #0]
 800368c:	2203      	movs	r2, #3
 800368e:	0030      	movs	r0, r6
 8003690:	f000 f9d8 	bl	8003a44 <memchr>
 8003694:	2800      	cmp	r0, #0
 8003696:	d006      	beq.n	80036a6 <_svfiprintf_r+0x14a>
 8003698:	2340      	movs	r3, #64	; 0x40
 800369a:	1b80      	subs	r0, r0, r6
 800369c:	4083      	lsls	r3, r0
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	3501      	adds	r5, #1
 80036a2:	4313      	orrs	r3, r2
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	7829      	ldrb	r1, [r5, #0]
 80036a8:	2206      	movs	r2, #6
 80036aa:	4828      	ldr	r0, [pc, #160]	; (800374c <_svfiprintf_r+0x1f0>)
 80036ac:	1c6e      	adds	r6, r5, #1
 80036ae:	7621      	strb	r1, [r4, #24]
 80036b0:	f000 f9c8 	bl	8003a44 <memchr>
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d03c      	beq.n	8003732 <_svfiprintf_r+0x1d6>
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <_svfiprintf_r+0x1f4>)
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d125      	bne.n	800370a <_svfiprintf_r+0x1ae>
 80036be:	2207      	movs	r2, #7
 80036c0:	9b07      	ldr	r3, [sp, #28]
 80036c2:	3307      	adds	r3, #7
 80036c4:	4393      	bics	r3, r2
 80036c6:	3308      	adds	r3, #8
 80036c8:	9307      	str	r3, [sp, #28]
 80036ca:	6963      	ldr	r3, [r4, #20]
 80036cc:	9a04      	ldr	r2, [sp, #16]
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	6163      	str	r3, [r4, #20]
 80036d2:	e766      	b.n	80035a2 <_svfiprintf_r+0x46>
 80036d4:	4343      	muls	r3, r0
 80036d6:	2101      	movs	r1, #1
 80036d8:	189b      	adds	r3, r3, r2
 80036da:	0035      	movs	r5, r6
 80036dc:	e7a6      	b.n	800362c <_svfiprintf_r+0xd0>
 80036de:	2301      	movs	r3, #1
 80036e0:	425b      	negs	r3, r3
 80036e2:	e7d0      	b.n	8003686 <_svfiprintf_r+0x12a>
 80036e4:	2300      	movs	r3, #0
 80036e6:	200a      	movs	r0, #10
 80036e8:	001a      	movs	r2, r3
 80036ea:	3501      	adds	r5, #1
 80036ec:	6063      	str	r3, [r4, #4]
 80036ee:	7829      	ldrb	r1, [r5, #0]
 80036f0:	1c6e      	adds	r6, r5, #1
 80036f2:	3930      	subs	r1, #48	; 0x30
 80036f4:	2909      	cmp	r1, #9
 80036f6:	d903      	bls.n	8003700 <_svfiprintf_r+0x1a4>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0c5      	beq.n	8003688 <_svfiprintf_r+0x12c>
 80036fc:	9209      	str	r2, [sp, #36]	; 0x24
 80036fe:	e7c3      	b.n	8003688 <_svfiprintf_r+0x12c>
 8003700:	4342      	muls	r2, r0
 8003702:	2301      	movs	r3, #1
 8003704:	1852      	adds	r2, r2, r1
 8003706:	0035      	movs	r5, r6
 8003708:	e7f1      	b.n	80036ee <_svfiprintf_r+0x192>
 800370a:	ab07      	add	r3, sp, #28
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	003a      	movs	r2, r7
 8003710:	4b10      	ldr	r3, [pc, #64]	; (8003754 <_svfiprintf_r+0x1f8>)
 8003712:	0021      	movs	r1, r4
 8003714:	9803      	ldr	r0, [sp, #12]
 8003716:	e000      	b.n	800371a <_svfiprintf_r+0x1be>
 8003718:	bf00      	nop
 800371a:	9004      	str	r0, [sp, #16]
 800371c:	9b04      	ldr	r3, [sp, #16]
 800371e:	3301      	adds	r3, #1
 8003720:	d1d3      	bne.n	80036ca <_svfiprintf_r+0x16e>
 8003722:	89bb      	ldrh	r3, [r7, #12]
 8003724:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003726:	065b      	lsls	r3, r3, #25
 8003728:	d400      	bmi.n	800372c <_svfiprintf_r+0x1d0>
 800372a:	e72e      	b.n	800358a <_svfiprintf_r+0x2e>
 800372c:	2001      	movs	r0, #1
 800372e:	4240      	negs	r0, r0
 8003730:	e72b      	b.n	800358a <_svfiprintf_r+0x2e>
 8003732:	ab07      	add	r3, sp, #28
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	003a      	movs	r2, r7
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <_svfiprintf_r+0x1f8>)
 800373a:	0021      	movs	r1, r4
 800373c:	9803      	ldr	r0, [sp, #12]
 800373e:	f000 f879 	bl	8003834 <_printf_i>
 8003742:	e7ea      	b.n	800371a <_svfiprintf_r+0x1be>
 8003744:	08003cf8 	.word	0x08003cf8
 8003748:	08003cfe 	.word	0x08003cfe
 800374c:	08003d02 	.word	0x08003d02
 8003750:	00000000 	.word	0x00000000
 8003754:	08003499 	.word	0x08003499

08003758 <_printf_common>:
 8003758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800375a:	0015      	movs	r5, r2
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	688a      	ldr	r2, [r1, #8]
 8003760:	690b      	ldr	r3, [r1, #16]
 8003762:	9000      	str	r0, [sp, #0]
 8003764:	000c      	movs	r4, r1
 8003766:	4293      	cmp	r3, r2
 8003768:	da00      	bge.n	800376c <_printf_common+0x14>
 800376a:	0013      	movs	r3, r2
 800376c:	0022      	movs	r2, r4
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	3243      	adds	r2, #67	; 0x43
 8003772:	7812      	ldrb	r2, [r2, #0]
 8003774:	2a00      	cmp	r2, #0
 8003776:	d001      	beq.n	800377c <_printf_common+0x24>
 8003778:	3301      	adds	r3, #1
 800377a:	602b      	str	r3, [r5, #0]
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	069b      	lsls	r3, r3, #26
 8003780:	d502      	bpl.n	8003788 <_printf_common+0x30>
 8003782:	682b      	ldr	r3, [r5, #0]
 8003784:	3302      	adds	r3, #2
 8003786:	602b      	str	r3, [r5, #0]
 8003788:	2706      	movs	r7, #6
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	401f      	ands	r7, r3
 800378e:	d027      	beq.n	80037e0 <_printf_common+0x88>
 8003790:	0023      	movs	r3, r4
 8003792:	3343      	adds	r3, #67	; 0x43
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	1e5a      	subs	r2, r3, #1
 8003798:	4193      	sbcs	r3, r2
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	0692      	lsls	r2, r2, #26
 800379e:	d430      	bmi.n	8003802 <_printf_common+0xaa>
 80037a0:	0022      	movs	r2, r4
 80037a2:	9901      	ldr	r1, [sp, #4]
 80037a4:	3243      	adds	r2, #67	; 0x43
 80037a6:	9800      	ldr	r0, [sp, #0]
 80037a8:	9e08      	ldr	r6, [sp, #32]
 80037aa:	47b0      	blx	r6
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d025      	beq.n	80037fc <_printf_common+0xa4>
 80037b0:	2306      	movs	r3, #6
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	682a      	ldr	r2, [r5, #0]
 80037b6:	68e1      	ldr	r1, [r4, #12]
 80037b8:	4003      	ands	r3, r0
 80037ba:	2500      	movs	r5, #0
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d103      	bne.n	80037c8 <_printf_common+0x70>
 80037c0:	1a8d      	subs	r5, r1, r2
 80037c2:	43eb      	mvns	r3, r5
 80037c4:	17db      	asrs	r3, r3, #31
 80037c6:	401d      	ands	r5, r3
 80037c8:	68a3      	ldr	r3, [r4, #8]
 80037ca:	6922      	ldr	r2, [r4, #16]
 80037cc:	4293      	cmp	r3, r2
 80037ce:	dd01      	ble.n	80037d4 <_printf_common+0x7c>
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	18ed      	adds	r5, r5, r3
 80037d4:	2700      	movs	r7, #0
 80037d6:	42bd      	cmp	r5, r7
 80037d8:	d120      	bne.n	800381c <_printf_common+0xc4>
 80037da:	2000      	movs	r0, #0
 80037dc:	e010      	b.n	8003800 <_printf_common+0xa8>
 80037de:	3701      	adds	r7, #1
 80037e0:	68e3      	ldr	r3, [r4, #12]
 80037e2:	682a      	ldr	r2, [r5, #0]
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	42bb      	cmp	r3, r7
 80037e8:	ddd2      	ble.n	8003790 <_printf_common+0x38>
 80037ea:	0022      	movs	r2, r4
 80037ec:	2301      	movs	r3, #1
 80037ee:	3219      	adds	r2, #25
 80037f0:	9901      	ldr	r1, [sp, #4]
 80037f2:	9800      	ldr	r0, [sp, #0]
 80037f4:	9e08      	ldr	r6, [sp, #32]
 80037f6:	47b0      	blx	r6
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d1f0      	bne.n	80037de <_printf_common+0x86>
 80037fc:	2001      	movs	r0, #1
 80037fe:	4240      	negs	r0, r0
 8003800:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003802:	2030      	movs	r0, #48	; 0x30
 8003804:	18e1      	adds	r1, r4, r3
 8003806:	3143      	adds	r1, #67	; 0x43
 8003808:	7008      	strb	r0, [r1, #0]
 800380a:	0021      	movs	r1, r4
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	3145      	adds	r1, #69	; 0x45
 8003810:	7809      	ldrb	r1, [r1, #0]
 8003812:	18a2      	adds	r2, r4, r2
 8003814:	3243      	adds	r2, #67	; 0x43
 8003816:	3302      	adds	r3, #2
 8003818:	7011      	strb	r1, [r2, #0]
 800381a:	e7c1      	b.n	80037a0 <_printf_common+0x48>
 800381c:	0022      	movs	r2, r4
 800381e:	2301      	movs	r3, #1
 8003820:	321a      	adds	r2, #26
 8003822:	9901      	ldr	r1, [sp, #4]
 8003824:	9800      	ldr	r0, [sp, #0]
 8003826:	9e08      	ldr	r6, [sp, #32]
 8003828:	47b0      	blx	r6
 800382a:	1c43      	adds	r3, r0, #1
 800382c:	d0e6      	beq.n	80037fc <_printf_common+0xa4>
 800382e:	3701      	adds	r7, #1
 8003830:	e7d1      	b.n	80037d6 <_printf_common+0x7e>
	...

08003834 <_printf_i>:
 8003834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	9204      	str	r2, [sp, #16]
 800383a:	000a      	movs	r2, r1
 800383c:	3243      	adds	r2, #67	; 0x43
 800383e:	9305      	str	r3, [sp, #20]
 8003840:	9003      	str	r0, [sp, #12]
 8003842:	9202      	str	r2, [sp, #8]
 8003844:	7e0a      	ldrb	r2, [r1, #24]
 8003846:	000c      	movs	r4, r1
 8003848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800384a:	2a6e      	cmp	r2, #110	; 0x6e
 800384c:	d100      	bne.n	8003850 <_printf_i+0x1c>
 800384e:	e086      	b.n	800395e <_printf_i+0x12a>
 8003850:	d81f      	bhi.n	8003892 <_printf_i+0x5e>
 8003852:	2a63      	cmp	r2, #99	; 0x63
 8003854:	d033      	beq.n	80038be <_printf_i+0x8a>
 8003856:	d808      	bhi.n	800386a <_printf_i+0x36>
 8003858:	2a00      	cmp	r2, #0
 800385a:	d100      	bne.n	800385e <_printf_i+0x2a>
 800385c:	e08c      	b.n	8003978 <_printf_i+0x144>
 800385e:	2a58      	cmp	r2, #88	; 0x58
 8003860:	d04d      	beq.n	80038fe <_printf_i+0xca>
 8003862:	0025      	movs	r5, r4
 8003864:	3542      	adds	r5, #66	; 0x42
 8003866:	702a      	strb	r2, [r5, #0]
 8003868:	e030      	b.n	80038cc <_printf_i+0x98>
 800386a:	2a64      	cmp	r2, #100	; 0x64
 800386c:	d001      	beq.n	8003872 <_printf_i+0x3e>
 800386e:	2a69      	cmp	r2, #105	; 0x69
 8003870:	d1f7      	bne.n	8003862 <_printf_i+0x2e>
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	6825      	ldr	r5, [r4, #0]
 8003876:	1d0a      	adds	r2, r1, #4
 8003878:	0628      	lsls	r0, r5, #24
 800387a:	d529      	bpl.n	80038d0 <_printf_i+0x9c>
 800387c:	6808      	ldr	r0, [r1, #0]
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	2800      	cmp	r0, #0
 8003882:	da03      	bge.n	800388c <_printf_i+0x58>
 8003884:	232d      	movs	r3, #45	; 0x2d
 8003886:	9a02      	ldr	r2, [sp, #8]
 8003888:	4240      	negs	r0, r0
 800388a:	7013      	strb	r3, [r2, #0]
 800388c:	4e6b      	ldr	r6, [pc, #428]	; (8003a3c <_printf_i+0x208>)
 800388e:	270a      	movs	r7, #10
 8003890:	e04f      	b.n	8003932 <_printf_i+0xfe>
 8003892:	2a73      	cmp	r2, #115	; 0x73
 8003894:	d074      	beq.n	8003980 <_printf_i+0x14c>
 8003896:	d808      	bhi.n	80038aa <_printf_i+0x76>
 8003898:	2a6f      	cmp	r2, #111	; 0x6f
 800389a:	d01f      	beq.n	80038dc <_printf_i+0xa8>
 800389c:	2a70      	cmp	r2, #112	; 0x70
 800389e:	d1e0      	bne.n	8003862 <_printf_i+0x2e>
 80038a0:	2220      	movs	r2, #32
 80038a2:	6809      	ldr	r1, [r1, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	6022      	str	r2, [r4, #0]
 80038a8:	e003      	b.n	80038b2 <_printf_i+0x7e>
 80038aa:	2a75      	cmp	r2, #117	; 0x75
 80038ac:	d016      	beq.n	80038dc <_printf_i+0xa8>
 80038ae:	2a78      	cmp	r2, #120	; 0x78
 80038b0:	d1d7      	bne.n	8003862 <_printf_i+0x2e>
 80038b2:	0022      	movs	r2, r4
 80038b4:	2178      	movs	r1, #120	; 0x78
 80038b6:	3245      	adds	r2, #69	; 0x45
 80038b8:	7011      	strb	r1, [r2, #0]
 80038ba:	4e61      	ldr	r6, [pc, #388]	; (8003a40 <_printf_i+0x20c>)
 80038bc:	e022      	b.n	8003904 <_printf_i+0xd0>
 80038be:	0025      	movs	r5, r4
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	3542      	adds	r5, #66	; 0x42
 80038c4:	1d11      	adds	r1, r2, #4
 80038c6:	6019      	str	r1, [r3, #0]
 80038c8:	6813      	ldr	r3, [r2, #0]
 80038ca:	702b      	strb	r3, [r5, #0]
 80038cc:	2301      	movs	r3, #1
 80038ce:	e065      	b.n	800399c <_printf_i+0x168>
 80038d0:	6808      	ldr	r0, [r1, #0]
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	0669      	lsls	r1, r5, #25
 80038d6:	d5d3      	bpl.n	8003880 <_printf_i+0x4c>
 80038d8:	b200      	sxth	r0, r0
 80038da:	e7d1      	b.n	8003880 <_printf_i+0x4c>
 80038dc:	6819      	ldr	r1, [r3, #0]
 80038de:	6825      	ldr	r5, [r4, #0]
 80038e0:	1d08      	adds	r0, r1, #4
 80038e2:	6018      	str	r0, [r3, #0]
 80038e4:	6808      	ldr	r0, [r1, #0]
 80038e6:	062e      	lsls	r6, r5, #24
 80038e8:	d505      	bpl.n	80038f6 <_printf_i+0xc2>
 80038ea:	4e54      	ldr	r6, [pc, #336]	; (8003a3c <_printf_i+0x208>)
 80038ec:	2708      	movs	r7, #8
 80038ee:	2a6f      	cmp	r2, #111	; 0x6f
 80038f0:	d01b      	beq.n	800392a <_printf_i+0xf6>
 80038f2:	270a      	movs	r7, #10
 80038f4:	e019      	b.n	800392a <_printf_i+0xf6>
 80038f6:	066d      	lsls	r5, r5, #25
 80038f8:	d5f7      	bpl.n	80038ea <_printf_i+0xb6>
 80038fa:	b280      	uxth	r0, r0
 80038fc:	e7f5      	b.n	80038ea <_printf_i+0xb6>
 80038fe:	3145      	adds	r1, #69	; 0x45
 8003900:	4e4e      	ldr	r6, [pc, #312]	; (8003a3c <_printf_i+0x208>)
 8003902:	700a      	strb	r2, [r1, #0]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	6822      	ldr	r2, [r4, #0]
 8003908:	1d01      	adds	r1, r0, #4
 800390a:	6800      	ldr	r0, [r0, #0]
 800390c:	6019      	str	r1, [r3, #0]
 800390e:	0615      	lsls	r5, r2, #24
 8003910:	d521      	bpl.n	8003956 <_printf_i+0x122>
 8003912:	07d3      	lsls	r3, r2, #31
 8003914:	d502      	bpl.n	800391c <_printf_i+0xe8>
 8003916:	2320      	movs	r3, #32
 8003918:	431a      	orrs	r2, r3
 800391a:	6022      	str	r2, [r4, #0]
 800391c:	2710      	movs	r7, #16
 800391e:	2800      	cmp	r0, #0
 8003920:	d103      	bne.n	800392a <_printf_i+0xf6>
 8003922:	2320      	movs	r3, #32
 8003924:	6822      	ldr	r2, [r4, #0]
 8003926:	439a      	bics	r2, r3
 8003928:	6022      	str	r2, [r4, #0]
 800392a:	0023      	movs	r3, r4
 800392c:	2200      	movs	r2, #0
 800392e:	3343      	adds	r3, #67	; 0x43
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	6863      	ldr	r3, [r4, #4]
 8003934:	60a3      	str	r3, [r4, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	db58      	blt.n	80039ec <_printf_i+0x1b8>
 800393a:	2204      	movs	r2, #4
 800393c:	6821      	ldr	r1, [r4, #0]
 800393e:	4391      	bics	r1, r2
 8003940:	6021      	str	r1, [r4, #0]
 8003942:	2800      	cmp	r0, #0
 8003944:	d154      	bne.n	80039f0 <_printf_i+0x1bc>
 8003946:	9d02      	ldr	r5, [sp, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d05a      	beq.n	8003a02 <_printf_i+0x1ce>
 800394c:	0025      	movs	r5, r4
 800394e:	7833      	ldrb	r3, [r6, #0]
 8003950:	3542      	adds	r5, #66	; 0x42
 8003952:	702b      	strb	r3, [r5, #0]
 8003954:	e055      	b.n	8003a02 <_printf_i+0x1ce>
 8003956:	0655      	lsls	r5, r2, #25
 8003958:	d5db      	bpl.n	8003912 <_printf_i+0xde>
 800395a:	b280      	uxth	r0, r0
 800395c:	e7d9      	b.n	8003912 <_printf_i+0xde>
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	680d      	ldr	r5, [r1, #0]
 8003962:	1d10      	adds	r0, r2, #4
 8003964:	6949      	ldr	r1, [r1, #20]
 8003966:	6018      	str	r0, [r3, #0]
 8003968:	6813      	ldr	r3, [r2, #0]
 800396a:	062e      	lsls	r6, r5, #24
 800396c:	d501      	bpl.n	8003972 <_printf_i+0x13e>
 800396e:	6019      	str	r1, [r3, #0]
 8003970:	e002      	b.n	8003978 <_printf_i+0x144>
 8003972:	066d      	lsls	r5, r5, #25
 8003974:	d5fb      	bpl.n	800396e <_printf_i+0x13a>
 8003976:	8019      	strh	r1, [r3, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	9d02      	ldr	r5, [sp, #8]
 800397c:	6123      	str	r3, [r4, #16]
 800397e:	e04f      	b.n	8003a20 <_printf_i+0x1ec>
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	1d11      	adds	r1, r2, #4
 8003984:	6019      	str	r1, [r3, #0]
 8003986:	6815      	ldr	r5, [r2, #0]
 8003988:	2100      	movs	r1, #0
 800398a:	6862      	ldr	r2, [r4, #4]
 800398c:	0028      	movs	r0, r5
 800398e:	f000 f859 	bl	8003a44 <memchr>
 8003992:	2800      	cmp	r0, #0
 8003994:	d001      	beq.n	800399a <_printf_i+0x166>
 8003996:	1b40      	subs	r0, r0, r5
 8003998:	6060      	str	r0, [r4, #4]
 800399a:	6863      	ldr	r3, [r4, #4]
 800399c:	6123      	str	r3, [r4, #16]
 800399e:	2300      	movs	r3, #0
 80039a0:	9a02      	ldr	r2, [sp, #8]
 80039a2:	7013      	strb	r3, [r2, #0]
 80039a4:	e03c      	b.n	8003a20 <_printf_i+0x1ec>
 80039a6:	6923      	ldr	r3, [r4, #16]
 80039a8:	002a      	movs	r2, r5
 80039aa:	9904      	ldr	r1, [sp, #16]
 80039ac:	9803      	ldr	r0, [sp, #12]
 80039ae:	9d05      	ldr	r5, [sp, #20]
 80039b0:	47a8      	blx	r5
 80039b2:	1c43      	adds	r3, r0, #1
 80039b4:	d03e      	beq.n	8003a34 <_printf_i+0x200>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	079b      	lsls	r3, r3, #30
 80039ba:	d415      	bmi.n	80039e8 <_printf_i+0x1b4>
 80039bc:	9b07      	ldr	r3, [sp, #28]
 80039be:	68e0      	ldr	r0, [r4, #12]
 80039c0:	4298      	cmp	r0, r3
 80039c2:	da39      	bge.n	8003a38 <_printf_i+0x204>
 80039c4:	0018      	movs	r0, r3
 80039c6:	e037      	b.n	8003a38 <_printf_i+0x204>
 80039c8:	0022      	movs	r2, r4
 80039ca:	2301      	movs	r3, #1
 80039cc:	3219      	adds	r2, #25
 80039ce:	9904      	ldr	r1, [sp, #16]
 80039d0:	9803      	ldr	r0, [sp, #12]
 80039d2:	9e05      	ldr	r6, [sp, #20]
 80039d4:	47b0      	blx	r6
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	d02c      	beq.n	8003a34 <_printf_i+0x200>
 80039da:	3501      	adds	r5, #1
 80039dc:	68e3      	ldr	r3, [r4, #12]
 80039de:	9a07      	ldr	r2, [sp, #28]
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	42ab      	cmp	r3, r5
 80039e4:	dcf0      	bgt.n	80039c8 <_printf_i+0x194>
 80039e6:	e7e9      	b.n	80039bc <_printf_i+0x188>
 80039e8:	2500      	movs	r5, #0
 80039ea:	e7f7      	b.n	80039dc <_printf_i+0x1a8>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d0ad      	beq.n	800394c <_printf_i+0x118>
 80039f0:	9d02      	ldr	r5, [sp, #8]
 80039f2:	0039      	movs	r1, r7
 80039f4:	f7fc fc16 	bl	8000224 <__aeabi_uidivmod>
 80039f8:	5c73      	ldrb	r3, [r6, r1]
 80039fa:	3d01      	subs	r5, #1
 80039fc:	702b      	strb	r3, [r5, #0]
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d1f7      	bne.n	80039f2 <_printf_i+0x1be>
 8003a02:	2f08      	cmp	r7, #8
 8003a04:	d109      	bne.n	8003a1a <_printf_i+0x1e6>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	07db      	lsls	r3, r3, #31
 8003a0a:	d506      	bpl.n	8003a1a <_printf_i+0x1e6>
 8003a0c:	6863      	ldr	r3, [r4, #4]
 8003a0e:	6922      	ldr	r2, [r4, #16]
 8003a10:	4293      	cmp	r3, r2
 8003a12:	dc02      	bgt.n	8003a1a <_printf_i+0x1e6>
 8003a14:	2330      	movs	r3, #48	; 0x30
 8003a16:	3d01      	subs	r5, #1
 8003a18:	702b      	strb	r3, [r5, #0]
 8003a1a:	9b02      	ldr	r3, [sp, #8]
 8003a1c:	1b5b      	subs	r3, r3, r5
 8003a1e:	6123      	str	r3, [r4, #16]
 8003a20:	9b05      	ldr	r3, [sp, #20]
 8003a22:	aa07      	add	r2, sp, #28
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	0021      	movs	r1, r4
 8003a28:	9b04      	ldr	r3, [sp, #16]
 8003a2a:	9803      	ldr	r0, [sp, #12]
 8003a2c:	f7ff fe94 	bl	8003758 <_printf_common>
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	d1b8      	bne.n	80039a6 <_printf_i+0x172>
 8003a34:	2001      	movs	r0, #1
 8003a36:	4240      	negs	r0, r0
 8003a38:	b009      	add	sp, #36	; 0x24
 8003a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a3c:	08003d09 	.word	0x08003d09
 8003a40:	08003d1a 	.word	0x08003d1a

08003a44 <memchr>:
 8003a44:	b2c9      	uxtb	r1, r1
 8003a46:	1882      	adds	r2, r0, r2
 8003a48:	4290      	cmp	r0, r2
 8003a4a:	d101      	bne.n	8003a50 <memchr+0xc>
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	4770      	bx	lr
 8003a50:	7803      	ldrb	r3, [r0, #0]
 8003a52:	428b      	cmp	r3, r1
 8003a54:	d0fb      	beq.n	8003a4e <memchr+0xa>
 8003a56:	3001      	adds	r0, #1
 8003a58:	e7f6      	b.n	8003a48 <memchr+0x4>

08003a5a <memcpy>:
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d100      	bne.n	8003a64 <memcpy+0xa>
 8003a62:	bd10      	pop	{r4, pc}
 8003a64:	5ccc      	ldrb	r4, [r1, r3]
 8003a66:	54c4      	strb	r4, [r0, r3]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	e7f8      	b.n	8003a5e <memcpy+0x4>

08003a6c <memmove>:
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	4288      	cmp	r0, r1
 8003a70:	d902      	bls.n	8003a78 <memmove+0xc>
 8003a72:	188b      	adds	r3, r1, r2
 8003a74:	4298      	cmp	r0, r3
 8003a76:	d303      	bcc.n	8003a80 <memmove+0x14>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e007      	b.n	8003a8c <memmove+0x20>
 8003a7c:	5c8b      	ldrb	r3, [r1, r2]
 8003a7e:	5483      	strb	r3, [r0, r2]
 8003a80:	3a01      	subs	r2, #1
 8003a82:	d2fb      	bcs.n	8003a7c <memmove+0x10>
 8003a84:	bd10      	pop	{r4, pc}
 8003a86:	5ccc      	ldrb	r4, [r1, r3]
 8003a88:	54c4      	strb	r4, [r0, r3]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1fa      	bne.n	8003a86 <memmove+0x1a>
 8003a90:	e7f8      	b.n	8003a84 <memmove+0x18>
	...

08003a94 <_free_r>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	0005      	movs	r5, r0
 8003a98:	2900      	cmp	r1, #0
 8003a9a:	d010      	beq.n	8003abe <_free_r+0x2a>
 8003a9c:	1f0c      	subs	r4, r1, #4
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	da00      	bge.n	8003aa6 <_free_r+0x12>
 8003aa4:	18e4      	adds	r4, r4, r3
 8003aa6:	0028      	movs	r0, r5
 8003aa8:	f000 f8d4 	bl	8003c54 <__malloc_lock>
 8003aac:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <_free_r+0x90>)
 8003aae:	6813      	ldr	r3, [r2, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d105      	bne.n	8003ac0 <_free_r+0x2c>
 8003ab4:	6063      	str	r3, [r4, #4]
 8003ab6:	6014      	str	r4, [r2, #0]
 8003ab8:	0028      	movs	r0, r5
 8003aba:	f000 f8cc 	bl	8003c56 <__malloc_unlock>
 8003abe:	bd70      	pop	{r4, r5, r6, pc}
 8003ac0:	42a3      	cmp	r3, r4
 8003ac2:	d909      	bls.n	8003ad8 <_free_r+0x44>
 8003ac4:	6821      	ldr	r1, [r4, #0]
 8003ac6:	1860      	adds	r0, r4, r1
 8003ac8:	4283      	cmp	r3, r0
 8003aca:	d1f3      	bne.n	8003ab4 <_free_r+0x20>
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	1841      	adds	r1, r0, r1
 8003ad2:	6021      	str	r1, [r4, #0]
 8003ad4:	e7ee      	b.n	8003ab4 <_free_r+0x20>
 8003ad6:	0013      	movs	r3, r2
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	2a00      	cmp	r2, #0
 8003adc:	d001      	beq.n	8003ae2 <_free_r+0x4e>
 8003ade:	42a2      	cmp	r2, r4
 8003ae0:	d9f9      	bls.n	8003ad6 <_free_r+0x42>
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	1858      	adds	r0, r3, r1
 8003ae6:	42a0      	cmp	r0, r4
 8003ae8:	d10b      	bne.n	8003b02 <_free_r+0x6e>
 8003aea:	6820      	ldr	r0, [r4, #0]
 8003aec:	1809      	adds	r1, r1, r0
 8003aee:	1858      	adds	r0, r3, r1
 8003af0:	6019      	str	r1, [r3, #0]
 8003af2:	4282      	cmp	r2, r0
 8003af4:	d1e0      	bne.n	8003ab8 <_free_r+0x24>
 8003af6:	6810      	ldr	r0, [r2, #0]
 8003af8:	6852      	ldr	r2, [r2, #4]
 8003afa:	1841      	adds	r1, r0, r1
 8003afc:	6019      	str	r1, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	e7da      	b.n	8003ab8 <_free_r+0x24>
 8003b02:	42a0      	cmp	r0, r4
 8003b04:	d902      	bls.n	8003b0c <_free_r+0x78>
 8003b06:	230c      	movs	r3, #12
 8003b08:	602b      	str	r3, [r5, #0]
 8003b0a:	e7d5      	b.n	8003ab8 <_free_r+0x24>
 8003b0c:	6821      	ldr	r1, [r4, #0]
 8003b0e:	1860      	adds	r0, r4, r1
 8003b10:	4282      	cmp	r2, r0
 8003b12:	d103      	bne.n	8003b1c <_free_r+0x88>
 8003b14:	6810      	ldr	r0, [r2, #0]
 8003b16:	6852      	ldr	r2, [r2, #4]
 8003b18:	1841      	adds	r1, r0, r1
 8003b1a:	6021      	str	r1, [r4, #0]
 8003b1c:	6062      	str	r2, [r4, #4]
 8003b1e:	605c      	str	r4, [r3, #4]
 8003b20:	e7ca      	b.n	8003ab8 <_free_r+0x24>
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	20000094 	.word	0x20000094

08003b28 <_malloc_r>:
 8003b28:	2303      	movs	r3, #3
 8003b2a:	b570      	push	{r4, r5, r6, lr}
 8003b2c:	1ccd      	adds	r5, r1, #3
 8003b2e:	439d      	bics	r5, r3
 8003b30:	3508      	adds	r5, #8
 8003b32:	0006      	movs	r6, r0
 8003b34:	2d0c      	cmp	r5, #12
 8003b36:	d21e      	bcs.n	8003b76 <_malloc_r+0x4e>
 8003b38:	250c      	movs	r5, #12
 8003b3a:	42a9      	cmp	r1, r5
 8003b3c:	d81d      	bhi.n	8003b7a <_malloc_r+0x52>
 8003b3e:	0030      	movs	r0, r6
 8003b40:	f000 f888 	bl	8003c54 <__malloc_lock>
 8003b44:	4a25      	ldr	r2, [pc, #148]	; (8003bdc <_malloc_r+0xb4>)
 8003b46:	6814      	ldr	r4, [r2, #0]
 8003b48:	0021      	movs	r1, r4
 8003b4a:	2900      	cmp	r1, #0
 8003b4c:	d119      	bne.n	8003b82 <_malloc_r+0x5a>
 8003b4e:	4c24      	ldr	r4, [pc, #144]	; (8003be0 <_malloc_r+0xb8>)
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <_malloc_r+0x36>
 8003b56:	0030      	movs	r0, r6
 8003b58:	f000 f86a 	bl	8003c30 <_sbrk_r>
 8003b5c:	6020      	str	r0, [r4, #0]
 8003b5e:	0029      	movs	r1, r5
 8003b60:	0030      	movs	r0, r6
 8003b62:	f000 f865 	bl	8003c30 <_sbrk_r>
 8003b66:	1c43      	adds	r3, r0, #1
 8003b68:	d12b      	bne.n	8003bc2 <_malloc_r+0x9a>
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	0030      	movs	r0, r6
 8003b6e:	6033      	str	r3, [r6, #0]
 8003b70:	f000 f871 	bl	8003c56 <__malloc_unlock>
 8003b74:	e003      	b.n	8003b7e <_malloc_r+0x56>
 8003b76:	2d00      	cmp	r5, #0
 8003b78:	dadf      	bge.n	8003b3a <_malloc_r+0x12>
 8003b7a:	230c      	movs	r3, #12
 8003b7c:	6033      	str	r3, [r6, #0]
 8003b7e:	2000      	movs	r0, #0
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
 8003b82:	680b      	ldr	r3, [r1, #0]
 8003b84:	1b5b      	subs	r3, r3, r5
 8003b86:	d419      	bmi.n	8003bbc <_malloc_r+0x94>
 8003b88:	2b0b      	cmp	r3, #11
 8003b8a:	d903      	bls.n	8003b94 <_malloc_r+0x6c>
 8003b8c:	600b      	str	r3, [r1, #0]
 8003b8e:	18cc      	adds	r4, r1, r3
 8003b90:	6025      	str	r5, [r4, #0]
 8003b92:	e003      	b.n	8003b9c <_malloc_r+0x74>
 8003b94:	684b      	ldr	r3, [r1, #4]
 8003b96:	428c      	cmp	r4, r1
 8003b98:	d10d      	bne.n	8003bb6 <_malloc_r+0x8e>
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	0030      	movs	r0, r6
 8003b9e:	f000 f85a 	bl	8003c56 <__malloc_unlock>
 8003ba2:	0020      	movs	r0, r4
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	300b      	adds	r0, #11
 8003ba8:	1d23      	adds	r3, r4, #4
 8003baa:	4390      	bics	r0, r2
 8003bac:	1ac3      	subs	r3, r0, r3
 8003bae:	d0e7      	beq.n	8003b80 <_malloc_r+0x58>
 8003bb0:	425a      	negs	r2, r3
 8003bb2:	50e2      	str	r2, [r4, r3]
 8003bb4:	e7e4      	b.n	8003b80 <_malloc_r+0x58>
 8003bb6:	6063      	str	r3, [r4, #4]
 8003bb8:	000c      	movs	r4, r1
 8003bba:	e7ef      	b.n	8003b9c <_malloc_r+0x74>
 8003bbc:	000c      	movs	r4, r1
 8003bbe:	6849      	ldr	r1, [r1, #4]
 8003bc0:	e7c3      	b.n	8003b4a <_malloc_r+0x22>
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	1cc4      	adds	r4, r0, #3
 8003bc6:	439c      	bics	r4, r3
 8003bc8:	42a0      	cmp	r0, r4
 8003bca:	d0e1      	beq.n	8003b90 <_malloc_r+0x68>
 8003bcc:	1a21      	subs	r1, r4, r0
 8003bce:	0030      	movs	r0, r6
 8003bd0:	f000 f82e 	bl	8003c30 <_sbrk_r>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d1db      	bne.n	8003b90 <_malloc_r+0x68>
 8003bd8:	e7c7      	b.n	8003b6a <_malloc_r+0x42>
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	20000094 	.word	0x20000094
 8003be0:	20000098 	.word	0x20000098

08003be4 <_realloc_r>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	0007      	movs	r7, r0
 8003be8:	000d      	movs	r5, r1
 8003bea:	0016      	movs	r6, r2
 8003bec:	2900      	cmp	r1, #0
 8003bee:	d105      	bne.n	8003bfc <_realloc_r+0x18>
 8003bf0:	0011      	movs	r1, r2
 8003bf2:	f7ff ff99 	bl	8003b28 <_malloc_r>
 8003bf6:	0004      	movs	r4, r0
 8003bf8:	0020      	movs	r0, r4
 8003bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bfc:	2a00      	cmp	r2, #0
 8003bfe:	d103      	bne.n	8003c08 <_realloc_r+0x24>
 8003c00:	f7ff ff48 	bl	8003a94 <_free_r>
 8003c04:	0034      	movs	r4, r6
 8003c06:	e7f7      	b.n	8003bf8 <_realloc_r+0x14>
 8003c08:	f000 f826 	bl	8003c58 <_malloc_usable_size_r>
 8003c0c:	002c      	movs	r4, r5
 8003c0e:	42b0      	cmp	r0, r6
 8003c10:	d2f2      	bcs.n	8003bf8 <_realloc_r+0x14>
 8003c12:	0031      	movs	r1, r6
 8003c14:	0038      	movs	r0, r7
 8003c16:	f7ff ff87 	bl	8003b28 <_malloc_r>
 8003c1a:	1e04      	subs	r4, r0, #0
 8003c1c:	d0ec      	beq.n	8003bf8 <_realloc_r+0x14>
 8003c1e:	0029      	movs	r1, r5
 8003c20:	0032      	movs	r2, r6
 8003c22:	f7ff ff1a 	bl	8003a5a <memcpy>
 8003c26:	0029      	movs	r1, r5
 8003c28:	0038      	movs	r0, r7
 8003c2a:	f7ff ff33 	bl	8003a94 <_free_r>
 8003c2e:	e7e3      	b.n	8003bf8 <_realloc_r+0x14>

08003c30 <_sbrk_r>:
 8003c30:	2300      	movs	r3, #0
 8003c32:	b570      	push	{r4, r5, r6, lr}
 8003c34:	4c06      	ldr	r4, [pc, #24]	; (8003c50 <_sbrk_r+0x20>)
 8003c36:	0005      	movs	r5, r0
 8003c38:	0008      	movs	r0, r1
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	f7fc ffdc 	bl	8000bf8 <_sbrk>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d103      	bne.n	8003c4c <_sbrk_r+0x1c>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d000      	beq.n	8003c4c <_sbrk_r+0x1c>
 8003c4a:	602b      	str	r3, [r5, #0]
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	20000240 	.word	0x20000240

08003c54 <__malloc_lock>:
 8003c54:	4770      	bx	lr

08003c56 <__malloc_unlock>:
 8003c56:	4770      	bx	lr

08003c58 <_malloc_usable_size_r>:
 8003c58:	1f0b      	subs	r3, r1, #4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	1f18      	subs	r0, r3, #4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da01      	bge.n	8003c66 <_malloc_usable_size_r+0xe>
 8003c62:	580b      	ldr	r3, [r1, r0]
 8003c64:	18c0      	adds	r0, r0, r3
 8003c66:	4770      	bx	lr

08003c68 <_init>:
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6e:	bc08      	pop	{r3}
 8003c70:	469e      	mov	lr, r3
 8003c72:	4770      	bx	lr

08003c74 <_fini>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr
