
NucleoTestPrj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800b028  0800b028  0001b028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b468  0800b468  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b468  0800b468  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b468  0800b468  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b468  0800b468  0001b468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b46c  0800b46c  0001b46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ac  200001f0  0800b660  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000099c  0800b660  0002099c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f927  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023a9  00000000  00000000  0002fb3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001000  00000000  00000000  00031ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  00032ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000e2b5  00000000  00000000  00033dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc88  00000000  00000000  0004208d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005647d  00000000  00000000  0004ed15  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a5192  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004444  00000000  00000000  000a5210  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b010 	.word	0x0800b010

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	0800b010 	.word	0x0800b010

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 f975 	bl	8001718 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 f8cd 	bl	80015d8 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f967 	bl	8001718 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f95d 	bl	8001718 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8ef 	bl	8001650 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f8e5 	bl	8001650 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_fdiv>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	4657      	mov	r7, sl
 8000498:	464e      	mov	r6, r9
 800049a:	4645      	mov	r5, r8
 800049c:	46de      	mov	lr, fp
 800049e:	0244      	lsls	r4, r0, #9
 80004a0:	b5e0      	push	{r5, r6, r7, lr}
 80004a2:	0046      	lsls	r6, r0, #1
 80004a4:	4688      	mov	r8, r1
 80004a6:	0a64      	lsrs	r4, r4, #9
 80004a8:	0e36      	lsrs	r6, r6, #24
 80004aa:	0fc7      	lsrs	r7, r0, #31
 80004ac:	2e00      	cmp	r6, #0
 80004ae:	d063      	beq.n	8000578 <__aeabi_fdiv+0xe4>
 80004b0:	2eff      	cmp	r6, #255	; 0xff
 80004b2:	d024      	beq.n	80004fe <__aeabi_fdiv+0x6a>
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	00e4      	lsls	r4, r4, #3
 80004b8:	04db      	lsls	r3, r3, #19
 80004ba:	431c      	orrs	r4, r3
 80004bc:	2300      	movs	r3, #0
 80004be:	4699      	mov	r9, r3
 80004c0:	469b      	mov	fp, r3
 80004c2:	3e7f      	subs	r6, #127	; 0x7f
 80004c4:	4643      	mov	r3, r8
 80004c6:	4642      	mov	r2, r8
 80004c8:	025d      	lsls	r5, r3, #9
 80004ca:	0fd2      	lsrs	r2, r2, #31
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	0a6d      	lsrs	r5, r5, #9
 80004d0:	0e1b      	lsrs	r3, r3, #24
 80004d2:	4690      	mov	r8, r2
 80004d4:	4692      	mov	sl, r2
 80004d6:	d065      	beq.n	80005a4 <__aeabi_fdiv+0x110>
 80004d8:	2bff      	cmp	r3, #255	; 0xff
 80004da:	d055      	beq.n	8000588 <__aeabi_fdiv+0xf4>
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	2100      	movs	r1, #0
 80004e0:	00ed      	lsls	r5, r5, #3
 80004e2:	04d2      	lsls	r2, r2, #19
 80004e4:	3b7f      	subs	r3, #127	; 0x7f
 80004e6:	4315      	orrs	r5, r2
 80004e8:	1af6      	subs	r6, r6, r3
 80004ea:	4643      	mov	r3, r8
 80004ec:	464a      	mov	r2, r9
 80004ee:	407b      	eors	r3, r7
 80004f0:	2a0f      	cmp	r2, #15
 80004f2:	d900      	bls.n	80004f6 <__aeabi_fdiv+0x62>
 80004f4:	e08d      	b.n	8000612 <__aeabi_fdiv+0x17e>
 80004f6:	486d      	ldr	r0, [pc, #436]	; (80006ac <__aeabi_fdiv+0x218>)
 80004f8:	0092      	lsls	r2, r2, #2
 80004fa:	5882      	ldr	r2, [r0, r2]
 80004fc:	4697      	mov	pc, r2
 80004fe:	2c00      	cmp	r4, #0
 8000500:	d154      	bne.n	80005ac <__aeabi_fdiv+0x118>
 8000502:	2308      	movs	r3, #8
 8000504:	4699      	mov	r9, r3
 8000506:	3b06      	subs	r3, #6
 8000508:	26ff      	movs	r6, #255	; 0xff
 800050a:	469b      	mov	fp, r3
 800050c:	e7da      	b.n	80004c4 <__aeabi_fdiv+0x30>
 800050e:	2500      	movs	r5, #0
 8000510:	4653      	mov	r3, sl
 8000512:	2902      	cmp	r1, #2
 8000514:	d01b      	beq.n	800054e <__aeabi_fdiv+0xba>
 8000516:	2903      	cmp	r1, #3
 8000518:	d100      	bne.n	800051c <__aeabi_fdiv+0x88>
 800051a:	e0bf      	b.n	800069c <__aeabi_fdiv+0x208>
 800051c:	2901      	cmp	r1, #1
 800051e:	d028      	beq.n	8000572 <__aeabi_fdiv+0xde>
 8000520:	0030      	movs	r0, r6
 8000522:	307f      	adds	r0, #127	; 0x7f
 8000524:	2800      	cmp	r0, #0
 8000526:	dd20      	ble.n	800056a <__aeabi_fdiv+0xd6>
 8000528:	076a      	lsls	r2, r5, #29
 800052a:	d004      	beq.n	8000536 <__aeabi_fdiv+0xa2>
 800052c:	220f      	movs	r2, #15
 800052e:	402a      	ands	r2, r5
 8000530:	2a04      	cmp	r2, #4
 8000532:	d000      	beq.n	8000536 <__aeabi_fdiv+0xa2>
 8000534:	3504      	adds	r5, #4
 8000536:	012a      	lsls	r2, r5, #4
 8000538:	d503      	bpl.n	8000542 <__aeabi_fdiv+0xae>
 800053a:	0030      	movs	r0, r6
 800053c:	4a5c      	ldr	r2, [pc, #368]	; (80006b0 <__aeabi_fdiv+0x21c>)
 800053e:	3080      	adds	r0, #128	; 0x80
 8000540:	4015      	ands	r5, r2
 8000542:	28fe      	cmp	r0, #254	; 0xfe
 8000544:	dc03      	bgt.n	800054e <__aeabi_fdiv+0xba>
 8000546:	01ac      	lsls	r4, r5, #6
 8000548:	0a64      	lsrs	r4, r4, #9
 800054a:	b2c2      	uxtb	r2, r0
 800054c:	e001      	b.n	8000552 <__aeabi_fdiv+0xbe>
 800054e:	22ff      	movs	r2, #255	; 0xff
 8000550:	2400      	movs	r4, #0
 8000552:	0264      	lsls	r4, r4, #9
 8000554:	05d2      	lsls	r2, r2, #23
 8000556:	0a60      	lsrs	r0, r4, #9
 8000558:	07db      	lsls	r3, r3, #31
 800055a:	4310      	orrs	r0, r2
 800055c:	4318      	orrs	r0, r3
 800055e:	bc3c      	pop	{r2, r3, r4, r5}
 8000560:	4690      	mov	r8, r2
 8000562:	4699      	mov	r9, r3
 8000564:	46a2      	mov	sl, r4
 8000566:	46ab      	mov	fp, r5
 8000568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800056a:	2201      	movs	r2, #1
 800056c:	1a10      	subs	r0, r2, r0
 800056e:	281b      	cmp	r0, #27
 8000570:	dd7c      	ble.n	800066c <__aeabi_fdiv+0x1d8>
 8000572:	2200      	movs	r2, #0
 8000574:	2400      	movs	r4, #0
 8000576:	e7ec      	b.n	8000552 <__aeabi_fdiv+0xbe>
 8000578:	2c00      	cmp	r4, #0
 800057a:	d11d      	bne.n	80005b8 <__aeabi_fdiv+0x124>
 800057c:	2304      	movs	r3, #4
 800057e:	4699      	mov	r9, r3
 8000580:	3b03      	subs	r3, #3
 8000582:	2600      	movs	r6, #0
 8000584:	469b      	mov	fp, r3
 8000586:	e79d      	b.n	80004c4 <__aeabi_fdiv+0x30>
 8000588:	3eff      	subs	r6, #255	; 0xff
 800058a:	2d00      	cmp	r5, #0
 800058c:	d120      	bne.n	80005d0 <__aeabi_fdiv+0x13c>
 800058e:	2102      	movs	r1, #2
 8000590:	4643      	mov	r3, r8
 8000592:	464a      	mov	r2, r9
 8000594:	407b      	eors	r3, r7
 8000596:	430a      	orrs	r2, r1
 8000598:	2a0f      	cmp	r2, #15
 800059a:	d8d8      	bhi.n	800054e <__aeabi_fdiv+0xba>
 800059c:	4845      	ldr	r0, [pc, #276]	; (80006b4 <__aeabi_fdiv+0x220>)
 800059e:	0092      	lsls	r2, r2, #2
 80005a0:	5882      	ldr	r2, [r0, r2]
 80005a2:	4697      	mov	pc, r2
 80005a4:	2d00      	cmp	r5, #0
 80005a6:	d119      	bne.n	80005dc <__aeabi_fdiv+0x148>
 80005a8:	2101      	movs	r1, #1
 80005aa:	e7f1      	b.n	8000590 <__aeabi_fdiv+0xfc>
 80005ac:	230c      	movs	r3, #12
 80005ae:	4699      	mov	r9, r3
 80005b0:	3b09      	subs	r3, #9
 80005b2:	26ff      	movs	r6, #255	; 0xff
 80005b4:	469b      	mov	fp, r3
 80005b6:	e785      	b.n	80004c4 <__aeabi_fdiv+0x30>
 80005b8:	0020      	movs	r0, r4
 80005ba:	f001 ffdf 	bl	800257c <__clzsi2>
 80005be:	2676      	movs	r6, #118	; 0x76
 80005c0:	1f43      	subs	r3, r0, #5
 80005c2:	409c      	lsls	r4, r3
 80005c4:	2300      	movs	r3, #0
 80005c6:	4276      	negs	r6, r6
 80005c8:	1a36      	subs	r6, r6, r0
 80005ca:	4699      	mov	r9, r3
 80005cc:	469b      	mov	fp, r3
 80005ce:	e779      	b.n	80004c4 <__aeabi_fdiv+0x30>
 80005d0:	464a      	mov	r2, r9
 80005d2:	2303      	movs	r3, #3
 80005d4:	431a      	orrs	r2, r3
 80005d6:	4691      	mov	r9, r2
 80005d8:	2103      	movs	r1, #3
 80005da:	e786      	b.n	80004ea <__aeabi_fdiv+0x56>
 80005dc:	0028      	movs	r0, r5
 80005de:	f001 ffcd 	bl	800257c <__clzsi2>
 80005e2:	1f43      	subs	r3, r0, #5
 80005e4:	1836      	adds	r6, r6, r0
 80005e6:	409d      	lsls	r5, r3
 80005e8:	3676      	adds	r6, #118	; 0x76
 80005ea:	2100      	movs	r1, #0
 80005ec:	e77d      	b.n	80004ea <__aeabi_fdiv+0x56>
 80005ee:	2480      	movs	r4, #128	; 0x80
 80005f0:	2300      	movs	r3, #0
 80005f2:	03e4      	lsls	r4, r4, #15
 80005f4:	22ff      	movs	r2, #255	; 0xff
 80005f6:	e7ac      	b.n	8000552 <__aeabi_fdiv+0xbe>
 80005f8:	2500      	movs	r5, #0
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	03db      	lsls	r3, r3, #15
 80005fe:	421c      	tst	r4, r3
 8000600:	d028      	beq.n	8000654 <__aeabi_fdiv+0x1c0>
 8000602:	421d      	tst	r5, r3
 8000604:	d126      	bne.n	8000654 <__aeabi_fdiv+0x1c0>
 8000606:	432b      	orrs	r3, r5
 8000608:	025c      	lsls	r4, r3, #9
 800060a:	0a64      	lsrs	r4, r4, #9
 800060c:	4643      	mov	r3, r8
 800060e:	22ff      	movs	r2, #255	; 0xff
 8000610:	e79f      	b.n	8000552 <__aeabi_fdiv+0xbe>
 8000612:	0162      	lsls	r2, r4, #5
 8000614:	016c      	lsls	r4, r5, #5
 8000616:	42a2      	cmp	r2, r4
 8000618:	d224      	bcs.n	8000664 <__aeabi_fdiv+0x1d0>
 800061a:	211b      	movs	r1, #27
 800061c:	2500      	movs	r5, #0
 800061e:	3e01      	subs	r6, #1
 8000620:	2701      	movs	r7, #1
 8000622:	0010      	movs	r0, r2
 8000624:	006d      	lsls	r5, r5, #1
 8000626:	0052      	lsls	r2, r2, #1
 8000628:	2800      	cmp	r0, #0
 800062a:	db01      	blt.n	8000630 <__aeabi_fdiv+0x19c>
 800062c:	4294      	cmp	r4, r2
 800062e:	d801      	bhi.n	8000634 <__aeabi_fdiv+0x1a0>
 8000630:	1b12      	subs	r2, r2, r4
 8000632:	433d      	orrs	r5, r7
 8000634:	3901      	subs	r1, #1
 8000636:	2900      	cmp	r1, #0
 8000638:	d1f3      	bne.n	8000622 <__aeabi_fdiv+0x18e>
 800063a:	0014      	movs	r4, r2
 800063c:	1e62      	subs	r2, r4, #1
 800063e:	4194      	sbcs	r4, r2
 8000640:	4325      	orrs	r5, r4
 8000642:	e76d      	b.n	8000520 <__aeabi_fdiv+0x8c>
 8000644:	46ba      	mov	sl, r7
 8000646:	4659      	mov	r1, fp
 8000648:	0025      	movs	r5, r4
 800064a:	4653      	mov	r3, sl
 800064c:	2902      	cmp	r1, #2
 800064e:	d000      	beq.n	8000652 <__aeabi_fdiv+0x1be>
 8000650:	e761      	b.n	8000516 <__aeabi_fdiv+0x82>
 8000652:	e77c      	b.n	800054e <__aeabi_fdiv+0xba>
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	03db      	lsls	r3, r3, #15
 8000658:	431c      	orrs	r4, r3
 800065a:	0264      	lsls	r4, r4, #9
 800065c:	0a64      	lsrs	r4, r4, #9
 800065e:	003b      	movs	r3, r7
 8000660:	22ff      	movs	r2, #255	; 0xff
 8000662:	e776      	b.n	8000552 <__aeabi_fdiv+0xbe>
 8000664:	1b12      	subs	r2, r2, r4
 8000666:	211a      	movs	r1, #26
 8000668:	2501      	movs	r5, #1
 800066a:	e7d9      	b.n	8000620 <__aeabi_fdiv+0x18c>
 800066c:	369e      	adds	r6, #158	; 0x9e
 800066e:	002a      	movs	r2, r5
 8000670:	40b5      	lsls	r5, r6
 8000672:	002c      	movs	r4, r5
 8000674:	40c2      	lsrs	r2, r0
 8000676:	1e65      	subs	r5, r4, #1
 8000678:	41ac      	sbcs	r4, r5
 800067a:	4314      	orrs	r4, r2
 800067c:	0762      	lsls	r2, r4, #29
 800067e:	d004      	beq.n	800068a <__aeabi_fdiv+0x1f6>
 8000680:	220f      	movs	r2, #15
 8000682:	4022      	ands	r2, r4
 8000684:	2a04      	cmp	r2, #4
 8000686:	d000      	beq.n	800068a <__aeabi_fdiv+0x1f6>
 8000688:	3404      	adds	r4, #4
 800068a:	0162      	lsls	r2, r4, #5
 800068c:	d403      	bmi.n	8000696 <__aeabi_fdiv+0x202>
 800068e:	01a4      	lsls	r4, r4, #6
 8000690:	0a64      	lsrs	r4, r4, #9
 8000692:	2200      	movs	r2, #0
 8000694:	e75d      	b.n	8000552 <__aeabi_fdiv+0xbe>
 8000696:	2201      	movs	r2, #1
 8000698:	2400      	movs	r4, #0
 800069a:	e75a      	b.n	8000552 <__aeabi_fdiv+0xbe>
 800069c:	2480      	movs	r4, #128	; 0x80
 800069e:	03e4      	lsls	r4, r4, #15
 80006a0:	432c      	orrs	r4, r5
 80006a2:	0264      	lsls	r4, r4, #9
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	22ff      	movs	r2, #255	; 0xff
 80006a8:	e753      	b.n	8000552 <__aeabi_fdiv+0xbe>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	0800b0b4 	.word	0x0800b0b4
 80006b0:	f7ffffff 	.word	0xf7ffffff
 80006b4:	0800b0f4 	.word	0x0800b0f4

080006b8 <__aeabi_fmul>:
 80006b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ba:	464e      	mov	r6, r9
 80006bc:	4657      	mov	r7, sl
 80006be:	4645      	mov	r5, r8
 80006c0:	46de      	mov	lr, fp
 80006c2:	b5e0      	push	{r5, r6, r7, lr}
 80006c4:	0243      	lsls	r3, r0, #9
 80006c6:	0a5b      	lsrs	r3, r3, #9
 80006c8:	0045      	lsls	r5, r0, #1
 80006ca:	b083      	sub	sp, #12
 80006cc:	1c0f      	adds	r7, r1, #0
 80006ce:	4699      	mov	r9, r3
 80006d0:	0e2d      	lsrs	r5, r5, #24
 80006d2:	0fc6      	lsrs	r6, r0, #31
 80006d4:	2d00      	cmp	r5, #0
 80006d6:	d057      	beq.n	8000788 <__aeabi_fmul+0xd0>
 80006d8:	2dff      	cmp	r5, #255	; 0xff
 80006da:	d024      	beq.n	8000726 <__aeabi_fmul+0x6e>
 80006dc:	2080      	movs	r0, #128	; 0x80
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	04c0      	lsls	r0, r0, #19
 80006e2:	4318      	orrs	r0, r3
 80006e4:	2300      	movs	r3, #0
 80006e6:	4681      	mov	r9, r0
 80006e8:	469a      	mov	sl, r3
 80006ea:	469b      	mov	fp, r3
 80006ec:	3d7f      	subs	r5, #127	; 0x7f
 80006ee:	027c      	lsls	r4, r7, #9
 80006f0:	007a      	lsls	r2, r7, #1
 80006f2:	0ffb      	lsrs	r3, r7, #31
 80006f4:	0a64      	lsrs	r4, r4, #9
 80006f6:	0e12      	lsrs	r2, r2, #24
 80006f8:	4698      	mov	r8, r3
 80006fa:	d023      	beq.n	8000744 <__aeabi_fmul+0x8c>
 80006fc:	2aff      	cmp	r2, #255	; 0xff
 80006fe:	d04b      	beq.n	8000798 <__aeabi_fmul+0xe0>
 8000700:	00e3      	lsls	r3, r4, #3
 8000702:	2480      	movs	r4, #128	; 0x80
 8000704:	2000      	movs	r0, #0
 8000706:	04e4      	lsls	r4, r4, #19
 8000708:	3a7f      	subs	r2, #127	; 0x7f
 800070a:	431c      	orrs	r4, r3
 800070c:	18ad      	adds	r5, r5, r2
 800070e:	1c6b      	adds	r3, r5, #1
 8000710:	4647      	mov	r7, r8
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	4653      	mov	r3, sl
 8000716:	4077      	eors	r7, r6
 8000718:	003a      	movs	r2, r7
 800071a:	2b0f      	cmp	r3, #15
 800071c:	d848      	bhi.n	80007b0 <__aeabi_fmul+0xf8>
 800071e:	497d      	ldr	r1, [pc, #500]	; (8000914 <__aeabi_fmul+0x25c>)
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	58cb      	ldr	r3, [r1, r3]
 8000724:	469f      	mov	pc, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d000      	beq.n	800072c <__aeabi_fmul+0x74>
 800072a:	e085      	b.n	8000838 <__aeabi_fmul+0x180>
 800072c:	3308      	adds	r3, #8
 800072e:	469a      	mov	sl, r3
 8000730:	3b06      	subs	r3, #6
 8000732:	469b      	mov	fp, r3
 8000734:	027c      	lsls	r4, r7, #9
 8000736:	007a      	lsls	r2, r7, #1
 8000738:	0ffb      	lsrs	r3, r7, #31
 800073a:	25ff      	movs	r5, #255	; 0xff
 800073c:	0a64      	lsrs	r4, r4, #9
 800073e:	0e12      	lsrs	r2, r2, #24
 8000740:	4698      	mov	r8, r3
 8000742:	d1db      	bne.n	80006fc <__aeabi_fmul+0x44>
 8000744:	2c00      	cmp	r4, #0
 8000746:	d000      	beq.n	800074a <__aeabi_fmul+0x92>
 8000748:	e090      	b.n	800086c <__aeabi_fmul+0x1b4>
 800074a:	4652      	mov	r2, sl
 800074c:	2301      	movs	r3, #1
 800074e:	431a      	orrs	r2, r3
 8000750:	4692      	mov	sl, r2
 8000752:	2001      	movs	r0, #1
 8000754:	e7db      	b.n	800070e <__aeabi_fmul+0x56>
 8000756:	464c      	mov	r4, r9
 8000758:	4658      	mov	r0, fp
 800075a:	0017      	movs	r7, r2
 800075c:	2802      	cmp	r0, #2
 800075e:	d024      	beq.n	80007aa <__aeabi_fmul+0xf2>
 8000760:	2803      	cmp	r0, #3
 8000762:	d100      	bne.n	8000766 <__aeabi_fmul+0xae>
 8000764:	e0cf      	b.n	8000906 <__aeabi_fmul+0x24e>
 8000766:	2200      	movs	r2, #0
 8000768:	2300      	movs	r3, #0
 800076a:	2801      	cmp	r0, #1
 800076c:	d14d      	bne.n	800080a <__aeabi_fmul+0x152>
 800076e:	0258      	lsls	r0, r3, #9
 8000770:	05d2      	lsls	r2, r2, #23
 8000772:	0a40      	lsrs	r0, r0, #9
 8000774:	07ff      	lsls	r7, r7, #31
 8000776:	4310      	orrs	r0, r2
 8000778:	4338      	orrs	r0, r7
 800077a:	b003      	add	sp, #12
 800077c:	bc3c      	pop	{r2, r3, r4, r5}
 800077e:	4690      	mov	r8, r2
 8000780:	4699      	mov	r9, r3
 8000782:	46a2      	mov	sl, r4
 8000784:	46ab      	mov	fp, r5
 8000786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000788:	2b00      	cmp	r3, #0
 800078a:	d15b      	bne.n	8000844 <__aeabi_fmul+0x18c>
 800078c:	2304      	movs	r3, #4
 800078e:	469a      	mov	sl, r3
 8000790:	3b03      	subs	r3, #3
 8000792:	2500      	movs	r5, #0
 8000794:	469b      	mov	fp, r3
 8000796:	e7aa      	b.n	80006ee <__aeabi_fmul+0x36>
 8000798:	35ff      	adds	r5, #255	; 0xff
 800079a:	2c00      	cmp	r4, #0
 800079c:	d160      	bne.n	8000860 <__aeabi_fmul+0x1a8>
 800079e:	4652      	mov	r2, sl
 80007a0:	2302      	movs	r3, #2
 80007a2:	431a      	orrs	r2, r3
 80007a4:	4692      	mov	sl, r2
 80007a6:	2002      	movs	r0, #2
 80007a8:	e7b1      	b.n	800070e <__aeabi_fmul+0x56>
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	2300      	movs	r3, #0
 80007ae:	e7de      	b.n	800076e <__aeabi_fmul+0xb6>
 80007b0:	464b      	mov	r3, r9
 80007b2:	0c1b      	lsrs	r3, r3, #16
 80007b4:	469c      	mov	ip, r3
 80007b6:	464b      	mov	r3, r9
 80007b8:	0426      	lsls	r6, r4, #16
 80007ba:	0c36      	lsrs	r6, r6, #16
 80007bc:	0418      	lsls	r0, r3, #16
 80007be:	4661      	mov	r1, ip
 80007c0:	0033      	movs	r3, r6
 80007c2:	0c22      	lsrs	r2, r4, #16
 80007c4:	4664      	mov	r4, ip
 80007c6:	0c00      	lsrs	r0, r0, #16
 80007c8:	4343      	muls	r3, r0
 80007ca:	434e      	muls	r6, r1
 80007cc:	4350      	muls	r0, r2
 80007ce:	4354      	muls	r4, r2
 80007d0:	1980      	adds	r0, r0, r6
 80007d2:	0c1a      	lsrs	r2, r3, #16
 80007d4:	1812      	adds	r2, r2, r0
 80007d6:	4296      	cmp	r6, r2
 80007d8:	d903      	bls.n	80007e2 <__aeabi_fmul+0x12a>
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	0249      	lsls	r1, r1, #9
 80007de:	468c      	mov	ip, r1
 80007e0:	4464      	add	r4, ip
 80007e2:	041b      	lsls	r3, r3, #16
 80007e4:	0c1b      	lsrs	r3, r3, #16
 80007e6:	0410      	lsls	r0, r2, #16
 80007e8:	18c0      	adds	r0, r0, r3
 80007ea:	0183      	lsls	r3, r0, #6
 80007ec:	1e5e      	subs	r6, r3, #1
 80007ee:	41b3      	sbcs	r3, r6
 80007f0:	0e80      	lsrs	r0, r0, #26
 80007f2:	4318      	orrs	r0, r3
 80007f4:	0c13      	lsrs	r3, r2, #16
 80007f6:	191b      	adds	r3, r3, r4
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	4303      	orrs	r3, r0
 80007fc:	001c      	movs	r4, r3
 80007fe:	0123      	lsls	r3, r4, #4
 8000800:	d579      	bpl.n	80008f6 <__aeabi_fmul+0x23e>
 8000802:	2301      	movs	r3, #1
 8000804:	0862      	lsrs	r2, r4, #1
 8000806:	401c      	ands	r4, r3
 8000808:	4314      	orrs	r4, r2
 800080a:	9a01      	ldr	r2, [sp, #4]
 800080c:	327f      	adds	r2, #127	; 0x7f
 800080e:	2a00      	cmp	r2, #0
 8000810:	dd4d      	ble.n	80008ae <__aeabi_fmul+0x1f6>
 8000812:	0763      	lsls	r3, r4, #29
 8000814:	d004      	beq.n	8000820 <__aeabi_fmul+0x168>
 8000816:	230f      	movs	r3, #15
 8000818:	4023      	ands	r3, r4
 800081a:	2b04      	cmp	r3, #4
 800081c:	d000      	beq.n	8000820 <__aeabi_fmul+0x168>
 800081e:	3404      	adds	r4, #4
 8000820:	0123      	lsls	r3, r4, #4
 8000822:	d503      	bpl.n	800082c <__aeabi_fmul+0x174>
 8000824:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <__aeabi_fmul+0x260>)
 8000826:	9a01      	ldr	r2, [sp, #4]
 8000828:	401c      	ands	r4, r3
 800082a:	3280      	adds	r2, #128	; 0x80
 800082c:	2afe      	cmp	r2, #254	; 0xfe
 800082e:	dcbc      	bgt.n	80007aa <__aeabi_fmul+0xf2>
 8000830:	01a3      	lsls	r3, r4, #6
 8000832:	0a5b      	lsrs	r3, r3, #9
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	e79a      	b.n	800076e <__aeabi_fmul+0xb6>
 8000838:	230c      	movs	r3, #12
 800083a:	469a      	mov	sl, r3
 800083c:	3b09      	subs	r3, #9
 800083e:	25ff      	movs	r5, #255	; 0xff
 8000840:	469b      	mov	fp, r3
 8000842:	e754      	b.n	80006ee <__aeabi_fmul+0x36>
 8000844:	0018      	movs	r0, r3
 8000846:	f001 fe99 	bl	800257c <__clzsi2>
 800084a:	464a      	mov	r2, r9
 800084c:	1f43      	subs	r3, r0, #5
 800084e:	2576      	movs	r5, #118	; 0x76
 8000850:	409a      	lsls	r2, r3
 8000852:	2300      	movs	r3, #0
 8000854:	426d      	negs	r5, r5
 8000856:	4691      	mov	r9, r2
 8000858:	1a2d      	subs	r5, r5, r0
 800085a:	469a      	mov	sl, r3
 800085c:	469b      	mov	fp, r3
 800085e:	e746      	b.n	80006ee <__aeabi_fmul+0x36>
 8000860:	4652      	mov	r2, sl
 8000862:	2303      	movs	r3, #3
 8000864:	431a      	orrs	r2, r3
 8000866:	4692      	mov	sl, r2
 8000868:	2003      	movs	r0, #3
 800086a:	e750      	b.n	800070e <__aeabi_fmul+0x56>
 800086c:	0020      	movs	r0, r4
 800086e:	f001 fe85 	bl	800257c <__clzsi2>
 8000872:	1f43      	subs	r3, r0, #5
 8000874:	1a2d      	subs	r5, r5, r0
 8000876:	409c      	lsls	r4, r3
 8000878:	3d76      	subs	r5, #118	; 0x76
 800087a:	2000      	movs	r0, #0
 800087c:	e747      	b.n	800070e <__aeabi_fmul+0x56>
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	2700      	movs	r7, #0
 8000882:	03db      	lsls	r3, r3, #15
 8000884:	22ff      	movs	r2, #255	; 0xff
 8000886:	e772      	b.n	800076e <__aeabi_fmul+0xb6>
 8000888:	4642      	mov	r2, r8
 800088a:	e766      	b.n	800075a <__aeabi_fmul+0xa2>
 800088c:	464c      	mov	r4, r9
 800088e:	0032      	movs	r2, r6
 8000890:	4658      	mov	r0, fp
 8000892:	e762      	b.n	800075a <__aeabi_fmul+0xa2>
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	464a      	mov	r2, r9
 8000898:	03db      	lsls	r3, r3, #15
 800089a:	421a      	tst	r2, r3
 800089c:	d022      	beq.n	80008e4 <__aeabi_fmul+0x22c>
 800089e:	421c      	tst	r4, r3
 80008a0:	d120      	bne.n	80008e4 <__aeabi_fmul+0x22c>
 80008a2:	4323      	orrs	r3, r4
 80008a4:	025b      	lsls	r3, r3, #9
 80008a6:	0a5b      	lsrs	r3, r3, #9
 80008a8:	4647      	mov	r7, r8
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	e75f      	b.n	800076e <__aeabi_fmul+0xb6>
 80008ae:	2301      	movs	r3, #1
 80008b0:	1a9a      	subs	r2, r3, r2
 80008b2:	2a1b      	cmp	r2, #27
 80008b4:	dc21      	bgt.n	80008fa <__aeabi_fmul+0x242>
 80008b6:	0023      	movs	r3, r4
 80008b8:	9901      	ldr	r1, [sp, #4]
 80008ba:	40d3      	lsrs	r3, r2
 80008bc:	319e      	adds	r1, #158	; 0x9e
 80008be:	408c      	lsls	r4, r1
 80008c0:	001a      	movs	r2, r3
 80008c2:	0023      	movs	r3, r4
 80008c4:	1e5c      	subs	r4, r3, #1
 80008c6:	41a3      	sbcs	r3, r4
 80008c8:	4313      	orrs	r3, r2
 80008ca:	075a      	lsls	r2, r3, #29
 80008cc:	d004      	beq.n	80008d8 <__aeabi_fmul+0x220>
 80008ce:	220f      	movs	r2, #15
 80008d0:	401a      	ands	r2, r3
 80008d2:	2a04      	cmp	r2, #4
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fmul+0x220>
 80008d6:	3304      	adds	r3, #4
 80008d8:	015a      	lsls	r2, r3, #5
 80008da:	d411      	bmi.n	8000900 <__aeabi_fmul+0x248>
 80008dc:	019b      	lsls	r3, r3, #6
 80008de:	0a5b      	lsrs	r3, r3, #9
 80008e0:	2200      	movs	r2, #0
 80008e2:	e744      	b.n	800076e <__aeabi_fmul+0xb6>
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	464a      	mov	r2, r9
 80008e8:	03db      	lsls	r3, r3, #15
 80008ea:	4313      	orrs	r3, r2
 80008ec:	025b      	lsls	r3, r3, #9
 80008ee:	0a5b      	lsrs	r3, r3, #9
 80008f0:	0037      	movs	r7, r6
 80008f2:	22ff      	movs	r2, #255	; 0xff
 80008f4:	e73b      	b.n	800076e <__aeabi_fmul+0xb6>
 80008f6:	9501      	str	r5, [sp, #4]
 80008f8:	e787      	b.n	800080a <__aeabi_fmul+0x152>
 80008fa:	2200      	movs	r2, #0
 80008fc:	2300      	movs	r3, #0
 80008fe:	e736      	b.n	800076e <__aeabi_fmul+0xb6>
 8000900:	2201      	movs	r2, #1
 8000902:	2300      	movs	r3, #0
 8000904:	e733      	b.n	800076e <__aeabi_fmul+0xb6>
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	03db      	lsls	r3, r3, #15
 800090a:	4323      	orrs	r3, r4
 800090c:	025b      	lsls	r3, r3, #9
 800090e:	0a5b      	lsrs	r3, r3, #9
 8000910:	22ff      	movs	r2, #255	; 0xff
 8000912:	e72c      	b.n	800076e <__aeabi_fmul+0xb6>
 8000914:	0800b134 	.word	0x0800b134
 8000918:	f7ffffff 	.word	0xf7ffffff

0800091c <__aeabi_ui2f>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	1e04      	subs	r4, r0, #0
 8000920:	d034      	beq.n	800098c <__aeabi_ui2f+0x70>
 8000922:	f001 fe2b 	bl	800257c <__clzsi2>
 8000926:	229e      	movs	r2, #158	; 0x9e
 8000928:	1a12      	subs	r2, r2, r0
 800092a:	2a96      	cmp	r2, #150	; 0x96
 800092c:	dc07      	bgt.n	800093e <__aeabi_ui2f+0x22>
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	2808      	cmp	r0, #8
 8000932:	dd2e      	ble.n	8000992 <__aeabi_ui2f+0x76>
 8000934:	3808      	subs	r0, #8
 8000936:	4084      	lsls	r4, r0
 8000938:	0260      	lsls	r0, r4, #9
 800093a:	0a40      	lsrs	r0, r0, #9
 800093c:	e021      	b.n	8000982 <__aeabi_ui2f+0x66>
 800093e:	2a99      	cmp	r2, #153	; 0x99
 8000940:	dd09      	ble.n	8000956 <__aeabi_ui2f+0x3a>
 8000942:	0003      	movs	r3, r0
 8000944:	0021      	movs	r1, r4
 8000946:	331b      	adds	r3, #27
 8000948:	4099      	lsls	r1, r3
 800094a:	1e4b      	subs	r3, r1, #1
 800094c:	4199      	sbcs	r1, r3
 800094e:	2305      	movs	r3, #5
 8000950:	1a1b      	subs	r3, r3, r0
 8000952:	40dc      	lsrs	r4, r3
 8000954:	430c      	orrs	r4, r1
 8000956:	2805      	cmp	r0, #5
 8000958:	dd01      	ble.n	800095e <__aeabi_ui2f+0x42>
 800095a:	1f43      	subs	r3, r0, #5
 800095c:	409c      	lsls	r4, r3
 800095e:	0023      	movs	r3, r4
 8000960:	490d      	ldr	r1, [pc, #52]	; (8000998 <__aeabi_ui2f+0x7c>)
 8000962:	400b      	ands	r3, r1
 8000964:	0765      	lsls	r5, r4, #29
 8000966:	d009      	beq.n	800097c <__aeabi_ui2f+0x60>
 8000968:	250f      	movs	r5, #15
 800096a:	402c      	ands	r4, r5
 800096c:	2c04      	cmp	r4, #4
 800096e:	d005      	beq.n	800097c <__aeabi_ui2f+0x60>
 8000970:	3304      	adds	r3, #4
 8000972:	015c      	lsls	r4, r3, #5
 8000974:	d502      	bpl.n	800097c <__aeabi_ui2f+0x60>
 8000976:	229f      	movs	r2, #159	; 0x9f
 8000978:	400b      	ands	r3, r1
 800097a:	1a12      	subs	r2, r2, r0
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	0a58      	lsrs	r0, r3, #9
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	0240      	lsls	r0, r0, #9
 8000984:	05d2      	lsls	r2, r2, #23
 8000986:	0a40      	lsrs	r0, r0, #9
 8000988:	4310      	orrs	r0, r2
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	2200      	movs	r2, #0
 800098e:	2000      	movs	r0, #0
 8000990:	e7f7      	b.n	8000982 <__aeabi_ui2f+0x66>
 8000992:	0260      	lsls	r0, r4, #9
 8000994:	0a40      	lsrs	r0, r0, #9
 8000996:	e7f4      	b.n	8000982 <__aeabi_ui2f+0x66>
 8000998:	fbffffff 	.word	0xfbffffff

0800099c <__aeabi_dadd>:
 800099c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099e:	464f      	mov	r7, r9
 80009a0:	4646      	mov	r6, r8
 80009a2:	46d6      	mov	lr, sl
 80009a4:	000c      	movs	r4, r1
 80009a6:	0309      	lsls	r1, r1, #12
 80009a8:	b5c0      	push	{r6, r7, lr}
 80009aa:	0a49      	lsrs	r1, r1, #9
 80009ac:	0f47      	lsrs	r7, r0, #29
 80009ae:	005e      	lsls	r6, r3, #1
 80009b0:	4339      	orrs	r1, r7
 80009b2:	031f      	lsls	r7, r3, #12
 80009b4:	0fdb      	lsrs	r3, r3, #31
 80009b6:	469c      	mov	ip, r3
 80009b8:	0065      	lsls	r5, r4, #1
 80009ba:	0a7b      	lsrs	r3, r7, #9
 80009bc:	0f57      	lsrs	r7, r2, #29
 80009be:	431f      	orrs	r7, r3
 80009c0:	0d6d      	lsrs	r5, r5, #21
 80009c2:	0fe4      	lsrs	r4, r4, #31
 80009c4:	0d76      	lsrs	r6, r6, #21
 80009c6:	46a1      	mov	r9, r4
 80009c8:	00c0      	lsls	r0, r0, #3
 80009ca:	46b8      	mov	r8, r7
 80009cc:	00d2      	lsls	r2, r2, #3
 80009ce:	1bab      	subs	r3, r5, r6
 80009d0:	4564      	cmp	r4, ip
 80009d2:	d07b      	beq.n	8000acc <__aeabi_dadd+0x130>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd5f      	ble.n	8000a98 <__aeabi_dadd+0xfc>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d000      	beq.n	80009de <__aeabi_dadd+0x42>
 80009dc:	e0a4      	b.n	8000b28 <__aeabi_dadd+0x18c>
 80009de:	003e      	movs	r6, r7
 80009e0:	4316      	orrs	r6, r2
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dadd+0x4a>
 80009e4:	e112      	b.n	8000c0c <__aeabi_dadd+0x270>
 80009e6:	1e5e      	subs	r6, r3, #1
 80009e8:	2e00      	cmp	r6, #0
 80009ea:	d000      	beq.n	80009ee <__aeabi_dadd+0x52>
 80009ec:	e19e      	b.n	8000d2c <__aeabi_dadd+0x390>
 80009ee:	1a87      	subs	r7, r0, r2
 80009f0:	4643      	mov	r3, r8
 80009f2:	42b8      	cmp	r0, r7
 80009f4:	4180      	sbcs	r0, r0
 80009f6:	2501      	movs	r5, #1
 80009f8:	1ac9      	subs	r1, r1, r3
 80009fa:	4240      	negs	r0, r0
 80009fc:	1a09      	subs	r1, r1, r0
 80009fe:	020b      	lsls	r3, r1, #8
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_dadd+0x68>
 8000a02:	e131      	b.n	8000c68 <__aeabi_dadd+0x2cc>
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	0a4e      	lsrs	r6, r1, #9
 8000a08:	2e00      	cmp	r6, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dadd+0x72>
 8000a0c:	e16e      	b.n	8000cec <__aeabi_dadd+0x350>
 8000a0e:	0030      	movs	r0, r6
 8000a10:	f001 fdb4 	bl	800257c <__clzsi2>
 8000a14:	0003      	movs	r3, r0
 8000a16:	3b08      	subs	r3, #8
 8000a18:	2b1f      	cmp	r3, #31
 8000a1a:	dd00      	ble.n	8000a1e <__aeabi_dadd+0x82>
 8000a1c:	e161      	b.n	8000ce2 <__aeabi_dadd+0x346>
 8000a1e:	2220      	movs	r2, #32
 8000a20:	0039      	movs	r1, r7
 8000a22:	1ad2      	subs	r2, r2, r3
 8000a24:	409e      	lsls	r6, r3
 8000a26:	40d1      	lsrs	r1, r2
 8000a28:	409f      	lsls	r7, r3
 8000a2a:	430e      	orrs	r6, r1
 8000a2c:	429d      	cmp	r5, r3
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_dadd+0x96>
 8000a30:	e151      	b.n	8000cd6 <__aeabi_dadd+0x33a>
 8000a32:	1b5d      	subs	r5, r3, r5
 8000a34:	1c6b      	adds	r3, r5, #1
 8000a36:	2b1f      	cmp	r3, #31
 8000a38:	dd00      	ble.n	8000a3c <__aeabi_dadd+0xa0>
 8000a3a:	e17c      	b.n	8000d36 <__aeabi_dadd+0x39a>
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	1ac9      	subs	r1, r1, r3
 8000a40:	003d      	movs	r5, r7
 8000a42:	0030      	movs	r0, r6
 8000a44:	408f      	lsls	r7, r1
 8000a46:	4088      	lsls	r0, r1
 8000a48:	40dd      	lsrs	r5, r3
 8000a4a:	1e79      	subs	r1, r7, #1
 8000a4c:	418f      	sbcs	r7, r1
 8000a4e:	0031      	movs	r1, r6
 8000a50:	2207      	movs	r2, #7
 8000a52:	4328      	orrs	r0, r5
 8000a54:	40d9      	lsrs	r1, r3
 8000a56:	2500      	movs	r5, #0
 8000a58:	4307      	orrs	r7, r0
 8000a5a:	403a      	ands	r2, r7
 8000a5c:	2a00      	cmp	r2, #0
 8000a5e:	d009      	beq.n	8000a74 <__aeabi_dadd+0xd8>
 8000a60:	230f      	movs	r3, #15
 8000a62:	403b      	ands	r3, r7
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d005      	beq.n	8000a74 <__aeabi_dadd+0xd8>
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	42bb      	cmp	r3, r7
 8000a6c:	41bf      	sbcs	r7, r7
 8000a6e:	427f      	negs	r7, r7
 8000a70:	19c9      	adds	r1, r1, r7
 8000a72:	001f      	movs	r7, r3
 8000a74:	020b      	lsls	r3, r1, #8
 8000a76:	d400      	bmi.n	8000a7a <__aeabi_dadd+0xde>
 8000a78:	e226      	b.n	8000ec8 <__aeabi_dadd+0x52c>
 8000a7a:	1c6a      	adds	r2, r5, #1
 8000a7c:	4bc6      	ldr	r3, [pc, #792]	; (8000d98 <__aeabi_dadd+0x3fc>)
 8000a7e:	0555      	lsls	r5, r2, #21
 8000a80:	0d6d      	lsrs	r5, r5, #21
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0xec>
 8000a86:	e106      	b.n	8000c96 <__aeabi_dadd+0x2fa>
 8000a88:	4ac4      	ldr	r2, [pc, #784]	; (8000d9c <__aeabi_dadd+0x400>)
 8000a8a:	08ff      	lsrs	r7, r7, #3
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	0753      	lsls	r3, r2, #29
 8000a90:	0252      	lsls	r2, r2, #9
 8000a92:	433b      	orrs	r3, r7
 8000a94:	0b12      	lsrs	r2, r2, #12
 8000a96:	e08e      	b.n	8000bb6 <__aeabi_dadd+0x21a>
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_dadd+0x102>
 8000a9c:	e0b8      	b.n	8000c10 <__aeabi_dadd+0x274>
 8000a9e:	1c6b      	adds	r3, r5, #1
 8000aa0:	055b      	lsls	r3, r3, #21
 8000aa2:	0d5b      	lsrs	r3, r3, #21
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	dc00      	bgt.n	8000aaa <__aeabi_dadd+0x10e>
 8000aa8:	e130      	b.n	8000d0c <__aeabi_dadd+0x370>
 8000aaa:	1a87      	subs	r7, r0, r2
 8000aac:	4643      	mov	r3, r8
 8000aae:	42b8      	cmp	r0, r7
 8000ab0:	41b6      	sbcs	r6, r6
 8000ab2:	1acb      	subs	r3, r1, r3
 8000ab4:	4276      	negs	r6, r6
 8000ab6:	1b9e      	subs	r6, r3, r6
 8000ab8:	0233      	lsls	r3, r6, #8
 8000aba:	d500      	bpl.n	8000abe <__aeabi_dadd+0x122>
 8000abc:	e14c      	b.n	8000d58 <__aeabi_dadd+0x3bc>
 8000abe:	003b      	movs	r3, r7
 8000ac0:	4333      	orrs	r3, r6
 8000ac2:	d1a1      	bne.n	8000a08 <__aeabi_dadd+0x6c>
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	2500      	movs	r5, #0
 8000aca:	e070      	b.n	8000bae <__aeabi_dadd+0x212>
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	dc00      	bgt.n	8000ad2 <__aeabi_dadd+0x136>
 8000ad0:	e0e5      	b.n	8000c9e <__aeabi_dadd+0x302>
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dadd+0x13c>
 8000ad6:	e083      	b.n	8000be0 <__aeabi_dadd+0x244>
 8000ad8:	4eaf      	ldr	r6, [pc, #700]	; (8000d98 <__aeabi_dadd+0x3fc>)
 8000ada:	42b5      	cmp	r5, r6
 8000adc:	d060      	beq.n	8000ba0 <__aeabi_dadd+0x204>
 8000ade:	2680      	movs	r6, #128	; 0x80
 8000ae0:	0436      	lsls	r6, r6, #16
 8000ae2:	4337      	orrs	r7, r6
 8000ae4:	46b8      	mov	r8, r7
 8000ae6:	2b38      	cmp	r3, #56	; 0x38
 8000ae8:	dc00      	bgt.n	8000aec <__aeabi_dadd+0x150>
 8000aea:	e13e      	b.n	8000d6a <__aeabi_dadd+0x3ce>
 8000aec:	4643      	mov	r3, r8
 8000aee:	4313      	orrs	r3, r2
 8000af0:	001f      	movs	r7, r3
 8000af2:	1e7a      	subs	r2, r7, #1
 8000af4:	4197      	sbcs	r7, r2
 8000af6:	183f      	adds	r7, r7, r0
 8000af8:	4287      	cmp	r7, r0
 8000afa:	4180      	sbcs	r0, r0
 8000afc:	4240      	negs	r0, r0
 8000afe:	1809      	adds	r1, r1, r0
 8000b00:	020b      	lsls	r3, r1, #8
 8000b02:	d400      	bmi.n	8000b06 <__aeabi_dadd+0x16a>
 8000b04:	e0b0      	b.n	8000c68 <__aeabi_dadd+0x2cc>
 8000b06:	4ba4      	ldr	r3, [pc, #656]	; (8000d98 <__aeabi_dadd+0x3fc>)
 8000b08:	3501      	adds	r5, #1
 8000b0a:	429d      	cmp	r5, r3
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x174>
 8000b0e:	e0c3      	b.n	8000c98 <__aeabi_dadd+0x2fc>
 8000b10:	4aa2      	ldr	r2, [pc, #648]	; (8000d9c <__aeabi_dadd+0x400>)
 8000b12:	087b      	lsrs	r3, r7, #1
 8000b14:	400a      	ands	r2, r1
 8000b16:	2101      	movs	r1, #1
 8000b18:	400f      	ands	r7, r1
 8000b1a:	431f      	orrs	r7, r3
 8000b1c:	0851      	lsrs	r1, r2, #1
 8000b1e:	07d3      	lsls	r3, r2, #31
 8000b20:	2207      	movs	r2, #7
 8000b22:	431f      	orrs	r7, r3
 8000b24:	403a      	ands	r2, r7
 8000b26:	e799      	b.n	8000a5c <__aeabi_dadd+0xc0>
 8000b28:	4e9b      	ldr	r6, [pc, #620]	; (8000d98 <__aeabi_dadd+0x3fc>)
 8000b2a:	42b5      	cmp	r5, r6
 8000b2c:	d038      	beq.n	8000ba0 <__aeabi_dadd+0x204>
 8000b2e:	2680      	movs	r6, #128	; 0x80
 8000b30:	0436      	lsls	r6, r6, #16
 8000b32:	4337      	orrs	r7, r6
 8000b34:	46b8      	mov	r8, r7
 8000b36:	2b38      	cmp	r3, #56	; 0x38
 8000b38:	dd00      	ble.n	8000b3c <__aeabi_dadd+0x1a0>
 8000b3a:	e0dc      	b.n	8000cf6 <__aeabi_dadd+0x35a>
 8000b3c:	2b1f      	cmp	r3, #31
 8000b3e:	dc00      	bgt.n	8000b42 <__aeabi_dadd+0x1a6>
 8000b40:	e130      	b.n	8000da4 <__aeabi_dadd+0x408>
 8000b42:	001e      	movs	r6, r3
 8000b44:	4647      	mov	r7, r8
 8000b46:	3e20      	subs	r6, #32
 8000b48:	40f7      	lsrs	r7, r6
 8000b4a:	46bc      	mov	ip, r7
 8000b4c:	2b20      	cmp	r3, #32
 8000b4e:	d004      	beq.n	8000b5a <__aeabi_dadd+0x1be>
 8000b50:	2640      	movs	r6, #64	; 0x40
 8000b52:	1af3      	subs	r3, r6, r3
 8000b54:	4646      	mov	r6, r8
 8000b56:	409e      	lsls	r6, r3
 8000b58:	4332      	orrs	r2, r6
 8000b5a:	0017      	movs	r7, r2
 8000b5c:	4663      	mov	r3, ip
 8000b5e:	1e7a      	subs	r2, r7, #1
 8000b60:	4197      	sbcs	r7, r2
 8000b62:	431f      	orrs	r7, r3
 8000b64:	e0cc      	b.n	8000d00 <__aeabi_dadd+0x364>
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x1d0>
 8000b6a:	e204      	b.n	8000f76 <__aeabi_dadd+0x5da>
 8000b6c:	4643      	mov	r3, r8
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x1d8>
 8000b72:	e159      	b.n	8000e28 <__aeabi_dadd+0x48c>
 8000b74:	074b      	lsls	r3, r1, #29
 8000b76:	08c0      	lsrs	r0, r0, #3
 8000b78:	4318      	orrs	r0, r3
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	08c9      	lsrs	r1, r1, #3
 8000b7e:	031b      	lsls	r3, r3, #12
 8000b80:	4219      	tst	r1, r3
 8000b82:	d008      	beq.n	8000b96 <__aeabi_dadd+0x1fa>
 8000b84:	4645      	mov	r5, r8
 8000b86:	08ed      	lsrs	r5, r5, #3
 8000b88:	421d      	tst	r5, r3
 8000b8a:	d104      	bne.n	8000b96 <__aeabi_dadd+0x1fa>
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	08d0      	lsrs	r0, r2, #3
 8000b90:	0759      	lsls	r1, r3, #29
 8000b92:	4308      	orrs	r0, r1
 8000b94:	0029      	movs	r1, r5
 8000b96:	0f42      	lsrs	r2, r0, #29
 8000b98:	00c9      	lsls	r1, r1, #3
 8000b9a:	4d7f      	ldr	r5, [pc, #508]	; (8000d98 <__aeabi_dadd+0x3fc>)
 8000b9c:	4311      	orrs	r1, r2
 8000b9e:	00c0      	lsls	r0, r0, #3
 8000ba0:	074b      	lsls	r3, r1, #29
 8000ba2:	08ca      	lsrs	r2, r1, #3
 8000ba4:	497c      	ldr	r1, [pc, #496]	; (8000d98 <__aeabi_dadd+0x3fc>)
 8000ba6:	08c0      	lsrs	r0, r0, #3
 8000ba8:	4303      	orrs	r3, r0
 8000baa:	428d      	cmp	r5, r1
 8000bac:	d068      	beq.n	8000c80 <__aeabi_dadd+0x2e4>
 8000bae:	0312      	lsls	r2, r2, #12
 8000bb0:	056d      	lsls	r5, r5, #21
 8000bb2:	0b12      	lsrs	r2, r2, #12
 8000bb4:	0d6d      	lsrs	r5, r5, #21
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	0312      	lsls	r2, r2, #12
 8000bba:	0018      	movs	r0, r3
 8000bbc:	0b13      	lsrs	r3, r2, #12
 8000bbe:	0d0a      	lsrs	r2, r1, #20
 8000bc0:	0512      	lsls	r2, r2, #20
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	4b76      	ldr	r3, [pc, #472]	; (8000da0 <__aeabi_dadd+0x404>)
 8000bc6:	052d      	lsls	r5, r5, #20
 8000bc8:	4013      	ands	r3, r2
 8000bca:	432b      	orrs	r3, r5
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	07e4      	lsls	r4, r4, #31
 8000bd0:	085b      	lsrs	r3, r3, #1
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	bc1c      	pop	{r2, r3, r4}
 8000bd8:	4690      	mov	r8, r2
 8000bda:	4699      	mov	r9, r3
 8000bdc:	46a2      	mov	sl, r4
 8000bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be0:	003e      	movs	r6, r7
 8000be2:	4316      	orrs	r6, r2
 8000be4:	d012      	beq.n	8000c0c <__aeabi_dadd+0x270>
 8000be6:	1e5e      	subs	r6, r3, #1
 8000be8:	2e00      	cmp	r6, #0
 8000bea:	d000      	beq.n	8000bee <__aeabi_dadd+0x252>
 8000bec:	e100      	b.n	8000df0 <__aeabi_dadd+0x454>
 8000bee:	1887      	adds	r7, r0, r2
 8000bf0:	4287      	cmp	r7, r0
 8000bf2:	4180      	sbcs	r0, r0
 8000bf4:	4441      	add	r1, r8
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	1809      	adds	r1, r1, r0
 8000bfa:	2501      	movs	r5, #1
 8000bfc:	020b      	lsls	r3, r1, #8
 8000bfe:	d533      	bpl.n	8000c68 <__aeabi_dadd+0x2cc>
 8000c00:	2502      	movs	r5, #2
 8000c02:	e785      	b.n	8000b10 <__aeabi_dadd+0x174>
 8000c04:	4664      	mov	r4, ip
 8000c06:	0033      	movs	r3, r6
 8000c08:	4641      	mov	r1, r8
 8000c0a:	0010      	movs	r0, r2
 8000c0c:	001d      	movs	r5, r3
 8000c0e:	e7c7      	b.n	8000ba0 <__aeabi_dadd+0x204>
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d000      	beq.n	8000c16 <__aeabi_dadd+0x27a>
 8000c14:	e0da      	b.n	8000dcc <__aeabi_dadd+0x430>
 8000c16:	000c      	movs	r4, r1
 8000c18:	4304      	orrs	r4, r0
 8000c1a:	d0f3      	beq.n	8000c04 <__aeabi_dadd+0x268>
 8000c1c:	1c5c      	adds	r4, r3, #1
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x286>
 8000c20:	e19f      	b.n	8000f62 <__aeabi_dadd+0x5c6>
 8000c22:	4c5d      	ldr	r4, [pc, #372]	; (8000d98 <__aeabi_dadd+0x3fc>)
 8000c24:	42a6      	cmp	r6, r4
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dadd+0x28e>
 8000c28:	e12f      	b.n	8000e8a <__aeabi_dadd+0x4ee>
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	2b38      	cmp	r3, #56	; 0x38
 8000c2e:	dd00      	ble.n	8000c32 <__aeabi_dadd+0x296>
 8000c30:	e166      	b.n	8000f00 <__aeabi_dadd+0x564>
 8000c32:	2b1f      	cmp	r3, #31
 8000c34:	dd00      	ble.n	8000c38 <__aeabi_dadd+0x29c>
 8000c36:	e183      	b.n	8000f40 <__aeabi_dadd+0x5a4>
 8000c38:	2420      	movs	r4, #32
 8000c3a:	0005      	movs	r5, r0
 8000c3c:	1ae4      	subs	r4, r4, r3
 8000c3e:	000f      	movs	r7, r1
 8000c40:	40dd      	lsrs	r5, r3
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	40a0      	lsls	r0, r4
 8000c46:	4643      	mov	r3, r8
 8000c48:	40a7      	lsls	r7, r4
 8000c4a:	1a5b      	subs	r3, r3, r1
 8000c4c:	1e44      	subs	r4, r0, #1
 8000c4e:	41a0      	sbcs	r0, r4
 8000c50:	4698      	mov	r8, r3
 8000c52:	432f      	orrs	r7, r5
 8000c54:	4338      	orrs	r0, r7
 8000c56:	1a17      	subs	r7, r2, r0
 8000c58:	42ba      	cmp	r2, r7
 8000c5a:	4192      	sbcs	r2, r2
 8000c5c:	4643      	mov	r3, r8
 8000c5e:	4252      	negs	r2, r2
 8000c60:	1a99      	subs	r1, r3, r2
 8000c62:	4664      	mov	r4, ip
 8000c64:	0035      	movs	r5, r6
 8000c66:	e6ca      	b.n	80009fe <__aeabi_dadd+0x62>
 8000c68:	2207      	movs	r2, #7
 8000c6a:	403a      	ands	r2, r7
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_dadd+0x2d6>
 8000c70:	e6f6      	b.n	8000a60 <__aeabi_dadd+0xc4>
 8000c72:	074b      	lsls	r3, r1, #29
 8000c74:	08ca      	lsrs	r2, r1, #3
 8000c76:	4948      	ldr	r1, [pc, #288]	; (8000d98 <__aeabi_dadd+0x3fc>)
 8000c78:	08ff      	lsrs	r7, r7, #3
 8000c7a:	433b      	orrs	r3, r7
 8000c7c:	428d      	cmp	r5, r1
 8000c7e:	d196      	bne.n	8000bae <__aeabi_dadd+0x212>
 8000c80:	0019      	movs	r1, r3
 8000c82:	4311      	orrs	r1, r2
 8000c84:	d100      	bne.n	8000c88 <__aeabi_dadd+0x2ec>
 8000c86:	e19e      	b.n	8000fc6 <__aeabi_dadd+0x62a>
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0309      	lsls	r1, r1, #12
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	0312      	lsls	r2, r2, #12
 8000c90:	0b12      	lsrs	r2, r2, #12
 8000c92:	4d41      	ldr	r5, [pc, #260]	; (8000d98 <__aeabi_dadd+0x3fc>)
 8000c94:	e78f      	b.n	8000bb6 <__aeabi_dadd+0x21a>
 8000c96:	0015      	movs	r5, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e78b      	b.n	8000bb6 <__aeabi_dadd+0x21a>
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_dadd+0x308>
 8000ca2:	e0c7      	b.n	8000e34 <__aeabi_dadd+0x498>
 8000ca4:	1c6b      	adds	r3, r5, #1
 8000ca6:	055f      	lsls	r7, r3, #21
 8000ca8:	0d7f      	lsrs	r7, r7, #21
 8000caa:	2f01      	cmp	r7, #1
 8000cac:	dc00      	bgt.n	8000cb0 <__aeabi_dadd+0x314>
 8000cae:	e0f1      	b.n	8000e94 <__aeabi_dadd+0x4f8>
 8000cb0:	4d39      	ldr	r5, [pc, #228]	; (8000d98 <__aeabi_dadd+0x3fc>)
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_dadd+0x31c>
 8000cb6:	e0b9      	b.n	8000e2c <__aeabi_dadd+0x490>
 8000cb8:	1885      	adds	r5, r0, r2
 8000cba:	000a      	movs	r2, r1
 8000cbc:	4285      	cmp	r5, r0
 8000cbe:	4189      	sbcs	r1, r1
 8000cc0:	4442      	add	r2, r8
 8000cc2:	4249      	negs	r1, r1
 8000cc4:	1851      	adds	r1, r2, r1
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	07cf      	lsls	r7, r1, #31
 8000cca:	086d      	lsrs	r5, r5, #1
 8000ccc:	432f      	orrs	r7, r5
 8000cce:	0849      	lsrs	r1, r1, #1
 8000cd0:	403a      	ands	r2, r7
 8000cd2:	001d      	movs	r5, r3
 8000cd4:	e6c2      	b.n	8000a5c <__aeabi_dadd+0xc0>
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	4930      	ldr	r1, [pc, #192]	; (8000d9c <__aeabi_dadd+0x400>)
 8000cda:	1aed      	subs	r5, r5, r3
 8000cdc:	4031      	ands	r1, r6
 8000cde:	403a      	ands	r2, r7
 8000ce0:	e6bc      	b.n	8000a5c <__aeabi_dadd+0xc0>
 8000ce2:	003e      	movs	r6, r7
 8000ce4:	3828      	subs	r0, #40	; 0x28
 8000ce6:	4086      	lsls	r6, r0
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e69f      	b.n	8000a2c <__aeabi_dadd+0x90>
 8000cec:	0038      	movs	r0, r7
 8000cee:	f001 fc45 	bl	800257c <__clzsi2>
 8000cf2:	3020      	adds	r0, #32
 8000cf4:	e68e      	b.n	8000a14 <__aeabi_dadd+0x78>
 8000cf6:	4643      	mov	r3, r8
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	001f      	movs	r7, r3
 8000cfc:	1e7a      	subs	r2, r7, #1
 8000cfe:	4197      	sbcs	r7, r2
 8000d00:	1bc7      	subs	r7, r0, r7
 8000d02:	42b8      	cmp	r0, r7
 8000d04:	4180      	sbcs	r0, r0
 8000d06:	4240      	negs	r0, r0
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	e678      	b.n	80009fe <__aeabi_dadd+0x62>
 8000d0c:	000e      	movs	r6, r1
 8000d0e:	003b      	movs	r3, r7
 8000d10:	4306      	orrs	r6, r0
 8000d12:	4313      	orrs	r3, r2
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d161      	bne.n	8000ddc <__aeabi_dadd+0x440>
 8000d18:	2e00      	cmp	r6, #0
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x382>
 8000d1c:	e0f4      	b.n	8000f08 <__aeabi_dadd+0x56c>
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_dadd+0x388>
 8000d22:	e11b      	b.n	8000f5c <__aeabi_dadd+0x5c0>
 8000d24:	4664      	mov	r4, ip
 8000d26:	0039      	movs	r1, r7
 8000d28:	0010      	movs	r0, r2
 8000d2a:	e739      	b.n	8000ba0 <__aeabi_dadd+0x204>
 8000d2c:	4f1a      	ldr	r7, [pc, #104]	; (8000d98 <__aeabi_dadd+0x3fc>)
 8000d2e:	42bb      	cmp	r3, r7
 8000d30:	d07a      	beq.n	8000e28 <__aeabi_dadd+0x48c>
 8000d32:	0033      	movs	r3, r6
 8000d34:	e6ff      	b.n	8000b36 <__aeabi_dadd+0x19a>
 8000d36:	0030      	movs	r0, r6
 8000d38:	3d1f      	subs	r5, #31
 8000d3a:	40e8      	lsrs	r0, r5
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	d003      	beq.n	8000d48 <__aeabi_dadd+0x3ac>
 8000d40:	2140      	movs	r1, #64	; 0x40
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	409e      	lsls	r6, r3
 8000d46:	4337      	orrs	r7, r6
 8000d48:	1e7b      	subs	r3, r7, #1
 8000d4a:	419f      	sbcs	r7, r3
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	4307      	orrs	r7, r0
 8000d50:	403a      	ands	r2, r7
 8000d52:	2100      	movs	r1, #0
 8000d54:	2500      	movs	r5, #0
 8000d56:	e789      	b.n	8000c6c <__aeabi_dadd+0x2d0>
 8000d58:	1a17      	subs	r7, r2, r0
 8000d5a:	4643      	mov	r3, r8
 8000d5c:	42ba      	cmp	r2, r7
 8000d5e:	41b6      	sbcs	r6, r6
 8000d60:	1a59      	subs	r1, r3, r1
 8000d62:	4276      	negs	r6, r6
 8000d64:	1b8e      	subs	r6, r1, r6
 8000d66:	4664      	mov	r4, ip
 8000d68:	e64e      	b.n	8000a08 <__aeabi_dadd+0x6c>
 8000d6a:	2b1f      	cmp	r3, #31
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_dadd+0x3d4>
 8000d6e:	e0ad      	b.n	8000ecc <__aeabi_dadd+0x530>
 8000d70:	2620      	movs	r6, #32
 8000d72:	4647      	mov	r7, r8
 8000d74:	1af6      	subs	r6, r6, r3
 8000d76:	40b7      	lsls	r7, r6
 8000d78:	46b9      	mov	r9, r7
 8000d7a:	0017      	movs	r7, r2
 8000d7c:	46b2      	mov	sl, r6
 8000d7e:	40df      	lsrs	r7, r3
 8000d80:	464e      	mov	r6, r9
 8000d82:	433e      	orrs	r6, r7
 8000d84:	0037      	movs	r7, r6
 8000d86:	4656      	mov	r6, sl
 8000d88:	40b2      	lsls	r2, r6
 8000d8a:	1e56      	subs	r6, r2, #1
 8000d8c:	41b2      	sbcs	r2, r6
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	4642      	mov	r2, r8
 8000d92:	40da      	lsrs	r2, r3
 8000d94:	1889      	adds	r1, r1, r2
 8000d96:	e6ae      	b.n	8000af6 <__aeabi_dadd+0x15a>
 8000d98:	000007ff 	.word	0x000007ff
 8000d9c:	ff7fffff 	.word	0xff7fffff
 8000da0:	800fffff 	.word	0x800fffff
 8000da4:	2620      	movs	r6, #32
 8000da6:	4647      	mov	r7, r8
 8000da8:	1af6      	subs	r6, r6, r3
 8000daa:	40b7      	lsls	r7, r6
 8000dac:	46b9      	mov	r9, r7
 8000dae:	0017      	movs	r7, r2
 8000db0:	46b2      	mov	sl, r6
 8000db2:	40df      	lsrs	r7, r3
 8000db4:	464e      	mov	r6, r9
 8000db6:	433e      	orrs	r6, r7
 8000db8:	0037      	movs	r7, r6
 8000dba:	4656      	mov	r6, sl
 8000dbc:	40b2      	lsls	r2, r6
 8000dbe:	1e56      	subs	r6, r2, #1
 8000dc0:	41b2      	sbcs	r2, r6
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	4642      	mov	r2, r8
 8000dc6:	40da      	lsrs	r2, r3
 8000dc8:	1a89      	subs	r1, r1, r2
 8000dca:	e799      	b.n	8000d00 <__aeabi_dadd+0x364>
 8000dcc:	4c7f      	ldr	r4, [pc, #508]	; (8000fcc <__aeabi_dadd+0x630>)
 8000dce:	42a6      	cmp	r6, r4
 8000dd0:	d05b      	beq.n	8000e8a <__aeabi_dadd+0x4ee>
 8000dd2:	2480      	movs	r4, #128	; 0x80
 8000dd4:	0424      	lsls	r4, r4, #16
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	e727      	b.n	8000c2c <__aeabi_dadd+0x290>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d10c      	bne.n	8000dfa <__aeabi_dadd+0x45e>
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x44a>
 8000de4:	e0cb      	b.n	8000f7e <__aeabi_dadd+0x5e2>
 8000de6:	4664      	mov	r4, ip
 8000de8:	0039      	movs	r1, r7
 8000dea:	0010      	movs	r0, r2
 8000dec:	4d77      	ldr	r5, [pc, #476]	; (8000fcc <__aeabi_dadd+0x630>)
 8000dee:	e6d7      	b.n	8000ba0 <__aeabi_dadd+0x204>
 8000df0:	4f76      	ldr	r7, [pc, #472]	; (8000fcc <__aeabi_dadd+0x630>)
 8000df2:	42bb      	cmp	r3, r7
 8000df4:	d018      	beq.n	8000e28 <__aeabi_dadd+0x48c>
 8000df6:	0033      	movs	r3, r6
 8000df8:	e675      	b.n	8000ae6 <__aeabi_dadd+0x14a>
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d014      	beq.n	8000e28 <__aeabi_dadd+0x48c>
 8000dfe:	074b      	lsls	r3, r1, #29
 8000e00:	08c0      	lsrs	r0, r0, #3
 8000e02:	4318      	orrs	r0, r3
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	08c9      	lsrs	r1, r1, #3
 8000e08:	031b      	lsls	r3, r3, #12
 8000e0a:	4219      	tst	r1, r3
 8000e0c:	d007      	beq.n	8000e1e <__aeabi_dadd+0x482>
 8000e0e:	08fc      	lsrs	r4, r7, #3
 8000e10:	421c      	tst	r4, r3
 8000e12:	d104      	bne.n	8000e1e <__aeabi_dadd+0x482>
 8000e14:	0779      	lsls	r1, r7, #29
 8000e16:	08d0      	lsrs	r0, r2, #3
 8000e18:	4308      	orrs	r0, r1
 8000e1a:	46e1      	mov	r9, ip
 8000e1c:	0021      	movs	r1, r4
 8000e1e:	464c      	mov	r4, r9
 8000e20:	0f42      	lsrs	r2, r0, #29
 8000e22:	00c9      	lsls	r1, r1, #3
 8000e24:	4311      	orrs	r1, r2
 8000e26:	00c0      	lsls	r0, r0, #3
 8000e28:	4d68      	ldr	r5, [pc, #416]	; (8000fcc <__aeabi_dadd+0x630>)
 8000e2a:	e6b9      	b.n	8000ba0 <__aeabi_dadd+0x204>
 8000e2c:	001d      	movs	r5, r3
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2300      	movs	r3, #0
 8000e32:	e6c0      	b.n	8000bb6 <__aeabi_dadd+0x21a>
 8000e34:	2d00      	cmp	r5, #0
 8000e36:	d15b      	bne.n	8000ef0 <__aeabi_dadd+0x554>
 8000e38:	000d      	movs	r5, r1
 8000e3a:	4305      	orrs	r5, r0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_dadd+0x4a4>
 8000e3e:	e6e2      	b.n	8000c06 <__aeabi_dadd+0x26a>
 8000e40:	1c5d      	adds	r5, r3, #1
 8000e42:	d100      	bne.n	8000e46 <__aeabi_dadd+0x4aa>
 8000e44:	e0b0      	b.n	8000fa8 <__aeabi_dadd+0x60c>
 8000e46:	4d61      	ldr	r5, [pc, #388]	; (8000fcc <__aeabi_dadd+0x630>)
 8000e48:	42ae      	cmp	r6, r5
 8000e4a:	d01f      	beq.n	8000e8c <__aeabi_dadd+0x4f0>
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	2b38      	cmp	r3, #56	; 0x38
 8000e50:	dc71      	bgt.n	8000f36 <__aeabi_dadd+0x59a>
 8000e52:	2b1f      	cmp	r3, #31
 8000e54:	dd00      	ble.n	8000e58 <__aeabi_dadd+0x4bc>
 8000e56:	e096      	b.n	8000f86 <__aeabi_dadd+0x5ea>
 8000e58:	2520      	movs	r5, #32
 8000e5a:	000f      	movs	r7, r1
 8000e5c:	1aed      	subs	r5, r5, r3
 8000e5e:	40af      	lsls	r7, r5
 8000e60:	46b9      	mov	r9, r7
 8000e62:	0007      	movs	r7, r0
 8000e64:	46aa      	mov	sl, r5
 8000e66:	40df      	lsrs	r7, r3
 8000e68:	464d      	mov	r5, r9
 8000e6a:	433d      	orrs	r5, r7
 8000e6c:	002f      	movs	r7, r5
 8000e6e:	4655      	mov	r5, sl
 8000e70:	40a8      	lsls	r0, r5
 8000e72:	40d9      	lsrs	r1, r3
 8000e74:	1e45      	subs	r5, r0, #1
 8000e76:	41a8      	sbcs	r0, r5
 8000e78:	4488      	add	r8, r1
 8000e7a:	4307      	orrs	r7, r0
 8000e7c:	18bf      	adds	r7, r7, r2
 8000e7e:	4297      	cmp	r7, r2
 8000e80:	4192      	sbcs	r2, r2
 8000e82:	4251      	negs	r1, r2
 8000e84:	4441      	add	r1, r8
 8000e86:	0035      	movs	r5, r6
 8000e88:	e63a      	b.n	8000b00 <__aeabi_dadd+0x164>
 8000e8a:	4664      	mov	r4, ip
 8000e8c:	0035      	movs	r5, r6
 8000e8e:	4641      	mov	r1, r8
 8000e90:	0010      	movs	r0, r2
 8000e92:	e685      	b.n	8000ba0 <__aeabi_dadd+0x204>
 8000e94:	000b      	movs	r3, r1
 8000e96:	4303      	orrs	r3, r0
 8000e98:	2d00      	cmp	r5, #0
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_dadd+0x502>
 8000e9c:	e663      	b.n	8000b66 <__aeabi_dadd+0x1ca>
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f5      	beq.n	8000e8e <__aeabi_dadd+0x4f2>
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_dadd+0x50e>
 8000ea8:	e67a      	b.n	8000ba0 <__aeabi_dadd+0x204>
 8000eaa:	1887      	adds	r7, r0, r2
 8000eac:	4287      	cmp	r7, r0
 8000eae:	4180      	sbcs	r0, r0
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	4441      	add	r1, r8
 8000eb4:	4240      	negs	r0, r0
 8000eb6:	1809      	adds	r1, r1, r0
 8000eb8:	403a      	ands	r2, r7
 8000eba:	020b      	lsls	r3, r1, #8
 8000ebc:	d400      	bmi.n	8000ec0 <__aeabi_dadd+0x524>
 8000ebe:	e6d5      	b.n	8000c6c <__aeabi_dadd+0x2d0>
 8000ec0:	4b43      	ldr	r3, [pc, #268]	; (8000fd0 <__aeabi_dadd+0x634>)
 8000ec2:	3501      	adds	r5, #1
 8000ec4:	4019      	ands	r1, r3
 8000ec6:	e5c9      	b.n	8000a5c <__aeabi_dadd+0xc0>
 8000ec8:	0038      	movs	r0, r7
 8000eca:	e669      	b.n	8000ba0 <__aeabi_dadd+0x204>
 8000ecc:	001e      	movs	r6, r3
 8000ece:	4647      	mov	r7, r8
 8000ed0:	3e20      	subs	r6, #32
 8000ed2:	40f7      	lsrs	r7, r6
 8000ed4:	46bc      	mov	ip, r7
 8000ed6:	2b20      	cmp	r3, #32
 8000ed8:	d004      	beq.n	8000ee4 <__aeabi_dadd+0x548>
 8000eda:	2640      	movs	r6, #64	; 0x40
 8000edc:	1af3      	subs	r3, r6, r3
 8000ede:	4646      	mov	r6, r8
 8000ee0:	409e      	lsls	r6, r3
 8000ee2:	4332      	orrs	r2, r6
 8000ee4:	0017      	movs	r7, r2
 8000ee6:	4663      	mov	r3, ip
 8000ee8:	1e7a      	subs	r2, r7, #1
 8000eea:	4197      	sbcs	r7, r2
 8000eec:	431f      	orrs	r7, r3
 8000eee:	e602      	b.n	8000af6 <__aeabi_dadd+0x15a>
 8000ef0:	4d36      	ldr	r5, [pc, #216]	; (8000fcc <__aeabi_dadd+0x630>)
 8000ef2:	42ae      	cmp	r6, r5
 8000ef4:	d0ca      	beq.n	8000e8c <__aeabi_dadd+0x4f0>
 8000ef6:	2580      	movs	r5, #128	; 0x80
 8000ef8:	042d      	lsls	r5, r5, #16
 8000efa:	425b      	negs	r3, r3
 8000efc:	4329      	orrs	r1, r5
 8000efe:	e7a6      	b.n	8000e4e <__aeabi_dadd+0x4b2>
 8000f00:	4308      	orrs	r0, r1
 8000f02:	1e41      	subs	r1, r0, #1
 8000f04:	4188      	sbcs	r0, r1
 8000f06:	e6a6      	b.n	8000c56 <__aeabi_dadd+0x2ba>
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_dadd+0x572>
 8000f0c:	e648      	b.n	8000ba0 <__aeabi_dadd+0x204>
 8000f0e:	1a87      	subs	r7, r0, r2
 8000f10:	4643      	mov	r3, r8
 8000f12:	42b8      	cmp	r0, r7
 8000f14:	41b6      	sbcs	r6, r6
 8000f16:	1acb      	subs	r3, r1, r3
 8000f18:	4276      	negs	r6, r6
 8000f1a:	1b9e      	subs	r6, r3, r6
 8000f1c:	0233      	lsls	r3, r6, #8
 8000f1e:	d54b      	bpl.n	8000fb8 <__aeabi_dadd+0x61c>
 8000f20:	1a17      	subs	r7, r2, r0
 8000f22:	4643      	mov	r3, r8
 8000f24:	42ba      	cmp	r2, r7
 8000f26:	4192      	sbcs	r2, r2
 8000f28:	1a59      	subs	r1, r3, r1
 8000f2a:	4252      	negs	r2, r2
 8000f2c:	1a89      	subs	r1, r1, r2
 8000f2e:	2207      	movs	r2, #7
 8000f30:	4664      	mov	r4, ip
 8000f32:	403a      	ands	r2, r7
 8000f34:	e592      	b.n	8000a5c <__aeabi_dadd+0xc0>
 8000f36:	4301      	orrs	r1, r0
 8000f38:	000f      	movs	r7, r1
 8000f3a:	1e79      	subs	r1, r7, #1
 8000f3c:	418f      	sbcs	r7, r1
 8000f3e:	e79d      	b.n	8000e7c <__aeabi_dadd+0x4e0>
 8000f40:	001c      	movs	r4, r3
 8000f42:	000f      	movs	r7, r1
 8000f44:	3c20      	subs	r4, #32
 8000f46:	40e7      	lsrs	r7, r4
 8000f48:	2b20      	cmp	r3, #32
 8000f4a:	d003      	beq.n	8000f54 <__aeabi_dadd+0x5b8>
 8000f4c:	2440      	movs	r4, #64	; 0x40
 8000f4e:	1ae3      	subs	r3, r4, r3
 8000f50:	4099      	lsls	r1, r3
 8000f52:	4308      	orrs	r0, r1
 8000f54:	1e41      	subs	r1, r0, #1
 8000f56:	4188      	sbcs	r0, r1
 8000f58:	4338      	orrs	r0, r7
 8000f5a:	e67c      	b.n	8000c56 <__aeabi_dadd+0x2ba>
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2400      	movs	r4, #0
 8000f60:	e625      	b.n	8000bae <__aeabi_dadd+0x212>
 8000f62:	1a17      	subs	r7, r2, r0
 8000f64:	4643      	mov	r3, r8
 8000f66:	42ba      	cmp	r2, r7
 8000f68:	4192      	sbcs	r2, r2
 8000f6a:	1a59      	subs	r1, r3, r1
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	1a89      	subs	r1, r1, r2
 8000f70:	4664      	mov	r4, ip
 8000f72:	0035      	movs	r5, r6
 8000f74:	e543      	b.n	80009fe <__aeabi_dadd+0x62>
 8000f76:	4641      	mov	r1, r8
 8000f78:	0010      	movs	r0, r2
 8000f7a:	4d14      	ldr	r5, [pc, #80]	; (8000fcc <__aeabi_dadd+0x630>)
 8000f7c:	e610      	b.n	8000ba0 <__aeabi_dadd+0x204>
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	2400      	movs	r4, #0
 8000f82:	0312      	lsls	r2, r2, #12
 8000f84:	e680      	b.n	8000c88 <__aeabi_dadd+0x2ec>
 8000f86:	001d      	movs	r5, r3
 8000f88:	000f      	movs	r7, r1
 8000f8a:	3d20      	subs	r5, #32
 8000f8c:	40ef      	lsrs	r7, r5
 8000f8e:	46bc      	mov	ip, r7
 8000f90:	2b20      	cmp	r3, #32
 8000f92:	d003      	beq.n	8000f9c <__aeabi_dadd+0x600>
 8000f94:	2540      	movs	r5, #64	; 0x40
 8000f96:	1aeb      	subs	r3, r5, r3
 8000f98:	4099      	lsls	r1, r3
 8000f9a:	4308      	orrs	r0, r1
 8000f9c:	0007      	movs	r7, r0
 8000f9e:	4663      	mov	r3, ip
 8000fa0:	1e78      	subs	r0, r7, #1
 8000fa2:	4187      	sbcs	r7, r0
 8000fa4:	431f      	orrs	r7, r3
 8000fa6:	e769      	b.n	8000e7c <__aeabi_dadd+0x4e0>
 8000fa8:	1887      	adds	r7, r0, r2
 8000faa:	4297      	cmp	r7, r2
 8000fac:	419b      	sbcs	r3, r3
 8000fae:	4441      	add	r1, r8
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	18c9      	adds	r1, r1, r3
 8000fb4:	0035      	movs	r5, r6
 8000fb6:	e5a3      	b.n	8000b00 <__aeabi_dadd+0x164>
 8000fb8:	003b      	movs	r3, r7
 8000fba:	4333      	orrs	r3, r6
 8000fbc:	d0ce      	beq.n	8000f5c <__aeabi_dadd+0x5c0>
 8000fbe:	2207      	movs	r2, #7
 8000fc0:	0031      	movs	r1, r6
 8000fc2:	403a      	ands	r2, r7
 8000fc4:	e652      	b.n	8000c6c <__aeabi_dadd+0x2d0>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	001a      	movs	r2, r3
 8000fca:	e5f4      	b.n	8000bb6 <__aeabi_dadd+0x21a>
 8000fcc:	000007ff 	.word	0x000007ff
 8000fd0:	ff7fffff 	.word	0xff7fffff

08000fd4 <__aeabi_ddiv>:
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	4657      	mov	r7, sl
 8000fd8:	46de      	mov	lr, fp
 8000fda:	464e      	mov	r6, r9
 8000fdc:	4645      	mov	r5, r8
 8000fde:	b5e0      	push	{r5, r6, r7, lr}
 8000fe0:	4683      	mov	fp, r0
 8000fe2:	0007      	movs	r7, r0
 8000fe4:	030e      	lsls	r6, r1, #12
 8000fe6:	0048      	lsls	r0, r1, #1
 8000fe8:	b085      	sub	sp, #20
 8000fea:	4692      	mov	sl, r2
 8000fec:	001c      	movs	r4, r3
 8000fee:	0b36      	lsrs	r6, r6, #12
 8000ff0:	0d40      	lsrs	r0, r0, #21
 8000ff2:	0fcd      	lsrs	r5, r1, #31
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x26>
 8000ff8:	e09d      	b.n	8001136 <__aeabi_ddiv+0x162>
 8000ffa:	4b95      	ldr	r3, [pc, #596]	; (8001250 <__aeabi_ddiv+0x27c>)
 8000ffc:	4298      	cmp	r0, r3
 8000ffe:	d039      	beq.n	8001074 <__aeabi_ddiv+0xa0>
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	00f6      	lsls	r6, r6, #3
 8001004:	041b      	lsls	r3, r3, #16
 8001006:	431e      	orrs	r6, r3
 8001008:	4a92      	ldr	r2, [pc, #584]	; (8001254 <__aeabi_ddiv+0x280>)
 800100a:	0f7b      	lsrs	r3, r7, #29
 800100c:	4333      	orrs	r3, r6
 800100e:	4699      	mov	r9, r3
 8001010:	4694      	mov	ip, r2
 8001012:	0003      	movs	r3, r0
 8001014:	4463      	add	r3, ip
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	2600      	movs	r6, #0
 800101c:	00ff      	lsls	r7, r7, #3
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	0323      	lsls	r3, r4, #12
 8001022:	0b1b      	lsrs	r3, r3, #12
 8001024:	4698      	mov	r8, r3
 8001026:	0063      	lsls	r3, r4, #1
 8001028:	0fe4      	lsrs	r4, r4, #31
 800102a:	4652      	mov	r2, sl
 800102c:	0d5b      	lsrs	r3, r3, #21
 800102e:	9401      	str	r4, [sp, #4]
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x60>
 8001032:	e0b3      	b.n	800119c <__aeabi_ddiv+0x1c8>
 8001034:	4986      	ldr	r1, [pc, #536]	; (8001250 <__aeabi_ddiv+0x27c>)
 8001036:	428b      	cmp	r3, r1
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x68>
 800103a:	e09e      	b.n	800117a <__aeabi_ddiv+0x1a6>
 800103c:	4642      	mov	r2, r8
 800103e:	00d1      	lsls	r1, r2, #3
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	0412      	lsls	r2, r2, #16
 8001044:	430a      	orrs	r2, r1
 8001046:	4651      	mov	r1, sl
 8001048:	0f49      	lsrs	r1, r1, #29
 800104a:	4311      	orrs	r1, r2
 800104c:	468b      	mov	fp, r1
 800104e:	4981      	ldr	r1, [pc, #516]	; (8001254 <__aeabi_ddiv+0x280>)
 8001050:	4652      	mov	r2, sl
 8001052:	468c      	mov	ip, r1
 8001054:	9900      	ldr	r1, [sp, #0]
 8001056:	4463      	add	r3, ip
 8001058:	1acb      	subs	r3, r1, r3
 800105a:	2100      	movs	r1, #0
 800105c:	00d2      	lsls	r2, r2, #3
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	002b      	movs	r3, r5
 8001062:	4063      	eors	r3, r4
 8001064:	469a      	mov	sl, r3
 8001066:	2e0f      	cmp	r6, #15
 8001068:	d900      	bls.n	800106c <__aeabi_ddiv+0x98>
 800106a:	e105      	b.n	8001278 <__aeabi_ddiv+0x2a4>
 800106c:	4b7a      	ldr	r3, [pc, #488]	; (8001258 <__aeabi_ddiv+0x284>)
 800106e:	00b6      	lsls	r6, r6, #2
 8001070:	599b      	ldr	r3, [r3, r6]
 8001072:	469f      	mov	pc, r3
 8001074:	465b      	mov	r3, fp
 8001076:	4333      	orrs	r3, r6
 8001078:	4699      	mov	r9, r3
 800107a:	d000      	beq.n	800107e <__aeabi_ddiv+0xaa>
 800107c:	e0b8      	b.n	80011f0 <__aeabi_ddiv+0x21c>
 800107e:	2302      	movs	r3, #2
 8001080:	2608      	movs	r6, #8
 8001082:	2700      	movs	r7, #0
 8001084:	9000      	str	r0, [sp, #0]
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	e7ca      	b.n	8001020 <__aeabi_ddiv+0x4c>
 800108a:	46cb      	mov	fp, r9
 800108c:	003a      	movs	r2, r7
 800108e:	9902      	ldr	r1, [sp, #8]
 8001090:	9501      	str	r5, [sp, #4]
 8001092:	9b01      	ldr	r3, [sp, #4]
 8001094:	469a      	mov	sl, r3
 8001096:	2902      	cmp	r1, #2
 8001098:	d027      	beq.n	80010ea <__aeabi_ddiv+0x116>
 800109a:	2903      	cmp	r1, #3
 800109c:	d100      	bne.n	80010a0 <__aeabi_ddiv+0xcc>
 800109e:	e280      	b.n	80015a2 <__aeabi_ddiv+0x5ce>
 80010a0:	2901      	cmp	r1, #1
 80010a2:	d044      	beq.n	800112e <__aeabi_ddiv+0x15a>
 80010a4:	496d      	ldr	r1, [pc, #436]	; (800125c <__aeabi_ddiv+0x288>)
 80010a6:	9b00      	ldr	r3, [sp, #0]
 80010a8:	468c      	mov	ip, r1
 80010aa:	4463      	add	r3, ip
 80010ac:	001c      	movs	r4, r3
 80010ae:	2c00      	cmp	r4, #0
 80010b0:	dd38      	ble.n	8001124 <__aeabi_ddiv+0x150>
 80010b2:	0753      	lsls	r3, r2, #29
 80010b4:	d000      	beq.n	80010b8 <__aeabi_ddiv+0xe4>
 80010b6:	e213      	b.n	80014e0 <__aeabi_ddiv+0x50c>
 80010b8:	08d2      	lsrs	r2, r2, #3
 80010ba:	465b      	mov	r3, fp
 80010bc:	01db      	lsls	r3, r3, #7
 80010be:	d509      	bpl.n	80010d4 <__aeabi_ddiv+0x100>
 80010c0:	4659      	mov	r1, fp
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <__aeabi_ddiv+0x28c>)
 80010c4:	4019      	ands	r1, r3
 80010c6:	468b      	mov	fp, r1
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	00c9      	lsls	r1, r1, #3
 80010cc:	468c      	mov	ip, r1
 80010ce:	9b00      	ldr	r3, [sp, #0]
 80010d0:	4463      	add	r3, ip
 80010d2:	001c      	movs	r4, r3
 80010d4:	4b63      	ldr	r3, [pc, #396]	; (8001264 <__aeabi_ddiv+0x290>)
 80010d6:	429c      	cmp	r4, r3
 80010d8:	dc07      	bgt.n	80010ea <__aeabi_ddiv+0x116>
 80010da:	465b      	mov	r3, fp
 80010dc:	0564      	lsls	r4, r4, #21
 80010de:	075f      	lsls	r7, r3, #29
 80010e0:	025b      	lsls	r3, r3, #9
 80010e2:	4317      	orrs	r7, r2
 80010e4:	0b1b      	lsrs	r3, r3, #12
 80010e6:	0d62      	lsrs	r2, r4, #21
 80010e8:	e002      	b.n	80010f0 <__aeabi_ddiv+0x11c>
 80010ea:	2300      	movs	r3, #0
 80010ec:	2700      	movs	r7, #0
 80010ee:	4a58      	ldr	r2, [pc, #352]	; (8001250 <__aeabi_ddiv+0x27c>)
 80010f0:	2100      	movs	r1, #0
 80010f2:	031b      	lsls	r3, r3, #12
 80010f4:	0b1c      	lsrs	r4, r3, #12
 80010f6:	0d0b      	lsrs	r3, r1, #20
 80010f8:	051b      	lsls	r3, r3, #20
 80010fa:	4323      	orrs	r3, r4
 80010fc:	0514      	lsls	r4, r2, #20
 80010fe:	4a5a      	ldr	r2, [pc, #360]	; (8001268 <__aeabi_ddiv+0x294>)
 8001100:	0038      	movs	r0, r7
 8001102:	4013      	ands	r3, r2
 8001104:	431c      	orrs	r4, r3
 8001106:	4653      	mov	r3, sl
 8001108:	0064      	lsls	r4, r4, #1
 800110a:	07db      	lsls	r3, r3, #31
 800110c:	0864      	lsrs	r4, r4, #1
 800110e:	431c      	orrs	r4, r3
 8001110:	0021      	movs	r1, r4
 8001112:	b005      	add	sp, #20
 8001114:	bc3c      	pop	{r2, r3, r4, r5}
 8001116:	4690      	mov	r8, r2
 8001118:	4699      	mov	r9, r3
 800111a:	46a2      	mov	sl, r4
 800111c:	46ab      	mov	fp, r5
 800111e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001120:	2201      	movs	r2, #1
 8001122:	4252      	negs	r2, r2
 8001124:	2301      	movs	r3, #1
 8001126:	1b1b      	subs	r3, r3, r4
 8001128:	2b38      	cmp	r3, #56	; 0x38
 800112a:	dc00      	bgt.n	800112e <__aeabi_ddiv+0x15a>
 800112c:	e1ad      	b.n	800148a <__aeabi_ddiv+0x4b6>
 800112e:	2200      	movs	r2, #0
 8001130:	2300      	movs	r3, #0
 8001132:	2700      	movs	r7, #0
 8001134:	e7dc      	b.n	80010f0 <__aeabi_ddiv+0x11c>
 8001136:	465b      	mov	r3, fp
 8001138:	4333      	orrs	r3, r6
 800113a:	4699      	mov	r9, r3
 800113c:	d05e      	beq.n	80011fc <__aeabi_ddiv+0x228>
 800113e:	2e00      	cmp	r6, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_ddiv+0x170>
 8001142:	e18a      	b.n	800145a <__aeabi_ddiv+0x486>
 8001144:	0030      	movs	r0, r6
 8001146:	f001 fa19 	bl	800257c <__clzsi2>
 800114a:	0003      	movs	r3, r0
 800114c:	3b0b      	subs	r3, #11
 800114e:	2b1c      	cmp	r3, #28
 8001150:	dd00      	ble.n	8001154 <__aeabi_ddiv+0x180>
 8001152:	e17b      	b.n	800144c <__aeabi_ddiv+0x478>
 8001154:	221d      	movs	r2, #29
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	465a      	mov	r2, fp
 800115a:	0001      	movs	r1, r0
 800115c:	40da      	lsrs	r2, r3
 800115e:	3908      	subs	r1, #8
 8001160:	408e      	lsls	r6, r1
 8001162:	0013      	movs	r3, r2
 8001164:	465f      	mov	r7, fp
 8001166:	4333      	orrs	r3, r6
 8001168:	4699      	mov	r9, r3
 800116a:	408f      	lsls	r7, r1
 800116c:	4b3f      	ldr	r3, [pc, #252]	; (800126c <__aeabi_ddiv+0x298>)
 800116e:	2600      	movs	r6, #0
 8001170:	1a1b      	subs	r3, r3, r0
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2300      	movs	r3, #0
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	e752      	b.n	8001020 <__aeabi_ddiv+0x4c>
 800117a:	4641      	mov	r1, r8
 800117c:	4653      	mov	r3, sl
 800117e:	430b      	orrs	r3, r1
 8001180:	493b      	ldr	r1, [pc, #236]	; (8001270 <__aeabi_ddiv+0x29c>)
 8001182:	469b      	mov	fp, r3
 8001184:	468c      	mov	ip, r1
 8001186:	9b00      	ldr	r3, [sp, #0]
 8001188:	4463      	add	r3, ip
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	465b      	mov	r3, fp
 800118e:	2b00      	cmp	r3, #0
 8001190:	d13b      	bne.n	800120a <__aeabi_ddiv+0x236>
 8001192:	2302      	movs	r3, #2
 8001194:	2200      	movs	r2, #0
 8001196:	431e      	orrs	r6, r3
 8001198:	2102      	movs	r1, #2
 800119a:	e761      	b.n	8001060 <__aeabi_ddiv+0x8c>
 800119c:	4643      	mov	r3, r8
 800119e:	4313      	orrs	r3, r2
 80011a0:	469b      	mov	fp, r3
 80011a2:	d037      	beq.n	8001214 <__aeabi_ddiv+0x240>
 80011a4:	4643      	mov	r3, r8
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d100      	bne.n	80011ac <__aeabi_ddiv+0x1d8>
 80011aa:	e162      	b.n	8001472 <__aeabi_ddiv+0x49e>
 80011ac:	4640      	mov	r0, r8
 80011ae:	f001 f9e5 	bl	800257c <__clzsi2>
 80011b2:	0003      	movs	r3, r0
 80011b4:	3b0b      	subs	r3, #11
 80011b6:	2b1c      	cmp	r3, #28
 80011b8:	dd00      	ble.n	80011bc <__aeabi_ddiv+0x1e8>
 80011ba:	e153      	b.n	8001464 <__aeabi_ddiv+0x490>
 80011bc:	0002      	movs	r2, r0
 80011be:	4641      	mov	r1, r8
 80011c0:	3a08      	subs	r2, #8
 80011c2:	4091      	lsls	r1, r2
 80011c4:	4688      	mov	r8, r1
 80011c6:	211d      	movs	r1, #29
 80011c8:	1acb      	subs	r3, r1, r3
 80011ca:	4651      	mov	r1, sl
 80011cc:	40d9      	lsrs	r1, r3
 80011ce:	000b      	movs	r3, r1
 80011d0:	4641      	mov	r1, r8
 80011d2:	430b      	orrs	r3, r1
 80011d4:	469b      	mov	fp, r3
 80011d6:	4653      	mov	r3, sl
 80011d8:	4093      	lsls	r3, r2
 80011da:	001a      	movs	r2, r3
 80011dc:	9b00      	ldr	r3, [sp, #0]
 80011de:	4925      	ldr	r1, [pc, #148]	; (8001274 <__aeabi_ddiv+0x2a0>)
 80011e0:	469c      	mov	ip, r3
 80011e2:	4460      	add	r0, ip
 80011e4:	0003      	movs	r3, r0
 80011e6:	468c      	mov	ip, r1
 80011e8:	4463      	add	r3, ip
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2100      	movs	r1, #0
 80011ee:	e737      	b.n	8001060 <__aeabi_ddiv+0x8c>
 80011f0:	2303      	movs	r3, #3
 80011f2:	46b1      	mov	r9, r6
 80011f4:	9000      	str	r0, [sp, #0]
 80011f6:	260c      	movs	r6, #12
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	e711      	b.n	8001020 <__aeabi_ddiv+0x4c>
 80011fc:	2300      	movs	r3, #0
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	2604      	movs	r6, #4
 8001204:	2700      	movs	r7, #0
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	e70a      	b.n	8001020 <__aeabi_ddiv+0x4c>
 800120a:	2303      	movs	r3, #3
 800120c:	46c3      	mov	fp, r8
 800120e:	431e      	orrs	r6, r3
 8001210:	2103      	movs	r1, #3
 8001212:	e725      	b.n	8001060 <__aeabi_ddiv+0x8c>
 8001214:	3301      	adds	r3, #1
 8001216:	431e      	orrs	r6, r3
 8001218:	2200      	movs	r2, #0
 800121a:	2101      	movs	r1, #1
 800121c:	e720      	b.n	8001060 <__aeabi_ddiv+0x8c>
 800121e:	2300      	movs	r3, #0
 8001220:	469a      	mov	sl, r3
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	2700      	movs	r7, #0
 8001226:	031b      	lsls	r3, r3, #12
 8001228:	4a09      	ldr	r2, [pc, #36]	; (8001250 <__aeabi_ddiv+0x27c>)
 800122a:	e761      	b.n	80010f0 <__aeabi_ddiv+0x11c>
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	4649      	mov	r1, r9
 8001230:	031b      	lsls	r3, r3, #12
 8001232:	4219      	tst	r1, r3
 8001234:	d100      	bne.n	8001238 <__aeabi_ddiv+0x264>
 8001236:	e0e2      	b.n	80013fe <__aeabi_ddiv+0x42a>
 8001238:	4659      	mov	r1, fp
 800123a:	4219      	tst	r1, r3
 800123c:	d000      	beq.n	8001240 <__aeabi_ddiv+0x26c>
 800123e:	e0de      	b.n	80013fe <__aeabi_ddiv+0x42a>
 8001240:	430b      	orrs	r3, r1
 8001242:	031b      	lsls	r3, r3, #12
 8001244:	0017      	movs	r7, r2
 8001246:	0b1b      	lsrs	r3, r3, #12
 8001248:	46a2      	mov	sl, r4
 800124a:	4a01      	ldr	r2, [pc, #4]	; (8001250 <__aeabi_ddiv+0x27c>)
 800124c:	e750      	b.n	80010f0 <__aeabi_ddiv+0x11c>
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	000007ff 	.word	0x000007ff
 8001254:	fffffc01 	.word	0xfffffc01
 8001258:	0800b174 	.word	0x0800b174
 800125c:	000003ff 	.word	0x000003ff
 8001260:	feffffff 	.word	0xfeffffff
 8001264:	000007fe 	.word	0x000007fe
 8001268:	800fffff 	.word	0x800fffff
 800126c:	fffffc0d 	.word	0xfffffc0d
 8001270:	fffff801 	.word	0xfffff801
 8001274:	000003f3 	.word	0x000003f3
 8001278:	45d9      	cmp	r9, fp
 800127a:	d900      	bls.n	800127e <__aeabi_ddiv+0x2aa>
 800127c:	e0cb      	b.n	8001416 <__aeabi_ddiv+0x442>
 800127e:	d100      	bne.n	8001282 <__aeabi_ddiv+0x2ae>
 8001280:	e0c6      	b.n	8001410 <__aeabi_ddiv+0x43c>
 8001282:	003c      	movs	r4, r7
 8001284:	4648      	mov	r0, r9
 8001286:	2700      	movs	r7, #0
 8001288:	9b00      	ldr	r3, [sp, #0]
 800128a:	3b01      	subs	r3, #1
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	465b      	mov	r3, fp
 8001290:	0e16      	lsrs	r6, r2, #24
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	431e      	orrs	r6, r3
 8001296:	0213      	lsls	r3, r2, #8
 8001298:	4698      	mov	r8, r3
 800129a:	0433      	lsls	r3, r6, #16
 800129c:	0c1b      	lsrs	r3, r3, #16
 800129e:	4699      	mov	r9, r3
 80012a0:	0c31      	lsrs	r1, r6, #16
 80012a2:	9101      	str	r1, [sp, #4]
 80012a4:	f7fe ffc8 	bl	8000238 <__aeabi_uidivmod>
 80012a8:	464a      	mov	r2, r9
 80012aa:	4342      	muls	r2, r0
 80012ac:	040b      	lsls	r3, r1, #16
 80012ae:	0c21      	lsrs	r1, r4, #16
 80012b0:	0005      	movs	r5, r0
 80012b2:	4319      	orrs	r1, r3
 80012b4:	428a      	cmp	r2, r1
 80012b6:	d907      	bls.n	80012c8 <__aeabi_ddiv+0x2f4>
 80012b8:	1989      	adds	r1, r1, r6
 80012ba:	3d01      	subs	r5, #1
 80012bc:	428e      	cmp	r6, r1
 80012be:	d803      	bhi.n	80012c8 <__aeabi_ddiv+0x2f4>
 80012c0:	428a      	cmp	r2, r1
 80012c2:	d901      	bls.n	80012c8 <__aeabi_ddiv+0x2f4>
 80012c4:	1e85      	subs	r5, r0, #2
 80012c6:	1989      	adds	r1, r1, r6
 80012c8:	1a88      	subs	r0, r1, r2
 80012ca:	9901      	ldr	r1, [sp, #4]
 80012cc:	f7fe ffb4 	bl	8000238 <__aeabi_uidivmod>
 80012d0:	0409      	lsls	r1, r1, #16
 80012d2:	468c      	mov	ip, r1
 80012d4:	464a      	mov	r2, r9
 80012d6:	0421      	lsls	r1, r4, #16
 80012d8:	4664      	mov	r4, ip
 80012da:	4342      	muls	r2, r0
 80012dc:	0c09      	lsrs	r1, r1, #16
 80012de:	0003      	movs	r3, r0
 80012e0:	4321      	orrs	r1, r4
 80012e2:	428a      	cmp	r2, r1
 80012e4:	d904      	bls.n	80012f0 <__aeabi_ddiv+0x31c>
 80012e6:	1989      	adds	r1, r1, r6
 80012e8:	3b01      	subs	r3, #1
 80012ea:	428e      	cmp	r6, r1
 80012ec:	d800      	bhi.n	80012f0 <__aeabi_ddiv+0x31c>
 80012ee:	e0f1      	b.n	80014d4 <__aeabi_ddiv+0x500>
 80012f0:	042d      	lsls	r5, r5, #16
 80012f2:	431d      	orrs	r5, r3
 80012f4:	46ab      	mov	fp, r5
 80012f6:	4643      	mov	r3, r8
 80012f8:	1a89      	subs	r1, r1, r2
 80012fa:	4642      	mov	r2, r8
 80012fc:	0c28      	lsrs	r0, r5, #16
 80012fe:	0412      	lsls	r2, r2, #16
 8001300:	0c1d      	lsrs	r5, r3, #16
 8001302:	465b      	mov	r3, fp
 8001304:	0c14      	lsrs	r4, r2, #16
 8001306:	0022      	movs	r2, r4
 8001308:	041b      	lsls	r3, r3, #16
 800130a:	0c1b      	lsrs	r3, r3, #16
 800130c:	435a      	muls	r2, r3
 800130e:	9403      	str	r4, [sp, #12]
 8001310:	436b      	muls	r3, r5
 8001312:	4344      	muls	r4, r0
 8001314:	9502      	str	r5, [sp, #8]
 8001316:	4368      	muls	r0, r5
 8001318:	191b      	adds	r3, r3, r4
 800131a:	0c15      	lsrs	r5, r2, #16
 800131c:	18eb      	adds	r3, r5, r3
 800131e:	429c      	cmp	r4, r3
 8001320:	d903      	bls.n	800132a <__aeabi_ddiv+0x356>
 8001322:	2480      	movs	r4, #128	; 0x80
 8001324:	0264      	lsls	r4, r4, #9
 8001326:	46a4      	mov	ip, r4
 8001328:	4460      	add	r0, ip
 800132a:	0c1c      	lsrs	r4, r3, #16
 800132c:	0415      	lsls	r5, r2, #16
 800132e:	041b      	lsls	r3, r3, #16
 8001330:	0c2d      	lsrs	r5, r5, #16
 8001332:	1820      	adds	r0, r4, r0
 8001334:	195d      	adds	r5, r3, r5
 8001336:	4281      	cmp	r1, r0
 8001338:	d377      	bcc.n	800142a <__aeabi_ddiv+0x456>
 800133a:	d073      	beq.n	8001424 <__aeabi_ddiv+0x450>
 800133c:	1a0c      	subs	r4, r1, r0
 800133e:	4aa2      	ldr	r2, [pc, #648]	; (80015c8 <__aeabi_ddiv+0x5f4>)
 8001340:	1b7d      	subs	r5, r7, r5
 8001342:	42af      	cmp	r7, r5
 8001344:	41bf      	sbcs	r7, r7
 8001346:	4694      	mov	ip, r2
 8001348:	9b00      	ldr	r3, [sp, #0]
 800134a:	427f      	negs	r7, r7
 800134c:	4463      	add	r3, ip
 800134e:	1be0      	subs	r0, r4, r7
 8001350:	001c      	movs	r4, r3
 8001352:	4286      	cmp	r6, r0
 8001354:	d100      	bne.n	8001358 <__aeabi_ddiv+0x384>
 8001356:	e0db      	b.n	8001510 <__aeabi_ddiv+0x53c>
 8001358:	9901      	ldr	r1, [sp, #4]
 800135a:	f7fe ff6d 	bl	8000238 <__aeabi_uidivmod>
 800135e:	464a      	mov	r2, r9
 8001360:	4342      	muls	r2, r0
 8001362:	040b      	lsls	r3, r1, #16
 8001364:	0c29      	lsrs	r1, r5, #16
 8001366:	0007      	movs	r7, r0
 8001368:	4319      	orrs	r1, r3
 800136a:	428a      	cmp	r2, r1
 800136c:	d907      	bls.n	800137e <__aeabi_ddiv+0x3aa>
 800136e:	1989      	adds	r1, r1, r6
 8001370:	3f01      	subs	r7, #1
 8001372:	428e      	cmp	r6, r1
 8001374:	d803      	bhi.n	800137e <__aeabi_ddiv+0x3aa>
 8001376:	428a      	cmp	r2, r1
 8001378:	d901      	bls.n	800137e <__aeabi_ddiv+0x3aa>
 800137a:	1e87      	subs	r7, r0, #2
 800137c:	1989      	adds	r1, r1, r6
 800137e:	1a88      	subs	r0, r1, r2
 8001380:	9901      	ldr	r1, [sp, #4]
 8001382:	f7fe ff59 	bl	8000238 <__aeabi_uidivmod>
 8001386:	0409      	lsls	r1, r1, #16
 8001388:	464a      	mov	r2, r9
 800138a:	4689      	mov	r9, r1
 800138c:	0429      	lsls	r1, r5, #16
 800138e:	464d      	mov	r5, r9
 8001390:	4342      	muls	r2, r0
 8001392:	0c09      	lsrs	r1, r1, #16
 8001394:	0003      	movs	r3, r0
 8001396:	4329      	orrs	r1, r5
 8001398:	428a      	cmp	r2, r1
 800139a:	d907      	bls.n	80013ac <__aeabi_ddiv+0x3d8>
 800139c:	1989      	adds	r1, r1, r6
 800139e:	3b01      	subs	r3, #1
 80013a0:	428e      	cmp	r6, r1
 80013a2:	d803      	bhi.n	80013ac <__aeabi_ddiv+0x3d8>
 80013a4:	428a      	cmp	r2, r1
 80013a6:	d901      	bls.n	80013ac <__aeabi_ddiv+0x3d8>
 80013a8:	1e83      	subs	r3, r0, #2
 80013aa:	1989      	adds	r1, r1, r6
 80013ac:	043f      	lsls	r7, r7, #16
 80013ae:	1a89      	subs	r1, r1, r2
 80013b0:	003a      	movs	r2, r7
 80013b2:	9f03      	ldr	r7, [sp, #12]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	0038      	movs	r0, r7
 80013b8:	0413      	lsls	r3, r2, #16
 80013ba:	0c1b      	lsrs	r3, r3, #16
 80013bc:	4358      	muls	r0, r3
 80013be:	4681      	mov	r9, r0
 80013c0:	9802      	ldr	r0, [sp, #8]
 80013c2:	0c15      	lsrs	r5, r2, #16
 80013c4:	436f      	muls	r7, r5
 80013c6:	4343      	muls	r3, r0
 80013c8:	4345      	muls	r5, r0
 80013ca:	4648      	mov	r0, r9
 80013cc:	0c00      	lsrs	r0, r0, #16
 80013ce:	4684      	mov	ip, r0
 80013d0:	19db      	adds	r3, r3, r7
 80013d2:	4463      	add	r3, ip
 80013d4:	429f      	cmp	r7, r3
 80013d6:	d903      	bls.n	80013e0 <__aeabi_ddiv+0x40c>
 80013d8:	2080      	movs	r0, #128	; 0x80
 80013da:	0240      	lsls	r0, r0, #9
 80013dc:	4684      	mov	ip, r0
 80013de:	4465      	add	r5, ip
 80013e0:	4648      	mov	r0, r9
 80013e2:	0c1f      	lsrs	r7, r3, #16
 80013e4:	0400      	lsls	r0, r0, #16
 80013e6:	041b      	lsls	r3, r3, #16
 80013e8:	0c00      	lsrs	r0, r0, #16
 80013ea:	197d      	adds	r5, r7, r5
 80013ec:	1818      	adds	r0, r3, r0
 80013ee:	42a9      	cmp	r1, r5
 80013f0:	d200      	bcs.n	80013f4 <__aeabi_ddiv+0x420>
 80013f2:	e084      	b.n	80014fe <__aeabi_ddiv+0x52a>
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x424>
 80013f6:	e07f      	b.n	80014f8 <__aeabi_ddiv+0x524>
 80013f8:	2301      	movs	r3, #1
 80013fa:	431a      	orrs	r2, r3
 80013fc:	e657      	b.n	80010ae <__aeabi_ddiv+0xda>
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	464a      	mov	r2, r9
 8001402:	031b      	lsls	r3, r3, #12
 8001404:	4313      	orrs	r3, r2
 8001406:	031b      	lsls	r3, r3, #12
 8001408:	0b1b      	lsrs	r3, r3, #12
 800140a:	46aa      	mov	sl, r5
 800140c:	4a6f      	ldr	r2, [pc, #444]	; (80015cc <__aeabi_ddiv+0x5f8>)
 800140e:	e66f      	b.n	80010f0 <__aeabi_ddiv+0x11c>
 8001410:	42ba      	cmp	r2, r7
 8001412:	d900      	bls.n	8001416 <__aeabi_ddiv+0x442>
 8001414:	e735      	b.n	8001282 <__aeabi_ddiv+0x2ae>
 8001416:	464b      	mov	r3, r9
 8001418:	07dc      	lsls	r4, r3, #31
 800141a:	0858      	lsrs	r0, r3, #1
 800141c:	087b      	lsrs	r3, r7, #1
 800141e:	431c      	orrs	r4, r3
 8001420:	07ff      	lsls	r7, r7, #31
 8001422:	e734      	b.n	800128e <__aeabi_ddiv+0x2ba>
 8001424:	2400      	movs	r4, #0
 8001426:	42af      	cmp	r7, r5
 8001428:	d289      	bcs.n	800133e <__aeabi_ddiv+0x36a>
 800142a:	4447      	add	r7, r8
 800142c:	4547      	cmp	r7, r8
 800142e:	41a4      	sbcs	r4, r4
 8001430:	465b      	mov	r3, fp
 8001432:	4264      	negs	r4, r4
 8001434:	19a4      	adds	r4, r4, r6
 8001436:	1864      	adds	r4, r4, r1
 8001438:	3b01      	subs	r3, #1
 800143a:	42a6      	cmp	r6, r4
 800143c:	d21e      	bcs.n	800147c <__aeabi_ddiv+0x4a8>
 800143e:	42a0      	cmp	r0, r4
 8001440:	d86d      	bhi.n	800151e <__aeabi_ddiv+0x54a>
 8001442:	d100      	bne.n	8001446 <__aeabi_ddiv+0x472>
 8001444:	e0b6      	b.n	80015b4 <__aeabi_ddiv+0x5e0>
 8001446:	1a24      	subs	r4, r4, r0
 8001448:	469b      	mov	fp, r3
 800144a:	e778      	b.n	800133e <__aeabi_ddiv+0x36a>
 800144c:	0003      	movs	r3, r0
 800144e:	465a      	mov	r2, fp
 8001450:	3b28      	subs	r3, #40	; 0x28
 8001452:	409a      	lsls	r2, r3
 8001454:	2700      	movs	r7, #0
 8001456:	4691      	mov	r9, r2
 8001458:	e688      	b.n	800116c <__aeabi_ddiv+0x198>
 800145a:	4658      	mov	r0, fp
 800145c:	f001 f88e 	bl	800257c <__clzsi2>
 8001460:	3020      	adds	r0, #32
 8001462:	e672      	b.n	800114a <__aeabi_ddiv+0x176>
 8001464:	0003      	movs	r3, r0
 8001466:	4652      	mov	r2, sl
 8001468:	3b28      	subs	r3, #40	; 0x28
 800146a:	409a      	lsls	r2, r3
 800146c:	4693      	mov	fp, r2
 800146e:	2200      	movs	r2, #0
 8001470:	e6b4      	b.n	80011dc <__aeabi_ddiv+0x208>
 8001472:	4650      	mov	r0, sl
 8001474:	f001 f882 	bl	800257c <__clzsi2>
 8001478:	3020      	adds	r0, #32
 800147a:	e69a      	b.n	80011b2 <__aeabi_ddiv+0x1de>
 800147c:	42a6      	cmp	r6, r4
 800147e:	d1e2      	bne.n	8001446 <__aeabi_ddiv+0x472>
 8001480:	45b8      	cmp	r8, r7
 8001482:	d9dc      	bls.n	800143e <__aeabi_ddiv+0x46a>
 8001484:	1a34      	subs	r4, r6, r0
 8001486:	469b      	mov	fp, r3
 8001488:	e759      	b.n	800133e <__aeabi_ddiv+0x36a>
 800148a:	2b1f      	cmp	r3, #31
 800148c:	dc65      	bgt.n	800155a <__aeabi_ddiv+0x586>
 800148e:	4c50      	ldr	r4, [pc, #320]	; (80015d0 <__aeabi_ddiv+0x5fc>)
 8001490:	9900      	ldr	r1, [sp, #0]
 8001492:	46a4      	mov	ip, r4
 8001494:	465c      	mov	r4, fp
 8001496:	4461      	add	r1, ip
 8001498:	0008      	movs	r0, r1
 800149a:	408c      	lsls	r4, r1
 800149c:	0011      	movs	r1, r2
 800149e:	4082      	lsls	r2, r0
 80014a0:	40d9      	lsrs	r1, r3
 80014a2:	1e50      	subs	r0, r2, #1
 80014a4:	4182      	sbcs	r2, r0
 80014a6:	430c      	orrs	r4, r1
 80014a8:	4314      	orrs	r4, r2
 80014aa:	465a      	mov	r2, fp
 80014ac:	40da      	lsrs	r2, r3
 80014ae:	0013      	movs	r3, r2
 80014b0:	0762      	lsls	r2, r4, #29
 80014b2:	d009      	beq.n	80014c8 <__aeabi_ddiv+0x4f4>
 80014b4:	220f      	movs	r2, #15
 80014b6:	4022      	ands	r2, r4
 80014b8:	2a04      	cmp	r2, #4
 80014ba:	d005      	beq.n	80014c8 <__aeabi_ddiv+0x4f4>
 80014bc:	0022      	movs	r2, r4
 80014be:	1d14      	adds	r4, r2, #4
 80014c0:	4294      	cmp	r4, r2
 80014c2:	4189      	sbcs	r1, r1
 80014c4:	4249      	negs	r1, r1
 80014c6:	185b      	adds	r3, r3, r1
 80014c8:	021a      	lsls	r2, r3, #8
 80014ca:	d562      	bpl.n	8001592 <__aeabi_ddiv+0x5be>
 80014cc:	2201      	movs	r2, #1
 80014ce:	2300      	movs	r3, #0
 80014d0:	2700      	movs	r7, #0
 80014d2:	e60d      	b.n	80010f0 <__aeabi_ddiv+0x11c>
 80014d4:	428a      	cmp	r2, r1
 80014d6:	d800      	bhi.n	80014da <__aeabi_ddiv+0x506>
 80014d8:	e70a      	b.n	80012f0 <__aeabi_ddiv+0x31c>
 80014da:	1e83      	subs	r3, r0, #2
 80014dc:	1989      	adds	r1, r1, r6
 80014de:	e707      	b.n	80012f0 <__aeabi_ddiv+0x31c>
 80014e0:	230f      	movs	r3, #15
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d100      	bne.n	80014ea <__aeabi_ddiv+0x516>
 80014e8:	e5e6      	b.n	80010b8 <__aeabi_ddiv+0xe4>
 80014ea:	1d17      	adds	r7, r2, #4
 80014ec:	4297      	cmp	r7, r2
 80014ee:	4192      	sbcs	r2, r2
 80014f0:	4253      	negs	r3, r2
 80014f2:	449b      	add	fp, r3
 80014f4:	08fa      	lsrs	r2, r7, #3
 80014f6:	e5e0      	b.n	80010ba <__aeabi_ddiv+0xe6>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	d100      	bne.n	80014fe <__aeabi_ddiv+0x52a>
 80014fc:	e5d7      	b.n	80010ae <__aeabi_ddiv+0xda>
 80014fe:	1871      	adds	r1, r6, r1
 8001500:	1e53      	subs	r3, r2, #1
 8001502:	42b1      	cmp	r1, r6
 8001504:	d327      	bcc.n	8001556 <__aeabi_ddiv+0x582>
 8001506:	42a9      	cmp	r1, r5
 8001508:	d315      	bcc.n	8001536 <__aeabi_ddiv+0x562>
 800150a:	d058      	beq.n	80015be <__aeabi_ddiv+0x5ea>
 800150c:	001a      	movs	r2, r3
 800150e:	e773      	b.n	80013f8 <__aeabi_ddiv+0x424>
 8001510:	2b00      	cmp	r3, #0
 8001512:	dc00      	bgt.n	8001516 <__aeabi_ddiv+0x542>
 8001514:	e604      	b.n	8001120 <__aeabi_ddiv+0x14c>
 8001516:	2301      	movs	r3, #1
 8001518:	2200      	movs	r2, #0
 800151a:	449b      	add	fp, r3
 800151c:	e5cd      	b.n	80010ba <__aeabi_ddiv+0xe6>
 800151e:	2302      	movs	r3, #2
 8001520:	4447      	add	r7, r8
 8001522:	4547      	cmp	r7, r8
 8001524:	4189      	sbcs	r1, r1
 8001526:	425b      	negs	r3, r3
 8001528:	469c      	mov	ip, r3
 800152a:	4249      	negs	r1, r1
 800152c:	1989      	adds	r1, r1, r6
 800152e:	190c      	adds	r4, r1, r4
 8001530:	44e3      	add	fp, ip
 8001532:	1a24      	subs	r4, r4, r0
 8001534:	e703      	b.n	800133e <__aeabi_ddiv+0x36a>
 8001536:	4643      	mov	r3, r8
 8001538:	005f      	lsls	r7, r3, #1
 800153a:	4547      	cmp	r7, r8
 800153c:	419b      	sbcs	r3, r3
 800153e:	46b8      	mov	r8, r7
 8001540:	425b      	negs	r3, r3
 8001542:	199e      	adds	r6, r3, r6
 8001544:	3a02      	subs	r2, #2
 8001546:	1989      	adds	r1, r1, r6
 8001548:	42a9      	cmp	r1, r5
 800154a:	d000      	beq.n	800154e <__aeabi_ddiv+0x57a>
 800154c:	e754      	b.n	80013f8 <__aeabi_ddiv+0x424>
 800154e:	4540      	cmp	r0, r8
 8001550:	d000      	beq.n	8001554 <__aeabi_ddiv+0x580>
 8001552:	e751      	b.n	80013f8 <__aeabi_ddiv+0x424>
 8001554:	e5ab      	b.n	80010ae <__aeabi_ddiv+0xda>
 8001556:	001a      	movs	r2, r3
 8001558:	e7f6      	b.n	8001548 <__aeabi_ddiv+0x574>
 800155a:	211f      	movs	r1, #31
 800155c:	465f      	mov	r7, fp
 800155e:	4249      	negs	r1, r1
 8001560:	1b0c      	subs	r4, r1, r4
 8001562:	40e7      	lsrs	r7, r4
 8001564:	2b20      	cmp	r3, #32
 8001566:	d007      	beq.n	8001578 <__aeabi_ddiv+0x5a4>
 8001568:	491a      	ldr	r1, [pc, #104]	; (80015d4 <__aeabi_ddiv+0x600>)
 800156a:	9b00      	ldr	r3, [sp, #0]
 800156c:	468c      	mov	ip, r1
 800156e:	4463      	add	r3, ip
 8001570:	0018      	movs	r0, r3
 8001572:	465b      	mov	r3, fp
 8001574:	4083      	lsls	r3, r0
 8001576:	431a      	orrs	r2, r3
 8001578:	1e50      	subs	r0, r2, #1
 800157a:	4182      	sbcs	r2, r0
 800157c:	433a      	orrs	r2, r7
 800157e:	2707      	movs	r7, #7
 8001580:	2300      	movs	r3, #0
 8001582:	4017      	ands	r7, r2
 8001584:	d009      	beq.n	800159a <__aeabi_ddiv+0x5c6>
 8001586:	210f      	movs	r1, #15
 8001588:	2300      	movs	r3, #0
 800158a:	4011      	ands	r1, r2
 800158c:	0014      	movs	r4, r2
 800158e:	2904      	cmp	r1, #4
 8001590:	d195      	bne.n	80014be <__aeabi_ddiv+0x4ea>
 8001592:	0022      	movs	r2, r4
 8001594:	075f      	lsls	r7, r3, #29
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	0b1b      	lsrs	r3, r3, #12
 800159a:	08d2      	lsrs	r2, r2, #3
 800159c:	4317      	orrs	r7, r2
 800159e:	2200      	movs	r2, #0
 80015a0:	e5a6      	b.n	80010f0 <__aeabi_ddiv+0x11c>
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	4659      	mov	r1, fp
 80015a6:	031b      	lsls	r3, r3, #12
 80015a8:	430b      	orrs	r3, r1
 80015aa:	031b      	lsls	r3, r3, #12
 80015ac:	0017      	movs	r7, r2
 80015ae:	0b1b      	lsrs	r3, r3, #12
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <__aeabi_ddiv+0x5f8>)
 80015b2:	e59d      	b.n	80010f0 <__aeabi_ddiv+0x11c>
 80015b4:	42bd      	cmp	r5, r7
 80015b6:	d8b2      	bhi.n	800151e <__aeabi_ddiv+0x54a>
 80015b8:	469b      	mov	fp, r3
 80015ba:	2400      	movs	r4, #0
 80015bc:	e6bf      	b.n	800133e <__aeabi_ddiv+0x36a>
 80015be:	4580      	cmp	r8, r0
 80015c0:	d3b9      	bcc.n	8001536 <__aeabi_ddiv+0x562>
 80015c2:	001a      	movs	r2, r3
 80015c4:	e7c3      	b.n	800154e <__aeabi_ddiv+0x57a>
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	000003ff 	.word	0x000003ff
 80015cc:	000007ff 	.word	0x000007ff
 80015d0:	0000041e 	.word	0x0000041e
 80015d4:	0000043e 	.word	0x0000043e

080015d8 <__eqdf2>:
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	464f      	mov	r7, r9
 80015dc:	4646      	mov	r6, r8
 80015de:	46d6      	mov	lr, sl
 80015e0:	4684      	mov	ip, r0
 80015e2:	b5c0      	push	{r6, r7, lr}
 80015e4:	4680      	mov	r8, r0
 80015e6:	4e19      	ldr	r6, [pc, #100]	; (800164c <__eqdf2+0x74>)
 80015e8:	0318      	lsls	r0, r3, #12
 80015ea:	030f      	lsls	r7, r1, #12
 80015ec:	004d      	lsls	r5, r1, #1
 80015ee:	0b00      	lsrs	r0, r0, #12
 80015f0:	005c      	lsls	r4, r3, #1
 80015f2:	4682      	mov	sl, r0
 80015f4:	0b3f      	lsrs	r7, r7, #12
 80015f6:	0d6d      	lsrs	r5, r5, #21
 80015f8:	0fc9      	lsrs	r1, r1, #31
 80015fa:	4691      	mov	r9, r2
 80015fc:	0d64      	lsrs	r4, r4, #21
 80015fe:	0fdb      	lsrs	r3, r3, #31
 8001600:	2001      	movs	r0, #1
 8001602:	42b5      	cmp	r5, r6
 8001604:	d00a      	beq.n	800161c <__eqdf2+0x44>
 8001606:	42b4      	cmp	r4, r6
 8001608:	d003      	beq.n	8001612 <__eqdf2+0x3a>
 800160a:	42a5      	cmp	r5, r4
 800160c:	d101      	bne.n	8001612 <__eqdf2+0x3a>
 800160e:	4557      	cmp	r7, sl
 8001610:	d00c      	beq.n	800162c <__eqdf2+0x54>
 8001612:	bc1c      	pop	{r2, r3, r4}
 8001614:	4690      	mov	r8, r2
 8001616:	4699      	mov	r9, r3
 8001618:	46a2      	mov	sl, r4
 800161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161c:	4666      	mov	r6, ip
 800161e:	433e      	orrs	r6, r7
 8001620:	d1f7      	bne.n	8001612 <__eqdf2+0x3a>
 8001622:	42ac      	cmp	r4, r5
 8001624:	d1f5      	bne.n	8001612 <__eqdf2+0x3a>
 8001626:	4654      	mov	r4, sl
 8001628:	4314      	orrs	r4, r2
 800162a:	d1f2      	bne.n	8001612 <__eqdf2+0x3a>
 800162c:	2001      	movs	r0, #1
 800162e:	45c8      	cmp	r8, r9
 8001630:	d1ef      	bne.n	8001612 <__eqdf2+0x3a>
 8001632:	4299      	cmp	r1, r3
 8001634:	d007      	beq.n	8001646 <__eqdf2+0x6e>
 8001636:	2d00      	cmp	r5, #0
 8001638:	d1eb      	bne.n	8001612 <__eqdf2+0x3a>
 800163a:	4663      	mov	r3, ip
 800163c:	431f      	orrs	r7, r3
 800163e:	0038      	movs	r0, r7
 8001640:	1e47      	subs	r7, r0, #1
 8001642:	41b8      	sbcs	r0, r7
 8001644:	e7e5      	b.n	8001612 <__eqdf2+0x3a>
 8001646:	2000      	movs	r0, #0
 8001648:	e7e3      	b.n	8001612 <__eqdf2+0x3a>
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	000007ff 	.word	0x000007ff

08001650 <__gedf2>:
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	464f      	mov	r7, r9
 8001654:	4646      	mov	r6, r8
 8001656:	46d6      	mov	lr, sl
 8001658:	004d      	lsls	r5, r1, #1
 800165a:	b5c0      	push	{r6, r7, lr}
 800165c:	030e      	lsls	r6, r1, #12
 800165e:	0fc9      	lsrs	r1, r1, #31
 8001660:	468a      	mov	sl, r1
 8001662:	492c      	ldr	r1, [pc, #176]	; (8001714 <__gedf2+0xc4>)
 8001664:	031f      	lsls	r7, r3, #12
 8001666:	005c      	lsls	r4, r3, #1
 8001668:	4680      	mov	r8, r0
 800166a:	0b36      	lsrs	r6, r6, #12
 800166c:	0d6d      	lsrs	r5, r5, #21
 800166e:	4691      	mov	r9, r2
 8001670:	0b3f      	lsrs	r7, r7, #12
 8001672:	0d64      	lsrs	r4, r4, #21
 8001674:	0fdb      	lsrs	r3, r3, #31
 8001676:	428d      	cmp	r5, r1
 8001678:	d01e      	beq.n	80016b8 <__gedf2+0x68>
 800167a:	428c      	cmp	r4, r1
 800167c:	d016      	beq.n	80016ac <__gedf2+0x5c>
 800167e:	2d00      	cmp	r5, #0
 8001680:	d11e      	bne.n	80016c0 <__gedf2+0x70>
 8001682:	4330      	orrs	r0, r6
 8001684:	4684      	mov	ip, r0
 8001686:	2c00      	cmp	r4, #0
 8001688:	d101      	bne.n	800168e <__gedf2+0x3e>
 800168a:	433a      	orrs	r2, r7
 800168c:	d023      	beq.n	80016d6 <__gedf2+0x86>
 800168e:	4662      	mov	r2, ip
 8001690:	2a00      	cmp	r2, #0
 8001692:	d01a      	beq.n	80016ca <__gedf2+0x7a>
 8001694:	459a      	cmp	sl, r3
 8001696:	d029      	beq.n	80016ec <__gedf2+0x9c>
 8001698:	4651      	mov	r1, sl
 800169a:	2002      	movs	r0, #2
 800169c:	3901      	subs	r1, #1
 800169e:	4008      	ands	r0, r1
 80016a0:	3801      	subs	r0, #1
 80016a2:	bc1c      	pop	{r2, r3, r4}
 80016a4:	4690      	mov	r8, r2
 80016a6:	4699      	mov	r9, r3
 80016a8:	46a2      	mov	sl, r4
 80016aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ac:	0039      	movs	r1, r7
 80016ae:	4311      	orrs	r1, r2
 80016b0:	d0e5      	beq.n	800167e <__gedf2+0x2e>
 80016b2:	2002      	movs	r0, #2
 80016b4:	4240      	negs	r0, r0
 80016b6:	e7f4      	b.n	80016a2 <__gedf2+0x52>
 80016b8:	4330      	orrs	r0, r6
 80016ba:	d1fa      	bne.n	80016b2 <__gedf2+0x62>
 80016bc:	42ac      	cmp	r4, r5
 80016be:	d00f      	beq.n	80016e0 <__gedf2+0x90>
 80016c0:	2c00      	cmp	r4, #0
 80016c2:	d10f      	bne.n	80016e4 <__gedf2+0x94>
 80016c4:	433a      	orrs	r2, r7
 80016c6:	d0e7      	beq.n	8001698 <__gedf2+0x48>
 80016c8:	e00c      	b.n	80016e4 <__gedf2+0x94>
 80016ca:	2201      	movs	r2, #1
 80016cc:	3b01      	subs	r3, #1
 80016ce:	4393      	bics	r3, r2
 80016d0:	0018      	movs	r0, r3
 80016d2:	3001      	adds	r0, #1
 80016d4:	e7e5      	b.n	80016a2 <__gedf2+0x52>
 80016d6:	4663      	mov	r3, ip
 80016d8:	2000      	movs	r0, #0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0e1      	beq.n	80016a2 <__gedf2+0x52>
 80016de:	e7db      	b.n	8001698 <__gedf2+0x48>
 80016e0:	433a      	orrs	r2, r7
 80016e2:	d1e6      	bne.n	80016b2 <__gedf2+0x62>
 80016e4:	459a      	cmp	sl, r3
 80016e6:	d1d7      	bne.n	8001698 <__gedf2+0x48>
 80016e8:	42a5      	cmp	r5, r4
 80016ea:	dcd5      	bgt.n	8001698 <__gedf2+0x48>
 80016ec:	42a5      	cmp	r5, r4
 80016ee:	db05      	blt.n	80016fc <__gedf2+0xac>
 80016f0:	42be      	cmp	r6, r7
 80016f2:	d8d1      	bhi.n	8001698 <__gedf2+0x48>
 80016f4:	d008      	beq.n	8001708 <__gedf2+0xb8>
 80016f6:	2000      	movs	r0, #0
 80016f8:	42be      	cmp	r6, r7
 80016fa:	d2d2      	bcs.n	80016a2 <__gedf2+0x52>
 80016fc:	4650      	mov	r0, sl
 80016fe:	2301      	movs	r3, #1
 8001700:	3801      	subs	r0, #1
 8001702:	4398      	bics	r0, r3
 8001704:	3001      	adds	r0, #1
 8001706:	e7cc      	b.n	80016a2 <__gedf2+0x52>
 8001708:	45c8      	cmp	r8, r9
 800170a:	d8c5      	bhi.n	8001698 <__gedf2+0x48>
 800170c:	2000      	movs	r0, #0
 800170e:	45c8      	cmp	r8, r9
 8001710:	d3f4      	bcc.n	80016fc <__gedf2+0xac>
 8001712:	e7c6      	b.n	80016a2 <__gedf2+0x52>
 8001714:	000007ff 	.word	0x000007ff

08001718 <__ledf2>:
 8001718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171a:	464f      	mov	r7, r9
 800171c:	4646      	mov	r6, r8
 800171e:	46d6      	mov	lr, sl
 8001720:	004d      	lsls	r5, r1, #1
 8001722:	b5c0      	push	{r6, r7, lr}
 8001724:	030e      	lsls	r6, r1, #12
 8001726:	0fc9      	lsrs	r1, r1, #31
 8001728:	468a      	mov	sl, r1
 800172a:	492e      	ldr	r1, [pc, #184]	; (80017e4 <__ledf2+0xcc>)
 800172c:	031f      	lsls	r7, r3, #12
 800172e:	005c      	lsls	r4, r3, #1
 8001730:	4680      	mov	r8, r0
 8001732:	0b36      	lsrs	r6, r6, #12
 8001734:	0d6d      	lsrs	r5, r5, #21
 8001736:	4691      	mov	r9, r2
 8001738:	0b3f      	lsrs	r7, r7, #12
 800173a:	0d64      	lsrs	r4, r4, #21
 800173c:	0fdb      	lsrs	r3, r3, #31
 800173e:	428d      	cmp	r5, r1
 8001740:	d018      	beq.n	8001774 <__ledf2+0x5c>
 8001742:	428c      	cmp	r4, r1
 8001744:	d011      	beq.n	800176a <__ledf2+0x52>
 8001746:	2d00      	cmp	r5, #0
 8001748:	d118      	bne.n	800177c <__ledf2+0x64>
 800174a:	4330      	orrs	r0, r6
 800174c:	4684      	mov	ip, r0
 800174e:	2c00      	cmp	r4, #0
 8001750:	d11e      	bne.n	8001790 <__ledf2+0x78>
 8001752:	433a      	orrs	r2, r7
 8001754:	d11c      	bne.n	8001790 <__ledf2+0x78>
 8001756:	4663      	mov	r3, ip
 8001758:	2000      	movs	r0, #0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d030      	beq.n	80017c0 <__ledf2+0xa8>
 800175e:	4651      	mov	r1, sl
 8001760:	2002      	movs	r0, #2
 8001762:	3901      	subs	r1, #1
 8001764:	4008      	ands	r0, r1
 8001766:	3801      	subs	r0, #1
 8001768:	e02a      	b.n	80017c0 <__ledf2+0xa8>
 800176a:	0039      	movs	r1, r7
 800176c:	4311      	orrs	r1, r2
 800176e:	d0ea      	beq.n	8001746 <__ledf2+0x2e>
 8001770:	2002      	movs	r0, #2
 8001772:	e025      	b.n	80017c0 <__ledf2+0xa8>
 8001774:	4330      	orrs	r0, r6
 8001776:	d1fb      	bne.n	8001770 <__ledf2+0x58>
 8001778:	42ac      	cmp	r4, r5
 800177a:	d026      	beq.n	80017ca <__ledf2+0xb2>
 800177c:	2c00      	cmp	r4, #0
 800177e:	d126      	bne.n	80017ce <__ledf2+0xb6>
 8001780:	433a      	orrs	r2, r7
 8001782:	d124      	bne.n	80017ce <__ledf2+0xb6>
 8001784:	4651      	mov	r1, sl
 8001786:	2002      	movs	r0, #2
 8001788:	3901      	subs	r1, #1
 800178a:	4008      	ands	r0, r1
 800178c:	3801      	subs	r0, #1
 800178e:	e017      	b.n	80017c0 <__ledf2+0xa8>
 8001790:	4662      	mov	r2, ip
 8001792:	2a00      	cmp	r2, #0
 8001794:	d00f      	beq.n	80017b6 <__ledf2+0x9e>
 8001796:	459a      	cmp	sl, r3
 8001798:	d1e1      	bne.n	800175e <__ledf2+0x46>
 800179a:	42a5      	cmp	r5, r4
 800179c:	db05      	blt.n	80017aa <__ledf2+0x92>
 800179e:	42be      	cmp	r6, r7
 80017a0:	d8dd      	bhi.n	800175e <__ledf2+0x46>
 80017a2:	d019      	beq.n	80017d8 <__ledf2+0xc0>
 80017a4:	2000      	movs	r0, #0
 80017a6:	42be      	cmp	r6, r7
 80017a8:	d20a      	bcs.n	80017c0 <__ledf2+0xa8>
 80017aa:	4650      	mov	r0, sl
 80017ac:	2301      	movs	r3, #1
 80017ae:	3801      	subs	r0, #1
 80017b0:	4398      	bics	r0, r3
 80017b2:	3001      	adds	r0, #1
 80017b4:	e004      	b.n	80017c0 <__ledf2+0xa8>
 80017b6:	2201      	movs	r2, #1
 80017b8:	3b01      	subs	r3, #1
 80017ba:	4393      	bics	r3, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	3001      	adds	r0, #1
 80017c0:	bc1c      	pop	{r2, r3, r4}
 80017c2:	4690      	mov	r8, r2
 80017c4:	4699      	mov	r9, r3
 80017c6:	46a2      	mov	sl, r4
 80017c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ca:	433a      	orrs	r2, r7
 80017cc:	d1d0      	bne.n	8001770 <__ledf2+0x58>
 80017ce:	459a      	cmp	sl, r3
 80017d0:	d1c5      	bne.n	800175e <__ledf2+0x46>
 80017d2:	42a5      	cmp	r5, r4
 80017d4:	dcc3      	bgt.n	800175e <__ledf2+0x46>
 80017d6:	e7e0      	b.n	800179a <__ledf2+0x82>
 80017d8:	45c8      	cmp	r8, r9
 80017da:	d8c0      	bhi.n	800175e <__ledf2+0x46>
 80017dc:	2000      	movs	r0, #0
 80017de:	45c8      	cmp	r8, r9
 80017e0:	d3e3      	bcc.n	80017aa <__ledf2+0x92>
 80017e2:	e7ed      	b.n	80017c0 <__ledf2+0xa8>
 80017e4:	000007ff 	.word	0x000007ff

080017e8 <__aeabi_dmul>:
 80017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ea:	4657      	mov	r7, sl
 80017ec:	46de      	mov	lr, fp
 80017ee:	464e      	mov	r6, r9
 80017f0:	4645      	mov	r5, r8
 80017f2:	b5e0      	push	{r5, r6, r7, lr}
 80017f4:	4683      	mov	fp, r0
 80017f6:	0006      	movs	r6, r0
 80017f8:	030f      	lsls	r7, r1, #12
 80017fa:	0048      	lsls	r0, r1, #1
 80017fc:	b087      	sub	sp, #28
 80017fe:	4692      	mov	sl, r2
 8001800:	001d      	movs	r5, r3
 8001802:	0b3f      	lsrs	r7, r7, #12
 8001804:	0d40      	lsrs	r0, r0, #21
 8001806:	0fcc      	lsrs	r4, r1, #31
 8001808:	2800      	cmp	r0, #0
 800180a:	d100      	bne.n	800180e <__aeabi_dmul+0x26>
 800180c:	e06f      	b.n	80018ee <__aeabi_dmul+0x106>
 800180e:	4bde      	ldr	r3, [pc, #888]	; (8001b88 <__aeabi_dmul+0x3a0>)
 8001810:	4298      	cmp	r0, r3
 8001812:	d038      	beq.n	8001886 <__aeabi_dmul+0x9e>
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	00ff      	lsls	r7, r7, #3
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	431f      	orrs	r7, r3
 800181c:	0f73      	lsrs	r3, r6, #29
 800181e:	433b      	orrs	r3, r7
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	4bda      	ldr	r3, [pc, #872]	; (8001b8c <__aeabi_dmul+0x3a4>)
 8001824:	2700      	movs	r7, #0
 8001826:	4699      	mov	r9, r3
 8001828:	2300      	movs	r3, #0
 800182a:	469b      	mov	fp, r3
 800182c:	00f6      	lsls	r6, r6, #3
 800182e:	4481      	add	r9, r0
 8001830:	032b      	lsls	r3, r5, #12
 8001832:	0069      	lsls	r1, r5, #1
 8001834:	0b1b      	lsrs	r3, r3, #12
 8001836:	4652      	mov	r2, sl
 8001838:	4698      	mov	r8, r3
 800183a:	0d49      	lsrs	r1, r1, #21
 800183c:	0fed      	lsrs	r5, r5, #31
 800183e:	2900      	cmp	r1, #0
 8001840:	d100      	bne.n	8001844 <__aeabi_dmul+0x5c>
 8001842:	e085      	b.n	8001950 <__aeabi_dmul+0x168>
 8001844:	4bd0      	ldr	r3, [pc, #832]	; (8001b88 <__aeabi_dmul+0x3a0>)
 8001846:	4299      	cmp	r1, r3
 8001848:	d100      	bne.n	800184c <__aeabi_dmul+0x64>
 800184a:	e073      	b.n	8001934 <__aeabi_dmul+0x14c>
 800184c:	4643      	mov	r3, r8
 800184e:	00da      	lsls	r2, r3, #3
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	4313      	orrs	r3, r2
 8001856:	4652      	mov	r2, sl
 8001858:	48cc      	ldr	r0, [pc, #816]	; (8001b8c <__aeabi_dmul+0x3a4>)
 800185a:	0f52      	lsrs	r2, r2, #29
 800185c:	4684      	mov	ip, r0
 800185e:	4313      	orrs	r3, r2
 8001860:	4652      	mov	r2, sl
 8001862:	2000      	movs	r0, #0
 8001864:	4461      	add	r1, ip
 8001866:	00d2      	lsls	r2, r2, #3
 8001868:	4489      	add	r9, r1
 800186a:	0021      	movs	r1, r4
 800186c:	4069      	eors	r1, r5
 800186e:	9100      	str	r1, [sp, #0]
 8001870:	468c      	mov	ip, r1
 8001872:	2101      	movs	r1, #1
 8001874:	4449      	add	r1, r9
 8001876:	468a      	mov	sl, r1
 8001878:	2f0f      	cmp	r7, #15
 800187a:	d900      	bls.n	800187e <__aeabi_dmul+0x96>
 800187c:	e090      	b.n	80019a0 <__aeabi_dmul+0x1b8>
 800187e:	49c4      	ldr	r1, [pc, #784]	; (8001b90 <__aeabi_dmul+0x3a8>)
 8001880:	00bf      	lsls	r7, r7, #2
 8001882:	59cf      	ldr	r7, [r1, r7]
 8001884:	46bf      	mov	pc, r7
 8001886:	465b      	mov	r3, fp
 8001888:	433b      	orrs	r3, r7
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	d000      	beq.n	8001890 <__aeabi_dmul+0xa8>
 800188e:	e16a      	b.n	8001b66 <__aeabi_dmul+0x37e>
 8001890:	2302      	movs	r3, #2
 8001892:	2708      	movs	r7, #8
 8001894:	2600      	movs	r6, #0
 8001896:	4681      	mov	r9, r0
 8001898:	469b      	mov	fp, r3
 800189a:	e7c9      	b.n	8001830 <__aeabi_dmul+0x48>
 800189c:	0032      	movs	r2, r6
 800189e:	4658      	mov	r0, fp
 80018a0:	9b01      	ldr	r3, [sp, #4]
 80018a2:	4661      	mov	r1, ip
 80018a4:	9100      	str	r1, [sp, #0]
 80018a6:	2802      	cmp	r0, #2
 80018a8:	d100      	bne.n	80018ac <__aeabi_dmul+0xc4>
 80018aa:	e075      	b.n	8001998 <__aeabi_dmul+0x1b0>
 80018ac:	2803      	cmp	r0, #3
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dmul+0xca>
 80018b0:	e1fe      	b.n	8001cb0 <__aeabi_dmul+0x4c8>
 80018b2:	2801      	cmp	r0, #1
 80018b4:	d000      	beq.n	80018b8 <__aeabi_dmul+0xd0>
 80018b6:	e12c      	b.n	8001b12 <__aeabi_dmul+0x32a>
 80018b8:	2300      	movs	r3, #0
 80018ba:	2700      	movs	r7, #0
 80018bc:	2600      	movs	r6, #0
 80018be:	2500      	movs	r5, #0
 80018c0:	033f      	lsls	r7, r7, #12
 80018c2:	0d2a      	lsrs	r2, r5, #20
 80018c4:	0b3f      	lsrs	r7, r7, #12
 80018c6:	48b3      	ldr	r0, [pc, #716]	; (8001b94 <__aeabi_dmul+0x3ac>)
 80018c8:	0512      	lsls	r2, r2, #20
 80018ca:	433a      	orrs	r2, r7
 80018cc:	4002      	ands	r2, r0
 80018ce:	051b      	lsls	r3, r3, #20
 80018d0:	4313      	orrs	r3, r2
 80018d2:	9a00      	ldr	r2, [sp, #0]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	07d1      	lsls	r1, r2, #31
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	430b      	orrs	r3, r1
 80018dc:	0030      	movs	r0, r6
 80018de:	0019      	movs	r1, r3
 80018e0:	b007      	add	sp, #28
 80018e2:	bc3c      	pop	{r2, r3, r4, r5}
 80018e4:	4690      	mov	r8, r2
 80018e6:	4699      	mov	r9, r3
 80018e8:	46a2      	mov	sl, r4
 80018ea:	46ab      	mov	fp, r5
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	465b      	mov	r3, fp
 80018f0:	433b      	orrs	r3, r7
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dmul+0x110>
 80018f6:	e12f      	b.n	8001b58 <__aeabi_dmul+0x370>
 80018f8:	2f00      	cmp	r7, #0
 80018fa:	d100      	bne.n	80018fe <__aeabi_dmul+0x116>
 80018fc:	e1a5      	b.n	8001c4a <__aeabi_dmul+0x462>
 80018fe:	0038      	movs	r0, r7
 8001900:	f000 fe3c 	bl	800257c <__clzsi2>
 8001904:	0003      	movs	r3, r0
 8001906:	3b0b      	subs	r3, #11
 8001908:	2b1c      	cmp	r3, #28
 800190a:	dd00      	ble.n	800190e <__aeabi_dmul+0x126>
 800190c:	e196      	b.n	8001c3c <__aeabi_dmul+0x454>
 800190e:	221d      	movs	r2, #29
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	465a      	mov	r2, fp
 8001914:	0001      	movs	r1, r0
 8001916:	40da      	lsrs	r2, r3
 8001918:	465e      	mov	r6, fp
 800191a:	3908      	subs	r1, #8
 800191c:	408f      	lsls	r7, r1
 800191e:	0013      	movs	r3, r2
 8001920:	408e      	lsls	r6, r1
 8001922:	433b      	orrs	r3, r7
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	4b9c      	ldr	r3, [pc, #624]	; (8001b98 <__aeabi_dmul+0x3b0>)
 8001928:	2700      	movs	r7, #0
 800192a:	1a1b      	subs	r3, r3, r0
 800192c:	4699      	mov	r9, r3
 800192e:	2300      	movs	r3, #0
 8001930:	469b      	mov	fp, r3
 8001932:	e77d      	b.n	8001830 <__aeabi_dmul+0x48>
 8001934:	4641      	mov	r1, r8
 8001936:	4653      	mov	r3, sl
 8001938:	430b      	orrs	r3, r1
 800193a:	4993      	ldr	r1, [pc, #588]	; (8001b88 <__aeabi_dmul+0x3a0>)
 800193c:	468c      	mov	ip, r1
 800193e:	44e1      	add	r9, ip
 8001940:	2b00      	cmp	r3, #0
 8001942:	d000      	beq.n	8001946 <__aeabi_dmul+0x15e>
 8001944:	e11a      	b.n	8001b7c <__aeabi_dmul+0x394>
 8001946:	2202      	movs	r2, #2
 8001948:	2002      	movs	r0, #2
 800194a:	4317      	orrs	r7, r2
 800194c:	2200      	movs	r2, #0
 800194e:	e78c      	b.n	800186a <__aeabi_dmul+0x82>
 8001950:	4313      	orrs	r3, r2
 8001952:	d100      	bne.n	8001956 <__aeabi_dmul+0x16e>
 8001954:	e10d      	b.n	8001b72 <__aeabi_dmul+0x38a>
 8001956:	4643      	mov	r3, r8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d100      	bne.n	800195e <__aeabi_dmul+0x176>
 800195c:	e181      	b.n	8001c62 <__aeabi_dmul+0x47a>
 800195e:	4640      	mov	r0, r8
 8001960:	f000 fe0c 	bl	800257c <__clzsi2>
 8001964:	0002      	movs	r2, r0
 8001966:	3a0b      	subs	r2, #11
 8001968:	2a1c      	cmp	r2, #28
 800196a:	dd00      	ble.n	800196e <__aeabi_dmul+0x186>
 800196c:	e172      	b.n	8001c54 <__aeabi_dmul+0x46c>
 800196e:	0001      	movs	r1, r0
 8001970:	4643      	mov	r3, r8
 8001972:	3908      	subs	r1, #8
 8001974:	408b      	lsls	r3, r1
 8001976:	4698      	mov	r8, r3
 8001978:	231d      	movs	r3, #29
 800197a:	1a9a      	subs	r2, r3, r2
 800197c:	4653      	mov	r3, sl
 800197e:	40d3      	lsrs	r3, r2
 8001980:	001a      	movs	r2, r3
 8001982:	4643      	mov	r3, r8
 8001984:	4313      	orrs	r3, r2
 8001986:	4652      	mov	r2, sl
 8001988:	408a      	lsls	r2, r1
 800198a:	4649      	mov	r1, r9
 800198c:	1a08      	subs	r0, r1, r0
 800198e:	4982      	ldr	r1, [pc, #520]	; (8001b98 <__aeabi_dmul+0x3b0>)
 8001990:	4689      	mov	r9, r1
 8001992:	4481      	add	r9, r0
 8001994:	2000      	movs	r0, #0
 8001996:	e768      	b.n	800186a <__aeabi_dmul+0x82>
 8001998:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <__aeabi_dmul+0x3a0>)
 800199a:	2700      	movs	r7, #0
 800199c:	2600      	movs	r6, #0
 800199e:	e78e      	b.n	80018be <__aeabi_dmul+0xd6>
 80019a0:	0c14      	lsrs	r4, r2, #16
 80019a2:	0412      	lsls	r2, r2, #16
 80019a4:	0c12      	lsrs	r2, r2, #16
 80019a6:	0011      	movs	r1, r2
 80019a8:	0c37      	lsrs	r7, r6, #16
 80019aa:	0436      	lsls	r6, r6, #16
 80019ac:	0c35      	lsrs	r5, r6, #16
 80019ae:	4379      	muls	r1, r7
 80019b0:	0028      	movs	r0, r5
 80019b2:	468c      	mov	ip, r1
 80019b4:	002e      	movs	r6, r5
 80019b6:	4360      	muls	r0, r4
 80019b8:	4460      	add	r0, ip
 80019ba:	4683      	mov	fp, r0
 80019bc:	4356      	muls	r6, r2
 80019be:	0021      	movs	r1, r4
 80019c0:	0c30      	lsrs	r0, r6, #16
 80019c2:	4680      	mov	r8, r0
 80019c4:	4658      	mov	r0, fp
 80019c6:	4379      	muls	r1, r7
 80019c8:	4440      	add	r0, r8
 80019ca:	9102      	str	r1, [sp, #8]
 80019cc:	4584      	cmp	ip, r0
 80019ce:	d906      	bls.n	80019de <__aeabi_dmul+0x1f6>
 80019d0:	4688      	mov	r8, r1
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	0249      	lsls	r1, r1, #9
 80019d6:	468c      	mov	ip, r1
 80019d8:	44e0      	add	r8, ip
 80019da:	4641      	mov	r1, r8
 80019dc:	9102      	str	r1, [sp, #8]
 80019de:	0436      	lsls	r6, r6, #16
 80019e0:	0c01      	lsrs	r1, r0, #16
 80019e2:	0c36      	lsrs	r6, r6, #16
 80019e4:	0400      	lsls	r0, r0, #16
 80019e6:	468b      	mov	fp, r1
 80019e8:	1981      	adds	r1, r0, r6
 80019ea:	0c1e      	lsrs	r6, r3, #16
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	0c1b      	lsrs	r3, r3, #16
 80019f0:	9103      	str	r1, [sp, #12]
 80019f2:	0019      	movs	r1, r3
 80019f4:	4379      	muls	r1, r7
 80019f6:	468c      	mov	ip, r1
 80019f8:	0028      	movs	r0, r5
 80019fa:	4375      	muls	r5, r6
 80019fc:	4465      	add	r5, ip
 80019fe:	46a8      	mov	r8, r5
 8001a00:	4358      	muls	r0, r3
 8001a02:	0c05      	lsrs	r5, r0, #16
 8001a04:	4445      	add	r5, r8
 8001a06:	4377      	muls	r7, r6
 8001a08:	42a9      	cmp	r1, r5
 8001a0a:	d903      	bls.n	8001a14 <__aeabi_dmul+0x22c>
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	0249      	lsls	r1, r1, #9
 8001a10:	468c      	mov	ip, r1
 8001a12:	4467      	add	r7, ip
 8001a14:	0c29      	lsrs	r1, r5, #16
 8001a16:	468c      	mov	ip, r1
 8001a18:	0039      	movs	r1, r7
 8001a1a:	0400      	lsls	r0, r0, #16
 8001a1c:	0c00      	lsrs	r0, r0, #16
 8001a1e:	042d      	lsls	r5, r5, #16
 8001a20:	182d      	adds	r5, r5, r0
 8001a22:	4461      	add	r1, ip
 8001a24:	44ab      	add	fp, r5
 8001a26:	9105      	str	r1, [sp, #20]
 8001a28:	4659      	mov	r1, fp
 8001a2a:	9104      	str	r1, [sp, #16]
 8001a2c:	9901      	ldr	r1, [sp, #4]
 8001a2e:	040f      	lsls	r7, r1, #16
 8001a30:	0c3f      	lsrs	r7, r7, #16
 8001a32:	0c08      	lsrs	r0, r1, #16
 8001a34:	0039      	movs	r1, r7
 8001a36:	4351      	muls	r1, r2
 8001a38:	4342      	muls	r2, r0
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	468c      	mov	ip, r1
 8001a40:	0c09      	lsrs	r1, r1, #16
 8001a42:	468b      	mov	fp, r1
 8001a44:	4362      	muls	r2, r4
 8001a46:	437c      	muls	r4, r7
 8001a48:	4444      	add	r4, r8
 8001a4a:	445c      	add	r4, fp
 8001a4c:	45a0      	cmp	r8, r4
 8001a4e:	d903      	bls.n	8001a58 <__aeabi_dmul+0x270>
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0249      	lsls	r1, r1, #9
 8001a54:	4688      	mov	r8, r1
 8001a56:	4442      	add	r2, r8
 8001a58:	0c21      	lsrs	r1, r4, #16
 8001a5a:	4688      	mov	r8, r1
 8001a5c:	4661      	mov	r1, ip
 8001a5e:	0409      	lsls	r1, r1, #16
 8001a60:	0c09      	lsrs	r1, r1, #16
 8001a62:	468c      	mov	ip, r1
 8001a64:	0039      	movs	r1, r7
 8001a66:	4359      	muls	r1, r3
 8001a68:	4343      	muls	r3, r0
 8001a6a:	4370      	muls	r0, r6
 8001a6c:	437e      	muls	r6, r7
 8001a6e:	0c0f      	lsrs	r7, r1, #16
 8001a70:	18f6      	adds	r6, r6, r3
 8001a72:	0424      	lsls	r4, r4, #16
 8001a74:	19be      	adds	r6, r7, r6
 8001a76:	4464      	add	r4, ip
 8001a78:	4442      	add	r2, r8
 8001a7a:	468c      	mov	ip, r1
 8001a7c:	42b3      	cmp	r3, r6
 8001a7e:	d903      	bls.n	8001a88 <__aeabi_dmul+0x2a0>
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	025b      	lsls	r3, r3, #9
 8001a84:	4698      	mov	r8, r3
 8001a86:	4440      	add	r0, r8
 8001a88:	9b02      	ldr	r3, [sp, #8]
 8001a8a:	4661      	mov	r1, ip
 8001a8c:	4698      	mov	r8, r3
 8001a8e:	9b04      	ldr	r3, [sp, #16]
 8001a90:	0437      	lsls	r7, r6, #16
 8001a92:	4443      	add	r3, r8
 8001a94:	469b      	mov	fp, r3
 8001a96:	45ab      	cmp	fp, r5
 8001a98:	41ad      	sbcs	r5, r5
 8001a9a:	426b      	negs	r3, r5
 8001a9c:	040d      	lsls	r5, r1, #16
 8001a9e:	9905      	ldr	r1, [sp, #20]
 8001aa0:	0c2d      	lsrs	r5, r5, #16
 8001aa2:	468c      	mov	ip, r1
 8001aa4:	197f      	adds	r7, r7, r5
 8001aa6:	4467      	add	r7, ip
 8001aa8:	18fd      	adds	r5, r7, r3
 8001aaa:	46a8      	mov	r8, r5
 8001aac:	465d      	mov	r5, fp
 8001aae:	192d      	adds	r5, r5, r4
 8001ab0:	42a5      	cmp	r5, r4
 8001ab2:	41a4      	sbcs	r4, r4
 8001ab4:	4693      	mov	fp, r2
 8001ab6:	4264      	negs	r4, r4
 8001ab8:	46a4      	mov	ip, r4
 8001aba:	44c3      	add	fp, r8
 8001abc:	44dc      	add	ip, fp
 8001abe:	428f      	cmp	r7, r1
 8001ac0:	41bf      	sbcs	r7, r7
 8001ac2:	4598      	cmp	r8, r3
 8001ac4:	419b      	sbcs	r3, r3
 8001ac6:	4593      	cmp	fp, r2
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	45a4      	cmp	ip, r4
 8001acc:	41a4      	sbcs	r4, r4
 8001ace:	425b      	negs	r3, r3
 8001ad0:	427f      	negs	r7, r7
 8001ad2:	431f      	orrs	r7, r3
 8001ad4:	0c36      	lsrs	r6, r6, #16
 8001ad6:	4252      	negs	r2, r2
 8001ad8:	4264      	negs	r4, r4
 8001ada:	19bf      	adds	r7, r7, r6
 8001adc:	4322      	orrs	r2, r4
 8001ade:	18bf      	adds	r7, r7, r2
 8001ae0:	4662      	mov	r2, ip
 8001ae2:	1838      	adds	r0, r7, r0
 8001ae4:	0243      	lsls	r3, r0, #9
 8001ae6:	0dd2      	lsrs	r2, r2, #23
 8001ae8:	9903      	ldr	r1, [sp, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	026a      	lsls	r2, r5, #9
 8001aee:	430a      	orrs	r2, r1
 8001af0:	1e50      	subs	r0, r2, #1
 8001af2:	4182      	sbcs	r2, r0
 8001af4:	4661      	mov	r1, ip
 8001af6:	0ded      	lsrs	r5, r5, #23
 8001af8:	432a      	orrs	r2, r5
 8001afa:	024e      	lsls	r6, r1, #9
 8001afc:	4332      	orrs	r2, r6
 8001afe:	01d9      	lsls	r1, r3, #7
 8001b00:	d400      	bmi.n	8001b04 <__aeabi_dmul+0x31c>
 8001b02:	e0b3      	b.n	8001c6c <__aeabi_dmul+0x484>
 8001b04:	2601      	movs	r6, #1
 8001b06:	0850      	lsrs	r0, r2, #1
 8001b08:	4032      	ands	r2, r6
 8001b0a:	4302      	orrs	r2, r0
 8001b0c:	07de      	lsls	r6, r3, #31
 8001b0e:	4332      	orrs	r2, r6
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	4c22      	ldr	r4, [pc, #136]	; (8001b9c <__aeabi_dmul+0x3b4>)
 8001b14:	4454      	add	r4, sl
 8001b16:	2c00      	cmp	r4, #0
 8001b18:	dd62      	ble.n	8001be0 <__aeabi_dmul+0x3f8>
 8001b1a:	0751      	lsls	r1, r2, #29
 8001b1c:	d009      	beq.n	8001b32 <__aeabi_dmul+0x34a>
 8001b1e:	200f      	movs	r0, #15
 8001b20:	4010      	ands	r0, r2
 8001b22:	2804      	cmp	r0, #4
 8001b24:	d005      	beq.n	8001b32 <__aeabi_dmul+0x34a>
 8001b26:	1d10      	adds	r0, r2, #4
 8001b28:	4290      	cmp	r0, r2
 8001b2a:	4192      	sbcs	r2, r2
 8001b2c:	4252      	negs	r2, r2
 8001b2e:	189b      	adds	r3, r3, r2
 8001b30:	0002      	movs	r2, r0
 8001b32:	01d9      	lsls	r1, r3, #7
 8001b34:	d504      	bpl.n	8001b40 <__aeabi_dmul+0x358>
 8001b36:	2480      	movs	r4, #128	; 0x80
 8001b38:	4819      	ldr	r0, [pc, #100]	; (8001ba0 <__aeabi_dmul+0x3b8>)
 8001b3a:	00e4      	lsls	r4, r4, #3
 8001b3c:	4003      	ands	r3, r0
 8001b3e:	4454      	add	r4, sl
 8001b40:	4818      	ldr	r0, [pc, #96]	; (8001ba4 <__aeabi_dmul+0x3bc>)
 8001b42:	4284      	cmp	r4, r0
 8001b44:	dd00      	ble.n	8001b48 <__aeabi_dmul+0x360>
 8001b46:	e727      	b.n	8001998 <__aeabi_dmul+0x1b0>
 8001b48:	075e      	lsls	r6, r3, #29
 8001b4a:	025b      	lsls	r3, r3, #9
 8001b4c:	08d2      	lsrs	r2, r2, #3
 8001b4e:	0b1f      	lsrs	r7, r3, #12
 8001b50:	0563      	lsls	r3, r4, #21
 8001b52:	4316      	orrs	r6, r2
 8001b54:	0d5b      	lsrs	r3, r3, #21
 8001b56:	e6b2      	b.n	80018be <__aeabi_dmul+0xd6>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4699      	mov	r9, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	2704      	movs	r7, #4
 8001b60:	2600      	movs	r6, #0
 8001b62:	469b      	mov	fp, r3
 8001b64:	e664      	b.n	8001830 <__aeabi_dmul+0x48>
 8001b66:	2303      	movs	r3, #3
 8001b68:	9701      	str	r7, [sp, #4]
 8001b6a:	4681      	mov	r9, r0
 8001b6c:	270c      	movs	r7, #12
 8001b6e:	469b      	mov	fp, r3
 8001b70:	e65e      	b.n	8001830 <__aeabi_dmul+0x48>
 8001b72:	2201      	movs	r2, #1
 8001b74:	2001      	movs	r0, #1
 8001b76:	4317      	orrs	r7, r2
 8001b78:	2200      	movs	r2, #0
 8001b7a:	e676      	b.n	800186a <__aeabi_dmul+0x82>
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	2003      	movs	r0, #3
 8001b80:	431f      	orrs	r7, r3
 8001b82:	4643      	mov	r3, r8
 8001b84:	e671      	b.n	800186a <__aeabi_dmul+0x82>
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	000007ff 	.word	0x000007ff
 8001b8c:	fffffc01 	.word	0xfffffc01
 8001b90:	0800b1b4 	.word	0x0800b1b4
 8001b94:	800fffff 	.word	0x800fffff
 8001b98:	fffffc0d 	.word	0xfffffc0d
 8001b9c:	000003ff 	.word	0x000003ff
 8001ba0:	feffffff 	.word	0xfeffffff
 8001ba4:	000007fe 	.word	0x000007fe
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2780      	movs	r7, #128	; 0x80
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	033f      	lsls	r7, r7, #12
 8001bb0:	2600      	movs	r6, #0
 8001bb2:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <__aeabi_dmul+0x4d8>)
 8001bb4:	e683      	b.n	80018be <__aeabi_dmul+0xd6>
 8001bb6:	9b01      	ldr	r3, [sp, #4]
 8001bb8:	0032      	movs	r2, r6
 8001bba:	46a4      	mov	ip, r4
 8001bbc:	4658      	mov	r0, fp
 8001bbe:	e670      	b.n	80018a2 <__aeabi_dmul+0xba>
 8001bc0:	46ac      	mov	ip, r5
 8001bc2:	e66e      	b.n	80018a2 <__aeabi_dmul+0xba>
 8001bc4:	2780      	movs	r7, #128	; 0x80
 8001bc6:	9901      	ldr	r1, [sp, #4]
 8001bc8:	033f      	lsls	r7, r7, #12
 8001bca:	4239      	tst	r1, r7
 8001bcc:	d02d      	beq.n	8001c2a <__aeabi_dmul+0x442>
 8001bce:	423b      	tst	r3, r7
 8001bd0:	d12b      	bne.n	8001c2a <__aeabi_dmul+0x442>
 8001bd2:	431f      	orrs	r7, r3
 8001bd4:	033f      	lsls	r7, r7, #12
 8001bd6:	0b3f      	lsrs	r7, r7, #12
 8001bd8:	9500      	str	r5, [sp, #0]
 8001bda:	0016      	movs	r6, r2
 8001bdc:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <__aeabi_dmul+0x4d8>)
 8001bde:	e66e      	b.n	80018be <__aeabi_dmul+0xd6>
 8001be0:	2501      	movs	r5, #1
 8001be2:	1b2d      	subs	r5, r5, r4
 8001be4:	2d38      	cmp	r5, #56	; 0x38
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dmul+0x402>
 8001be8:	e666      	b.n	80018b8 <__aeabi_dmul+0xd0>
 8001bea:	2d1f      	cmp	r5, #31
 8001bec:	dc40      	bgt.n	8001c70 <__aeabi_dmul+0x488>
 8001bee:	4835      	ldr	r0, [pc, #212]	; (8001cc4 <__aeabi_dmul+0x4dc>)
 8001bf0:	001c      	movs	r4, r3
 8001bf2:	4450      	add	r0, sl
 8001bf4:	0016      	movs	r6, r2
 8001bf6:	4082      	lsls	r2, r0
 8001bf8:	4084      	lsls	r4, r0
 8001bfa:	40ee      	lsrs	r6, r5
 8001bfc:	1e50      	subs	r0, r2, #1
 8001bfe:	4182      	sbcs	r2, r0
 8001c00:	4334      	orrs	r4, r6
 8001c02:	4314      	orrs	r4, r2
 8001c04:	40eb      	lsrs	r3, r5
 8001c06:	0762      	lsls	r2, r4, #29
 8001c08:	d009      	beq.n	8001c1e <__aeabi_dmul+0x436>
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	4022      	ands	r2, r4
 8001c0e:	2a04      	cmp	r2, #4
 8001c10:	d005      	beq.n	8001c1e <__aeabi_dmul+0x436>
 8001c12:	0022      	movs	r2, r4
 8001c14:	1d14      	adds	r4, r2, #4
 8001c16:	4294      	cmp	r4, r2
 8001c18:	4180      	sbcs	r0, r0
 8001c1a:	4240      	negs	r0, r0
 8001c1c:	181b      	adds	r3, r3, r0
 8001c1e:	021a      	lsls	r2, r3, #8
 8001c20:	d53e      	bpl.n	8001ca0 <__aeabi_dmul+0x4b8>
 8001c22:	2301      	movs	r3, #1
 8001c24:	2700      	movs	r7, #0
 8001c26:	2600      	movs	r6, #0
 8001c28:	e649      	b.n	80018be <__aeabi_dmul+0xd6>
 8001c2a:	2780      	movs	r7, #128	; 0x80
 8001c2c:	9b01      	ldr	r3, [sp, #4]
 8001c2e:	033f      	lsls	r7, r7, #12
 8001c30:	431f      	orrs	r7, r3
 8001c32:	033f      	lsls	r7, r7, #12
 8001c34:	0b3f      	lsrs	r7, r7, #12
 8001c36:	9400      	str	r4, [sp, #0]
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <__aeabi_dmul+0x4d8>)
 8001c3a:	e640      	b.n	80018be <__aeabi_dmul+0xd6>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	465a      	mov	r2, fp
 8001c40:	3b28      	subs	r3, #40	; 0x28
 8001c42:	409a      	lsls	r2, r3
 8001c44:	2600      	movs	r6, #0
 8001c46:	9201      	str	r2, [sp, #4]
 8001c48:	e66d      	b.n	8001926 <__aeabi_dmul+0x13e>
 8001c4a:	4658      	mov	r0, fp
 8001c4c:	f000 fc96 	bl	800257c <__clzsi2>
 8001c50:	3020      	adds	r0, #32
 8001c52:	e657      	b.n	8001904 <__aeabi_dmul+0x11c>
 8001c54:	0003      	movs	r3, r0
 8001c56:	4652      	mov	r2, sl
 8001c58:	3b28      	subs	r3, #40	; 0x28
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	2200      	movs	r2, #0
 8001c60:	e693      	b.n	800198a <__aeabi_dmul+0x1a2>
 8001c62:	4650      	mov	r0, sl
 8001c64:	f000 fc8a 	bl	800257c <__clzsi2>
 8001c68:	3020      	adds	r0, #32
 8001c6a:	e67b      	b.n	8001964 <__aeabi_dmul+0x17c>
 8001c6c:	46ca      	mov	sl, r9
 8001c6e:	e750      	b.n	8001b12 <__aeabi_dmul+0x32a>
 8001c70:	201f      	movs	r0, #31
 8001c72:	001e      	movs	r6, r3
 8001c74:	4240      	negs	r0, r0
 8001c76:	1b04      	subs	r4, r0, r4
 8001c78:	40e6      	lsrs	r6, r4
 8001c7a:	2d20      	cmp	r5, #32
 8001c7c:	d003      	beq.n	8001c86 <__aeabi_dmul+0x49e>
 8001c7e:	4c12      	ldr	r4, [pc, #72]	; (8001cc8 <__aeabi_dmul+0x4e0>)
 8001c80:	4454      	add	r4, sl
 8001c82:	40a3      	lsls	r3, r4
 8001c84:	431a      	orrs	r2, r3
 8001c86:	1e50      	subs	r0, r2, #1
 8001c88:	4182      	sbcs	r2, r0
 8001c8a:	4332      	orrs	r2, r6
 8001c8c:	2607      	movs	r6, #7
 8001c8e:	2700      	movs	r7, #0
 8001c90:	4016      	ands	r6, r2
 8001c92:	d009      	beq.n	8001ca8 <__aeabi_dmul+0x4c0>
 8001c94:	200f      	movs	r0, #15
 8001c96:	2300      	movs	r3, #0
 8001c98:	4010      	ands	r0, r2
 8001c9a:	0014      	movs	r4, r2
 8001c9c:	2804      	cmp	r0, #4
 8001c9e:	d1b9      	bne.n	8001c14 <__aeabi_dmul+0x42c>
 8001ca0:	0022      	movs	r2, r4
 8001ca2:	075e      	lsls	r6, r3, #29
 8001ca4:	025b      	lsls	r3, r3, #9
 8001ca6:	0b1f      	lsrs	r7, r3, #12
 8001ca8:	08d2      	lsrs	r2, r2, #3
 8001caa:	4316      	orrs	r6, r2
 8001cac:	2300      	movs	r3, #0
 8001cae:	e606      	b.n	80018be <__aeabi_dmul+0xd6>
 8001cb0:	2780      	movs	r7, #128	; 0x80
 8001cb2:	033f      	lsls	r7, r7, #12
 8001cb4:	431f      	orrs	r7, r3
 8001cb6:	033f      	lsls	r7, r7, #12
 8001cb8:	0b3f      	lsrs	r7, r7, #12
 8001cba:	0016      	movs	r6, r2
 8001cbc:	4b00      	ldr	r3, [pc, #0]	; (8001cc0 <__aeabi_dmul+0x4d8>)
 8001cbe:	e5fe      	b.n	80018be <__aeabi_dmul+0xd6>
 8001cc0:	000007ff 	.word	0x000007ff
 8001cc4:	0000041e 	.word	0x0000041e
 8001cc8:	0000043e 	.word	0x0000043e

08001ccc <__aeabi_dsub>:
 8001ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cce:	4657      	mov	r7, sl
 8001cd0:	464e      	mov	r6, r9
 8001cd2:	4645      	mov	r5, r8
 8001cd4:	46de      	mov	lr, fp
 8001cd6:	000c      	movs	r4, r1
 8001cd8:	0309      	lsls	r1, r1, #12
 8001cda:	b5e0      	push	{r5, r6, r7, lr}
 8001cdc:	0a49      	lsrs	r1, r1, #9
 8001cde:	0f46      	lsrs	r6, r0, #29
 8001ce0:	005f      	lsls	r7, r3, #1
 8001ce2:	4331      	orrs	r1, r6
 8001ce4:	031e      	lsls	r6, r3, #12
 8001ce6:	0fdb      	lsrs	r3, r3, #31
 8001ce8:	0a76      	lsrs	r6, r6, #9
 8001cea:	469b      	mov	fp, r3
 8001cec:	0f53      	lsrs	r3, r2, #29
 8001cee:	4333      	orrs	r3, r6
 8001cf0:	4ec8      	ldr	r6, [pc, #800]	; (8002014 <__aeabi_dsub+0x348>)
 8001cf2:	0065      	lsls	r5, r4, #1
 8001cf4:	00c0      	lsls	r0, r0, #3
 8001cf6:	0fe4      	lsrs	r4, r4, #31
 8001cf8:	00d2      	lsls	r2, r2, #3
 8001cfa:	0d6d      	lsrs	r5, r5, #21
 8001cfc:	46a2      	mov	sl, r4
 8001cfe:	4681      	mov	r9, r0
 8001d00:	0d7f      	lsrs	r7, r7, #21
 8001d02:	469c      	mov	ip, r3
 8001d04:	4690      	mov	r8, r2
 8001d06:	42b7      	cmp	r7, r6
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x40>
 8001d0a:	e0b9      	b.n	8001e80 <__aeabi_dsub+0x1b4>
 8001d0c:	465b      	mov	r3, fp
 8001d0e:	2601      	movs	r6, #1
 8001d10:	4073      	eors	r3, r6
 8001d12:	469b      	mov	fp, r3
 8001d14:	1bee      	subs	r6, r5, r7
 8001d16:	45a3      	cmp	fp, r4
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dsub+0x50>
 8001d1a:	e083      	b.n	8001e24 <__aeabi_dsub+0x158>
 8001d1c:	2e00      	cmp	r6, #0
 8001d1e:	dd63      	ble.n	8001de8 <__aeabi_dsub+0x11c>
 8001d20:	2f00      	cmp	r7, #0
 8001d22:	d000      	beq.n	8001d26 <__aeabi_dsub+0x5a>
 8001d24:	e0b1      	b.n	8001e8a <__aeabi_dsub+0x1be>
 8001d26:	4663      	mov	r3, ip
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x62>
 8001d2c:	e123      	b.n	8001f76 <__aeabi_dsub+0x2aa>
 8001d2e:	1e73      	subs	r3, r6, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d000      	beq.n	8001d36 <__aeabi_dsub+0x6a>
 8001d34:	e1ba      	b.n	80020ac <__aeabi_dsub+0x3e0>
 8001d36:	1a86      	subs	r6, r0, r2
 8001d38:	4663      	mov	r3, ip
 8001d3a:	42b0      	cmp	r0, r6
 8001d3c:	4180      	sbcs	r0, r0
 8001d3e:	2501      	movs	r5, #1
 8001d40:	1ac9      	subs	r1, r1, r3
 8001d42:	4240      	negs	r0, r0
 8001d44:	1a09      	subs	r1, r1, r0
 8001d46:	020b      	lsls	r3, r1, #8
 8001d48:	d400      	bmi.n	8001d4c <__aeabi_dsub+0x80>
 8001d4a:	e147      	b.n	8001fdc <__aeabi_dsub+0x310>
 8001d4c:	0249      	lsls	r1, r1, #9
 8001d4e:	0a4b      	lsrs	r3, r1, #9
 8001d50:	4698      	mov	r8, r3
 8001d52:	4643      	mov	r3, r8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0x8e>
 8001d58:	e189      	b.n	800206e <__aeabi_dsub+0x3a2>
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	f000 fc0e 	bl	800257c <__clzsi2>
 8001d60:	0003      	movs	r3, r0
 8001d62:	3b08      	subs	r3, #8
 8001d64:	2b1f      	cmp	r3, #31
 8001d66:	dd00      	ble.n	8001d6a <__aeabi_dsub+0x9e>
 8001d68:	e17c      	b.n	8002064 <__aeabi_dsub+0x398>
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	0030      	movs	r0, r6
 8001d6e:	1ad2      	subs	r2, r2, r3
 8001d70:	4641      	mov	r1, r8
 8001d72:	40d0      	lsrs	r0, r2
 8001d74:	4099      	lsls	r1, r3
 8001d76:	0002      	movs	r2, r0
 8001d78:	409e      	lsls	r6, r3
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	429d      	cmp	r5, r3
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dsub+0xb6>
 8001d80:	e16a      	b.n	8002058 <__aeabi_dsub+0x38c>
 8001d82:	1b5d      	subs	r5, r3, r5
 8001d84:	1c6b      	adds	r3, r5, #1
 8001d86:	2b1f      	cmp	r3, #31
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dsub+0xc0>
 8001d8a:	e194      	b.n	80020b6 <__aeabi_dsub+0x3ea>
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	0010      	movs	r0, r2
 8001d90:	0035      	movs	r5, r6
 8001d92:	1ac9      	subs	r1, r1, r3
 8001d94:	408e      	lsls	r6, r1
 8001d96:	40da      	lsrs	r2, r3
 8001d98:	4088      	lsls	r0, r1
 8001d9a:	40dd      	lsrs	r5, r3
 8001d9c:	1e71      	subs	r1, r6, #1
 8001d9e:	418e      	sbcs	r6, r1
 8001da0:	0011      	movs	r1, r2
 8001da2:	2207      	movs	r2, #7
 8001da4:	4328      	orrs	r0, r5
 8001da6:	2500      	movs	r5, #0
 8001da8:	4306      	orrs	r6, r0
 8001daa:	4032      	ands	r2, r6
 8001dac:	2a00      	cmp	r2, #0
 8001dae:	d009      	beq.n	8001dc4 <__aeabi_dsub+0xf8>
 8001db0:	230f      	movs	r3, #15
 8001db2:	4033      	ands	r3, r6
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d005      	beq.n	8001dc4 <__aeabi_dsub+0xf8>
 8001db8:	1d33      	adds	r3, r6, #4
 8001dba:	42b3      	cmp	r3, r6
 8001dbc:	41b6      	sbcs	r6, r6
 8001dbe:	4276      	negs	r6, r6
 8001dc0:	1989      	adds	r1, r1, r6
 8001dc2:	001e      	movs	r6, r3
 8001dc4:	020b      	lsls	r3, r1, #8
 8001dc6:	d400      	bmi.n	8001dca <__aeabi_dsub+0xfe>
 8001dc8:	e23d      	b.n	8002246 <__aeabi_dsub+0x57a>
 8001dca:	1c6a      	adds	r2, r5, #1
 8001dcc:	4b91      	ldr	r3, [pc, #580]	; (8002014 <__aeabi_dsub+0x348>)
 8001dce:	0555      	lsls	r5, r2, #21
 8001dd0:	0d6d      	lsrs	r5, r5, #21
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x10c>
 8001dd6:	e119      	b.n	800200c <__aeabi_dsub+0x340>
 8001dd8:	4a8f      	ldr	r2, [pc, #572]	; (8002018 <__aeabi_dsub+0x34c>)
 8001dda:	08f6      	lsrs	r6, r6, #3
 8001ddc:	400a      	ands	r2, r1
 8001dde:	0757      	lsls	r7, r2, #29
 8001de0:	0252      	lsls	r2, r2, #9
 8001de2:	4337      	orrs	r7, r6
 8001de4:	0b12      	lsrs	r2, r2, #12
 8001de6:	e09b      	b.n	8001f20 <__aeabi_dsub+0x254>
 8001de8:	2e00      	cmp	r6, #0
 8001dea:	d000      	beq.n	8001dee <__aeabi_dsub+0x122>
 8001dec:	e0c5      	b.n	8001f7a <__aeabi_dsub+0x2ae>
 8001dee:	1c6e      	adds	r6, r5, #1
 8001df0:	0576      	lsls	r6, r6, #21
 8001df2:	0d76      	lsrs	r6, r6, #21
 8001df4:	2e01      	cmp	r6, #1
 8001df6:	dc00      	bgt.n	8001dfa <__aeabi_dsub+0x12e>
 8001df8:	e148      	b.n	800208c <__aeabi_dsub+0x3c0>
 8001dfa:	4667      	mov	r7, ip
 8001dfc:	1a86      	subs	r6, r0, r2
 8001dfe:	1bcb      	subs	r3, r1, r7
 8001e00:	42b0      	cmp	r0, r6
 8001e02:	41bf      	sbcs	r7, r7
 8001e04:	427f      	negs	r7, r7
 8001e06:	46b8      	mov	r8, r7
 8001e08:	001f      	movs	r7, r3
 8001e0a:	4643      	mov	r3, r8
 8001e0c:	1aff      	subs	r7, r7, r3
 8001e0e:	003b      	movs	r3, r7
 8001e10:	46b8      	mov	r8, r7
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	d500      	bpl.n	8001e18 <__aeabi_dsub+0x14c>
 8001e16:	e15f      	b.n	80020d8 <__aeabi_dsub+0x40c>
 8001e18:	4337      	orrs	r7, r6
 8001e1a:	d19a      	bne.n	8001d52 <__aeabi_dsub+0x86>
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2400      	movs	r4, #0
 8001e20:	2500      	movs	r5, #0
 8001e22:	e079      	b.n	8001f18 <__aeabi_dsub+0x24c>
 8001e24:	2e00      	cmp	r6, #0
 8001e26:	dc00      	bgt.n	8001e2a <__aeabi_dsub+0x15e>
 8001e28:	e0fa      	b.n	8002020 <__aeabi_dsub+0x354>
 8001e2a:	2f00      	cmp	r7, #0
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x164>
 8001e2e:	e08d      	b.n	8001f4c <__aeabi_dsub+0x280>
 8001e30:	4b78      	ldr	r3, [pc, #480]	; (8002014 <__aeabi_dsub+0x348>)
 8001e32:	429d      	cmp	r5, r3
 8001e34:	d067      	beq.n	8001f06 <__aeabi_dsub+0x23a>
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	4667      	mov	r7, ip
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	431f      	orrs	r7, r3
 8001e3e:	46bc      	mov	ip, r7
 8001e40:	2e38      	cmp	r6, #56	; 0x38
 8001e42:	dc00      	bgt.n	8001e46 <__aeabi_dsub+0x17a>
 8001e44:	e152      	b.n	80020ec <__aeabi_dsub+0x420>
 8001e46:	4663      	mov	r3, ip
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	4193      	sbcs	r3, r2
 8001e4e:	181e      	adds	r6, r3, r0
 8001e50:	4286      	cmp	r6, r0
 8001e52:	4180      	sbcs	r0, r0
 8001e54:	4240      	negs	r0, r0
 8001e56:	1809      	adds	r1, r1, r0
 8001e58:	020b      	lsls	r3, r1, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x192>
 8001e5c:	e0be      	b.n	8001fdc <__aeabi_dsub+0x310>
 8001e5e:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <__aeabi_dsub+0x348>)
 8001e60:	3501      	adds	r5, #1
 8001e62:	429d      	cmp	r5, r3
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x19c>
 8001e66:	e0d2      	b.n	800200e <__aeabi_dsub+0x342>
 8001e68:	4a6b      	ldr	r2, [pc, #428]	; (8002018 <__aeabi_dsub+0x34c>)
 8001e6a:	0873      	lsrs	r3, r6, #1
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	2101      	movs	r1, #1
 8001e70:	400e      	ands	r6, r1
 8001e72:	431e      	orrs	r6, r3
 8001e74:	0851      	lsrs	r1, r2, #1
 8001e76:	07d3      	lsls	r3, r2, #31
 8001e78:	2207      	movs	r2, #7
 8001e7a:	431e      	orrs	r6, r3
 8001e7c:	4032      	ands	r2, r6
 8001e7e:	e795      	b.n	8001dac <__aeabi_dsub+0xe0>
 8001e80:	001e      	movs	r6, r3
 8001e82:	4316      	orrs	r6, r2
 8001e84:	d000      	beq.n	8001e88 <__aeabi_dsub+0x1bc>
 8001e86:	e745      	b.n	8001d14 <__aeabi_dsub+0x48>
 8001e88:	e740      	b.n	8001d0c <__aeabi_dsub+0x40>
 8001e8a:	4b62      	ldr	r3, [pc, #392]	; (8002014 <__aeabi_dsub+0x348>)
 8001e8c:	429d      	cmp	r5, r3
 8001e8e:	d03a      	beq.n	8001f06 <__aeabi_dsub+0x23a>
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	4667      	mov	r7, ip
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	431f      	orrs	r7, r3
 8001e98:	46bc      	mov	ip, r7
 8001e9a:	2e38      	cmp	r6, #56	; 0x38
 8001e9c:	dd00      	ble.n	8001ea0 <__aeabi_dsub+0x1d4>
 8001e9e:	e0eb      	b.n	8002078 <__aeabi_dsub+0x3ac>
 8001ea0:	2e1f      	cmp	r6, #31
 8001ea2:	dc00      	bgt.n	8001ea6 <__aeabi_dsub+0x1da>
 8001ea4:	e13a      	b.n	800211c <__aeabi_dsub+0x450>
 8001ea6:	0033      	movs	r3, r6
 8001ea8:	4667      	mov	r7, ip
 8001eaa:	3b20      	subs	r3, #32
 8001eac:	40df      	lsrs	r7, r3
 8001eae:	003b      	movs	r3, r7
 8001eb0:	2e20      	cmp	r6, #32
 8001eb2:	d005      	beq.n	8001ec0 <__aeabi_dsub+0x1f4>
 8001eb4:	2740      	movs	r7, #64	; 0x40
 8001eb6:	1bbf      	subs	r7, r7, r6
 8001eb8:	4666      	mov	r6, ip
 8001eba:	40be      	lsls	r6, r7
 8001ebc:	4332      	orrs	r2, r6
 8001ebe:	4690      	mov	r8, r2
 8001ec0:	4646      	mov	r6, r8
 8001ec2:	1e72      	subs	r2, r6, #1
 8001ec4:	4196      	sbcs	r6, r2
 8001ec6:	4333      	orrs	r3, r6
 8001ec8:	e0da      	b.n	8002080 <__aeabi_dsub+0x3b4>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x204>
 8001ece:	e214      	b.n	80022fa <__aeabi_dsub+0x62e>
 8001ed0:	4663      	mov	r3, ip
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x20c>
 8001ed6:	e168      	b.n	80021aa <__aeabi_dsub+0x4de>
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	074e      	lsls	r6, r1, #29
 8001edc:	08c0      	lsrs	r0, r0, #3
 8001ede:	08c9      	lsrs	r1, r1, #3
 8001ee0:	031b      	lsls	r3, r3, #12
 8001ee2:	4306      	orrs	r6, r0
 8001ee4:	4219      	tst	r1, r3
 8001ee6:	d008      	beq.n	8001efa <__aeabi_dsub+0x22e>
 8001ee8:	4660      	mov	r0, ip
 8001eea:	08c0      	lsrs	r0, r0, #3
 8001eec:	4218      	tst	r0, r3
 8001eee:	d104      	bne.n	8001efa <__aeabi_dsub+0x22e>
 8001ef0:	4663      	mov	r3, ip
 8001ef2:	0001      	movs	r1, r0
 8001ef4:	08d2      	lsrs	r2, r2, #3
 8001ef6:	075e      	lsls	r6, r3, #29
 8001ef8:	4316      	orrs	r6, r2
 8001efa:	00f3      	lsls	r3, r6, #3
 8001efc:	4699      	mov	r9, r3
 8001efe:	00c9      	lsls	r1, r1, #3
 8001f00:	0f72      	lsrs	r2, r6, #29
 8001f02:	4d44      	ldr	r5, [pc, #272]	; (8002014 <__aeabi_dsub+0x348>)
 8001f04:	4311      	orrs	r1, r2
 8001f06:	464b      	mov	r3, r9
 8001f08:	08de      	lsrs	r6, r3, #3
 8001f0a:	4b42      	ldr	r3, [pc, #264]	; (8002014 <__aeabi_dsub+0x348>)
 8001f0c:	074f      	lsls	r7, r1, #29
 8001f0e:	4337      	orrs	r7, r6
 8001f10:	08ca      	lsrs	r2, r1, #3
 8001f12:	429d      	cmp	r5, r3
 8001f14:	d100      	bne.n	8001f18 <__aeabi_dsub+0x24c>
 8001f16:	e06e      	b.n	8001ff6 <__aeabi_dsub+0x32a>
 8001f18:	0312      	lsls	r2, r2, #12
 8001f1a:	056d      	lsls	r5, r5, #21
 8001f1c:	0b12      	lsrs	r2, r2, #12
 8001f1e:	0d6d      	lsrs	r5, r5, #21
 8001f20:	2100      	movs	r1, #0
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	0b13      	lsrs	r3, r2, #12
 8001f26:	0d0a      	lsrs	r2, r1, #20
 8001f28:	0512      	lsls	r2, r2, #20
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	; (800201c <__aeabi_dsub+0x350>)
 8001f2e:	052d      	lsls	r5, r5, #20
 8001f30:	4013      	ands	r3, r2
 8001f32:	432b      	orrs	r3, r5
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	07e4      	lsls	r4, r4, #31
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	4323      	orrs	r3, r4
 8001f3c:	0038      	movs	r0, r7
 8001f3e:	0019      	movs	r1, r3
 8001f40:	bc3c      	pop	{r2, r3, r4, r5}
 8001f42:	4690      	mov	r8, r2
 8001f44:	4699      	mov	r9, r3
 8001f46:	46a2      	mov	sl, r4
 8001f48:	46ab      	mov	fp, r5
 8001f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f4c:	4663      	mov	r3, ip
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	d011      	beq.n	8001f76 <__aeabi_dsub+0x2aa>
 8001f52:	1e73      	subs	r3, r6, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d000      	beq.n	8001f5a <__aeabi_dsub+0x28e>
 8001f58:	e107      	b.n	800216a <__aeabi_dsub+0x49e>
 8001f5a:	1886      	adds	r6, r0, r2
 8001f5c:	4286      	cmp	r6, r0
 8001f5e:	4180      	sbcs	r0, r0
 8001f60:	4461      	add	r1, ip
 8001f62:	4240      	negs	r0, r0
 8001f64:	1809      	adds	r1, r1, r0
 8001f66:	2501      	movs	r5, #1
 8001f68:	020b      	lsls	r3, r1, #8
 8001f6a:	d537      	bpl.n	8001fdc <__aeabi_dsub+0x310>
 8001f6c:	2502      	movs	r5, #2
 8001f6e:	e77b      	b.n	8001e68 <__aeabi_dsub+0x19c>
 8001f70:	003e      	movs	r6, r7
 8001f72:	4661      	mov	r1, ip
 8001f74:	4691      	mov	r9, r2
 8001f76:	0035      	movs	r5, r6
 8001f78:	e7c5      	b.n	8001f06 <__aeabi_dsub+0x23a>
 8001f7a:	465c      	mov	r4, fp
 8001f7c:	2d00      	cmp	r5, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x2b6>
 8001f80:	e0e1      	b.n	8002146 <__aeabi_dsub+0x47a>
 8001f82:	000b      	movs	r3, r1
 8001f84:	4303      	orrs	r3, r0
 8001f86:	d0f3      	beq.n	8001f70 <__aeabi_dsub+0x2a4>
 8001f88:	1c73      	adds	r3, r6, #1
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x2c2>
 8001f8c:	e1ac      	b.n	80022e8 <__aeabi_dsub+0x61c>
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <__aeabi_dsub+0x348>)
 8001f90:	429f      	cmp	r7, r3
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dsub+0x2ca>
 8001f94:	e13a      	b.n	800220c <__aeabi_dsub+0x540>
 8001f96:	43f3      	mvns	r3, r6
 8001f98:	2b38      	cmp	r3, #56	; 0x38
 8001f9a:	dd00      	ble.n	8001f9e <__aeabi_dsub+0x2d2>
 8001f9c:	e16f      	b.n	800227e <__aeabi_dsub+0x5b2>
 8001f9e:	2b1f      	cmp	r3, #31
 8001fa0:	dd00      	ble.n	8001fa4 <__aeabi_dsub+0x2d8>
 8001fa2:	e18c      	b.n	80022be <__aeabi_dsub+0x5f2>
 8001fa4:	2520      	movs	r5, #32
 8001fa6:	000e      	movs	r6, r1
 8001fa8:	1aed      	subs	r5, r5, r3
 8001faa:	40ae      	lsls	r6, r5
 8001fac:	46b0      	mov	r8, r6
 8001fae:	0006      	movs	r6, r0
 8001fb0:	46aa      	mov	sl, r5
 8001fb2:	40de      	lsrs	r6, r3
 8001fb4:	4645      	mov	r5, r8
 8001fb6:	4335      	orrs	r5, r6
 8001fb8:	002e      	movs	r6, r5
 8001fba:	4655      	mov	r5, sl
 8001fbc:	40d9      	lsrs	r1, r3
 8001fbe:	40a8      	lsls	r0, r5
 8001fc0:	4663      	mov	r3, ip
 8001fc2:	1e45      	subs	r5, r0, #1
 8001fc4:	41a8      	sbcs	r0, r5
 8001fc6:	1a5b      	subs	r3, r3, r1
 8001fc8:	469c      	mov	ip, r3
 8001fca:	4330      	orrs	r0, r6
 8001fcc:	1a16      	subs	r6, r2, r0
 8001fce:	42b2      	cmp	r2, r6
 8001fd0:	4192      	sbcs	r2, r2
 8001fd2:	4663      	mov	r3, ip
 8001fd4:	4252      	negs	r2, r2
 8001fd6:	1a99      	subs	r1, r3, r2
 8001fd8:	003d      	movs	r5, r7
 8001fda:	e6b4      	b.n	8001d46 <__aeabi_dsub+0x7a>
 8001fdc:	2207      	movs	r2, #7
 8001fde:	4032      	ands	r2, r6
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_dsub+0x31a>
 8001fe4:	e6e4      	b.n	8001db0 <__aeabi_dsub+0xe4>
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <__aeabi_dsub+0x348>)
 8001fe8:	08f6      	lsrs	r6, r6, #3
 8001fea:	074f      	lsls	r7, r1, #29
 8001fec:	4337      	orrs	r7, r6
 8001fee:	08ca      	lsrs	r2, r1, #3
 8001ff0:	429d      	cmp	r5, r3
 8001ff2:	d000      	beq.n	8001ff6 <__aeabi_dsub+0x32a>
 8001ff4:	e790      	b.n	8001f18 <__aeabi_dsub+0x24c>
 8001ff6:	003b      	movs	r3, r7
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x332>
 8001ffc:	e1a6      	b.n	800234c <__aeabi_dsub+0x680>
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	031b      	lsls	r3, r3, #12
 8002002:	431a      	orrs	r2, r3
 8002004:	0312      	lsls	r2, r2, #12
 8002006:	0b12      	lsrs	r2, r2, #12
 8002008:	4d02      	ldr	r5, [pc, #8]	; (8002014 <__aeabi_dsub+0x348>)
 800200a:	e789      	b.n	8001f20 <__aeabi_dsub+0x254>
 800200c:	0015      	movs	r5, r2
 800200e:	2200      	movs	r2, #0
 8002010:	2700      	movs	r7, #0
 8002012:	e785      	b.n	8001f20 <__aeabi_dsub+0x254>
 8002014:	000007ff 	.word	0x000007ff
 8002018:	ff7fffff 	.word	0xff7fffff
 800201c:	800fffff 	.word	0x800fffff
 8002020:	2e00      	cmp	r6, #0
 8002022:	d000      	beq.n	8002026 <__aeabi_dsub+0x35a>
 8002024:	e0c7      	b.n	80021b6 <__aeabi_dsub+0x4ea>
 8002026:	1c6b      	adds	r3, r5, #1
 8002028:	055e      	lsls	r6, r3, #21
 800202a:	0d76      	lsrs	r6, r6, #21
 800202c:	2e01      	cmp	r6, #1
 800202e:	dc00      	bgt.n	8002032 <__aeabi_dsub+0x366>
 8002030:	e0f0      	b.n	8002214 <__aeabi_dsub+0x548>
 8002032:	4dc8      	ldr	r5, [pc, #800]	; (8002354 <__aeabi_dsub+0x688>)
 8002034:	42ab      	cmp	r3, r5
 8002036:	d100      	bne.n	800203a <__aeabi_dsub+0x36e>
 8002038:	e0b9      	b.n	80021ae <__aeabi_dsub+0x4e2>
 800203a:	1885      	adds	r5, r0, r2
 800203c:	000a      	movs	r2, r1
 800203e:	4285      	cmp	r5, r0
 8002040:	4189      	sbcs	r1, r1
 8002042:	4462      	add	r2, ip
 8002044:	4249      	negs	r1, r1
 8002046:	1851      	adds	r1, r2, r1
 8002048:	2207      	movs	r2, #7
 800204a:	07ce      	lsls	r6, r1, #31
 800204c:	086d      	lsrs	r5, r5, #1
 800204e:	432e      	orrs	r6, r5
 8002050:	0849      	lsrs	r1, r1, #1
 8002052:	4032      	ands	r2, r6
 8002054:	001d      	movs	r5, r3
 8002056:	e6a9      	b.n	8001dac <__aeabi_dsub+0xe0>
 8002058:	49bf      	ldr	r1, [pc, #764]	; (8002358 <__aeabi_dsub+0x68c>)
 800205a:	1aed      	subs	r5, r5, r3
 800205c:	4011      	ands	r1, r2
 800205e:	2207      	movs	r2, #7
 8002060:	4032      	ands	r2, r6
 8002062:	e6a3      	b.n	8001dac <__aeabi_dsub+0xe0>
 8002064:	0032      	movs	r2, r6
 8002066:	3828      	subs	r0, #40	; 0x28
 8002068:	4082      	lsls	r2, r0
 800206a:	2600      	movs	r6, #0
 800206c:	e686      	b.n	8001d7c <__aeabi_dsub+0xb0>
 800206e:	0030      	movs	r0, r6
 8002070:	f000 fa84 	bl	800257c <__clzsi2>
 8002074:	3020      	adds	r0, #32
 8002076:	e673      	b.n	8001d60 <__aeabi_dsub+0x94>
 8002078:	4663      	mov	r3, ip
 800207a:	4313      	orrs	r3, r2
 800207c:	1e5a      	subs	r2, r3, #1
 800207e:	4193      	sbcs	r3, r2
 8002080:	1ac6      	subs	r6, r0, r3
 8002082:	42b0      	cmp	r0, r6
 8002084:	4180      	sbcs	r0, r0
 8002086:	4240      	negs	r0, r0
 8002088:	1a09      	subs	r1, r1, r0
 800208a:	e65c      	b.n	8001d46 <__aeabi_dsub+0x7a>
 800208c:	000e      	movs	r6, r1
 800208e:	4667      	mov	r7, ip
 8002090:	4306      	orrs	r6, r0
 8002092:	4317      	orrs	r7, r2
 8002094:	2d00      	cmp	r5, #0
 8002096:	d15e      	bne.n	8002156 <__aeabi_dsub+0x48a>
 8002098:	2e00      	cmp	r6, #0
 800209a:	d000      	beq.n	800209e <__aeabi_dsub+0x3d2>
 800209c:	e0f3      	b.n	8002286 <__aeabi_dsub+0x5ba>
 800209e:	2f00      	cmp	r7, #0
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x3d8>
 80020a2:	e11e      	b.n	80022e2 <__aeabi_dsub+0x616>
 80020a4:	465c      	mov	r4, fp
 80020a6:	4661      	mov	r1, ip
 80020a8:	4691      	mov	r9, r2
 80020aa:	e72c      	b.n	8001f06 <__aeabi_dsub+0x23a>
 80020ac:	4fa9      	ldr	r7, [pc, #676]	; (8002354 <__aeabi_dsub+0x688>)
 80020ae:	42be      	cmp	r6, r7
 80020b0:	d07b      	beq.n	80021aa <__aeabi_dsub+0x4de>
 80020b2:	001e      	movs	r6, r3
 80020b4:	e6f1      	b.n	8001e9a <__aeabi_dsub+0x1ce>
 80020b6:	0010      	movs	r0, r2
 80020b8:	3d1f      	subs	r5, #31
 80020ba:	40e8      	lsrs	r0, r5
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d003      	beq.n	80020c8 <__aeabi_dsub+0x3fc>
 80020c0:	2140      	movs	r1, #64	; 0x40
 80020c2:	1acb      	subs	r3, r1, r3
 80020c4:	409a      	lsls	r2, r3
 80020c6:	4316      	orrs	r6, r2
 80020c8:	1e73      	subs	r3, r6, #1
 80020ca:	419e      	sbcs	r6, r3
 80020cc:	2207      	movs	r2, #7
 80020ce:	4306      	orrs	r6, r0
 80020d0:	4032      	ands	r2, r6
 80020d2:	2100      	movs	r1, #0
 80020d4:	2500      	movs	r5, #0
 80020d6:	e783      	b.n	8001fe0 <__aeabi_dsub+0x314>
 80020d8:	1a16      	subs	r6, r2, r0
 80020da:	4663      	mov	r3, ip
 80020dc:	42b2      	cmp	r2, r6
 80020de:	4180      	sbcs	r0, r0
 80020e0:	1a59      	subs	r1, r3, r1
 80020e2:	4240      	negs	r0, r0
 80020e4:	1a0b      	subs	r3, r1, r0
 80020e6:	4698      	mov	r8, r3
 80020e8:	465c      	mov	r4, fp
 80020ea:	e632      	b.n	8001d52 <__aeabi_dsub+0x86>
 80020ec:	2e1f      	cmp	r6, #31
 80020ee:	dd00      	ble.n	80020f2 <__aeabi_dsub+0x426>
 80020f0:	e0ab      	b.n	800224a <__aeabi_dsub+0x57e>
 80020f2:	2720      	movs	r7, #32
 80020f4:	1bbb      	subs	r3, r7, r6
 80020f6:	469a      	mov	sl, r3
 80020f8:	4663      	mov	r3, ip
 80020fa:	4657      	mov	r7, sl
 80020fc:	40bb      	lsls	r3, r7
 80020fe:	4699      	mov	r9, r3
 8002100:	0013      	movs	r3, r2
 8002102:	464f      	mov	r7, r9
 8002104:	40f3      	lsrs	r3, r6
 8002106:	431f      	orrs	r7, r3
 8002108:	003b      	movs	r3, r7
 800210a:	4657      	mov	r7, sl
 800210c:	40ba      	lsls	r2, r7
 800210e:	1e57      	subs	r7, r2, #1
 8002110:	41ba      	sbcs	r2, r7
 8002112:	4313      	orrs	r3, r2
 8002114:	4662      	mov	r2, ip
 8002116:	40f2      	lsrs	r2, r6
 8002118:	1889      	adds	r1, r1, r2
 800211a:	e698      	b.n	8001e4e <__aeabi_dsub+0x182>
 800211c:	2720      	movs	r7, #32
 800211e:	1bbb      	subs	r3, r7, r6
 8002120:	469a      	mov	sl, r3
 8002122:	4663      	mov	r3, ip
 8002124:	4657      	mov	r7, sl
 8002126:	40bb      	lsls	r3, r7
 8002128:	4699      	mov	r9, r3
 800212a:	0013      	movs	r3, r2
 800212c:	464f      	mov	r7, r9
 800212e:	40f3      	lsrs	r3, r6
 8002130:	431f      	orrs	r7, r3
 8002132:	003b      	movs	r3, r7
 8002134:	4657      	mov	r7, sl
 8002136:	40ba      	lsls	r2, r7
 8002138:	1e57      	subs	r7, r2, #1
 800213a:	41ba      	sbcs	r2, r7
 800213c:	4313      	orrs	r3, r2
 800213e:	4662      	mov	r2, ip
 8002140:	40f2      	lsrs	r2, r6
 8002142:	1a89      	subs	r1, r1, r2
 8002144:	e79c      	b.n	8002080 <__aeabi_dsub+0x3b4>
 8002146:	4b83      	ldr	r3, [pc, #524]	; (8002354 <__aeabi_dsub+0x688>)
 8002148:	429f      	cmp	r7, r3
 800214a:	d05f      	beq.n	800220c <__aeabi_dsub+0x540>
 800214c:	2580      	movs	r5, #128	; 0x80
 800214e:	042d      	lsls	r5, r5, #16
 8002150:	4273      	negs	r3, r6
 8002152:	4329      	orrs	r1, r5
 8002154:	e720      	b.n	8001f98 <__aeabi_dsub+0x2cc>
 8002156:	2e00      	cmp	r6, #0
 8002158:	d10c      	bne.n	8002174 <__aeabi_dsub+0x4a8>
 800215a:	2f00      	cmp	r7, #0
 800215c:	d100      	bne.n	8002160 <__aeabi_dsub+0x494>
 800215e:	e0d0      	b.n	8002302 <__aeabi_dsub+0x636>
 8002160:	465c      	mov	r4, fp
 8002162:	4661      	mov	r1, ip
 8002164:	4691      	mov	r9, r2
 8002166:	4d7b      	ldr	r5, [pc, #492]	; (8002354 <__aeabi_dsub+0x688>)
 8002168:	e6cd      	b.n	8001f06 <__aeabi_dsub+0x23a>
 800216a:	4f7a      	ldr	r7, [pc, #488]	; (8002354 <__aeabi_dsub+0x688>)
 800216c:	42be      	cmp	r6, r7
 800216e:	d01c      	beq.n	80021aa <__aeabi_dsub+0x4de>
 8002170:	001e      	movs	r6, r3
 8002172:	e665      	b.n	8001e40 <__aeabi_dsub+0x174>
 8002174:	2f00      	cmp	r7, #0
 8002176:	d018      	beq.n	80021aa <__aeabi_dsub+0x4de>
 8002178:	08c0      	lsrs	r0, r0, #3
 800217a:	074e      	lsls	r6, r1, #29
 800217c:	4306      	orrs	r6, r0
 800217e:	2080      	movs	r0, #128	; 0x80
 8002180:	08c9      	lsrs	r1, r1, #3
 8002182:	0300      	lsls	r0, r0, #12
 8002184:	4201      	tst	r1, r0
 8002186:	d008      	beq.n	800219a <__aeabi_dsub+0x4ce>
 8002188:	4663      	mov	r3, ip
 800218a:	08dc      	lsrs	r4, r3, #3
 800218c:	4204      	tst	r4, r0
 800218e:	d104      	bne.n	800219a <__aeabi_dsub+0x4ce>
 8002190:	0021      	movs	r1, r4
 8002192:	46da      	mov	sl, fp
 8002194:	08d2      	lsrs	r2, r2, #3
 8002196:	075e      	lsls	r6, r3, #29
 8002198:	4316      	orrs	r6, r2
 800219a:	00f3      	lsls	r3, r6, #3
 800219c:	4699      	mov	r9, r3
 800219e:	2401      	movs	r4, #1
 80021a0:	4653      	mov	r3, sl
 80021a2:	00c9      	lsls	r1, r1, #3
 80021a4:	0f72      	lsrs	r2, r6, #29
 80021a6:	4311      	orrs	r1, r2
 80021a8:	401c      	ands	r4, r3
 80021aa:	4d6a      	ldr	r5, [pc, #424]	; (8002354 <__aeabi_dsub+0x688>)
 80021ac:	e6ab      	b.n	8001f06 <__aeabi_dsub+0x23a>
 80021ae:	001d      	movs	r5, r3
 80021b0:	2200      	movs	r2, #0
 80021b2:	2700      	movs	r7, #0
 80021b4:	e6b4      	b.n	8001f20 <__aeabi_dsub+0x254>
 80021b6:	2d00      	cmp	r5, #0
 80021b8:	d159      	bne.n	800226e <__aeabi_dsub+0x5a2>
 80021ba:	000b      	movs	r3, r1
 80021bc:	4303      	orrs	r3, r0
 80021be:	d100      	bne.n	80021c2 <__aeabi_dsub+0x4f6>
 80021c0:	e6d6      	b.n	8001f70 <__aeabi_dsub+0x2a4>
 80021c2:	1c73      	adds	r3, r6, #1
 80021c4:	d100      	bne.n	80021c8 <__aeabi_dsub+0x4fc>
 80021c6:	e0b2      	b.n	800232e <__aeabi_dsub+0x662>
 80021c8:	4b62      	ldr	r3, [pc, #392]	; (8002354 <__aeabi_dsub+0x688>)
 80021ca:	429f      	cmp	r7, r3
 80021cc:	d01e      	beq.n	800220c <__aeabi_dsub+0x540>
 80021ce:	43f3      	mvns	r3, r6
 80021d0:	2b38      	cmp	r3, #56	; 0x38
 80021d2:	dc6f      	bgt.n	80022b4 <__aeabi_dsub+0x5e8>
 80021d4:	2b1f      	cmp	r3, #31
 80021d6:	dd00      	ble.n	80021da <__aeabi_dsub+0x50e>
 80021d8:	e097      	b.n	800230a <__aeabi_dsub+0x63e>
 80021da:	2520      	movs	r5, #32
 80021dc:	000e      	movs	r6, r1
 80021de:	1aed      	subs	r5, r5, r3
 80021e0:	40ae      	lsls	r6, r5
 80021e2:	46b0      	mov	r8, r6
 80021e4:	0006      	movs	r6, r0
 80021e6:	46aa      	mov	sl, r5
 80021e8:	40de      	lsrs	r6, r3
 80021ea:	4645      	mov	r5, r8
 80021ec:	4335      	orrs	r5, r6
 80021ee:	002e      	movs	r6, r5
 80021f0:	4655      	mov	r5, sl
 80021f2:	40a8      	lsls	r0, r5
 80021f4:	40d9      	lsrs	r1, r3
 80021f6:	1e45      	subs	r5, r0, #1
 80021f8:	41a8      	sbcs	r0, r5
 80021fa:	448c      	add	ip, r1
 80021fc:	4306      	orrs	r6, r0
 80021fe:	18b6      	adds	r6, r6, r2
 8002200:	4296      	cmp	r6, r2
 8002202:	4192      	sbcs	r2, r2
 8002204:	4251      	negs	r1, r2
 8002206:	4461      	add	r1, ip
 8002208:	003d      	movs	r5, r7
 800220a:	e625      	b.n	8001e58 <__aeabi_dsub+0x18c>
 800220c:	003d      	movs	r5, r7
 800220e:	4661      	mov	r1, ip
 8002210:	4691      	mov	r9, r2
 8002212:	e678      	b.n	8001f06 <__aeabi_dsub+0x23a>
 8002214:	000b      	movs	r3, r1
 8002216:	4303      	orrs	r3, r0
 8002218:	2d00      	cmp	r5, #0
 800221a:	d000      	beq.n	800221e <__aeabi_dsub+0x552>
 800221c:	e655      	b.n	8001eca <__aeabi_dsub+0x1fe>
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f5      	beq.n	800220e <__aeabi_dsub+0x542>
 8002222:	4663      	mov	r3, ip
 8002224:	4313      	orrs	r3, r2
 8002226:	d100      	bne.n	800222a <__aeabi_dsub+0x55e>
 8002228:	e66d      	b.n	8001f06 <__aeabi_dsub+0x23a>
 800222a:	1886      	adds	r6, r0, r2
 800222c:	4286      	cmp	r6, r0
 800222e:	4180      	sbcs	r0, r0
 8002230:	4461      	add	r1, ip
 8002232:	4240      	negs	r0, r0
 8002234:	1809      	adds	r1, r1, r0
 8002236:	2200      	movs	r2, #0
 8002238:	020b      	lsls	r3, r1, #8
 800223a:	d400      	bmi.n	800223e <__aeabi_dsub+0x572>
 800223c:	e6d0      	b.n	8001fe0 <__aeabi_dsub+0x314>
 800223e:	4b46      	ldr	r3, [pc, #280]	; (8002358 <__aeabi_dsub+0x68c>)
 8002240:	3501      	adds	r5, #1
 8002242:	4019      	ands	r1, r3
 8002244:	e5b2      	b.n	8001dac <__aeabi_dsub+0xe0>
 8002246:	46b1      	mov	r9, r6
 8002248:	e65d      	b.n	8001f06 <__aeabi_dsub+0x23a>
 800224a:	0033      	movs	r3, r6
 800224c:	4667      	mov	r7, ip
 800224e:	3b20      	subs	r3, #32
 8002250:	40df      	lsrs	r7, r3
 8002252:	003b      	movs	r3, r7
 8002254:	2e20      	cmp	r6, #32
 8002256:	d005      	beq.n	8002264 <__aeabi_dsub+0x598>
 8002258:	2740      	movs	r7, #64	; 0x40
 800225a:	1bbf      	subs	r7, r7, r6
 800225c:	4666      	mov	r6, ip
 800225e:	40be      	lsls	r6, r7
 8002260:	4332      	orrs	r2, r6
 8002262:	4690      	mov	r8, r2
 8002264:	4646      	mov	r6, r8
 8002266:	1e72      	subs	r2, r6, #1
 8002268:	4196      	sbcs	r6, r2
 800226a:	4333      	orrs	r3, r6
 800226c:	e5ef      	b.n	8001e4e <__aeabi_dsub+0x182>
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <__aeabi_dsub+0x688>)
 8002270:	429f      	cmp	r7, r3
 8002272:	d0cb      	beq.n	800220c <__aeabi_dsub+0x540>
 8002274:	2580      	movs	r5, #128	; 0x80
 8002276:	042d      	lsls	r5, r5, #16
 8002278:	4273      	negs	r3, r6
 800227a:	4329      	orrs	r1, r5
 800227c:	e7a8      	b.n	80021d0 <__aeabi_dsub+0x504>
 800227e:	4308      	orrs	r0, r1
 8002280:	1e41      	subs	r1, r0, #1
 8002282:	4188      	sbcs	r0, r1
 8002284:	e6a2      	b.n	8001fcc <__aeabi_dsub+0x300>
 8002286:	2f00      	cmp	r7, #0
 8002288:	d100      	bne.n	800228c <__aeabi_dsub+0x5c0>
 800228a:	e63c      	b.n	8001f06 <__aeabi_dsub+0x23a>
 800228c:	4663      	mov	r3, ip
 800228e:	1a86      	subs	r6, r0, r2
 8002290:	1acf      	subs	r7, r1, r3
 8002292:	42b0      	cmp	r0, r6
 8002294:	419b      	sbcs	r3, r3
 8002296:	425b      	negs	r3, r3
 8002298:	1afb      	subs	r3, r7, r3
 800229a:	4698      	mov	r8, r3
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	d54e      	bpl.n	800233e <__aeabi_dsub+0x672>
 80022a0:	1a16      	subs	r6, r2, r0
 80022a2:	4663      	mov	r3, ip
 80022a4:	42b2      	cmp	r2, r6
 80022a6:	4192      	sbcs	r2, r2
 80022a8:	1a59      	subs	r1, r3, r1
 80022aa:	4252      	negs	r2, r2
 80022ac:	1a89      	subs	r1, r1, r2
 80022ae:	465c      	mov	r4, fp
 80022b0:	2200      	movs	r2, #0
 80022b2:	e57b      	b.n	8001dac <__aeabi_dsub+0xe0>
 80022b4:	4301      	orrs	r1, r0
 80022b6:	000e      	movs	r6, r1
 80022b8:	1e71      	subs	r1, r6, #1
 80022ba:	418e      	sbcs	r6, r1
 80022bc:	e79f      	b.n	80021fe <__aeabi_dsub+0x532>
 80022be:	001d      	movs	r5, r3
 80022c0:	000e      	movs	r6, r1
 80022c2:	3d20      	subs	r5, #32
 80022c4:	40ee      	lsrs	r6, r5
 80022c6:	46b0      	mov	r8, r6
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d004      	beq.n	80022d6 <__aeabi_dsub+0x60a>
 80022cc:	2540      	movs	r5, #64	; 0x40
 80022ce:	1aeb      	subs	r3, r5, r3
 80022d0:	4099      	lsls	r1, r3
 80022d2:	4308      	orrs	r0, r1
 80022d4:	4681      	mov	r9, r0
 80022d6:	4648      	mov	r0, r9
 80022d8:	4643      	mov	r3, r8
 80022da:	1e41      	subs	r1, r0, #1
 80022dc:	4188      	sbcs	r0, r1
 80022de:	4318      	orrs	r0, r3
 80022e0:	e674      	b.n	8001fcc <__aeabi_dsub+0x300>
 80022e2:	2200      	movs	r2, #0
 80022e4:	2400      	movs	r4, #0
 80022e6:	e617      	b.n	8001f18 <__aeabi_dsub+0x24c>
 80022e8:	1a16      	subs	r6, r2, r0
 80022ea:	4663      	mov	r3, ip
 80022ec:	42b2      	cmp	r2, r6
 80022ee:	4192      	sbcs	r2, r2
 80022f0:	1a59      	subs	r1, r3, r1
 80022f2:	4252      	negs	r2, r2
 80022f4:	1a89      	subs	r1, r1, r2
 80022f6:	003d      	movs	r5, r7
 80022f8:	e525      	b.n	8001d46 <__aeabi_dsub+0x7a>
 80022fa:	4661      	mov	r1, ip
 80022fc:	4691      	mov	r9, r2
 80022fe:	4d15      	ldr	r5, [pc, #84]	; (8002354 <__aeabi_dsub+0x688>)
 8002300:	e601      	b.n	8001f06 <__aeabi_dsub+0x23a>
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	2400      	movs	r4, #0
 8002306:	0312      	lsls	r2, r2, #12
 8002308:	e679      	b.n	8001ffe <__aeabi_dsub+0x332>
 800230a:	001d      	movs	r5, r3
 800230c:	000e      	movs	r6, r1
 800230e:	3d20      	subs	r5, #32
 8002310:	40ee      	lsrs	r6, r5
 8002312:	46b0      	mov	r8, r6
 8002314:	2b20      	cmp	r3, #32
 8002316:	d004      	beq.n	8002322 <__aeabi_dsub+0x656>
 8002318:	2540      	movs	r5, #64	; 0x40
 800231a:	1aeb      	subs	r3, r5, r3
 800231c:	4099      	lsls	r1, r3
 800231e:	4308      	orrs	r0, r1
 8002320:	4681      	mov	r9, r0
 8002322:	464e      	mov	r6, r9
 8002324:	4643      	mov	r3, r8
 8002326:	1e71      	subs	r1, r6, #1
 8002328:	418e      	sbcs	r6, r1
 800232a:	431e      	orrs	r6, r3
 800232c:	e767      	b.n	80021fe <__aeabi_dsub+0x532>
 800232e:	1886      	adds	r6, r0, r2
 8002330:	4296      	cmp	r6, r2
 8002332:	419b      	sbcs	r3, r3
 8002334:	4461      	add	r1, ip
 8002336:	425b      	negs	r3, r3
 8002338:	18c9      	adds	r1, r1, r3
 800233a:	003d      	movs	r5, r7
 800233c:	e58c      	b.n	8001e58 <__aeabi_dsub+0x18c>
 800233e:	4647      	mov	r7, r8
 8002340:	4337      	orrs	r7, r6
 8002342:	d0ce      	beq.n	80022e2 <__aeabi_dsub+0x616>
 8002344:	2207      	movs	r2, #7
 8002346:	4641      	mov	r1, r8
 8002348:	4032      	ands	r2, r6
 800234a:	e649      	b.n	8001fe0 <__aeabi_dsub+0x314>
 800234c:	2700      	movs	r7, #0
 800234e:	003a      	movs	r2, r7
 8002350:	e5e6      	b.n	8001f20 <__aeabi_dsub+0x254>
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	000007ff 	.word	0x000007ff
 8002358:	ff7fffff 	.word	0xff7fffff

0800235c <__aeabi_dcmpun>:
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	4e0c      	ldr	r6, [pc, #48]	; (8002390 <__aeabi_dcmpun+0x34>)
 8002360:	030d      	lsls	r5, r1, #12
 8002362:	031c      	lsls	r4, r3, #12
 8002364:	0049      	lsls	r1, r1, #1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	0b2d      	lsrs	r5, r5, #12
 800236a:	0d49      	lsrs	r1, r1, #21
 800236c:	0b24      	lsrs	r4, r4, #12
 800236e:	0d5b      	lsrs	r3, r3, #21
 8002370:	42b1      	cmp	r1, r6
 8002372:	d008      	beq.n	8002386 <__aeabi_dcmpun+0x2a>
 8002374:	4906      	ldr	r1, [pc, #24]	; (8002390 <__aeabi_dcmpun+0x34>)
 8002376:	2000      	movs	r0, #0
 8002378:	428b      	cmp	r3, r1
 800237a:	d103      	bne.n	8002384 <__aeabi_dcmpun+0x28>
 800237c:	4314      	orrs	r4, r2
 800237e:	0020      	movs	r0, r4
 8002380:	1e44      	subs	r4, r0, #1
 8002382:	41a0      	sbcs	r0, r4
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	4305      	orrs	r5, r0
 8002388:	2001      	movs	r0, #1
 800238a:	2d00      	cmp	r5, #0
 800238c:	d1fa      	bne.n	8002384 <__aeabi_dcmpun+0x28>
 800238e:	e7f1      	b.n	8002374 <__aeabi_dcmpun+0x18>
 8002390:	000007ff 	.word	0x000007ff

08002394 <__aeabi_d2iz>:
 8002394:	b530      	push	{r4, r5, lr}
 8002396:	4d14      	ldr	r5, [pc, #80]	; (80023e8 <__aeabi_d2iz+0x54>)
 8002398:	030a      	lsls	r2, r1, #12
 800239a:	004b      	lsls	r3, r1, #1
 800239c:	0b12      	lsrs	r2, r2, #12
 800239e:	0d5b      	lsrs	r3, r3, #21
 80023a0:	0fc9      	lsrs	r1, r1, #31
 80023a2:	2400      	movs	r4, #0
 80023a4:	42ab      	cmp	r3, r5
 80023a6:	dd11      	ble.n	80023cc <__aeabi_d2iz+0x38>
 80023a8:	4c10      	ldr	r4, [pc, #64]	; (80023ec <__aeabi_d2iz+0x58>)
 80023aa:	42a3      	cmp	r3, r4
 80023ac:	dc10      	bgt.n	80023d0 <__aeabi_d2iz+0x3c>
 80023ae:	2480      	movs	r4, #128	; 0x80
 80023b0:	0364      	lsls	r4, r4, #13
 80023b2:	4322      	orrs	r2, r4
 80023b4:	4c0e      	ldr	r4, [pc, #56]	; (80023f0 <__aeabi_d2iz+0x5c>)
 80023b6:	1ae4      	subs	r4, r4, r3
 80023b8:	2c1f      	cmp	r4, #31
 80023ba:	dd0c      	ble.n	80023d6 <__aeabi_d2iz+0x42>
 80023bc:	480d      	ldr	r0, [pc, #52]	; (80023f4 <__aeabi_d2iz+0x60>)
 80023be:	1ac3      	subs	r3, r0, r3
 80023c0:	40da      	lsrs	r2, r3
 80023c2:	0013      	movs	r3, r2
 80023c4:	425c      	negs	r4, r3
 80023c6:	2900      	cmp	r1, #0
 80023c8:	d100      	bne.n	80023cc <__aeabi_d2iz+0x38>
 80023ca:	001c      	movs	r4, r3
 80023cc:	0020      	movs	r0, r4
 80023ce:	bd30      	pop	{r4, r5, pc}
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <__aeabi_d2iz+0x64>)
 80023d2:	18cc      	adds	r4, r1, r3
 80023d4:	e7fa      	b.n	80023cc <__aeabi_d2iz+0x38>
 80023d6:	4d09      	ldr	r5, [pc, #36]	; (80023fc <__aeabi_d2iz+0x68>)
 80023d8:	40e0      	lsrs	r0, r4
 80023da:	46ac      	mov	ip, r5
 80023dc:	4463      	add	r3, ip
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	4303      	orrs	r3, r0
 80023e4:	e7ee      	b.n	80023c4 <__aeabi_d2iz+0x30>
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	000003fe 	.word	0x000003fe
 80023ec:	0000041d 	.word	0x0000041d
 80023f0:	00000433 	.word	0x00000433
 80023f4:	00000413 	.word	0x00000413
 80023f8:	7fffffff 	.word	0x7fffffff
 80023fc:	fffffbed 	.word	0xfffffbed

08002400 <__aeabi_i2d>:
 8002400:	b570      	push	{r4, r5, r6, lr}
 8002402:	2800      	cmp	r0, #0
 8002404:	d02d      	beq.n	8002462 <__aeabi_i2d+0x62>
 8002406:	17c3      	asrs	r3, r0, #31
 8002408:	18c5      	adds	r5, r0, r3
 800240a:	405d      	eors	r5, r3
 800240c:	0fc4      	lsrs	r4, r0, #31
 800240e:	0028      	movs	r0, r5
 8002410:	f000 f8b4 	bl	800257c <__clzsi2>
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <__aeabi_i2d+0x6c>)
 8002416:	1a1b      	subs	r3, r3, r0
 8002418:	055b      	lsls	r3, r3, #21
 800241a:	0d5b      	lsrs	r3, r3, #21
 800241c:	280a      	cmp	r0, #10
 800241e:	dd15      	ble.n	800244c <__aeabi_i2d+0x4c>
 8002420:	380b      	subs	r0, #11
 8002422:	4085      	lsls	r5, r0
 8002424:	2200      	movs	r2, #0
 8002426:	032d      	lsls	r5, r5, #12
 8002428:	0b2d      	lsrs	r5, r5, #12
 800242a:	2100      	movs	r1, #0
 800242c:	0010      	movs	r0, r2
 800242e:	032d      	lsls	r5, r5, #12
 8002430:	0d0a      	lsrs	r2, r1, #20
 8002432:	0b2d      	lsrs	r5, r5, #12
 8002434:	0512      	lsls	r2, r2, #20
 8002436:	432a      	orrs	r2, r5
 8002438:	4d0d      	ldr	r5, [pc, #52]	; (8002470 <__aeabi_i2d+0x70>)
 800243a:	051b      	lsls	r3, r3, #20
 800243c:	402a      	ands	r2, r5
 800243e:	4313      	orrs	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	07e4      	lsls	r4, r4, #31
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	4323      	orrs	r3, r4
 8002448:	0019      	movs	r1, r3
 800244a:	bd70      	pop	{r4, r5, r6, pc}
 800244c:	0002      	movs	r2, r0
 800244e:	0029      	movs	r1, r5
 8002450:	3215      	adds	r2, #21
 8002452:	4091      	lsls	r1, r2
 8002454:	000a      	movs	r2, r1
 8002456:	210b      	movs	r1, #11
 8002458:	1a08      	subs	r0, r1, r0
 800245a:	40c5      	lsrs	r5, r0
 800245c:	032d      	lsls	r5, r5, #12
 800245e:	0b2d      	lsrs	r5, r5, #12
 8002460:	e7e3      	b.n	800242a <__aeabi_i2d+0x2a>
 8002462:	2400      	movs	r4, #0
 8002464:	2300      	movs	r3, #0
 8002466:	2500      	movs	r5, #0
 8002468:	2200      	movs	r2, #0
 800246a:	e7de      	b.n	800242a <__aeabi_i2d+0x2a>
 800246c:	0000041e 	.word	0x0000041e
 8002470:	800fffff 	.word	0x800fffff

08002474 <__aeabi_ui2d>:
 8002474:	b510      	push	{r4, lr}
 8002476:	1e04      	subs	r4, r0, #0
 8002478:	d025      	beq.n	80024c6 <__aeabi_ui2d+0x52>
 800247a:	f000 f87f 	bl	800257c <__clzsi2>
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <__aeabi_ui2d+0x5c>)
 8002480:	1a1b      	subs	r3, r3, r0
 8002482:	055b      	lsls	r3, r3, #21
 8002484:	0d5b      	lsrs	r3, r3, #21
 8002486:	280a      	cmp	r0, #10
 8002488:	dd12      	ble.n	80024b0 <__aeabi_ui2d+0x3c>
 800248a:	380b      	subs	r0, #11
 800248c:	4084      	lsls	r4, r0
 800248e:	2200      	movs	r2, #0
 8002490:	0324      	lsls	r4, r4, #12
 8002492:	0b24      	lsrs	r4, r4, #12
 8002494:	2100      	movs	r1, #0
 8002496:	0010      	movs	r0, r2
 8002498:	0324      	lsls	r4, r4, #12
 800249a:	0d0a      	lsrs	r2, r1, #20
 800249c:	0b24      	lsrs	r4, r4, #12
 800249e:	0512      	lsls	r2, r2, #20
 80024a0:	4322      	orrs	r2, r4
 80024a2:	4c0c      	ldr	r4, [pc, #48]	; (80024d4 <__aeabi_ui2d+0x60>)
 80024a4:	051b      	lsls	r3, r3, #20
 80024a6:	4022      	ands	r2, r4
 80024a8:	4313      	orrs	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	0859      	lsrs	r1, r3, #1
 80024ae:	bd10      	pop	{r4, pc}
 80024b0:	0002      	movs	r2, r0
 80024b2:	0021      	movs	r1, r4
 80024b4:	3215      	adds	r2, #21
 80024b6:	4091      	lsls	r1, r2
 80024b8:	000a      	movs	r2, r1
 80024ba:	210b      	movs	r1, #11
 80024bc:	1a08      	subs	r0, r1, r0
 80024be:	40c4      	lsrs	r4, r0
 80024c0:	0324      	lsls	r4, r4, #12
 80024c2:	0b24      	lsrs	r4, r4, #12
 80024c4:	e7e6      	b.n	8002494 <__aeabi_ui2d+0x20>
 80024c6:	2300      	movs	r3, #0
 80024c8:	2400      	movs	r4, #0
 80024ca:	2200      	movs	r2, #0
 80024cc:	e7e2      	b.n	8002494 <__aeabi_ui2d+0x20>
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	0000041e 	.word	0x0000041e
 80024d4:	800fffff 	.word	0x800fffff

080024d8 <__aeabi_f2d>:
 80024d8:	0041      	lsls	r1, r0, #1
 80024da:	0e09      	lsrs	r1, r1, #24
 80024dc:	1c4b      	adds	r3, r1, #1
 80024de:	b570      	push	{r4, r5, r6, lr}
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	0246      	lsls	r6, r0, #9
 80024e4:	0a75      	lsrs	r5, r6, #9
 80024e6:	0fc4      	lsrs	r4, r0, #31
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	dd14      	ble.n	8002516 <__aeabi_f2d+0x3e>
 80024ec:	23e0      	movs	r3, #224	; 0xe0
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	076d      	lsls	r5, r5, #29
 80024f2:	0b36      	lsrs	r6, r6, #12
 80024f4:	18cb      	adds	r3, r1, r3
 80024f6:	2100      	movs	r1, #0
 80024f8:	0d0a      	lsrs	r2, r1, #20
 80024fa:	0028      	movs	r0, r5
 80024fc:	0512      	lsls	r2, r2, #20
 80024fe:	4d1c      	ldr	r5, [pc, #112]	; (8002570 <__aeabi_f2d+0x98>)
 8002500:	4332      	orrs	r2, r6
 8002502:	055b      	lsls	r3, r3, #21
 8002504:	402a      	ands	r2, r5
 8002506:	085b      	lsrs	r3, r3, #1
 8002508:	4313      	orrs	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	07e4      	lsls	r4, r4, #31
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	4323      	orrs	r3, r4
 8002512:	0019      	movs	r1, r3
 8002514:	bd70      	pop	{r4, r5, r6, pc}
 8002516:	2900      	cmp	r1, #0
 8002518:	d114      	bne.n	8002544 <__aeabi_f2d+0x6c>
 800251a:	2d00      	cmp	r5, #0
 800251c:	d01e      	beq.n	800255c <__aeabi_f2d+0x84>
 800251e:	0028      	movs	r0, r5
 8002520:	f000 f82c 	bl	800257c <__clzsi2>
 8002524:	280a      	cmp	r0, #10
 8002526:	dc1c      	bgt.n	8002562 <__aeabi_f2d+0x8a>
 8002528:	230b      	movs	r3, #11
 800252a:	002a      	movs	r2, r5
 800252c:	1a1b      	subs	r3, r3, r0
 800252e:	40da      	lsrs	r2, r3
 8002530:	0003      	movs	r3, r0
 8002532:	3315      	adds	r3, #21
 8002534:	409d      	lsls	r5, r3
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <__aeabi_f2d+0x9c>)
 8002538:	0312      	lsls	r2, r2, #12
 800253a:	1a1b      	subs	r3, r3, r0
 800253c:	055b      	lsls	r3, r3, #21
 800253e:	0b16      	lsrs	r6, r2, #12
 8002540:	0d5b      	lsrs	r3, r3, #21
 8002542:	e7d8      	b.n	80024f6 <__aeabi_f2d+0x1e>
 8002544:	2d00      	cmp	r5, #0
 8002546:	d006      	beq.n	8002556 <__aeabi_f2d+0x7e>
 8002548:	0b32      	lsrs	r2, r6, #12
 800254a:	2680      	movs	r6, #128	; 0x80
 800254c:	0336      	lsls	r6, r6, #12
 800254e:	076d      	lsls	r5, r5, #29
 8002550:	4316      	orrs	r6, r2
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <__aeabi_f2d+0xa0>)
 8002554:	e7cf      	b.n	80024f6 <__aeabi_f2d+0x1e>
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <__aeabi_f2d+0xa0>)
 8002558:	2600      	movs	r6, #0
 800255a:	e7cc      	b.n	80024f6 <__aeabi_f2d+0x1e>
 800255c:	2300      	movs	r3, #0
 800255e:	2600      	movs	r6, #0
 8002560:	e7c9      	b.n	80024f6 <__aeabi_f2d+0x1e>
 8002562:	0003      	movs	r3, r0
 8002564:	002a      	movs	r2, r5
 8002566:	3b0b      	subs	r3, #11
 8002568:	409a      	lsls	r2, r3
 800256a:	2500      	movs	r5, #0
 800256c:	e7e3      	b.n	8002536 <__aeabi_f2d+0x5e>
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	800fffff 	.word	0x800fffff
 8002574:	00000389 	.word	0x00000389
 8002578:	000007ff 	.word	0x000007ff

0800257c <__clzsi2>:
 800257c:	211c      	movs	r1, #28
 800257e:	2301      	movs	r3, #1
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	4298      	cmp	r0, r3
 8002584:	d301      	bcc.n	800258a <__clzsi2+0xe>
 8002586:	0c00      	lsrs	r0, r0, #16
 8002588:	3910      	subs	r1, #16
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	4298      	cmp	r0, r3
 800258e:	d301      	bcc.n	8002594 <__clzsi2+0x18>
 8002590:	0a00      	lsrs	r0, r0, #8
 8002592:	3908      	subs	r1, #8
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	4298      	cmp	r0, r3
 8002598:	d301      	bcc.n	800259e <__clzsi2+0x22>
 800259a:	0900      	lsrs	r0, r0, #4
 800259c:	3904      	subs	r1, #4
 800259e:	a202      	add	r2, pc, #8	; (adr r2, 80025a8 <__clzsi2+0x2c>)
 80025a0:	5c10      	ldrb	r0, [r2, r0]
 80025a2:	1840      	adds	r0, r0, r1
 80025a4:	4770      	bx	lr
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	02020304 	.word	0x02020304
 80025ac:	01010101 	.word	0x01010101
	...

080025b8 <DHT11__delayMicroSec>:
static bool DHT11__initTimer(TIM_TypeDef *timerID);
static bool DHT11__CheckResponse(void);


static void DHT11__delayMicroSec(uint16_t time)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	0002      	movs	r2, r0
 80025c0:	1dbb      	adds	r3, r7, #6
 80025c2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&dht11Timer, 0);
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <DHT11__delayMicroSec+0x2c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2200      	movs	r2, #0
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&dht11Timer) < time)
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <DHT11__delayMicroSec+0x2c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d4:	1dbb      	adds	r3, r7, #6
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d3f8      	bcc.n	80025ce <DHT11__delayMicroSec+0x16>
	{

	}
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b002      	add	sp, #8
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2000020c 	.word	0x2000020c

080025e8 <DHT11__SetDataPin>:

static void DHT11__SetDataPin(GPIO_TypeDef* GPIO_PORT, uint16_t GPIO_Pin)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	000a      	movs	r2, r1
 80025f2:	1cbb      	adds	r3, r7, #2
 80025f4:	801a      	strh	r2, [r3, #0]
	DHT11_GPIO_PORT = GPIO_PORT;
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <DHT11__SetDataPin+0x98>)
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	601a      	str	r2, [r3, #0]
	DHT11_GPIO_PIN = GPIO_Pin;
 80025fc:	4b21      	ldr	r3, [pc, #132]	; (8002684 <DHT11__SetDataPin+0x9c>)
 80025fe:	1cba      	adds	r2, r7, #2
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	801a      	strh	r2, [r3, #0]
	if(GPIO_PORT == GPIOA)
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	2390      	movs	r3, #144	; 0x90
 8002608:	05db      	lsls	r3, r3, #23
 800260a:	429a      	cmp	r2, r3
 800260c:	d10e      	bne.n	800262c <DHT11__SetDataPin+0x44>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <DHT11__SetDataPin+0xa0>)
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <DHT11__SetDataPin+0xa0>)
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0289      	lsls	r1, r1, #10
 8002618:	430a      	orrs	r2, r1
 800261a:	615a      	str	r2, [r3, #20]
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <DHT11__SetDataPin+0xa0>)
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	4013      	ands	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
	}
	else if(GPIO_PORT == GPIOC)
	{
		__HAL_RCC_GPIOC_CLK_ENABLE();
	}
}
 800262a:	e024      	b.n	8002676 <DHT11__SetDataPin+0x8e>
	else if(GPIO_PORT == GPIOB)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a17      	ldr	r2, [pc, #92]	; (800268c <DHT11__SetDataPin+0xa4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d10e      	bne.n	8002652 <DHT11__SetDataPin+0x6a>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <DHT11__SetDataPin+0xa0>)
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <DHT11__SetDataPin+0xa0>)
 800263a:	2180      	movs	r1, #128	; 0x80
 800263c:	02c9      	lsls	r1, r1, #11
 800263e:	430a      	orrs	r2, r1
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <DHT11__SetDataPin+0xa0>)
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	02db      	lsls	r3, r3, #11
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	693b      	ldr	r3, [r7, #16]
}
 8002650:	e011      	b.n	8002676 <DHT11__SetDataPin+0x8e>
	else if(GPIO_PORT == GPIOC)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <DHT11__SetDataPin+0xa8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d10d      	bne.n	8002676 <DHT11__SetDataPin+0x8e>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <DHT11__SetDataPin+0xa0>)
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <DHT11__SetDataPin+0xa0>)
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	0309      	lsls	r1, r1, #12
 8002664:	430a      	orrs	r2, r1
 8002666:	615a      	str	r2, [r3, #20]
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <DHT11__SetDataPin+0xa0>)
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	031b      	lsls	r3, r3, #12
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	46bd      	mov	sp, r7
 800267a:	b006      	add	sp, #24
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	2000024c 	.word	0x2000024c
 8002684:	20000000 	.word	0x20000000
 8002688:	40021000 	.word	0x40021000
 800268c:	48000400 	.word	0x48000400
 8002690:	48000800 	.word	0x48000800

08002694 <DHT11__initTimer>:

static bool DHT11__initTimer(TIM_TypeDef *timerID)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	bool timerInitSuccess = false;
 800269c:	230f      	movs	r3, #15
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]

	dht11Timer.Instance = timerID;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <DHT11__initTimer+0x58>)
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	601a      	str	r2, [r3, #0]
	dht11Timer.Init.Prescaler = 48 - 1; //base is 48Mhz so 1Mhz - 1 tick is 1 microsecond
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <DHT11__initTimer+0x58>)
 80026ac:	222f      	movs	r2, #47	; 0x2f
 80026ae:	605a      	str	r2, [r3, #4]
	dht11Timer.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <DHT11__initTimer+0x58>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
	dht11Timer.Init.Period = 0xFFFF - 1;
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <DHT11__initTimer+0x58>)
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <DHT11__initTimer+0x5c>)
 80026ba:	60da      	str	r2, [r3, #12]
	dht11Timer.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <DHT11__initTimer+0x58>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
	dht11Timer.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <DHT11__initTimer+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
	if (HAL_OK == HAL_TIM_Base_Init(&dht11Timer))
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <DHT11__initTimer+0x58>)
 80026ca:	0018      	movs	r0, r3
 80026cc:	f005 f843 	bl	8007756 <HAL_TIM_Base_Init>
 80026d0:	1e03      	subs	r3, r0, #0
 80026d2:	d103      	bne.n	80026dc <DHT11__initTimer+0x48>
	{
		timerInitSuccess = true;
 80026d4:	230f      	movs	r3, #15
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
	}
	return timerInitSuccess;
 80026dc:	230f      	movs	r3, #15
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	781b      	ldrb	r3, [r3, #0]
}
 80026e2:	0018      	movs	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b004      	add	sp, #16
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	2000020c 	.word	0x2000020c
 80026f0:	0000fffe 	.word	0x0000fffe

080026f4 <DHT11__CheckResponse>:

static bool DHT11__CheckResponse(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
	bool success = false;
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
	//check the response - wait 40us
	DHT11__delayMicroSec(40);
 8002700:	2028      	movs	r0, #40	; 0x28
 8002702:	f7ff ff59 	bl	80025b8 <DHT11__delayMicroSec>
	//read the pin - it should be low at this point
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN))
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <DHT11__CheckResponse+0x6c>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <DHT11__CheckResponse+0x70>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	0019      	movs	r1, r3
 8002710:	0010      	movs	r0, r2
 8002712:	f002 fa67 	bl	8004be4 <HAL_GPIO_ReadPin>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d11c      	bne.n	8002754 <DHT11__CheckResponse+0x60>
	{
		//wait for 80us
		DHT11__delayMicroSec(80);
 800271a:	2050      	movs	r0, #80	; 0x50
 800271c:	f7ff ff4c 	bl	80025b8 <DHT11__delayMicroSec>
		//after this time the pin should be high
		if (GPIO_PIN_SET == HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN))
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <DHT11__CheckResponse+0x6c>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <DHT11__CheckResponse+0x70>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	0019      	movs	r1, r3
 800272a:	0010      	movs	r0, r2
 800272c:	f002 fa5a 	bl	8004be4 <HAL_GPIO_ReadPin>
 8002730:	0003      	movs	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10e      	bne.n	8002754 <DHT11__CheckResponse+0x60>
		{
			//sensor is present return true
			success = true;
 8002736:	1dfb      	adds	r3, r7, #7
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
			while (GPIO_PIN_SET == HAL_GPIO_ReadPin (DHT11_GPIO_PORT, DHT11_GPIO_PIN));
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <DHT11__CheckResponse+0x6c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <DHT11__CheckResponse+0x70>)
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	0019      	movs	r1, r3
 8002748:	0010      	movs	r0, r2
 800274a:	f002 fa4b 	bl	8004be4 <HAL_GPIO_ReadPin>
 800274e:	0003      	movs	r3, r0
 8002750:	2b01      	cmp	r3, #1
 8002752:	d0f4      	beq.n	800273e <DHT11__CheckResponse+0x4a>
		}
	}
	return success;
 8002754:	1dfb      	adds	r3, r7, #7
 8002756:	781b      	ldrb	r3, [r3, #0]
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}
 8002760:	2000024c 	.word	0x2000024c
 8002764:	20000000 	.word	0x20000000

08002768 <DHT11_Init>:


}

bool DHT11_Init(GPIO_TypeDef* GPIO_PORT, uint16_t GPIO_Pin, TIM_TypeDef *timerID)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	230a      	movs	r3, #10
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	1c0a      	adds	r2, r1, #0
 8002778:	801a      	strh	r2, [r3, #0]
	if (false == DHT11__Initalized)
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <DHT11_Init+0x5c>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2201      	movs	r2, #1
 8002780:	4053      	eors	r3, r2
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d017      	beq.n	80027b8 <DHT11_Init+0x50>
	{
		DHT11__SetDataPin(GPIO_PORT, GPIO_Pin);
 8002788:	240a      	movs	r4, #10
 800278a:	193b      	adds	r3, r7, r4
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	0011      	movs	r1, r2
 8002792:	0018      	movs	r0, r3
 8002794:	f7ff ff28 	bl	80025e8 <DHT11__SetDataPin>
		if ((GPIO_Pin != 0xFF) && (NULL != GPIO_PORT))
 8002798:	193b      	adds	r3, r7, r4
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	2bff      	cmp	r3, #255	; 0xff
 800279e:	d00b      	beq.n	80027b8 <DHT11_Init+0x50>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <DHT11_Init+0x50>
		{
			if (DHT11__initTimer(timerID))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7ff ff73 	bl	8002694 <DHT11__initTimer>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d002      	beq.n	80027b8 <DHT11_Init+0x50>
			{
				DHT11__Initalized = true;
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <DHT11_Init+0x5c>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return DHT11__Initalized;
 80027b8:	4b02      	ldr	r3, [pc, #8]	; (80027c4 <DHT11_Init+0x5c>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b005      	add	sp, #20
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	20000250 	.word	0x20000250

080027c8 <DHT11_ReadDHT11Data>:

bool DHT11_ReadDHT11Data(DHT11_Data *sensorData)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b08b      	sub	sp, #44	; 0x2c
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	bool dataReadSuccess = false;
 80027d0:	2324      	movs	r3, #36	; 0x24
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
	if (true == DHT11__Initalized)
 80027d8:	4b6e      	ldr	r3, [pc, #440]	; (8002994 <DHT11_ReadDHT11Data+0x1cc>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d100      	bne.n	80027e2 <DHT11_ReadDHT11Data+0x1a>
 80027e0:	e0d1      	b.n	8002986 <DHT11_ReadDHT11Data+0x1be>
	{
		HAL_TIM_Base_Start(&dht11Timer);
 80027e2:	4b6d      	ldr	r3, [pc, #436]	; (8002998 <DHT11_ReadDHT11Data+0x1d0>)
 80027e4:	0018      	movs	r0, r3
 80027e6:	f004 ffe2 	bl	80077ae <HAL_TIM_Base_Start>
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ea:	2410      	movs	r4, #16
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	0018      	movs	r0, r3
 80027f0:	2314      	movs	r3, #20
 80027f2:	001a      	movs	r2, r3
 80027f4:	2100      	movs	r1, #0
 80027f6:	f006 fb85 	bl	8008f04 <memset>

		GPIO_InitStruct.Pin = DHT11_GPIO_PIN;
 80027fa:	4b68      	ldr	r3, [pc, #416]	; (800299c <DHT11_ReadDHT11Data+0x1d4>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	001a      	movs	r2, r3
 8002800:	193b      	adds	r3, r7, r4
 8002802:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002804:	193b      	adds	r3, r7, r4
 8002806:	2201      	movs	r2, #1
 8002808:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	193b      	adds	r3, r7, r4
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002810:	193b      	adds	r3, r7, r4
 8002812:	2203      	movs	r2, #3
 8002814:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(DHT11_GPIO_PORT, &GPIO_InitStruct);
 8002816:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <DHT11_ReadDHT11Data+0x1d8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	193a      	adds	r2, r7, r4
 800281c:	0011      	movs	r1, r2
 800281e:	0018      	movs	r0, r3
 8002820:	f002 f870 	bl	8004904 <HAL_GPIO_Init>
		//set pin low and wait 18ms
		HAL_GPIO_WritePin(DHT11_GPIO_PORT, DHT11_GPIO_PIN, GPIO_PIN_RESET);
 8002824:	4b5e      	ldr	r3, [pc, #376]	; (80029a0 <DHT11_ReadDHT11Data+0x1d8>)
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	4b5c      	ldr	r3, [pc, #368]	; (800299c <DHT11_ReadDHT11Data+0x1d4>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	2200      	movs	r2, #0
 800282e:	0019      	movs	r1, r3
 8002830:	f002 f9f5 	bl	8004c1e <HAL_GPIO_WritePin>
		HAL_Delay(18);
 8002834:	2012      	movs	r0, #18
 8002836:	f001 f9b7 	bl	8003ba8 <HAL_Delay>
		//release the pin  - set as input
		HAL_GPIO_WritePin(DHT11_GPIO_PORT, DHT11_GPIO_PIN, GPIO_PIN_SET);
 800283a:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <DHT11_ReadDHT11Data+0x1d8>)
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <DHT11_ReadDHT11Data+0x1d4>)
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	0019      	movs	r1, r3
 8002846:	f002 f9ea 	bl	8004c1e <HAL_GPIO_WritePin>
		DHT11__delayMicroSec(20);
 800284a:	2014      	movs	r0, #20
 800284c:	f7ff feb4 	bl	80025b8 <DHT11__delayMicroSec>
		GPIO_InitStruct.Pin = DHT11_GPIO_PIN;
 8002850:	4b52      	ldr	r3, [pc, #328]	; (800299c <DHT11_ReadDHT11Data+0x1d4>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	001a      	movs	r2, r3
 8002856:	0021      	movs	r1, r4
 8002858:	187b      	adds	r3, r7, r1
 800285a:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285c:	187b      	adds	r3, r7, r1
 800285e:	2200      	movs	r2, #0
 8002860:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	187b      	adds	r3, r7, r1
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002868:	187b      	adds	r3, r7, r1
 800286a:	2203      	movs	r2, #3
 800286c:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(DHT11_GPIO_PORT, &GPIO_InitStruct);
 800286e:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <DHT11_ReadDHT11Data+0x1d8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	187a      	adds	r2, r7, r1
 8002874:	0011      	movs	r1, r2
 8002876:	0018      	movs	r0, r3
 8002878:	f002 f844 	bl	8004904 <HAL_GPIO_Init>

		DHT11__Initalized = DHT11__CheckResponse();
 800287c:	f7ff ff3a 	bl	80026f4 <DHT11__CheckResponse>
 8002880:	0003      	movs	r3, r0
 8002882:	001a      	movs	r2, r3
 8002884:	4b43      	ldr	r3, [pc, #268]	; (8002994 <DHT11_ReadDHT11Data+0x1cc>)
 8002886:	701a      	strb	r2, [r3, #0]

		uint8_t data[DHT11_DATA_SIZE]; // [PRESINT, PRESDEC, TEMPINT, TEMPDEC, CHECKSUM]
		uint8_t readData = 0;
 8002888:	2327      	movs	r3, #39	; 0x27
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
		for (uint8_t byteNum = 0; byteNum < DHT11_DATA_SIZE; byteNum++)
 8002890:	2326      	movs	r3, #38	; 0x26
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e057      	b.n	800294a <DHT11_ReadDHT11Data+0x182>
		{
			for (uint8_t bitNum = 0; bitNum < 8; bitNum++)
 800289a:	2325      	movs	r3, #37	; 0x25
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e03c      	b.n	800291e <DHT11_ReadDHT11Data+0x156>
			{
				while (GPIO_PIN_SET != HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN))
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <DHT11_ReadDHT11Data+0x1d8>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b3c      	ldr	r3, [pc, #240]	; (800299c <DHT11_ReadDHT11Data+0x1d4>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	0019      	movs	r1, r3
 80028b0:	0010      	movs	r0, r2
 80028b2:	f002 f997 	bl	8004be4 <HAL_GPIO_ReadPin>
 80028b6:	0003      	movs	r3, r0
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d1f4      	bne.n	80028a6 <DHT11_ReadDHT11Data+0xde>
					//Transmission begins with 50us of low voltage level,
					//When the high occurs start read
				}
				//Next starts sending hight volage - if the high is 26-28us the bit is "0", if 70us then "1"
				//Wait 40us - if low it means that the bit is "0"
				DHT11__delayMicroSec(40);
 80028bc:	2028      	movs	r0, #40	; 0x28
 80028be:	f7ff fe7b 	bl	80025b8 <DHT11__delayMicroSec>
				if (GPIO_PIN_SET == HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN))
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <DHT11_ReadDHT11Data+0x1d8>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b35      	ldr	r3, [pc, #212]	; (800299c <DHT11_ReadDHT11Data+0x1d4>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	0019      	movs	r1, r3
 80028cc:	0010      	movs	r0, r2
 80028ce:	f002 f989 	bl	8004be4 <HAL_GPIO_ReadPin>
 80028d2:	0003      	movs	r3, r0
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d110      	bne.n	80028fa <DHT11_ReadDHT11Data+0x132>
				{
					readData |= 1 << (7 - bitNum);
 80028d8:	2325      	movs	r3, #37	; 0x25
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2207      	movs	r2, #7
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2201      	movs	r2, #1
 80028e4:	409a      	lsls	r2, r3
 80028e6:	0013      	movs	r3, r2
 80028e8:	b25a      	sxtb	r2, r3
 80028ea:	2127      	movs	r1, #39	; 0x27
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b25b      	sxtb	r3, r3
 80028f2:	4313      	orrs	r3, r2
 80028f4:	b25a      	sxtb	r2, r3
 80028f6:	187b      	adds	r3, r7, r1
 80028f8:	701a      	strb	r2, [r3, #0]
				}
				while (GPIO_PIN_SET == HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN));
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <DHT11_ReadDHT11Data+0x1d8>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b26      	ldr	r3, [pc, #152]	; (800299c <DHT11_ReadDHT11Data+0x1d4>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	0019      	movs	r1, r3
 8002906:	0010      	movs	r0, r2
 8002908:	f002 f96c 	bl	8004be4 <HAL_GPIO_ReadPin>
 800290c:	0003      	movs	r3, r0
 800290e:	2b01      	cmp	r3, #1
 8002910:	d0f4      	beq.n	80028fc <DHT11_ReadDHT11Data+0x134>
			for (uint8_t bitNum = 0; bitNum < 8; bitNum++)
 8002912:	2125      	movs	r1, #37	; 0x25
 8002914:	187b      	adds	r3, r7, r1
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	187b      	adds	r3, r7, r1
 800291a:	3201      	adds	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	2325      	movs	r3, #37	; 0x25
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b07      	cmp	r3, #7
 8002926:	d9bd      	bls.n	80028a4 <DHT11_ReadDHT11Data+0xdc>
			}
			data[byteNum] = readData;
 8002928:	2026      	movs	r0, #38	; 0x26
 800292a:	183b      	adds	r3, r7, r0
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2208      	movs	r2, #8
 8002930:	18ba      	adds	r2, r7, r2
 8002932:	2427      	movs	r4, #39	; 0x27
 8002934:	1939      	adds	r1, r7, r4
 8002936:	7809      	ldrb	r1, [r1, #0]
 8002938:	54d1      	strb	r1, [r2, r3]
			readData = 0;
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
		for (uint8_t byteNum = 0; byteNum < DHT11_DATA_SIZE; byteNum++)
 8002940:	183b      	adds	r3, r7, r0
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	183b      	adds	r3, r7, r0
 8002946:	3201      	adds	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	2326      	movs	r3, #38	; 0x26
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d9a2      	bls.n	800289a <DHT11_ReadDHT11Data+0xd2>
		}
		//check checksum byte: CHECKSUM = TEMP + PRES
		sensorData->rh_int = data[0];
 8002954:	2108      	movs	r1, #8
 8002956:	187b      	adds	r3, r7, r1
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	709a      	strb	r2, [r3, #2]
		sensorData->rh_dec = data[1];
 800295e:	187b      	adds	r3, r7, r1
 8002960:	785a      	ldrb	r2, [r3, #1]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	70da      	strb	r2, [r3, #3]
		sensorData->temp_int = data[2];
 8002966:	187b      	adds	r3, r7, r1
 8002968:	789a      	ldrb	r2, [r3, #2]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	701a      	strb	r2, [r3, #0]
		sensorData->temp_dec = data[3];
 800296e:	187b      	adds	r3, r7, r1
 8002970:	78da      	ldrb	r2, [r3, #3]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	705a      	strb	r2, [r3, #1]
		sensorData->checksum = data[4];
 8002976:	187b      	adds	r3, r7, r1
 8002978:	791a      	ldrb	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	711a      	strb	r2, [r3, #4]
		HAL_TIM_Base_Stop(&dht11Timer);
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <DHT11_ReadDHT11Data+0x1d0>)
 8002980:	0018      	movs	r0, r3
 8002982:	f004 ff37 	bl	80077f4 <HAL_TIM_Base_Stop>
	}
	return dataReadSuccess;
 8002986:	2324      	movs	r3, #36	; 0x24
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	781b      	ldrb	r3, [r3, #0]
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b00b      	add	sp, #44	; 0x2c
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	20000250 	.word	0x20000250
 8002998:	2000020c 	.word	0x2000020c
 800299c:	20000000 	.word	0x20000000
 80029a0:	2000024c 	.word	0x2000024c

080029a4 <setPWMPeriod>:
static void MX_TIM3_Init(void);
static void MX_ADC_Init(void);
/* USER CODE BEGIN PFP */

static void setPWMPeriod()
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
	static uint16_t servoPeriod = 5U;
	if (servoPeriod < 25)
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <setPWMPeriod+0x48>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	2b18      	cmp	r3, #24
 80029ae:	d806      	bhi.n	80029be <setPWMPeriod+0x1a>
	{
		servoPeriod += 5U;
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <setPWMPeriod+0x48>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	3305      	adds	r3, #5
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <setPWMPeriod+0x48>)
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	e002      	b.n	80029c4 <setPWMPeriod+0x20>
	}
	else
	{
		servoPeriod = 5;
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <setPWMPeriod+0x48>)
 80029c0:	2205      	movs	r2, #5
 80029c2:	801a      	strh	r2, [r3, #0]
	}
	servoPwmConfigOC.Pulse = servoPeriod;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <setPWMPeriod+0x48>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	001a      	movs	r2, r3
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <setPWMPeriod+0x4c>)
 80029cc:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_ConfigChannel(&hTim3_PWM_Servo, &servoPwmConfigOC, TIM_CHANNEL_2);
 80029ce:	4908      	ldr	r1, [pc, #32]	; (80029f0 <setPWMPeriod+0x4c>)
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <setPWMPeriod+0x50>)
 80029d2:	2204      	movs	r2, #4
 80029d4:	0018      	movs	r0, r3
 80029d6:	f005 f911 	bl	8007bfc <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&hTim3_PWM_Servo, TIM_CHANNEL_2);
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <setPWMPeriod+0x50>)
 80029dc:	2104      	movs	r1, #4
 80029de:	0018      	movs	r0, r3
 80029e0:	f004 ffaa 	bl	8007938 <HAL_TIM_PWM_Start>
}
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	20000012 	.word	0x20000012
 80029f0:	20000254 	.word	0x20000254
 80029f4:	2000028c 	.word	0x2000028c

080029f8 <publishDataBluetooth>:

static bool publishDataBluetooth(char *currentTimeDateData, DHT11_Data *DHT11_sensorData, int moveSensorState)
{
 80029f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fa:	46de      	mov	lr, fp
 80029fc:	4657      	mov	r7, sl
 80029fe:	464e      	mov	r6, r9
 8002a00:	4645      	mov	r5, r8
 8002a02:	b5e0      	push	{r5, r6, r7, lr}
 8002a04:	b09b      	sub	sp, #108	; 0x6c
 8002a06:	af0c      	add	r7, sp, #48	; 0x30
 8002a08:	6178      	str	r0, [r7, #20]
 8002a0a:	6139      	str	r1, [r7, #16]
 8002a0c:	60fa      	str	r2, [r7, #12]
	bool sentUpdate = false;
 8002a0e:	232f      	movs	r3, #47	; 0x2f
 8002a10:	2208      	movs	r2, #8
 8002a12:	4694      	mov	ip, r2
 8002a14:	44bc      	add	ip, r7
 8002a16:	4463      	add	r3, ip
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
	if (currentTimeDateData && DHT11_sensorData)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d100      	bne.n	8002a24 <publishDataBluetooth+0x2c>
 8002a22:	e089      	b.n	8002b38 <publishDataBluetooth+0x140>
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d100      	bne.n	8002a2c <publishDataBluetooth+0x34>
 8002a2a:	e085      	b.n	8002b38 <publishDataBluetooth+0x140>
	{
		RTC_TimeTypeDef rtcTime = {0};
 8002a2c:	2414      	movs	r4, #20
 8002a2e:	2608      	movs	r6, #8
 8002a30:	19bb      	adds	r3, r7, r6
 8002a32:	191b      	adds	r3, r3, r4
 8002a34:	0018      	movs	r0, r3
 8002a36:	2314      	movs	r3, #20
 8002a38:	001a      	movs	r2, r3
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	f006 fa62 	bl	8008f04 <memset>
		RTC_DateTypeDef rtcDate = {0};
 8002a40:	2510      	movs	r5, #16
 8002a42:	19bb      	adds	r3, r7, r6
 8002a44:	195b      	adds	r3, r3, r5
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
		HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8002a4a:	19bb      	adds	r3, r7, r6
 8002a4c:	1919      	adds	r1, r3, r4
 8002a4e:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <publishDataBluetooth+0x160>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	0018      	movs	r0, r3
 8002a54:	f002 ffce 	bl	80059f4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8002a58:	19bb      	adds	r3, r7, r6
 8002a5a:	1959      	adds	r1, r3, r5
 8002a5c:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <publishDataBluetooth+0x160>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	0018      	movs	r0, r3
 8002a62:	f003 f8cb 	bl	8005bfc <HAL_RTC_GetDate>

		//get current adc conversion
		float adcVoltage = ((float)adcBuffer[ADC_BUFFER_SIZE - 1] * ADC_MAX_VOLTAGE)
 8002a66:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <publishDataBluetooth+0x164>)
 8002a68:	4a3d      	ldr	r2, [pc, #244]	; (8002b60 <publishDataBluetooth+0x168>)
 8002a6a:	5a9b      	ldrh	r3, [r3, r2]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7fd ff55 	bl	800091c <__aeabi_ui2f>
 8002a72:	1c03      	adds	r3, r0, #0
 8002a74:	493b      	ldr	r1, [pc, #236]	; (8002b64 <publishDataBluetooth+0x16c>)
 8002a76:	1c18      	adds	r0, r3, #0
 8002a78:	f7fd fe1e 	bl	80006b8 <__aeabi_fmul>
 8002a7c:	1c03      	adds	r3, r0, #0
 8002a7e:	218b      	movs	r1, #139	; 0x8b
 8002a80:	05c9      	lsls	r1, r1, #23
 8002a82:	1c18      	adds	r0, r3, #0
 8002a84:	f7fd fd06 	bl	8000494 <__aeabi_fdiv>
 8002a88:	1c03      	adds	r3, r0, #0
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
			/ ADC_12BIT_CHANNEL_RESOLUTION;

		sprintf(currentTimeDateData,
			"Date: %2d.%2d.202%d Time: %d:%d:%d\nMoveSensor : %d\nADC Voltage: %.2fV\n"
			"Temperature: %d.%d  Humidity: %d.%d\n",
			rtcDate.WeekDay, rtcDate.Month, rtcDate.Year,
 8002a8c:	0032      	movs	r2, r6
 8002a8e:	18bb      	adds	r3, r7, r2
 8002a90:	195b      	adds	r3, r3, r5
 8002a92:	781b      	ldrb	r3, [r3, #0]
		sprintf(currentTimeDateData,
 8002a94:	60bb      	str	r3, [r7, #8]
			rtcDate.WeekDay, rtcDate.Month, rtcDate.Year,
 8002a96:	18bb      	adds	r3, r7, r2
 8002a98:	195b      	adds	r3, r3, r5
 8002a9a:	785b      	ldrb	r3, [r3, #1]
		sprintf(currentTimeDateData,
 8002a9c:	607b      	str	r3, [r7, #4]
			rtcDate.WeekDay, rtcDate.Month, rtcDate.Year,
 8002a9e:	18bb      	adds	r3, r7, r2
 8002aa0:	195b      	adds	r3, r3, r5
 8002aa2:	78db      	ldrb	r3, [r3, #3]
		sprintf(currentTimeDateData,
 8002aa4:	001d      	movs	r5, r3
			rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds,
 8002aa6:	18bb      	adds	r3, r7, r2
 8002aa8:	191b      	adds	r3, r3, r4
 8002aaa:	781b      	ldrb	r3, [r3, #0]
		sprintf(currentTimeDateData,
 8002aac:	001e      	movs	r6, r3
			rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds,
 8002aae:	18bb      	adds	r3, r7, r2
 8002ab0:	191b      	adds	r3, r3, r4
 8002ab2:	785b      	ldrb	r3, [r3, #1]
		sprintf(currentTimeDateData,
 8002ab4:	4698      	mov	r8, r3
			rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds,
 8002ab6:	18bb      	adds	r3, r7, r2
 8002ab8:	191b      	adds	r3, r3, r4
 8002aba:	789b      	ldrb	r3, [r3, #2]
		sprintf(currentTimeDateData,
 8002abc:	4699      	mov	r9, r3
 8002abe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ac0:	f7ff fd0a 	bl	80024d8 <__aeabi_f2d>
 8002ac4:	000a      	movs	r2, r1
 8002ac6:	0001      	movs	r1, r0
			(int) moveSensorState, adcVoltage,
			DHT11_sensorData->temp_int, DHT11_sensorData->temp_dec,
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	781b      	ldrb	r3, [r3, #0]
		sprintf(currentTimeDateData,
 8002acc:	469c      	mov	ip, r3
			DHT11_sensorData->temp_int, DHT11_sensorData->temp_dec,
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	785b      	ldrb	r3, [r3, #1]
		sprintf(currentTimeDateData,
 8002ad2:	469a      	mov	sl, r3
			DHT11_sensorData->rh_int, DHT11_sensorData->rh_dec);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	789b      	ldrb	r3, [r3, #2]
		sprintf(currentTimeDateData,
 8002ad8:	469b      	mov	fp, r3
			DHT11_sensorData->rh_int, DHT11_sensorData->rh_dec);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	78db      	ldrb	r3, [r3, #3]
		sprintf(currentTimeDateData,
 8002ade:	4c22      	ldr	r4, [pc, #136]	; (8002b68 <publishDataBluetooth+0x170>)
 8002ae0:	6978      	ldr	r0, [r7, #20]
 8002ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ae4:	465b      	mov	r3, fp
 8002ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8002ae8:	4653      	mov	r3, sl
 8002aea:	9309      	str	r3, [sp, #36]	; 0x24
 8002aec:	4663      	mov	r3, ip
 8002aee:	9308      	str	r3, [sp, #32]
 8002af0:	9106      	str	r1, [sp, #24]
 8002af2:	9207      	str	r2, [sp, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	9304      	str	r3, [sp, #16]
 8002af8:	4649      	mov	r1, r9
 8002afa:	9103      	str	r1, [sp, #12]
 8002afc:	4641      	mov	r1, r8
 8002afe:	9102      	str	r1, [sp, #8]
 8002b00:	9601      	str	r6, [sp, #4]
 8002b02:	9500      	str	r5, [sp, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	0021      	movs	r1, r4
 8002b0a:	f006 fe61 	bl	80097d0 <siprintf>

		if (HAL_ERROR != HAL_UART_Transmit(&huart1, (uint8_t*)currentTimeDateData,
				strlen(currentTimeDateData), 100))
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7fd faf9 	bl	8000108 <strlen>
 8002b16:	0003      	movs	r3, r0
		if (HAL_ERROR != HAL_UART_Transmit(&huart1, (uint8_t*)currentTimeDateData,
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	6979      	ldr	r1, [r7, #20]
 8002b1c:	4813      	ldr	r0, [pc, #76]	; (8002b6c <publishDataBluetooth+0x174>)
 8002b1e:	2364      	movs	r3, #100	; 0x64
 8002b20:	f005 fc96 	bl	8008450 <HAL_UART_Transmit>
 8002b24:	0003      	movs	r3, r0
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d006      	beq.n	8002b38 <publishDataBluetooth+0x140>
		{
			sentUpdate = true;
 8002b2a:	232f      	movs	r3, #47	; 0x2f
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	4694      	mov	ip, r2
 8002b30:	44bc      	add	ip, r7
 8002b32:	4463      	add	r3, ip
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
		}
	}
	return sentUpdate;
 8002b38:	232f      	movs	r3, #47	; 0x2f
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	4694      	mov	ip, r2
 8002b3e:	44bc      	add	ip, r7
 8002b40:	4463      	add	r3, ip
 8002b42:	781b      	ldrb	r3, [r3, #0]
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b00f      	add	sp, #60	; 0x3c
 8002b4a:	bc3c      	pop	{r2, r3, r4, r5}
 8002b4c:	4690      	mov	r8, r2
 8002b4e:	4699      	mov	r9, r3
 8002b50:	46a2      	mov	sl, r4
 8002b52:	46ab      	mov	fp, r5
 8002b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	20000830 	.word	0x20000830
 8002b5c:	200002cc 	.word	0x200002cc
 8002b60:	000003e6 	.word	0x000003e6
 8002b64:	40533333 	.word	0x40533333
 8002b68:	0800b028 	.word	0x0800b028
 8002b6c:	200007b0 	.word	0x200007b0

08002b70 <SPI_Init>:

static void SPI_Init()
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
	//SPI2 CLK ENABLE
	__HAL_RCC_SPI2_CLK_ENABLE();
 8002b76:	4b45      	ldr	r3, [pc, #276]	; (8002c8c <SPI_Init+0x11c>)
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <SPI_Init+0x11c>)
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	01c9      	lsls	r1, r1, #7
 8002b80:	430a      	orrs	r2, r1
 8002b82:	61da      	str	r2, [r3, #28]
 8002b84:	4b41      	ldr	r3, [pc, #260]	; (8002c8c <SPI_Init+0x11c>)
 8002b86:	69da      	ldr	r2, [r3, #28]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	01db      	lsls	r3, r3, #7
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]

	//SCLK, MOSI
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002b92:	4b3e      	ldr	r3, [pc, #248]	; (8002c8c <SPI_Init+0x11c>)
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <SPI_Init+0x11c>)
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	02c9      	lsls	r1, r1, #11
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	615a      	str	r2, [r3, #20]
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <SPI_Init+0x11c>)
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	02db      	lsls	r3, r3, #11
 8002ba8:	4013      	ands	r3, r2
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef gpio;
	gpio.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; //SCLK, MISO, MOSI
 8002bae:	210c      	movs	r1, #12
 8002bb0:	187b      	adds	r3, r7, r1
 8002bb2:	22e0      	movs	r2, #224	; 0xe0
 8002bb4:	0212      	lsls	r2, r2, #8
 8002bb6:	601a      	str	r2, [r3, #0]
	gpio.Mode = GPIO_MODE_AF_PP;
 8002bb8:	187b      	adds	r3, r7, r1
 8002bba:	2202      	movs	r2, #2
 8002bbc:	605a      	str	r2, [r3, #4]
	gpio.Pull = GPIO_NOPULL;
 8002bbe:	187b      	adds	r3, r7, r1
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc4:	187b      	adds	r3, r7, r1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	60da      	str	r2, [r3, #12]
	gpio.Alternate = GPIO_AF0_SPI2;
 8002bca:	187b      	adds	r3, r7, r1
 8002bcc:	2200      	movs	r2, #0
 8002bce:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &gpio);
 8002bd0:	000c      	movs	r4, r1
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	4a2e      	ldr	r2, [pc, #184]	; (8002c90 <SPI_Init+0x120>)
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	0010      	movs	r0, r2
 8002bda:	f001 fe93 	bl	8004904 <HAL_GPIO_Init>

	//CS - use software Chip select not hardware interrupt
	//later change to hardware IT
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002bde:	0021      	movs	r1, r4
 8002be0:	187b      	adds	r3, r7, r1
 8002be2:	2201      	movs	r2, #1
 8002be4:	605a      	str	r2, [r3, #4]
	gpio.Pin = GPIO_PIN_8; // CS
 8002be6:	187b      	adds	r3, r7, r1
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	0052      	lsls	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &gpio);
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	4a27      	ldr	r2, [pc, #156]	; (8002c90 <SPI_Init+0x120>)
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	0010      	movs	r0, r2
 8002bf6:	f001 fe85 	bl	8004904 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4824      	ldr	r0, [pc, #144]	; (8002c90 <SPI_Init+0x120>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	0019      	movs	r1, r3
 8002c04:	f002 f80b 	bl	8004c1e <HAL_GPIO_WritePin>

	//SPI configuration
	hspi2.Instance = SPI2;
 8002c08:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <SPI_Init+0x124>)
 8002c0a:	4a23      	ldr	r2, [pc, #140]	; (8002c98 <SPI_Init+0x128>)
 8002c0c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c0e:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <SPI_Init+0x124>)
 8002c10:	2282      	movs	r2, #130	; 0x82
 8002c12:	0052      	lsls	r2, r2, #1
 8002c14:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c16:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <SPI_Init+0x124>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <SPI_Init+0x124>)
 8002c1e:	22e0      	movs	r2, #224	; 0xe0
 8002c20:	00d2      	lsls	r2, r2, #3
 8002c22:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <SPI_Init+0x124>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <SPI_Init+0x124>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c30:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <SPI_Init+0x124>)
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	0092      	lsls	r2, r2, #2
 8002c36:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;// 1.5MHz
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <SPI_Init+0x124>)
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <SPI_Init+0x124>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <SPI_Init+0x124>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <SPI_Init+0x124>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <SPI_Init+0x124>)
 8002c52:	2207      	movs	r2, #7
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c56:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <SPI_Init+0x124>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <SPI_Init+0x124>)
 8002c5e:	2208      	movs	r2, #8
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <SPI_Init+0x124>)
 8002c64:	0018      	movs	r0, r3
 8002c66:	f003 f8af 	bl	8005dc8 <HAL_SPI_Init>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d001      	beq.n	8002c72 <SPI_Init+0x102>
	{
		Error_Handler();
 8002c6e:	f000 fbdb 	bl	8003428 <Error_Handler>
	}

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8002c72:	2200      	movs	r2, #0
 8002c74:	2101      	movs	r1, #1
 8002c76:	201a      	movs	r0, #26
 8002c78:	f001 fc34 	bl	80044e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002c7c:	201a      	movs	r0, #26
 8002c7e:	f001 fc46 	bl	800450e <HAL_NVIC_EnableIRQ>
}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b009      	add	sp, #36	; 0x24
 8002c88:	bd90      	pop	{r4, r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	48000400 	.word	0x48000400
 8002c94:	200006b4 	.word	0x200006b4
 8002c98:	40003800 	.word	0x40003800

08002c9c <SPI_CommSM>:


void SPI_CommSM()
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
	switch(SPI_SM_State)
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <SPI_CommSM+0xb8>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d034      	beq.n	8002d12 <SPI_CommSM+0x76>
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d03e      	beq.n	8002d2a <SPI_CommSM+0x8e>
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d000      	beq.n	8002cb2 <SPI_CommSM+0x16>
				SPI_SM_State = SPI_IDLE_STATE;
				spi_tx_done = false;
			}
			break;
	}
}
 8002cb0:	e04c      	b.n	8002d4c <SPI_CommSM+0xb0>
			if (SPI_TransmitData)
 8002cb2:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <SPI_CommSM+0xbc>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d013      	beq.n	8002ce2 <SPI_CommSM+0x46>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4827      	ldr	r0, [pc, #156]	; (8002d5c <SPI_CommSM+0xc0>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	f001 ffab 	bl	8004c1e <HAL_GPIO_WritePin>
				SPI_TransmitData = false;
 8002cc8:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <SPI_CommSM+0xbc>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
				SPI_SM_State = SPI_TX_STATE;
 8002cce:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <SPI_CommSM+0xb8>)
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_IT(&hspi2, spi_tx_buff, SPI_BUFF_SIZE);
 8002cd4:	4922      	ldr	r1, [pc, #136]	; (8002d60 <SPI_CommSM+0xc4>)
 8002cd6:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <SPI_CommSM+0xc8>)
 8002cd8:	2204      	movs	r2, #4
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f003 fe16 	bl	800690c <HAL_SPI_Transmit_IT>
			break;
 8002ce0:	e02f      	b.n	8002d42 <SPI_CommSM+0xa6>
			else if (SPI_ReceiveData)
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <SPI_CommSM+0xcc>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d02b      	beq.n	8002d42 <SPI_CommSM+0xa6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	481b      	ldr	r0, [pc, #108]	; (8002d5c <SPI_CommSM+0xc0>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	f001 ff93 	bl	8004c1e <HAL_GPIO_WritePin>
				SPI_SM_State = SPI_RX_STATE;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <SPI_CommSM+0xb8>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
				SPI_ReceiveData = false;
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <SPI_CommSM+0xcc>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Receive_IT(&hspi2, spi_rx_buff, SPI_BUFF_SIZE);
 8002d04:	4919      	ldr	r1, [pc, #100]	; (8002d6c <SPI_CommSM+0xd0>)
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <SPI_CommSM+0xc8>)
 8002d08:	2204      	movs	r2, #4
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f003 fe90 	bl	8006a30 <HAL_SPI_Receive_IT>
			break;
 8002d10:	e017      	b.n	8002d42 <SPI_CommSM+0xa6>
			if (spi_rx_done)
 8002d12:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <SPI_CommSM+0xd4>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d014      	beq.n	8002d46 <SPI_CommSM+0xaa>
				SPI_SM_State = SPI_IDLE_STATE;
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <SPI_CommSM+0xb8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
				spi_rx_done = false;
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <SPI_CommSM+0xd4>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
			break;
 8002d28:	e00d      	b.n	8002d46 <SPI_CommSM+0xaa>
			if (spi_tx_done)
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <SPI_CommSM+0xd8>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <SPI_CommSM+0xae>
				SPI_SM_State = SPI_IDLE_STATE;
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <SPI_CommSM+0xb8>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
				spi_tx_done = false;
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <SPI_CommSM+0xd8>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
			break;
 8002d40:	e003      	b.n	8002d4a <SPI_CommSM+0xae>
			break;
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	e002      	b.n	8002d4c <SPI_CommSM+0xb0>
			break;
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	e000      	b.n	8002d4c <SPI_CommSM+0xb0>
			break;
 8002d4a:	46c0      	nop			; (mov r8, r8)
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	20000270 	.word	0x20000270
 8002d58:	2000027a 	.word	0x2000027a
 8002d5c:	48000400 	.word	0x48000400
 8002d60:	20000004 	.word	0x20000004
 8002d64:	200006b4 	.word	0x200006b4
 8002d68:	2000027b 	.word	0x2000027b
 8002d6c:	20000274 	.word	0x20000274
 8002d70:	20000279 	.word	0x20000279
 8002d74:	20000278 	.word	0x20000278

08002d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d7e:	f000 feaf 	bl	8003ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d82:	f000 f897 	bl	8002eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d86:	f000 fab1 	bl	80032ec <MX_GPIO_Init>
  MX_DMA_Init();
 8002d8a:	f000 fa99 	bl	80032c0 <MX_DMA_Init>
  MX_RTC_Init();
 8002d8e:	f000 f957 	bl	8003040 <MX_RTC_Init>
  MX_TIM6_Init();
 8002d92:	f000 fa11 	bl	80031b8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002d96:	f000 fa33 	bl	8003200 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002d9a:	f000 fa61 	bl	8003260 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002d9e:	f000 f9b1 	bl	8003104 <MX_TIM3_Init>
  MX_ADC_Init();
 8002da2:	f000 f8f1 	bl	8002f88 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  SPI_Init();
 8002da6:	f7ff fee3 	bl	8002b70 <SPI_Init>
  HAL_SPI_Transmit(&hspi2, spi_tx_buff, SPI_BUFF_SIZE, HAL_MAX_DELAY);
 8002daa:	2301      	movs	r3, #1
 8002dac:	425b      	negs	r3, r3
 8002dae:	4933      	ldr	r1, [pc, #204]	; (8002e7c <main+0x104>)
 8002db0:	4833      	ldr	r0, [pc, #204]	; (8002e80 <main+0x108>)
 8002db2:	2204      	movs	r2, #4
 8002db4:	f003 f8aa 	bl	8005f0c <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, spi_rx_buff, SPI_BUFF_SIZE, HAL_MAX_DELAY);
 8002db8:	2301      	movs	r3, #1
 8002dba:	425b      	negs	r3, r3
 8002dbc:	4931      	ldr	r1, [pc, #196]	; (8002e84 <main+0x10c>)
 8002dbe:	4830      	ldr	r0, [pc, #192]	; (8002e80 <main+0x108>)
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	f003 fa25 	bl	8006210 <HAL_SPI_Receive>

  DHT11_Data DHT11_sensorData = {0};
 8002dc6:	003b      	movs	r3, r7
 8002dc8:	0018      	movs	r0, r3
 8002dca:	2305      	movs	r3, #5
 8002dcc:	001a      	movs	r2, r3
 8002dce:	2100      	movs	r1, #0
 8002dd0:	f006 f898 	bl	8008f04 <memset>

  HAL_TIM_PWM_Start(&hTim3_PWM_Servo, TIM_CHANNEL_2);
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <main+0x110>)
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f004 fdad 	bl	8007938 <HAL_TIM_PWM_Start>

  // start adc conversion
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)adcBuffer, ADC_BUFFER_SIZE);
 8002dde:	23fa      	movs	r3, #250	; 0xfa
 8002de0:	005a      	lsls	r2, r3, #1
 8002de2:	492a      	ldr	r1, [pc, #168]	; (8002e8c <main+0x114>)
 8002de4:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <main+0x118>)
 8002de6:	0018      	movs	r0, r3
 8002de8:	f001 f840 	bl	8003e6c <HAL_ADC_Start_DMA>

  //Init DHT11 Temp and Rh sensor
  bool dht11_Initalized = DHT11_Init(DHT11_GPIO_PORT, DHT11_GPIO_Pin, DHT11_timerID);
 8002dec:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <main+0x11c>)
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <main+0x120>)
 8002df2:	8819      	ldrh	r1, [r3, #0]
 8002df4:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <main+0x124>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	1dfc      	adds	r4, r7, #7
 8002dfa:	001a      	movs	r2, r3
 8002dfc:	f7ff fcb4 	bl	8002768 <DHT11_Init>
 8002e00:	0003      	movs	r3, r0
 8002e02:	7023      	strb	r3, [r4, #0]

   //read Temperature and RH data
  if (dht11_Initalized)
 8002e04:	1dfb      	adds	r3, r7, #7
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <main+0x9c>
  {
	 DHT11_ReadDHT11Data(&DHT11_sensorData); //set to do it every 2min - not very volatile
 8002e0c:	003b      	movs	r3, r7
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff fcda 	bl	80027c8 <DHT11_ReadDHT11Data>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //light ext led
		GPIO_PinState moveSensorState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8002e14:	1dbc      	adds	r4, r7, #6
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	015b      	lsls	r3, r3, #5
 8002e1a:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <main+0x128>)
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	0010      	movs	r0, r2
 8002e20:	f001 fee0 	bl	8004be4 <HAL_GPIO_ReadPin>
 8002e24:	0003      	movs	r3, r0
 8002e26:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, moveSensorState);
 8002e28:	1dbb      	adds	r3, r7, #6
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	481c      	ldr	r0, [pc, #112]	; (8002ea0 <main+0x128>)
 8002e2e:	001a      	movs	r2, r3
 8002e30:	2108      	movs	r1, #8
 8002e32:	f001 fef4 	bl	8004c1e <HAL_GPIO_WritePin>
		SPI_CommSM();
 8002e36:	f7ff ff31 	bl	8002c9c <SPI_CommSM>
		if (true == btnTrigger)
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <main+0x12c>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d017      	beq.n	8002e74 <main+0xfc>
		{
			//light led
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002e44:	2390      	movs	r3, #144	; 0x90
 8002e46:	05db      	lsls	r3, r3, #23
 8002e48:	2120      	movs	r1, #32
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f001 ff04 	bl	8004c58 <HAL_GPIO_TogglePin>
			//change PWM period
			setPWMPeriod();
 8002e50:	f7ff fda8 	bl	80029a4 <setPWMPeriod>

			//get current rtc time and date
			publishDataBluetooth(currentTimeDateData, &DHT11_sensorData, moveSensorState);
 8002e54:	1dbb      	adds	r3, r7, #6
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	0039      	movs	r1, r7
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <main+0x130>)
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f7ff fdcb 	bl	80029f8 <publishDataBluetooth>
			//send SPI - the MCU will be in future a slave that will be asked by the HMI ECU for
			//spi data transmit, for now the testing purposes the spi will send when button pressed
			SPI_TransmitData = true;
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <main+0x134>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
			SPI_ReceiveData = true;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <main+0x138>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
			btnTrigger = false;
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <main+0x12c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(20);
 8002e74:	2014      	movs	r0, #20
 8002e76:	f000 fe97 	bl	8003ba8 <HAL_Delay>
	{
 8002e7a:	e7cb      	b.n	8002e14 <main+0x9c>
 8002e7c:	20000004 	.word	0x20000004
 8002e80:	200006b4 	.word	0x200006b4
 8002e84:	20000274 	.word	0x20000274
 8002e88:	2000028c 	.word	0x2000028c
 8002e8c:	200002cc 	.word	0x200002cc
 8002e90:	20000954 	.word	0x20000954
 8002e94:	2000000c 	.word	0x2000000c
 8002e98:	20000010 	.word	0x20000010
 8002e9c:	20000008 	.word	0x20000008
 8002ea0:	48000800 	.word	0x48000800
 8002ea4:	2000027c 	.word	0x2000027c
 8002ea8:	20000718 	.word	0x20000718
 8002eac:	2000027a 	.word	0x2000027a
 8002eb0:	2000027b 	.word	0x2000027b

08002eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b095      	sub	sp, #84	; 0x54
 8002eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eba:	2420      	movs	r4, #32
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	2330      	movs	r3, #48	; 0x30
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	f006 f81d 	bl	8008f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eca:	2310      	movs	r3, #16
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	0018      	movs	r0, r3
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	f006 f815 	bl	8008f04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eda:	003b      	movs	r3, r7
 8002edc:	0018      	movs	r0, r3
 8002ede:	2310      	movs	r3, #16
 8002ee0:	001a      	movs	r2, r3
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	f006 f80e 	bl	8008f04 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002ee8:	0021      	movs	r1, r4
 8002eea:	187b      	adds	r3, r7, r1
 8002eec:	220a      	movs	r2, #10
 8002eee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ef0:	187b      	adds	r3, r7, r1
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ef6:	187b      	adds	r3, r7, r1
 8002ef8:	2210      	movs	r2, #16
 8002efa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002efc:	187b      	adds	r3, r7, r1
 8002efe:	2201      	movs	r2, #1
 8002f00:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f02:	187b      	adds	r3, r7, r1
 8002f04:	2202      	movs	r2, #2
 8002f06:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f08:	187b      	adds	r3, r7, r1
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002f0e:	187b      	adds	r3, r7, r1
 8002f10:	22a0      	movs	r2, #160	; 0xa0
 8002f12:	0392      	lsls	r2, r2, #14
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2200      	movs	r2, #0
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f001 fedc 	bl	8004cdc <HAL_RCC_OscConfig>
 8002f24:	1e03      	subs	r3, r0, #0
 8002f26:	d001      	beq.n	8002f2c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002f28:	f000 fa7e 	bl	8003428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f2c:	2110      	movs	r1, #16
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2202      	movs	r2, #2
 8002f38:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f40:	187b      	adds	r3, r7, r1
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	2101      	movs	r1, #1
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f002 f9e2 	bl	8005314 <HAL_RCC_ClockConfig>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d001      	beq.n	8002f58 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002f54:	f000 fa68 	bl	8003428 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8002f58:	003b      	movs	r3, r7
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <SystemClock_Config+0xd0>)
 8002f5c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f5e:	003b      	movs	r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f64:	003b      	movs	r3, r7
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	0092      	lsls	r2, r2, #2
 8002f6a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f6c:	003b      	movs	r3, r7
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f002 fb22 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 8002f74:	1e03      	subs	r3, r0, #0
 8002f76:	d001      	beq.n	8002f7c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002f78:	f000 fa56 	bl	8003428 <Error_Handler>
  }
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b015      	add	sp, #84	; 0x54
 8002f82:	bd90      	pop	{r4, r7, pc}
 8002f84:	00010001 	.word	0x00010001

08002f88 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	0018      	movs	r0, r3
 8002f92:	230c      	movs	r3, #12
 8002f94:	001a      	movs	r2, r3
 8002f96:	2100      	movs	r1, #0
 8002f98:	f005 ffb4 	bl	8008f04 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002f9c:	4b26      	ldr	r3, [pc, #152]	; (8003038 <MX_ADC_Init+0xb0>)
 8002f9e:	4a27      	ldr	r2, [pc, #156]	; (800303c <MX_ADC_Init+0xb4>)
 8002fa0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002fa2:	4b25      	ldr	r3, [pc, #148]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	0612      	lsls	r2, r2, #24
 8002fa8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002faa:	4b23      	ldr	r3, [pc, #140]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002fce:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002fd4:	4b18      	ldr	r3, [pc, #96]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fdc:	22c2      	movs	r2, #194	; 0xc2
 8002fde:	32ff      	adds	r2, #255	; 0xff
 8002fe0:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fea:	2224      	movs	r2, #36	; 0x24
 8002fec:	2101      	movs	r1, #1
 8002fee:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <MX_ADC_Init+0xb0>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <MX_ADC_Init+0xb0>)
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 fdf7 	bl	8003bec <HAL_ADC_Init>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d001      	beq.n	8003006 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8003002:	f000 fa11 	bl	8003428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	220b      	movs	r2, #11
 800300a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800300c:	1d3b      	adds	r3, r7, #4
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	0152      	lsls	r2, r2, #5
 8003012:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8003014:	1d3b      	adds	r3, r7, #4
 8003016:	2206      	movs	r2, #6
 8003018:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800301a:	1d3a      	adds	r2, r7, #4
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <MX_ADC_Init+0xb0>)
 800301e:	0011      	movs	r1, r2
 8003020:	0018      	movs	r0, r3
 8003022:	f000 ffbd 	bl	8003fa0 <HAL_ADC_ConfigChannel>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d001      	beq.n	800302e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800302a:	f000 f9fd 	bl	8003428 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b004      	add	sp, #16
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	20000954 	.word	0x20000954
 800303c:	40012400 	.word	0x40012400

08003040 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	0018      	movs	r0, r3
 800304a:	2314      	movs	r3, #20
 800304c:	001a      	movs	r2, r3
 800304e:	2100      	movs	r1, #0
 8003050:	f005 ff58 	bl	8008f04 <memset>
  RTC_DateTypeDef sDate = {0};
 8003054:	003b      	movs	r3, r7
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800305a:	4b28      	ldr	r3, [pc, #160]	; (80030fc <MX_RTC_Init+0xbc>)
 800305c:	4a28      	ldr	r2, [pc, #160]	; (8003100 <MX_RTC_Init+0xc0>)
 800305e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003060:	4b26      	ldr	r3, [pc, #152]	; (80030fc <MX_RTC_Init+0xbc>)
 8003062:	2200      	movs	r2, #0
 8003064:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003066:	4b25      	ldr	r3, [pc, #148]	; (80030fc <MX_RTC_Init+0xbc>)
 8003068:	227f      	movs	r2, #127	; 0x7f
 800306a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800306c:	4b23      	ldr	r3, [pc, #140]	; (80030fc <MX_RTC_Init+0xbc>)
 800306e:	22ff      	movs	r2, #255	; 0xff
 8003070:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003072:	4b22      	ldr	r3, [pc, #136]	; (80030fc <MX_RTC_Init+0xbc>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003078:	4b20      	ldr	r3, [pc, #128]	; (80030fc <MX_RTC_Init+0xbc>)
 800307a:	2200      	movs	r2, #0
 800307c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800307e:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <MX_RTC_Init+0xbc>)
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003084:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <MX_RTC_Init+0xbc>)
 8003086:	0018      	movs	r0, r3
 8003088:	f002 fb64 	bl	8005754 <HAL_RTC_Init>
 800308c:	1e03      	subs	r3, r0, #0
 800308e:	d001      	beq.n	8003094 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8003090:	f000 f9ca 	bl	8003428 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2200      	movs	r2, #0
 800309e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	2200      	movs	r2, #0
 80030a4:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	2200      	movs	r2, #0
 80030aa:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	2200      	movs	r2, #0
 80030b0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80030b2:	1d39      	adds	r1, r7, #4
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <MX_RTC_Init+0xbc>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	0018      	movs	r0, r3
 80030ba:	f002 fbdf 	bl	800587c <HAL_RTC_SetTime>
 80030be:	1e03      	subs	r3, r0, #0
 80030c0:	d001      	beq.n	80030c6 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80030c2:	f000 f9b1 	bl	8003428 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80030c6:	003b      	movs	r3, r7
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80030cc:	003b      	movs	r3, r7
 80030ce:	2201      	movs	r2, #1
 80030d0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80030d2:	003b      	movs	r3, r7
 80030d4:	2201      	movs	r2, #1
 80030d6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80030d8:	003b      	movs	r3, r7
 80030da:	2200      	movs	r2, #0
 80030dc:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80030de:	0039      	movs	r1, r7
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <MX_RTC_Init+0xbc>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	0018      	movs	r0, r3
 80030e6:	f002 fce3 	bl	8005ab0 <HAL_RTC_SetDate>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d001      	beq.n	80030f2 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 80030ee:	f000 f99b 	bl	8003428 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b006      	add	sp, #24
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	20000830 	.word	0x20000830
 8003100:	40002800 	.word	0x40002800

08003104 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310a:	003b      	movs	r3, r7
 800310c:	0018      	movs	r0, r3
 800310e:	2308      	movs	r3, #8
 8003110:	001a      	movs	r2, r3
 8003112:	2100      	movs	r1, #0
 8003114:	f005 fef6 	bl	8008f04 <memset>
  /* USER CODE BEGIN TIM3_Init 1 */
  // 50Hz - 48 000 000 / 48000(prescaler) = 1000Hz , 1000Hz/ 20(period) = 50Hz
  //default pulse - 0 degrees is 0,5ms - 1 tick is 0.1ms, so 0 = 5 pulse
  //1.5ms - 90 degrees, 2.5ms - 180 degrees
  /* USER CODE END TIM3_Init 1 */
  hTim3_PWM_Servo.Instance = TIM3;
 8003118:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <MX_TIM3_Init+0xa4>)
 800311a:	4a24      	ldr	r2, [pc, #144]	; (80031ac <MX_TIM3_Init+0xa8>)
 800311c:	601a      	str	r2, [r3, #0]
  hTim3_PWM_Servo.Init.Prescaler = 4800 - 1;
 800311e:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <MX_TIM3_Init+0xa4>)
 8003120:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <MX_TIM3_Init+0xac>)
 8003122:	605a      	str	r2, [r3, #4]
  hTim3_PWM_Servo.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003124:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <MX_TIM3_Init+0xa4>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  hTim3_PWM_Servo.Init.Period = 200- 1;
 800312a:	4b1f      	ldr	r3, [pc, #124]	; (80031a8 <MX_TIM3_Init+0xa4>)
 800312c:	22c7      	movs	r2, #199	; 0xc7
 800312e:	60da      	str	r2, [r3, #12]
  hTim3_PWM_Servo.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003130:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <MX_TIM3_Init+0xa4>)
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]
  hTim3_PWM_Servo.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003136:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <MX_TIM3_Init+0xa4>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&hTim3_PWM_Servo) != HAL_OK)
 800313c:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <MX_TIM3_Init+0xa4>)
 800313e:	0018      	movs	r0, r3
 8003140:	f004 fbce 	bl	80078e0 <HAL_TIM_PWM_Init>
 8003144:	1e03      	subs	r3, r0, #0
 8003146:	d001      	beq.n	800314c <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 8003148:	f000 f96e 	bl	8003428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800314c:	003b      	movs	r3, r7
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003152:	003b      	movs	r3, r7
 8003154:	2200      	movs	r2, #0
 8003156:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&hTim3_PWM_Servo, &sMasterConfig) != HAL_OK)
 8003158:	003a      	movs	r2, r7
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <MX_TIM3_Init+0xa4>)
 800315c:	0011      	movs	r1, r2
 800315e:	0018      	movs	r0, r3
 8003160:	f005 f8ba 	bl	80082d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d001      	beq.n	800316c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003168:	f000 f95e 	bl	8003428 <Error_Handler>
  }
  servoPwmConfigOC.OCMode = TIM_OCMODE_PWM1;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <MX_TIM3_Init+0xb0>)
 800316e:	2260      	movs	r2, #96	; 0x60
 8003170:	601a      	str	r2, [r3, #0]
  servoPwmConfigOC.Pulse = 5;
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <MX_TIM3_Init+0xb0>)
 8003174:	2205      	movs	r2, #5
 8003176:	605a      	str	r2, [r3, #4]
  servoPwmConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <MX_TIM3_Init+0xb0>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  servoPwmConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <MX_TIM3_Init+0xb0>)
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&hTim3_PWM_Servo, &servoPwmConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003184:	490b      	ldr	r1, [pc, #44]	; (80031b4 <MX_TIM3_Init+0xb0>)
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <MX_TIM3_Init+0xa4>)
 8003188:	2204      	movs	r2, #4
 800318a:	0018      	movs	r0, r3
 800318c:	f004 fd36 	bl	8007bfc <HAL_TIM_PWM_ConfigChannel>
 8003190:	1e03      	subs	r3, r0, #0
 8003192:	d001      	beq.n	8003198 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003194:	f000 f948 	bl	8003428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&hTim3_PWM_Servo);
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <MX_TIM3_Init+0xa4>)
 800319a:	0018      	movs	r0, r3
 800319c:	f000 fa54 	bl	8003648 <HAL_TIM_MspPostInit>
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	2000028c 	.word	0x2000028c
 80031ac:	40000400 	.word	0x40000400
 80031b0:	000012bf 	.word	0x000012bf
 80031b4:	20000254 	.word	0x20000254

080031b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <MX_TIM6_Init+0x38>)
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <MX_TIM6_Init+0x3c>)
 80031c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4800 - 1;
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <MX_TIM6_Init+0x38>)
 80031c4:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <MX_TIM6_Init+0x40>)
 80031c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <MX_TIM6_Init+0x38>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1500 - 1;
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <MX_TIM6_Init+0x38>)
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <MX_TIM6_Init+0x44>)
 80031d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <MX_TIM6_Init+0x38>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <MX_TIM6_Init+0x38>)
 80031dc:	0018      	movs	r0, r3
 80031de:	f004 faba 	bl	8007756 <HAL_TIM_Base_Init>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 80031e6:	f000 f91f 	bl	8003428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000850 	.word	0x20000850
 80031f4:	40001000 	.word	0x40001000
 80031f8:	000012bf 	.word	0x000012bf
 80031fc:	000005db 	.word	0x000005db

08003200 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <MX_USART1_UART_Init+0x5c>)
 8003208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <MX_USART1_UART_Init+0x58>)
 800320c:	2296      	movs	r2, #150	; 0x96
 800320e:	0192      	lsls	r2, r2, #6
 8003210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <MX_USART1_UART_Init+0x58>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003226:	220c      	movs	r2, #12
 8003228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <MX_USART1_UART_Init+0x58>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003238:	2200      	movs	r2, #0
 800323a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <MX_USART1_UART_Init+0x58>)
 800323e:	2200      	movs	r2, #0
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <MX_USART1_UART_Init+0x58>)
 8003244:	0018      	movs	r0, r3
 8003246:	f005 f8af 	bl	80083a8 <HAL_UART_Init>
 800324a:	1e03      	subs	r3, r0, #0
 800324c:	d001      	beq.n	8003252 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800324e:	f000 f8eb 	bl	8003428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	200007b0 	.word	0x200007b0
 800325c:	40013800 	.word	0x40013800

08003260 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <MX_USART2_UART_Init+0x58>)
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <MX_USART2_UART_Init+0x5c>)
 8003268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <MX_USART2_UART_Init+0x58>)
 800326c:	2296      	movs	r2, #150	; 0x96
 800326e:	0212      	lsls	r2, r2, #8
 8003270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <MX_USART2_UART_Init+0x58>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <MX_USART2_UART_Init+0x58>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <MX_USART2_UART_Init+0x58>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <MX_USART2_UART_Init+0x58>)
 8003286:	220c      	movs	r2, #12
 8003288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <MX_USART2_UART_Init+0x58>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <MX_USART2_UART_Init+0x58>)
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <MX_USART2_UART_Init+0x58>)
 8003298:	2200      	movs	r2, #0
 800329a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <MX_USART2_UART_Init+0x58>)
 800329e:	2200      	movs	r2, #0
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <MX_USART2_UART_Init+0x58>)
 80032a4:	0018      	movs	r0, r3
 80032a6:	f005 f87f 	bl	80083a8 <HAL_UART_Init>
 80032aa:	1e03      	subs	r3, r0, #0
 80032ac:	d001      	beq.n	80032b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80032ae:	f000 f8bb 	bl	8003428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000890 	.word	0x20000890
 80032bc:	40004400 	.word	0x40004400

080032c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032c6:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <MX_DMA_Init+0x28>)
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <MX_DMA_Init+0x28>)
 80032cc:	2101      	movs	r1, #1
 80032ce:	430a      	orrs	r2, r1
 80032d0:	615a      	str	r2, [r3, #20]
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <MX_DMA_Init+0x28>)
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	2201      	movs	r2, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */

}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b002      	add	sp, #8
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	40021000 	.word	0x40021000

080032ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f2:	240c      	movs	r4, #12
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	0018      	movs	r0, r3
 80032f8:	2314      	movs	r3, #20
 80032fa:	001a      	movs	r2, r3
 80032fc:	2100      	movs	r1, #0
 80032fe:	f005 fe01 	bl	8008f04 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003302:	4b46      	ldr	r3, [pc, #280]	; (800341c <MX_GPIO_Init+0x130>)
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	4b45      	ldr	r3, [pc, #276]	; (800341c <MX_GPIO_Init+0x130>)
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	0309      	lsls	r1, r1, #12
 800330c:	430a      	orrs	r2, r1
 800330e:	615a      	str	r2, [r3, #20]
 8003310:	4b42      	ldr	r3, [pc, #264]	; (800341c <MX_GPIO_Init+0x130>)
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	031b      	lsls	r3, r3, #12
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <MX_GPIO_Init+0x130>)
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	4b3e      	ldr	r3, [pc, #248]	; (800341c <MX_GPIO_Init+0x130>)
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	03c9      	lsls	r1, r1, #15
 8003328:	430a      	orrs	r2, r1
 800332a:	615a      	str	r2, [r3, #20]
 800332c:	4b3b      	ldr	r3, [pc, #236]	; (800341c <MX_GPIO_Init+0x130>)
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	03db      	lsls	r3, r3, #15
 8003334:	4013      	ands	r3, r2
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800333a:	4b38      	ldr	r3, [pc, #224]	; (800341c <MX_GPIO_Init+0x130>)
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <MX_GPIO_Init+0x130>)
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	0289      	lsls	r1, r1, #10
 8003344:	430a      	orrs	r2, r1
 8003346:	615a      	str	r2, [r3, #20]
 8003348:	4b34      	ldr	r3, [pc, #208]	; (800341c <MX_GPIO_Init+0x130>)
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	029b      	lsls	r3, r3, #10
 8003350:	4013      	ands	r3, r2
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003356:	4b32      	ldr	r3, [pc, #200]	; (8003420 <MX_GPIO_Init+0x134>)
 8003358:	2200      	movs	r2, #0
 800335a:	2108      	movs	r1, #8
 800335c:	0018      	movs	r0, r3
 800335e:	f001 fc5e 	bl	8004c1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003362:	2390      	movs	r3, #144	; 0x90
 8003364:	05db      	lsls	r3, r3, #23
 8003366:	2200      	movs	r2, #0
 8003368:	2120      	movs	r1, #32
 800336a:	0018      	movs	r0, r3
 800336c:	f001 fc57 	bl	8004c1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003370:	193b      	adds	r3, r7, r4
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003378:	193b      	adds	r3, r7, r4
 800337a:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <MX_GPIO_Init+0x138>)
 800337c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	193b      	adds	r3, r7, r4
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003384:	193b      	adds	r3, r7, r4
 8003386:	4a26      	ldr	r2, [pc, #152]	; (8003420 <MX_GPIO_Init+0x134>)
 8003388:	0019      	movs	r1, r3
 800338a:	0010      	movs	r0, r2
 800338c:	f001 faba 	bl	8004904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003390:	0021      	movs	r1, r4
 8003392:	187b      	adds	r3, r7, r1
 8003394:	2208      	movs	r2, #8
 8003396:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003398:	187b      	adds	r3, r7, r1
 800339a:	2201      	movs	r2, #1
 800339c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	187b      	adds	r3, r7, r1
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033aa:	000c      	movs	r4, r1
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <MX_GPIO_Init+0x134>)
 80033b0:	0019      	movs	r1, r3
 80033b2:	0010      	movs	r0, r2
 80033b4:	f001 faa6 	bl	8004904 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80033b8:	0021      	movs	r1, r4
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	2220      	movs	r2, #32
 80033be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	2201      	movs	r2, #1
 80033c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	187b      	adds	r3, r7, r1
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	2200      	movs	r2, #0
 80033d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80033d2:	000c      	movs	r4, r1
 80033d4:	187a      	adds	r2, r7, r1
 80033d6:	2390      	movs	r3, #144	; 0x90
 80033d8:	05db      	lsls	r3, r3, #23
 80033da:	0011      	movs	r1, r2
 80033dc:	0018      	movs	r0, r3
 80033de:	f001 fa91 	bl	8004904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033e2:	0021      	movs	r1, r4
 80033e4:	187b      	adds	r3, r7, r1
 80033e6:	2280      	movs	r2, #128	; 0x80
 80033e8:	0152      	lsls	r2, r2, #5
 80033ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ec:	187b      	adds	r3, r7, r1
 80033ee:	2200      	movs	r2, #0
 80033f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	187b      	adds	r3, r7, r1
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <MX_GPIO_Init+0x134>)
 80033fc:	0019      	movs	r1, r3
 80033fe:	0010      	movs	r0, r2
 8003400:	f001 fa80 	bl	8004904 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003404:	2200      	movs	r2, #0
 8003406:	2100      	movs	r1, #0
 8003408:	2007      	movs	r0, #7
 800340a:	f001 f86b 	bl	80044e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800340e:	2007      	movs	r0, #7
 8003410:	f001 f87d 	bl	800450e <HAL_NVIC_EnableIRQ>

}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	b009      	add	sp, #36	; 0x24
 800341a:	bd90      	pop	{r4, r7, pc}
 800341c:	40021000 	.word	0x40021000
 8003420:	48000800 	.word	0x48000800
 8003424:	10310000 	.word	0x10310000

08003428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_MspInit+0x44>)
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <HAL_MspInit+0x44>)
 8003440:	2101      	movs	r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	619a      	str	r2, [r3, #24]
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_MspInit+0x44>)
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2201      	movs	r2, #1
 800344c:	4013      	ands	r3, r2
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_MspInit+0x44>)
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_MspInit+0x44>)
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	0549      	lsls	r1, r1, #21
 800345c:	430a      	orrs	r2, r1
 800345e:	61da      	str	r2, [r3, #28]
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_MspInit+0x44>)
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	055b      	lsls	r3, r3, #21
 8003468:	4013      	ands	r3, r2
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	40021000 	.word	0x40021000

0800347c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	2314      	movs	r3, #20
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	0018      	movs	r0, r3
 800348a:	2314      	movs	r3, #20
 800348c:	001a      	movs	r2, r3
 800348e:	2100      	movs	r1, #0
 8003490:	f005 fd38 	bl	8008f04 <memset>
  if(hadc->Instance==ADC1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a2d      	ldr	r2, [pc, #180]	; (8003550 <HAL_ADC_MspInit+0xd4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d154      	bne.n	8003548 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800349e:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_ADC_MspInit+0xd8>)
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <HAL_ADC_MspInit+0xd8>)
 80034a4:	2180      	movs	r1, #128	; 0x80
 80034a6:	0089      	lsls	r1, r1, #2
 80034a8:	430a      	orrs	r2, r1
 80034aa:	619a      	str	r2, [r3, #24]
 80034ac:	4b29      	ldr	r3, [pc, #164]	; (8003554 <HAL_ADC_MspInit+0xd8>)
 80034ae:	699a      	ldr	r2, [r3, #24]
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ba:	4b26      	ldr	r3, [pc, #152]	; (8003554 <HAL_ADC_MspInit+0xd8>)
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_ADC_MspInit+0xd8>)
 80034c0:	2180      	movs	r1, #128	; 0x80
 80034c2:	0309      	lsls	r1, r1, #12
 80034c4:	430a      	orrs	r2, r1
 80034c6:	615a      	str	r2, [r3, #20]
 80034c8:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_ADC_MspInit+0xd8>)
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	031b      	lsls	r3, r3, #12
 80034d0:	4013      	ands	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PC1     ------> ADC_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80034d6:	2114      	movs	r1, #20
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	2202      	movs	r2, #2
 80034dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	2203      	movs	r2, #3
 80034e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <HAL_ADC_MspInit+0xdc>)
 80034ee:	0019      	movs	r1, r3
 80034f0:	0010      	movs	r0, r2
 80034f2:	f001 fa07 	bl	8004904 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80034f6:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_ADC_MspInit+0xe0>)
 80034f8:	4a19      	ldr	r2, [pc, #100]	; (8003560 <HAL_ADC_MspInit+0xe4>)
 80034fa:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034fc:	4b17      	ldr	r3, [pc, #92]	; (800355c <HAL_ADC_MspInit+0xe0>)
 80034fe:	2200      	movs	r2, #0
 8003500:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_ADC_MspInit+0xe0>)
 8003504:	2200      	movs	r2, #0
 8003506:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_ADC_MspInit+0xe0>)
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_ADC_MspInit+0xe0>)
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	0052      	lsls	r2, r2, #1
 8003514:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_ADC_MspInit+0xe0>)
 8003518:	2280      	movs	r2, #128	; 0x80
 800351a:	00d2      	lsls	r2, r2, #3
 800351c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <HAL_ADC_MspInit+0xe0>)
 8003520:	2220      	movs	r2, #32
 8003522:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_ADC_MspInit+0xe0>)
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	0192      	lsls	r2, r2, #6
 800352a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_ADC_MspInit+0xe0>)
 800352e:	0018      	movs	r0, r3
 8003530:	f001 f80a 	bl	8004548 <HAL_DMA_Init>
 8003534:	1e03      	subs	r3, r0, #0
 8003536:	d001      	beq.n	800353c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8003538:	f7ff ff76 	bl	8003428 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a07      	ldr	r2, [pc, #28]	; (800355c <HAL_ADC_MspInit+0xe0>)
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_ADC_MspInit+0xe0>)
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b00a      	add	sp, #40	; 0x28
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40012400 	.word	0x40012400
 8003554:	40021000 	.word	0x40021000
 8003558:	48000800 	.word	0x48000800
 800355c:	20000910 	.word	0x20000910
 8003560:	40020008 	.word	0x40020008

08003564 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a06      	ldr	r2, [pc, #24]	; (800358c <HAL_RTC_MspInit+0x28>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d106      	bne.n	8003584 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RTC_MspInit+0x2c>)
 8003578:	6a1a      	ldr	r2, [r3, #32]
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <HAL_RTC_MspInit+0x2c>)
 800357c:	2180      	movs	r1, #128	; 0x80
 800357e:	0209      	lsls	r1, r1, #8
 8003580:	430a      	orrs	r2, r1
 8003582:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b002      	add	sp, #8
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40002800 	.word	0x40002800
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_TIM_PWM_MspInit+0x34>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10b      	bne.n	80035be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_TIM_PWM_MspInit+0x38>)
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <HAL_TIM_PWM_MspInit+0x38>)
 80035ac:	2102      	movs	r1, #2
 80035ae:	430a      	orrs	r2, r1
 80035b0:	61da      	str	r2, [r3, #28]
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_TIM_PWM_MspInit+0x38>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	2202      	movs	r2, #2
 80035b8:	4013      	ands	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b004      	add	sp, #16
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40021000 	.word	0x40021000

080035d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a17      	ldr	r2, [pc, #92]	; (800363c <HAL_TIM_Base_MspInit+0x6c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d114      	bne.n	800360c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <HAL_TIM_Base_MspInit+0x70>)
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	4b16      	ldr	r3, [pc, #88]	; (8003640 <HAL_TIM_Base_MspInit+0x70>)
 80035e8:	2110      	movs	r1, #16
 80035ea:	430a      	orrs	r2, r1
 80035ec:	61da      	str	r2, [r3, #28]
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HAL_TIM_Base_MspInit+0x70>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2210      	movs	r2, #16
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	2011      	movs	r0, #17
 8003600:	f000 ff70 	bl	80044e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003604:	2011      	movs	r0, #17
 8003606:	f000 ff82 	bl	800450e <HAL_NVIC_EnableIRQ>
  }
  else if(htim_base->Instance == TIM1)
  {
	  __HAL_RCC_TIM1_CLK_ENABLE();
  }
}
 800360a:	e012      	b.n	8003632 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance == TIM1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a0c      	ldr	r2, [pc, #48]	; (8003644 <HAL_TIM_Base_MspInit+0x74>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10d      	bne.n	8003632 <HAL_TIM_Base_MspInit+0x62>
	  __HAL_RCC_TIM1_CLK_ENABLE();
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <HAL_TIM_Base_MspInit+0x70>)
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_TIM_Base_MspInit+0x70>)
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	0109      	lsls	r1, r1, #4
 8003620:	430a      	orrs	r2, r1
 8003622:	619a      	str	r2, [r3, #24]
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_TIM_Base_MspInit+0x70>)
 8003626:	699a      	ldr	r2, [r3, #24]
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	4013      	ands	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	46bd      	mov	sp, r7
 8003636:	b004      	add	sp, #16
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	40001000 	.word	0x40001000
 8003640:	40021000 	.word	0x40021000
 8003644:	40012c00 	.word	0x40012c00

08003648 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	230c      	movs	r3, #12
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	0018      	movs	r0, r3
 8003656:	2314      	movs	r3, #20
 8003658:	001a      	movs	r2, r3
 800365a:	2100      	movs	r1, #0
 800365c:	f005 fc52 	bl	8008f04 <memset>
  if(htim->Instance==TIM3)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a15      	ldr	r2, [pc, #84]	; (80036bc <HAL_TIM_MspPostInit+0x74>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d123      	bne.n	80036b2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800366a:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <HAL_TIM_MspPostInit+0x78>)
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <HAL_TIM_MspPostInit+0x78>)
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	0309      	lsls	r1, r1, #12
 8003674:	430a      	orrs	r2, r1
 8003676:	615a      	str	r2, [r3, #20]
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_TIM_MspPostInit+0x78>)
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	031b      	lsls	r3, r3, #12
 8003680:	4013      	ands	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003686:	210c      	movs	r1, #12
 8003688:	187b      	adds	r3, r7, r1
 800368a:	2280      	movs	r2, #128	; 0x80
 800368c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	187b      	adds	r3, r7, r1
 8003690:	2202      	movs	r2, #2
 8003692:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	187b      	adds	r3, r7, r1
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	187b      	adds	r3, r7, r1
 800369c:	2200      	movs	r2, #0
 800369e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	2200      	movs	r2, #0
 80036a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	4a06      	ldr	r2, [pc, #24]	; (80036c4 <HAL_TIM_MspPostInit+0x7c>)
 80036aa:	0019      	movs	r1, r3
 80036ac:	0010      	movs	r0, r2
 80036ae:	f001 f929 	bl	8004904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b008      	add	sp, #32
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40021000 	.word	0x40021000
 80036c4:	48000800 	.word	0x48000800

080036c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	; 0x30
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d0:	231c      	movs	r3, #28
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	0018      	movs	r0, r3
 80036d6:	2314      	movs	r3, #20
 80036d8:	001a      	movs	r2, r3
 80036da:	2100      	movs	r1, #0
 80036dc:	f005 fc12 	bl	8008f04 <memset>
  if(huart->Instance==USART1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a41      	ldr	r2, [pc, #260]	; (80037ec <HAL_UART_MspInit+0x124>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d13c      	bne.n	8003764 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036ea:	4b41      	ldr	r3, [pc, #260]	; (80037f0 <HAL_UART_MspInit+0x128>)
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	4b40      	ldr	r3, [pc, #256]	; (80037f0 <HAL_UART_MspInit+0x128>)
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	01c9      	lsls	r1, r1, #7
 80036f4:	430a      	orrs	r2, r1
 80036f6:	619a      	str	r2, [r3, #24]
 80036f8:	4b3d      	ldr	r3, [pc, #244]	; (80037f0 <HAL_UART_MspInit+0x128>)
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	01db      	lsls	r3, r3, #7
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003706:	4b3a      	ldr	r3, [pc, #232]	; (80037f0 <HAL_UART_MspInit+0x128>)
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	4b39      	ldr	r3, [pc, #228]	; (80037f0 <HAL_UART_MspInit+0x128>)
 800370c:	2180      	movs	r1, #128	; 0x80
 800370e:	0289      	lsls	r1, r1, #10
 8003710:	430a      	orrs	r2, r1
 8003712:	615a      	str	r2, [r3, #20]
 8003714:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <HAL_UART_MspInit+0x128>)
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	2380      	movs	r3, #128	; 0x80
 800371a:	029b      	lsls	r3, r3, #10
 800371c:	4013      	ands	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003722:	211c      	movs	r1, #28
 8003724:	187b      	adds	r3, r7, r1
 8003726:	22c0      	movs	r2, #192	; 0xc0
 8003728:	00d2      	lsls	r2, r2, #3
 800372a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372c:	187b      	adds	r3, r7, r1
 800372e:	2202      	movs	r2, #2
 8003730:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	187b      	adds	r3, r7, r1
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003738:	187b      	adds	r3, r7, r1
 800373a:	2203      	movs	r2, #3
 800373c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800373e:	187b      	adds	r3, r7, r1
 8003740:	2201      	movs	r2, #1
 8003742:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003744:	187a      	adds	r2, r7, r1
 8003746:	2390      	movs	r3, #144	; 0x90
 8003748:	05db      	lsls	r3, r3, #23
 800374a:	0011      	movs	r1, r2
 800374c:	0018      	movs	r0, r3
 800374e:	f001 f8d9 	bl	8004904 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	201b      	movs	r0, #27
 8003758:	f000 fec4 	bl	80044e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800375c:	201b      	movs	r0, #27
 800375e:	f000 fed6 	bl	800450e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003762:	e03f      	b.n	80037e4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <HAL_UART_MspInit+0x12c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d13a      	bne.n	80037e4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_UART_MspInit+0x128>)
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <HAL_UART_MspInit+0x128>)
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	0289      	lsls	r1, r1, #10
 8003778:	430a      	orrs	r2, r1
 800377a:	61da      	str	r2, [r3, #28]
 800377c:	4b1c      	ldr	r3, [pc, #112]	; (80037f0 <HAL_UART_MspInit+0x128>)
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	029b      	lsls	r3, r3, #10
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378a:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_UART_MspInit+0x128>)
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <HAL_UART_MspInit+0x128>)
 8003790:	2180      	movs	r1, #128	; 0x80
 8003792:	0289      	lsls	r1, r1, #10
 8003794:	430a      	orrs	r2, r1
 8003796:	615a      	str	r2, [r3, #20]
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_UART_MspInit+0x128>)
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	029b      	lsls	r3, r3, #10
 80037a0:	4013      	ands	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037a6:	211c      	movs	r1, #28
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	220c      	movs	r2, #12
 80037ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2202      	movs	r2, #2
 80037b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	2203      	movs	r2, #3
 80037be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	2201      	movs	r2, #1
 80037c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c6:	187a      	adds	r2, r7, r1
 80037c8:	2390      	movs	r3, #144	; 0x90
 80037ca:	05db      	lsls	r3, r3, #23
 80037cc:	0011      	movs	r1, r2
 80037ce:	0018      	movs	r0, r3
 80037d0:	f001 f898 	bl	8004904 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037d4:	2200      	movs	r2, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	201c      	movs	r0, #28
 80037da:	f000 fe83 	bl	80044e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037de:	201c      	movs	r0, #28
 80037e0:	f000 fe95 	bl	800450e <HAL_NVIC_EnableIRQ>
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b00c      	add	sp, #48	; 0x30
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40013800 	.word	0x40013800
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40004400 	.word	0x40004400

080037f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <HardFault_Handler+0x4>

08003808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003820:	f000 f9a6 	bl	8003b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11))
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <EXTI4_15_IRQHandler+0x24>)
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	4013      	ands	r3, r2
 800383a:	d001      	beq.n	8003840 <EXTI4_15_IRQHandler+0x14>
	{
		handleGPIO_Pin11_Interrupt();
 800383c:	f000 f8a2 	bl	8003984 <handleGPIO_Pin11_Interrupt>
		//handleGPIO_Pin13_Interrupt();
	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	0018      	movs	r0, r3
 8003846:	f001 fa23 	bl	8004c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40010400 	.word	0x40010400

08003854 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <DMA1_Channel1_IRQHandler+0x14>)
 800385a:	0018      	movs	r0, r3
 800385c:	f000 ff68 	bl	8004730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	20000910 	.word	0x20000910

0800386c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <TIM6_IRQHandler+0x14>)
 8003872:	0018      	movs	r0, r3
 8003874:	f004 f8ac 	bl	80079d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	20000850 	.word	0x20000850

08003884 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <SPI2_IRQHandler+0x14>)
 800388a:	0018      	movs	r0, r3
 800388c:	f003 fa56 	bl	8006d3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	200006b4 	.word	0x200006b4

0800389c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <USART1_IRQHandler+0x14>)
 80038a2:	0018      	movs	r0, r3
 80038a4:	f004 fe7c 	bl	80085a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	200007b0 	.word	0x200007b0

080038b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <USART2_IRQHandler+0x14>)
 80038ba:	0018      	movs	r0, r3
 80038bc:	f004 fe70 	bl	80085a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	20000890 	.word	0x20000890

080038cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	if (TIM6 == htim->Instance)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a09      	ldr	r2, [pc, #36]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10b      	bne.n	80038f6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		if (btnPressed)
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d006      	beq.n	80038f6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			timerElapsed = true;
 80038e8:	4b07      	ldr	r3, [pc, #28]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f003 ffcb 	bl	800788c <HAL_TIM_Base_Stop_IT>
		}
	}
}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b002      	add	sp, #8
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	40001000 	.word	0x40001000
 8003904:	2000027d 	.word	0x2000027d
 8003908:	2000027e 	.word	0x2000027e

0800390c <HAL_SPI_TxCpltCallback>:

// This is called when SPI transmit is done
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	if (SPI2 == hspi->Instance)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a08      	ldr	r2, [pc, #32]	; (800393c <HAL_SPI_TxCpltCallback+0x30>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d109      	bne.n	8003932 <HAL_SPI_TxCpltCallback+0x26>
	{
		// Set CS pin to high and raise flag
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4807      	ldr	r0, [pc, #28]	; (8003940 <HAL_SPI_TxCpltCallback+0x34>)
 8003924:	2201      	movs	r2, #1
 8003926:	0019      	movs	r1, r3
 8003928:	f001 f979 	bl	8004c1e <HAL_GPIO_WritePin>
		spi_tx_done = true;
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_SPI_TxCpltCallback+0x38>)
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
	}
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b002      	add	sp, #8
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	40003800 	.word	0x40003800
 8003940:	48000400 	.word	0x48000400
 8003944:	20000278 	.word	0x20000278

08003948 <HAL_SPI_RxCpltCallback>:

// This is called when SPI receive is done
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	if (SPI2 == hspi->Instance)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a08      	ldr	r2, [pc, #32]	; (8003978 <HAL_SPI_RxCpltCallback+0x30>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d109      	bne.n	800396e <HAL_SPI_RxCpltCallback+0x26>
	{
		// Set CS pin to high and raise flag
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4807      	ldr	r0, [pc, #28]	; (800397c <HAL_SPI_RxCpltCallback+0x34>)
 8003960:	2201      	movs	r2, #1
 8003962:	0019      	movs	r1, r3
 8003964:	f001 f95b 	bl	8004c1e <HAL_GPIO_WritePin>
		spi_rx_done = true;
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_SPI_RxCpltCallback+0x38>)
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
	}
}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	b002      	add	sp, #8
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	40003800 	.word	0x40003800
 800397c:	48000400 	.word	0x48000400
 8003980:	20000279 	.word	0x20000279

08003984 <handleGPIO_Pin11_Interrupt>:

static void handleGPIO_Pin11_Interrupt()
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
	//Use timer to handle debouncing
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11))
 800398a:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <handleGPIO_Pin11_Interrupt+0x8c>)
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	4013      	ands	r3, r2
 8003994:	d038      	beq.n	8003a08 <handleGPIO_Pin11_Interrupt+0x84>
	{
		uint8_t pin11State = (uint8_t)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8003996:	1dfc      	adds	r4, r7, #7
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <handleGPIO_Pin11_Interrupt+0x90>)
 800399e:	0019      	movs	r1, r3
 80039a0:	0010      	movs	r0, r2
 80039a2:	f001 f91f 	bl	8004be4 <HAL_GPIO_ReadPin>
 80039a6:	0003      	movs	r3, r0
 80039a8:	7023      	strb	r3, [r4, #0]

		if (GPIO_PIN_SET == pin11State)
 80039aa:	1dfb      	adds	r3, r7, #7
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10f      	bne.n	80039d2 <handleGPIO_Pin11_Interrupt+0x4e>
		{
			//rising edge
			if (!btnPressed)
 80039b2:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <handleGPIO_Pin11_Interrupt+0x94>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2201      	movs	r2, #1
 80039ba:	4053      	eors	r3, r2
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d022      	beq.n	8003a08 <handleGPIO_Pin11_Interrupt+0x84>
			{
				btnPressed = true;
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <handleGPIO_Pin11_Interrupt+0x94>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim6);
 80039c8:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <handleGPIO_Pin11_Interrupt+0x98>)
 80039ca:	0018      	movs	r0, r3
 80039cc:	f003 ff3c 	bl	8007848 <HAL_TIM_Base_Start_IT>
			btnPressed = false;
			timerElapsed = false;
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}
}
 80039d0:	e01a      	b.n	8003a08 <handleGPIO_Pin11_Interrupt+0x84>
		else if (GPIO_PIN_RESET == pin11State)
 80039d2:	1dfb      	adds	r3, r7, #7
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d116      	bne.n	8003a08 <handleGPIO_Pin11_Interrupt+0x84>
			if (timerElapsed && btnPressed)
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <handleGPIO_Pin11_Interrupt+0x9c>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <handleGPIO_Pin11_Interrupt+0x70>
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <handleGPIO_Pin11_Interrupt+0x94>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <handleGPIO_Pin11_Interrupt+0x70>
				btnTrigger = true;
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <handleGPIO_Pin11_Interrupt+0xa0>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
			btnPressed = false;
 80039f4:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <handleGPIO_Pin11_Interrupt+0x94>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
			timerElapsed = false;
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <handleGPIO_Pin11_Interrupt+0x9c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <handleGPIO_Pin11_Interrupt+0x98>)
 8003a02:	0018      	movs	r0, r3
 8003a04:	f003 ff42 	bl	800788c <HAL_TIM_Base_Stop_IT>
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b003      	add	sp, #12
 8003a0e:	bd90      	pop	{r4, r7, pc}
 8003a10:	40010400 	.word	0x40010400
 8003a14:	48000800 	.word	0x48000800
 8003a18:	2000027d 	.word	0x2000027d
 8003a1c:	20000850 	.word	0x20000850
 8003a20:	2000027e 	.word	0x2000027e
 8003a24:	2000027c 	.word	0x2000027c

08003a28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <_sbrk+0x50>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <_sbrk+0x16>
		heap_end = &end;
 8003a38:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <_sbrk+0x50>)
 8003a3a:	4a10      	ldr	r2, [pc, #64]	; (8003a7c <_sbrk+0x54>)
 8003a3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <_sbrk+0x50>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <_sbrk+0x50>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	18d3      	adds	r3, r2, r3
 8003a4c:	466a      	mov	r2, sp
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d907      	bls.n	8003a62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003a52:	f005 fa2d 	bl	8008eb0 <__errno>
 8003a56:	0003      	movs	r3, r0
 8003a58:	220c      	movs	r2, #12
 8003a5a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	425b      	negs	r3, r3
 8003a60:	e006      	b.n	8003a70 <_sbrk+0x48>
	}

	heap_end += incr;
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <_sbrk+0x50>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	18d2      	adds	r2, r2, r3
 8003a6a:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <_sbrk+0x50>)
 8003a6c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b004      	add	sp, #16
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000280 	.word	0x20000280
 8003a7c:	200009a0 	.word	0x200009a0

08003a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a8c:	480d      	ldr	r0, [pc, #52]	; (8003ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a90:	480d      	ldr	r0, [pc, #52]	; (8003ac8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a92:	490e      	ldr	r1, [pc, #56]	; (8003acc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a94:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <LoopForever+0xe>)
  movs r3, #0
 8003a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a98:	e002      	b.n	8003aa0 <LoopCopyDataInit>

08003a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a9e:	3304      	adds	r3, #4

08003aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aa4:	d3f9      	bcc.n	8003a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aa6:	4a0b      	ldr	r2, [pc, #44]	; (8003ad4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003aa8:	4c0b      	ldr	r4, [pc, #44]	; (8003ad8 <LoopForever+0x16>)
  movs r3, #0
 8003aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aac:	e001      	b.n	8003ab2 <LoopFillZerobss>

08003aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ab0:	3204      	adds	r2, #4

08003ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ab4:	d3fb      	bcc.n	8003aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ab6:	f7ff ffe3 	bl	8003a80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003aba:	f005 f9ff 	bl	8008ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003abe:	f7ff f95b 	bl	8002d78 <main>

08003ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ac2:	e7fe      	b.n	8003ac2 <LoopForever>
  ldr   r0, =_estack
 8003ac4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003acc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003ad0:	0800b470 	.word	0x0800b470
  ldr r2, =_sbss
 8003ad4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003ad8:	2000099c 	.word	0x2000099c

08003adc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003adc:	e7fe      	b.n	8003adc <ADC1_IRQHandler>
	...

08003ae0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ae4:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <HAL_Init+0x24>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_Init+0x24>)
 8003aea:	2110      	movs	r1, #16
 8003aec:	430a      	orrs	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003af0:	2000      	movs	r0, #0
 8003af2:	f000 f809 	bl	8003b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003af6:	f7ff fc9d 	bl	8003434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	0018      	movs	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	40022000 	.word	0x40022000

08003b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <HAL_InitTick+0x5c>)
 8003b12:	681c      	ldr	r4, [r3, #0]
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <HAL_InitTick+0x60>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	0019      	movs	r1, r3
 8003b1a:	23fa      	movs	r3, #250	; 0xfa
 8003b1c:	0098      	lsls	r0, r3, #2
 8003b1e:	f7fc fb05 	bl	800012c <__udivsi3>
 8003b22:	0003      	movs	r3, r0
 8003b24:	0019      	movs	r1, r3
 8003b26:	0020      	movs	r0, r4
 8003b28:	f7fc fb00 	bl	800012c <__udivsi3>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f000 fcfd 	bl	800452e <HAL_SYSTICK_Config>
 8003b34:	1e03      	subs	r3, r0, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e00f      	b.n	8003b5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d80b      	bhi.n	8003b5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	2301      	movs	r3, #1
 8003b46:	425b      	negs	r3, r3
 8003b48:	2200      	movs	r2, #0
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f000 fcca 	bl	80044e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_InitTick+0x64>)
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e000      	b.n	8003b5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b003      	add	sp, #12
 8003b62:	bd90      	pop	{r4, r7, pc}
 8003b64:	20000014 	.word	0x20000014
 8003b68:	2000001c 	.word	0x2000001c
 8003b6c:	20000018 	.word	0x20000018

08003b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_IncTick+0x1c>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	001a      	movs	r2, r3
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_IncTick+0x20>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	18d2      	adds	r2, r2, r3
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <HAL_IncTick+0x20>)
 8003b82:	601a      	str	r2, [r3, #0]
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	2000001c 	.word	0x2000001c
 8003b90:	20000994 	.word	0x20000994

08003b94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  return uwTick;
 8003b98:	4b02      	ldr	r3, [pc, #8]	; (8003ba4 <HAL_GetTick+0x10>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	20000994 	.word	0x20000994

08003ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7ff fff0 	bl	8003b94 <HAL_GetTick>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	d005      	beq.n	8003bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_Delay+0x40>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	189b      	adds	r3, r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	f7ff ffe0 	bl	8003b94 <HAL_GetTick>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d8f7      	bhi.n	8003bd0 <HAL_Delay+0x28>
  {
  }
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b004      	add	sp, #16
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	2000001c 	.word	0x2000001c

08003bec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf4:	230f      	movs	r3, #15
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e125      	b.n	8003e56 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10a      	bne.n	8003c28 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2234      	movs	r2, #52	; 0x34
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f7ff fc2a 	bl	800347c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d000      	beq.n	8003c34 <HAL_ADC_Init+0x48>
 8003c32:	e103      	b.n	8003e3c <HAL_ADC_Init+0x250>
 8003c34:	230f      	movs	r3, #15
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d000      	beq.n	8003c40 <HAL_ADC_Init+0x54>
 8003c3e:	e0fd      	b.n	8003e3c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2204      	movs	r2, #4
 8003c48:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003c4a:	d000      	beq.n	8003c4e <HAL_ADC_Init+0x62>
 8003c4c:	e0f6      	b.n	8003e3c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	4a83      	ldr	r2, [pc, #524]	; (8003e60 <HAL_ADC_Init+0x274>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	2202      	movs	r2, #2
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2203      	movs	r2, #3
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d112      	bne.n	8003c92 <HAL_ADC_Init+0xa6>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2201      	movs	r2, #1
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d009      	beq.n	8003c8e <HAL_ADC_Init+0xa2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	401a      	ands	r2, r3
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_Init+0xa6>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_ADC_Init+0xa8>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d116      	bne.n	8003cc6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2218      	movs	r2, #24
 8003ca0:	4393      	bics	r3, r2
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	0899      	lsrs	r1, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4964      	ldr	r1, [pc, #400]	; (8003e64 <HAL_ADC_Init+0x278>)
 8003cd2:	400a      	ands	r2, r1
 8003cd4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	7e1b      	ldrb	r3, [r3, #24]
 8003cda:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7e5b      	ldrb	r3, [r3, #25]
 8003ce0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ce2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7e9b      	ldrb	r3, [r3, #26]
 8003ce8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003cea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d002      	beq.n	8003cfa <HAL_ADC_Init+0x10e>
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	015b      	lsls	r3, r3, #5
 8003cf8:	e000      	b.n	8003cfc <HAL_ADC_Init+0x110>
 8003cfa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003cfc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003d02:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_Init+0x124>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	e000      	b.n	8003d12 <HAL_ADC_Init+0x126>
 8003d10:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003d12:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2124      	movs	r1, #36	; 0x24
 8003d18:	5c5b      	ldrb	r3, [r3, r1]
 8003d1a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003d1c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7edb      	ldrb	r3, [r3, #27]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d115      	bne.n	8003d58 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7e9b      	ldrb	r3, [r3, #26]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2280      	movs	r2, #128	; 0x80
 8003d38:	0252      	lsls	r2, r2, #9
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	e00b      	b.n	8003d58 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	2220      	movs	r2, #32
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	2201      	movs	r2, #1
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	23c2      	movs	r3, #194	; 0xc2
 8003d5e:	33ff      	adds	r3, #255	; 0xff
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d007      	beq.n	8003d74 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68d9      	ldr	r1, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	055b      	lsls	r3, r3, #21
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d01b      	beq.n	8003dc8 <HAL_ADC_Init+0x1dc>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d017      	beq.n	8003dc8 <HAL_ADC_Init+0x1dc>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d013      	beq.n	8003dc8 <HAL_ADC_Init+0x1dc>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d00f      	beq.n	8003dc8 <HAL_ADC_Init+0x1dc>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d00b      	beq.n	8003dc8 <HAL_ADC_Init+0x1dc>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d007      	beq.n	8003dc8 <HAL_ADC_Init+0x1dc>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	2b06      	cmp	r3, #6
 8003dbe:	d003      	beq.n	8003dc8 <HAL_ADC_Init+0x1dc>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	2b07      	cmp	r3, #7
 8003dc6:	d112      	bne.n	8003dee <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2107      	movs	r1, #7
 8003dd4:	438a      	bics	r2, r1
 8003dd6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6959      	ldr	r1, [r3, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	2207      	movs	r2, #7
 8003de4:	401a      	ands	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a1c      	ldr	r2, [pc, #112]	; (8003e68 <HAL_ADC_Init+0x27c>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d10b      	bne.n	8003e16 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	2203      	movs	r2, #3
 8003e0a:	4393      	bics	r3, r2
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003e14:	e01c      	b.n	8003e50 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	2212      	movs	r2, #18
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	2210      	movs	r2, #16
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003e32:	230f      	movs	r3, #15
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	2201      	movs	r2, #1
 8003e38:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003e3a:	e009      	b.n	8003e50 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	2210      	movs	r2, #16
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003e48:	230f      	movs	r3, #15
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e50:	230f      	movs	r3, #15
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	781b      	ldrb	r3, [r3, #0]
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b004      	add	sp, #16
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	fffffefd 	.word	0xfffffefd
 8003e64:	fffe0219 	.word	0xfffe0219
 8003e68:	833fffe7 	.word	0x833fffe7

08003e6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e78:	2317      	movs	r3, #23
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2204      	movs	r2, #4
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d15e      	bne.n	8003f4a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2234      	movs	r2, #52	; 0x34
 8003e90:	5c9b      	ldrb	r3, [r3, r2]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_Start_DMA+0x2e>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e05e      	b.n	8003f58 <HAL_ADC_Start_DMA+0xec>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2234      	movs	r2, #52	; 0x34
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	7e5b      	ldrb	r3, [r3, #25]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d007      	beq.n	8003eba <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003eaa:	2317      	movs	r3, #23
 8003eac:	18fc      	adds	r4, r7, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 f96b 	bl	800418c <ADC_Enable>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003eba:	2317      	movs	r3, #23
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d146      	bne.n	8003f52 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	4a25      	ldr	r2, [pc, #148]	; (8003f60 <HAL_ADC_Start_DMA+0xf4>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2280      	movs	r2, #128	; 0x80
 8003ece:	0052      	lsls	r2, r2, #1
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2234      	movs	r2, #52	; 0x34
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_ADC_Start_DMA+0xf8>)
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <HAL_ADC_Start_DMA+0xfc>)
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <HAL_ADC_Start_DMA+0x100>)
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	221c      	movs	r2, #28
 8003f02:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2110      	movs	r1, #16
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2101      	movs	r1, #1
 8003f20:	430a      	orrs	r2, r1
 8003f22:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3340      	adds	r3, #64	; 0x40
 8003f2e:	0019      	movs	r1, r3
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f000 fb50 	bl	80045d8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2104      	movs	r1, #4
 8003f44:	430a      	orrs	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	e003      	b.n	8003f52 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f4a:	2317      	movs	r3, #23
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	2202      	movs	r2, #2
 8003f50:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003f52:	2317      	movs	r3, #23
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	781b      	ldrb	r3, [r3, #0]
}
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b007      	add	sp, #28
 8003f5e:	bd90      	pop	{r4, r7, pc}
 8003f60:	fffff0fe 	.word	0xfffff0fe
 8003f64:	08004285 	.word	0x08004285
 8003f68:	08004339 	.word	0x08004339
 8003f6c:	08004357 	.word	0x08004357

08003f70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b002      	add	sp, #8
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003faa:	230f      	movs	r3, #15
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	055b      	lsls	r3, r3, #21
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d011      	beq.n	8003fe6 <HAL_ADC_ConfigChannel+0x46>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_ADC_ConfigChannel+0x46>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_ADC_ConfigChannel+0x46>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d005      	beq.n	8003fe6 <HAL_ADC_ConfigChannel+0x46>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d001      	beq.n	8003fe6 <HAL_ADC_ConfigChannel+0x46>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2234      	movs	r2, #52	; 0x34
 8003fea:	5c9b      	ldrb	r3, [r3, r2]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x54>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e0bb      	b.n	800416c <HAL_ADC_ConfigChannel+0x1cc>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2234      	movs	r2, #52	; 0x34
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2204      	movs	r2, #4
 8004004:	4013      	ands	r3, r2
 8004006:	d000      	beq.n	800400a <HAL_ADC_ConfigChannel+0x6a>
 8004008:	e09f      	b.n	800414a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4a59      	ldr	r2, [pc, #356]	; (8004174 <HAL_ADC_ConfigChannel+0x1d4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d100      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x76>
 8004014:	e077      	b.n	8004106 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2201      	movs	r2, #1
 8004022:	409a      	lsls	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	055b      	lsls	r3, r3, #21
 8004034:	429a      	cmp	r2, r3
 8004036:	d037      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x108>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d033      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x108>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	2b02      	cmp	r3, #2
 8004046:	d02f      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x108>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	2b03      	cmp	r3, #3
 800404e:	d02b      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x108>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	2b04      	cmp	r3, #4
 8004056:	d027      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x108>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	2b05      	cmp	r3, #5
 800405e:	d023      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x108>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	2b06      	cmp	r3, #6
 8004066:	d01f      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x108>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	2b07      	cmp	r3, #7
 800406e:	d01b      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2107      	movs	r1, #7
 800407c:	400b      	ands	r3, r1
 800407e:	429a      	cmp	r2, r3
 8004080:	d012      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2107      	movs	r1, #7
 800408e:	438a      	bics	r2, r1
 8004090:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6959      	ldr	r1, [r3, #20]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2207      	movs	r2, #7
 800409e:	401a      	ands	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d003      	beq.n	80040b8 <HAL_ADC_ConfigChannel+0x118>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b11      	cmp	r3, #17
 80040b6:	d152      	bne.n	800415e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80040b8:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <HAL_ADC_ConfigChannel+0x1d8>)
 80040ba:	6819      	ldr	r1, [r3, #0]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d102      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x12a>
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	041b      	lsls	r3, r3, #16
 80040c8:	e001      	b.n	80040ce <HAL_ADC_ConfigChannel+0x12e>
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	03db      	lsls	r3, r3, #15
 80040ce:	4a2a      	ldr	r2, [pc, #168]	; (8004178 <HAL_ADC_ConfigChannel+0x1d8>)
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d140      	bne.n	800415e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040dc:	4b27      	ldr	r3, [pc, #156]	; (800417c <HAL_ADC_ConfigChannel+0x1dc>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4927      	ldr	r1, [pc, #156]	; (8004180 <HAL_ADC_ConfigChannel+0x1e0>)
 80040e2:	0018      	movs	r0, r3
 80040e4:	f7fc f822 	bl	800012c <__udivsi3>
 80040e8:	0003      	movs	r3, r0
 80040ea:	001a      	movs	r2, r3
 80040ec:	0013      	movs	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	189b      	adds	r3, r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040f6:	e002      	b.n	80040fe <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f9      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x158>
 8004104:	e02b      	b.n	800415e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2101      	movs	r1, #1
 8004112:	4099      	lsls	r1, r3
 8004114:	000b      	movs	r3, r1
 8004116:	43d9      	mvns	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	400a      	ands	r2, r1
 800411e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b10      	cmp	r3, #16
 8004126:	d003      	beq.n	8004130 <HAL_ADC_ConfigChannel+0x190>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b11      	cmp	r3, #17
 800412e:	d116      	bne.n	800415e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_ADC_ConfigChannel+0x1d8>)
 8004132:	6819      	ldr	r1, [r3, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b10      	cmp	r3, #16
 800413a:	d101      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x1a0>
 800413c:	4a11      	ldr	r2, [pc, #68]	; (8004184 <HAL_ADC_ConfigChannel+0x1e4>)
 800413e:	e000      	b.n	8004142 <HAL_ADC_ConfigChannel+0x1a2>
 8004140:	4a11      	ldr	r2, [pc, #68]	; (8004188 <HAL_ADC_ConfigChannel+0x1e8>)
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_ADC_ConfigChannel+0x1d8>)
 8004144:	400a      	ands	r2, r1
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e009      	b.n	800415e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414e:	2220      	movs	r2, #32
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004156:	230f      	movs	r3, #15
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2234      	movs	r2, #52	; 0x34
 8004162:	2100      	movs	r1, #0
 8004164:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004166:	230f      	movs	r3, #15
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	781b      	ldrb	r3, [r3, #0]
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b004      	add	sp, #16
 8004172:	bd80      	pop	{r7, pc}
 8004174:	00001001 	.word	0x00001001
 8004178:	40012708 	.word	0x40012708
 800417c:	20000014 	.word	0x20000014
 8004180:	000f4240 	.word	0x000f4240
 8004184:	ff7fffff 	.word	0xff7fffff
 8004188:	ffbfffff 	.word	0xffbfffff

0800418c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2203      	movs	r2, #3
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d112      	bne.n	80041d0 <ADC_Enable+0x44>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2201      	movs	r2, #1
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d009      	beq.n	80041cc <ADC_Enable+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	401a      	ands	r2, r3
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d101      	bne.n	80041d0 <ADC_Enable+0x44>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <ADC_Enable+0x46>
 80041d0:	2300      	movs	r3, #0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d14b      	bne.n	800426e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a26      	ldr	r2, [pc, #152]	; (8004278 <ADC_Enable+0xec>)
 80041de:	4013      	ands	r3, r2
 80041e0:	d00d      	beq.n	80041fe <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	2210      	movs	r2, #16
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	2201      	movs	r2, #1
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e038      	b.n	8004270 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2101      	movs	r1, #1
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800420e:	4b1b      	ldr	r3, [pc, #108]	; (800427c <ADC_Enable+0xf0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	491b      	ldr	r1, [pc, #108]	; (8004280 <ADC_Enable+0xf4>)
 8004214:	0018      	movs	r0, r3
 8004216:	f7fb ff89 	bl	800012c <__udivsi3>
 800421a:	0003      	movs	r3, r0
 800421c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800421e:	e002      	b.n	8004226 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	3b01      	subs	r3, #1
 8004224:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f9      	bne.n	8004220 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800422c:	f7ff fcb2 	bl	8003b94 <HAL_GetTick>
 8004230:	0003      	movs	r3, r0
 8004232:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004234:	e014      	b.n	8004260 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004236:	f7ff fcad 	bl	8003b94 <HAL_GetTick>
 800423a:	0002      	movs	r2, r0
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d90d      	bls.n	8004260 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	2210      	movs	r2, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	2201      	movs	r2, #1
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e007      	b.n	8004270 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2201      	movs	r2, #1
 8004268:	4013      	ands	r3, r2
 800426a:	2b01      	cmp	r3, #1
 800426c:	d1e3      	bne.n	8004236 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	b004      	add	sp, #16
 8004276:	bd80      	pop	{r7, pc}
 8004278:	80000017 	.word	0x80000017
 800427c:	20000014 	.word	0x20000014
 8004280:	000f4240 	.word	0x000f4240

08004284 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	2250      	movs	r2, #80	; 0x50
 8004298:	4013      	ands	r3, r2
 800429a:	d140      	bne.n	800431e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	2280      	movs	r2, #128	; 0x80
 80042a2:	0092      	lsls	r2, r2, #2
 80042a4:	431a      	orrs	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	23c0      	movs	r3, #192	; 0xc0
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	4013      	ands	r3, r2
 80042b6:	d12d      	bne.n	8004314 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d129      	bne.n	8004314 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2208      	movs	r2, #8
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d122      	bne.n	8004314 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2204      	movs	r2, #4
 80042d6:	4013      	ands	r3, r2
 80042d8:	d110      	bne.n	80042fc <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	210c      	movs	r1, #12
 80042e6:	438a      	bics	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	4a11      	ldr	r2, [pc, #68]	; (8004334 <ADC_DMAConvCplt+0xb0>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	2201      	movs	r2, #1
 80042f4:	431a      	orrs	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	639a      	str	r2, [r3, #56]	; 0x38
 80042fa:	e00b      	b.n	8004314 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	2220      	movs	r2, #32
 8004302:	431a      	orrs	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430c:	2201      	movs	r2, #1
 800430e:	431a      	orrs	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	0018      	movs	r0, r3
 8004318:	f7ff fe2a 	bl	8003f70 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800431c:	e005      	b.n	800432a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	0010      	movs	r0, r2
 8004328:	4798      	blx	r3
}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	b004      	add	sp, #16
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	fffffefe 	.word	0xfffffefe

08004338 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	0018      	movs	r0, r3
 800434a:	f7ff fe19 	bl	8003f80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b004      	add	sp, #16
 8004354:	bd80      	pop	{r7, pc}

08004356 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	2240      	movs	r2, #64	; 0x40
 800436a:	431a      	orrs	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004374:	2204      	movs	r2, #4
 8004376:	431a      	orrs	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	0018      	movs	r0, r3
 8004380:	f7ff fe06 	bl	8003f90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	b004      	add	sp, #16
 800438a:	bd80      	pop	{r7, pc}

0800438c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	0002      	movs	r2, r0
 8004394:	1dfb      	adds	r3, r7, #7
 8004396:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004398:	1dfb      	adds	r3, r7, #7
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b7f      	cmp	r3, #127	; 0x7f
 800439e:	d809      	bhi.n	80043b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043a0:	1dfb      	adds	r3, r7, #7
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	001a      	movs	r2, r3
 80043a6:	231f      	movs	r3, #31
 80043a8:	401a      	ands	r2, r3
 80043aa:	4b04      	ldr	r3, [pc, #16]	; (80043bc <__NVIC_EnableIRQ+0x30>)
 80043ac:	2101      	movs	r1, #1
 80043ae:	4091      	lsls	r1, r2
 80043b0:	000a      	movs	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]
  }
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b002      	add	sp, #8
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	e000e100 	.word	0xe000e100

080043c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	0002      	movs	r2, r0
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	1dfb      	adds	r3, r7, #7
 80043cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043ce:	1dfb      	adds	r3, r7, #7
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b7f      	cmp	r3, #127	; 0x7f
 80043d4:	d828      	bhi.n	8004428 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043d6:	4a2f      	ldr	r2, [pc, #188]	; (8004494 <__NVIC_SetPriority+0xd4>)
 80043d8:	1dfb      	adds	r3, r7, #7
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	b25b      	sxtb	r3, r3
 80043de:	089b      	lsrs	r3, r3, #2
 80043e0:	33c0      	adds	r3, #192	; 0xc0
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	589b      	ldr	r3, [r3, r2]
 80043e6:	1dfa      	adds	r2, r7, #7
 80043e8:	7812      	ldrb	r2, [r2, #0]
 80043ea:	0011      	movs	r1, r2
 80043ec:	2203      	movs	r2, #3
 80043ee:	400a      	ands	r2, r1
 80043f0:	00d2      	lsls	r2, r2, #3
 80043f2:	21ff      	movs	r1, #255	; 0xff
 80043f4:	4091      	lsls	r1, r2
 80043f6:	000a      	movs	r2, r1
 80043f8:	43d2      	mvns	r2, r2
 80043fa:	401a      	ands	r2, r3
 80043fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	22ff      	movs	r2, #255	; 0xff
 8004404:	401a      	ands	r2, r3
 8004406:	1dfb      	adds	r3, r7, #7
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	0018      	movs	r0, r3
 800440c:	2303      	movs	r3, #3
 800440e:	4003      	ands	r3, r0
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004414:	481f      	ldr	r0, [pc, #124]	; (8004494 <__NVIC_SetPriority+0xd4>)
 8004416:	1dfb      	adds	r3, r7, #7
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b25b      	sxtb	r3, r3
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	430a      	orrs	r2, r1
 8004420:	33c0      	adds	r3, #192	; 0xc0
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004426:	e031      	b.n	800448c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004428:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <__NVIC_SetPriority+0xd8>)
 800442a:	1dfb      	adds	r3, r7, #7
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	0019      	movs	r1, r3
 8004430:	230f      	movs	r3, #15
 8004432:	400b      	ands	r3, r1
 8004434:	3b08      	subs	r3, #8
 8004436:	089b      	lsrs	r3, r3, #2
 8004438:	3306      	adds	r3, #6
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	18d3      	adds	r3, r2, r3
 800443e:	3304      	adds	r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	1dfa      	adds	r2, r7, #7
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	0011      	movs	r1, r2
 8004448:	2203      	movs	r2, #3
 800444a:	400a      	ands	r2, r1
 800444c:	00d2      	lsls	r2, r2, #3
 800444e:	21ff      	movs	r1, #255	; 0xff
 8004450:	4091      	lsls	r1, r2
 8004452:	000a      	movs	r2, r1
 8004454:	43d2      	mvns	r2, r2
 8004456:	401a      	ands	r2, r3
 8004458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	22ff      	movs	r2, #255	; 0xff
 8004460:	401a      	ands	r2, r3
 8004462:	1dfb      	adds	r3, r7, #7
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	0018      	movs	r0, r3
 8004468:	2303      	movs	r3, #3
 800446a:	4003      	ands	r3, r0
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004470:	4809      	ldr	r0, [pc, #36]	; (8004498 <__NVIC_SetPriority+0xd8>)
 8004472:	1dfb      	adds	r3, r7, #7
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	001c      	movs	r4, r3
 8004478:	230f      	movs	r3, #15
 800447a:	4023      	ands	r3, r4
 800447c:	3b08      	subs	r3, #8
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	430a      	orrs	r2, r1
 8004482:	3306      	adds	r3, #6
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	18c3      	adds	r3, r0, r3
 8004488:	3304      	adds	r3, #4
 800448a:	601a      	str	r2, [r3, #0]
}
 800448c:	46c0      	nop			; (mov r8, r8)
 800448e:	46bd      	mov	sp, r7
 8004490:	b003      	add	sp, #12
 8004492:	bd90      	pop	{r4, r7, pc}
 8004494:	e000e100 	.word	0xe000e100
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <SysTick_Config+0x40>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ae:	2301      	movs	r3, #1
 80044b0:	e010      	b.n	80044d4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <SysTick_Config+0x44>)
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	3a01      	subs	r2, #1
 80044b8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ba:	2301      	movs	r3, #1
 80044bc:	425b      	negs	r3, r3
 80044be:	2103      	movs	r1, #3
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7ff ff7d 	bl	80043c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <SysTick_Config+0x44>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044cc:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <SysTick_Config+0x44>)
 80044ce:	2207      	movs	r2, #7
 80044d0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b002      	add	sp, #8
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	00ffffff 	.word	0x00ffffff
 80044e0:	e000e010 	.word	0xe000e010

080044e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	210f      	movs	r1, #15
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	1c02      	adds	r2, r0, #0
 80044f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	187b      	adds	r3, r7, r1
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	b25b      	sxtb	r3, r3
 80044fe:	0011      	movs	r1, r2
 8004500:	0018      	movs	r0, r3
 8004502:	f7ff ff5d 	bl	80043c0 <__NVIC_SetPriority>
}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	46bd      	mov	sp, r7
 800450a:	b004      	add	sp, #16
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	0002      	movs	r2, r0
 8004516:	1dfb      	adds	r3, r7, #7
 8004518:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800451a:	1dfb      	adds	r3, r7, #7
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b25b      	sxtb	r3, r3
 8004520:	0018      	movs	r0, r3
 8004522:	f7ff ff33 	bl	800438c <__NVIC_EnableIRQ>
}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b002      	add	sp, #8
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f7ff ffaf 	bl	800449c <SysTick_Config>
 800453e:	0003      	movs	r3, r0
}
 8004540:	0018      	movs	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	b002      	add	sp, #8
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e036      	b.n	80045cc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2221      	movs	r2, #33	; 0x21
 8004562:	2102      	movs	r1, #2
 8004564:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_DMA_Init+0x8c>)
 8004572:	4013      	ands	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800457e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 f98c 	bl	80048cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2221      	movs	r2, #33	; 0x21
 80045be:	2101      	movs	r1, #1
 80045c0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	2100      	movs	r1, #0
 80045c8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}  
 80045cc:	0018      	movs	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b004      	add	sp, #16
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	ffffc00f 	.word	0xffffc00f

080045d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2317      	movs	r3, #23
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	5c9b      	ldrb	r3, [r3, r2]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_DMA_Start_IT+0x24>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e04f      	b.n	800469c <HAL_DMA_Start_IT+0xc4>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	2101      	movs	r1, #1
 8004602:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2221      	movs	r2, #33	; 0x21
 8004608:	5c9b      	ldrb	r3, [r3, r2]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d13a      	bne.n	8004686 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2221      	movs	r2, #33	; 0x21
 8004614:	2102      	movs	r1, #2
 8004616:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2101      	movs	r1, #1
 800462a:	438a      	bics	r2, r1
 800462c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f91d 	bl	8004874 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	210e      	movs	r1, #14
 800464e:	430a      	orrs	r2, r1
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e00f      	b.n	8004674 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	210a      	movs	r1, #10
 8004660:	430a      	orrs	r2, r1
 8004662:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2104      	movs	r1, #4
 8004670:	438a      	bics	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2101      	movs	r1, #1
 8004680:	430a      	orrs	r2, r1
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	e007      	b.n	8004696 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800468e:	2317      	movs	r3, #23
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	2202      	movs	r2, #2
 8004694:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8004696:	2317      	movs	r3, #23
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	781b      	ldrb	r3, [r3, #0]
} 
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	b006      	add	sp, #24
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ac:	230f      	movs	r3, #15
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2221      	movs	r2, #33	; 0x21
 80046b8:	5c9b      	ldrb	r3, [r3, r2]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d007      	beq.n	80046d0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2204      	movs	r2, #4
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80046c6:	230f      	movs	r3, #15
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	2201      	movs	r2, #1
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e028      	b.n	8004722 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	210e      	movs	r1, #14
 80046dc:	438a      	bics	r2, r1
 80046de:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2101      	movs	r1, #1
 80046ec:	438a      	bics	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f8:	2101      	movs	r1, #1
 80046fa:	4091      	lsls	r1, r2
 80046fc:	000a      	movs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2221      	movs	r2, #33	; 0x21
 8004704:	2101      	movs	r1, #1
 8004706:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	0010      	movs	r0, r2
 8004720:	4798      	blx	r3
    } 
  }
  return status;
 8004722:	230f      	movs	r3, #15
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	781b      	ldrb	r3, [r3, #0]
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b004      	add	sp, #16
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	2204      	movs	r2, #4
 800474e:	409a      	lsls	r2, r3
 8004750:	0013      	movs	r3, r2
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4013      	ands	r3, r2
 8004756:	d024      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x72>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2204      	movs	r2, #4
 800475c:	4013      	ands	r3, r2
 800475e:	d020      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2220      	movs	r2, #32
 8004768:	4013      	ands	r3, r2
 800476a:	d107      	bne.n	800477c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2104      	movs	r1, #4
 8004778:	438a      	bics	r2, r1
 800477a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004784:	2104      	movs	r1, #4
 8004786:	4091      	lsls	r1, r2
 8004788:	000a      	movs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d100      	bne.n	8004796 <HAL_DMA_IRQHandler+0x66>
 8004794:	e06a      	b.n	800486c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	0010      	movs	r0, r2
 800479e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80047a0:	e064      	b.n	800486c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2202      	movs	r2, #2
 80047a8:	409a      	lsls	r2, r3
 80047aa:	0013      	movs	r3, r2
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4013      	ands	r3, r2
 80047b0:	d02b      	beq.n	800480a <HAL_DMA_IRQHandler+0xda>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2202      	movs	r2, #2
 80047b6:	4013      	ands	r3, r2
 80047b8:	d027      	beq.n	800480a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2220      	movs	r2, #32
 80047c2:	4013      	ands	r3, r2
 80047c4:	d10b      	bne.n	80047de <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	210a      	movs	r1, #10
 80047d2:	438a      	bics	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2221      	movs	r2, #33	; 0x21
 80047da:	2101      	movs	r1, #1
 80047dc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	2102      	movs	r1, #2
 80047e8:	4091      	lsls	r1, r2
 80047ea:	000a      	movs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	2100      	movs	r1, #0
 80047f4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d036      	beq.n	800486c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	0010      	movs	r0, r2
 8004806:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004808:	e030      	b.n	800486c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2208      	movs	r2, #8
 8004810:	409a      	lsls	r2, r3
 8004812:	0013      	movs	r3, r2
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4013      	ands	r3, r2
 8004818:	d028      	beq.n	800486c <HAL_DMA_IRQHandler+0x13c>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2208      	movs	r2, #8
 800481e:	4013      	ands	r3, r2
 8004820:	d024      	beq.n	800486c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	210e      	movs	r1, #14
 800482e:	438a      	bics	r2, r1
 8004830:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	2101      	movs	r1, #1
 800483c:	4091      	lsls	r1, r2
 800483e:	000a      	movs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2221      	movs	r2, #33	; 0x21
 800484c:	2101      	movs	r1, #1
 800484e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	2100      	movs	r1, #0
 8004856:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	0010      	movs	r0, r2
 8004868:	4798      	blx	r3
    }
   }
}  
 800486a:	e7ff      	b.n	800486c <HAL_DMA_IRQHandler+0x13c>
 800486c:	46c0      	nop			; (mov r8, r8)
 800486e:	46bd      	mov	sp, r7
 8004870:	b004      	add	sp, #16
 8004872:	bd80      	pop	{r7, pc}

08004874 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	2101      	movs	r1, #1
 800488c:	4091      	lsls	r1, r2
 800488e:	000a      	movs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d108      	bne.n	80048b4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048b2:	e007      	b.n	80048c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	60da      	str	r2, [r3, #12]
}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b004      	add	sp, #16
 80048ca:	bd80      	pop	{r7, pc}

080048cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a08      	ldr	r2, [pc, #32]	; (80048fc <DMA_CalcBaseAndBitshift+0x30>)
 80048da:	4694      	mov	ip, r2
 80048dc:	4463      	add	r3, ip
 80048de:	2114      	movs	r1, #20
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7fb fc23 	bl	800012c <__udivsi3>
 80048e6:	0003      	movs	r3, r0
 80048e8:	009a      	lsls	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a03      	ldr	r2, [pc, #12]	; (8004900 <DMA_CalcBaseAndBitshift+0x34>)
 80048f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b002      	add	sp, #8
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	bffdfff8 	.word	0xbffdfff8
 8004900:	40020000 	.word	0x40020000

08004904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004912:	e14f      	b.n	8004bb4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2101      	movs	r1, #1
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4091      	lsls	r1, r2
 800491e:	000a      	movs	r2, r1
 8004920:	4013      	ands	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d100      	bne.n	800492c <HAL_GPIO_Init+0x28>
 800492a:	e140      	b.n	8004bae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d00b      	beq.n	800494c <HAL_GPIO_Init+0x48>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d007      	beq.n	800494c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004940:	2b11      	cmp	r3, #17
 8004942:	d003      	beq.n	800494c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b12      	cmp	r3, #18
 800494a:	d130      	bne.n	80049ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	2203      	movs	r2, #3
 8004958:	409a      	lsls	r2, r3
 800495a:	0013      	movs	r3, r2
 800495c:	43da      	mvns	r2, r3
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4013      	ands	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	409a      	lsls	r2, r3
 800496e:	0013      	movs	r3, r2
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004982:	2201      	movs	r2, #1
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	409a      	lsls	r2, r3
 8004988:	0013      	movs	r3, r2
 800498a:	43da      	mvns	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4013      	ands	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	091b      	lsrs	r3, r3, #4
 8004998:	2201      	movs	r2, #1
 800499a:	401a      	ands	r2, r3
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	409a      	lsls	r2, r3
 80049a0:	0013      	movs	r3, r2
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	2203      	movs	r2, #3
 80049ba:	409a      	lsls	r2, r3
 80049bc:	0013      	movs	r3, r2
 80049be:	43da      	mvns	r2, r3
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4013      	ands	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	409a      	lsls	r2, r3
 80049d0:	0013      	movs	r3, r2
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_Init+0xea>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b12      	cmp	r3, #18
 80049ec:	d123      	bne.n	8004a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	08da      	lsrs	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3208      	adds	r2, #8
 80049f6:	0092      	lsls	r2, r2, #2
 80049f8:	58d3      	ldr	r3, [r2, r3]
 80049fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2207      	movs	r2, #7
 8004a00:	4013      	ands	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	220f      	movs	r2, #15
 8004a06:	409a      	lsls	r2, r3
 8004a08:	0013      	movs	r3, r2
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2107      	movs	r1, #7
 8004a1a:	400b      	ands	r3, r1
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	0013      	movs	r3, r2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	08da      	lsrs	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3208      	adds	r2, #8
 8004a30:	0092      	lsls	r2, r2, #2
 8004a32:	6939      	ldr	r1, [r7, #16]
 8004a34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	2203      	movs	r2, #3
 8004a42:	409a      	lsls	r2, r3
 8004a44:	0013      	movs	r3, r2
 8004a46:	43da      	mvns	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2203      	movs	r2, #3
 8004a54:	401a      	ands	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	0013      	movs	r3, r2
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	055b      	lsls	r3, r3, #21
 8004a72:	4013      	ands	r3, r2
 8004a74:	d100      	bne.n	8004a78 <HAL_GPIO_Init+0x174>
 8004a76:	e09a      	b.n	8004bae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a78:	4b54      	ldr	r3, [pc, #336]	; (8004bcc <HAL_GPIO_Init+0x2c8>)
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	4b53      	ldr	r3, [pc, #332]	; (8004bcc <HAL_GPIO_Init+0x2c8>)
 8004a7e:	2101      	movs	r1, #1
 8004a80:	430a      	orrs	r2, r1
 8004a82:	619a      	str	r2, [r3, #24]
 8004a84:	4b51      	ldr	r3, [pc, #324]	; (8004bcc <HAL_GPIO_Init+0x2c8>)
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a90:	4a4f      	ldr	r2, [pc, #316]	; (8004bd0 <HAL_GPIO_Init+0x2cc>)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	3302      	adds	r3, #2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	589b      	ldr	r3, [r3, r2]
 8004a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	220f      	movs	r2, #15
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	0013      	movs	r3, r2
 8004aac:	43da      	mvns	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	2390      	movs	r3, #144	; 0x90
 8004ab8:	05db      	lsls	r3, r3, #23
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d013      	beq.n	8004ae6 <HAL_GPIO_Init+0x1e2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a44      	ldr	r2, [pc, #272]	; (8004bd4 <HAL_GPIO_Init+0x2d0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00d      	beq.n	8004ae2 <HAL_GPIO_Init+0x1de>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a43      	ldr	r2, [pc, #268]	; (8004bd8 <HAL_GPIO_Init+0x2d4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d007      	beq.n	8004ade <HAL_GPIO_Init+0x1da>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a42      	ldr	r2, [pc, #264]	; (8004bdc <HAL_GPIO_Init+0x2d8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d101      	bne.n	8004ada <HAL_GPIO_Init+0x1d6>
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e006      	b.n	8004ae8 <HAL_GPIO_Init+0x1e4>
 8004ada:	2305      	movs	r3, #5
 8004adc:	e004      	b.n	8004ae8 <HAL_GPIO_Init+0x1e4>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e002      	b.n	8004ae8 <HAL_GPIO_Init+0x1e4>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_GPIO_Init+0x1e4>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	2103      	movs	r1, #3
 8004aec:	400a      	ands	r2, r1
 8004aee:	0092      	lsls	r2, r2, #2
 8004af0:	4093      	lsls	r3, r2
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004af8:	4935      	ldr	r1, [pc, #212]	; (8004bd0 <HAL_GPIO_Init+0x2cc>)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	089b      	lsrs	r3, r3, #2
 8004afe:	3302      	adds	r3, #2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b06:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4013      	ands	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	025b      	lsls	r3, r3, #9
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d003      	beq.n	8004b2a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004b2a:	4b2d      	ldr	r3, [pc, #180]	; (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004b30:	4b2b      	ldr	r3, [pc, #172]	; (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	43da      	mvns	r2, r3
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	029b      	lsls	r3, r3, #10
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004b54:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b5a:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	43da      	mvns	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4013      	ands	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	035b      	lsls	r3, r3, #13
 8004b72:	4013      	ands	r3, r2
 8004b74:	d003      	beq.n	8004b7e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004b7e:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004b84:	4b16      	ldr	r3, [pc, #88]	; (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	43da      	mvns	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4013      	ands	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	039b      	lsls	r3, r3, #14
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	40da      	lsrs	r2, r3
 8004bbc:	1e13      	subs	r3, r2, #0
 8004bbe:	d000      	beq.n	8004bc2 <HAL_GPIO_Init+0x2be>
 8004bc0:	e6a8      	b.n	8004914 <HAL_GPIO_Init+0x10>
  } 
}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b006      	add	sp, #24
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	48000400 	.word	0x48000400
 8004bd8:	48000800 	.word	0x48000800
 8004bdc:	48000c00 	.word	0x48000c00
 8004be0:	40010400 	.word	0x40010400

08004be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	000a      	movs	r2, r1
 8004bee:	1cbb      	adds	r3, r7, #2
 8004bf0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	1cba      	adds	r2, r7, #2
 8004bf8:	8812      	ldrh	r2, [r2, #0]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d004      	beq.n	8004c08 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004bfe:	230f      	movs	r3, #15
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	e003      	b.n	8004c10 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c08:	230f      	movs	r3, #15
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004c10:	230f      	movs	r3, #15
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	781b      	ldrb	r3, [r3, #0]
  }
 8004c16:	0018      	movs	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b004      	add	sp, #16
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	0008      	movs	r0, r1
 8004c28:	0011      	movs	r1, r2
 8004c2a:	1cbb      	adds	r3, r7, #2
 8004c2c:	1c02      	adds	r2, r0, #0
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	1c7b      	adds	r3, r7, #1
 8004c32:	1c0a      	adds	r2, r1, #0
 8004c34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c36:	1c7b      	adds	r3, r7, #1
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c3e:	1cbb      	adds	r3, r7, #2
 8004c40:	881a      	ldrh	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c46:	e003      	b.n	8004c50 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c48:	1cbb      	adds	r3, r7, #2
 8004c4a:	881a      	ldrh	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c50:	46c0      	nop			; (mov r8, r8)
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b002      	add	sp, #8
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	000a      	movs	r2, r1
 8004c62:	1cbb      	adds	r3, r7, #2
 8004c64:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c6c:	1cbb      	adds	r3, r7, #2
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4013      	ands	r3, r2
 8004c74:	041a      	lsls	r2, r3, #16
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	1cb9      	adds	r1, r7, #2
 8004c7c:	8809      	ldrh	r1, [r1, #0]
 8004c7e:	400b      	ands	r3, r1
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	619a      	str	r2, [r3, #24]
}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b004      	add	sp, #16
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	0002      	movs	r2, r0
 8004c98:	1dbb      	adds	r3, r7, #6
 8004c9a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c9c:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	1dba      	adds	r2, r7, #6
 8004ca2:	8812      	ldrh	r2, [r2, #0]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d008      	beq.n	8004cba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004caa:	1dba      	adds	r2, r7, #6
 8004cac:	8812      	ldrh	r2, [r2, #0]
 8004cae:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cb0:	1dbb      	adds	r3, r7, #6
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f000 f807 	bl	8004cc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	40010400 	.word	0x40010400

08004cc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	0002      	movs	r2, r0
 8004cd0:	1dbb      	adds	r3, r7, #6
 8004cd2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8004cd4:	46c0      	nop			; (mov r8, r8)
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b002      	add	sp, #8
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e303      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d100      	bne.n	8004cfa <HAL_RCC_OscConfig+0x1e>
 8004cf8:	e08d      	b.n	8004e16 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004cfa:	4bc4      	ldr	r3, [pc, #784]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	220c      	movs	r2, #12
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d00e      	beq.n	8004d24 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d06:	4bc1      	ldr	r3, [pc, #772]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	220c      	movs	r2, #12
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d116      	bne.n	8004d40 <HAL_RCC_OscConfig+0x64>
 8004d12:	4bbe      	ldr	r3, [pc, #760]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	025b      	lsls	r3, r3, #9
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	025b      	lsls	r3, r3, #9
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d10d      	bne.n	8004d40 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	4bb9      	ldr	r3, [pc, #740]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	029b      	lsls	r3, r3, #10
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <HAL_RCC_OscConfig+0x56>
 8004d30:	e070      	b.n	8004e14 <HAL_RCC_OscConfig+0x138>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d000      	beq.n	8004d3c <HAL_RCC_OscConfig+0x60>
 8004d3a:	e06b      	b.n	8004e14 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e2da      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x7c>
 8004d48:	4bb0      	ldr	r3, [pc, #704]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4baf      	ldr	r3, [pc, #700]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d4e:	2180      	movs	r1, #128	; 0x80
 8004d50:	0249      	lsls	r1, r1, #9
 8004d52:	430a      	orrs	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e02f      	b.n	8004db8 <HAL_RCC_OscConfig+0xdc>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10c      	bne.n	8004d7a <HAL_RCC_OscConfig+0x9e>
 8004d60:	4baa      	ldr	r3, [pc, #680]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4ba9      	ldr	r3, [pc, #676]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d66:	49aa      	ldr	r1, [pc, #680]	; (8005010 <HAL_RCC_OscConfig+0x334>)
 8004d68:	400a      	ands	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	4ba7      	ldr	r3, [pc, #668]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4ba6      	ldr	r3, [pc, #664]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d72:	49a8      	ldr	r1, [pc, #672]	; (8005014 <HAL_RCC_OscConfig+0x338>)
 8004d74:	400a      	ands	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	e01e      	b.n	8004db8 <HAL_RCC_OscConfig+0xdc>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d10e      	bne.n	8004da0 <HAL_RCC_OscConfig+0xc4>
 8004d82:	4ba2      	ldr	r3, [pc, #648]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4ba1      	ldr	r3, [pc, #644]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	02c9      	lsls	r1, r1, #11
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	4b9e      	ldr	r3, [pc, #632]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4b9d      	ldr	r3, [pc, #628]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004d96:	2180      	movs	r1, #128	; 0x80
 8004d98:	0249      	lsls	r1, r1, #9
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	e00b      	b.n	8004db8 <HAL_RCC_OscConfig+0xdc>
 8004da0:	4b9a      	ldr	r3, [pc, #616]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4b99      	ldr	r3, [pc, #612]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004da6:	499a      	ldr	r1, [pc, #616]	; (8005010 <HAL_RCC_OscConfig+0x334>)
 8004da8:	400a      	ands	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	4b97      	ldr	r3, [pc, #604]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4b96      	ldr	r3, [pc, #600]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004db2:	4998      	ldr	r1, [pc, #608]	; (8005014 <HAL_RCC_OscConfig+0x338>)
 8004db4:	400a      	ands	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d014      	beq.n	8004dea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fe fee8 	bl	8003b94 <HAL_GetTick>
 8004dc4:	0003      	movs	r3, r0
 8004dc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dca:	f7fe fee3 	bl	8003b94 <HAL_GetTick>
 8004dce:	0002      	movs	r2, r0
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b64      	cmp	r3, #100	; 0x64
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e28c      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ddc:	4b8b      	ldr	r3, [pc, #556]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	029b      	lsls	r3, r3, #10
 8004de4:	4013      	ands	r3, r2
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0xee>
 8004de8:	e015      	b.n	8004e16 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dea:	f7fe fed3 	bl	8003b94 <HAL_GetTick>
 8004dee:	0003      	movs	r3, r0
 8004df0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df4:	f7fe fece 	bl	8003b94 <HAL_GetTick>
 8004df8:	0002      	movs	r2, r0
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	; 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e277      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e06:	4b81      	ldr	r3, [pc, #516]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	029b      	lsls	r3, r3, #10
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x118>
 8004e12:	e000      	b.n	8004e16 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e14:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d100      	bne.n	8004e22 <HAL_RCC_OscConfig+0x146>
 8004e20:	e069      	b.n	8004ef6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004e22:	4b7a      	ldr	r3, [pc, #488]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	220c      	movs	r2, #12
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004e2c:	4b77      	ldr	r3, [pc, #476]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	220c      	movs	r2, #12
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d11c      	bne.n	8004e72 <HAL_RCC_OscConfig+0x196>
 8004e38:	4b74      	ldr	r3, [pc, #464]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	025b      	lsls	r3, r3, #9
 8004e40:	4013      	ands	r3, r2
 8004e42:	d116      	bne.n	8004e72 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e44:	4b71      	ldr	r3, [pc, #452]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d005      	beq.n	8004e5a <HAL_RCC_OscConfig+0x17e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d001      	beq.n	8004e5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e24d      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5a:	4b6c      	ldr	r3, [pc, #432]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	22f8      	movs	r2, #248	; 0xf8
 8004e60:	4393      	bics	r3, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	00da      	lsls	r2, r3, #3
 8004e6a:	4b68      	ldr	r3, [pc, #416]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e70:	e041      	b.n	8004ef6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d024      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e7a:	4b64      	ldr	r3, [pc, #400]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b63      	ldr	r3, [pc, #396]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004e80:	2101      	movs	r1, #1
 8004e82:	430a      	orrs	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e86:	f7fe fe85 	bl	8003b94 <HAL_GetTick>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e90:	f7fe fe80 	bl	8003b94 <HAL_GetTick>
 8004e94:	0002      	movs	r2, r0
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e229      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea2:	4b5a      	ldr	r3, [pc, #360]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d0f1      	beq.n	8004e90 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	4b57      	ldr	r3, [pc, #348]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	22f8      	movs	r2, #248	; 0xf8
 8004eb2:	4393      	bics	r3, r2
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	00da      	lsls	r2, r3, #3
 8004ebc:	4b53      	ldr	r3, [pc, #332]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e018      	b.n	8004ef6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec4:	4b51      	ldr	r3, [pc, #324]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b50      	ldr	r3, [pc, #320]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004eca:	2101      	movs	r1, #1
 8004ecc:	438a      	bics	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fe fe60 	bl	8003b94 <HAL_GetTick>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eda:	f7fe fe5b 	bl	8003b94 <HAL_GetTick>
 8004ede:	0002      	movs	r2, r0
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e204      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eec:	4b47      	ldr	r3, [pc, #284]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d1f1      	bne.n	8004eda <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2208      	movs	r2, #8
 8004efc:	4013      	ands	r3, r2
 8004efe:	d036      	beq.n	8004f6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d019      	beq.n	8004f3c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f08:	4b40      	ldr	r3, [pc, #256]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f0c:	4b3f      	ldr	r3, [pc, #252]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004f0e:	2101      	movs	r1, #1
 8004f10:	430a      	orrs	r2, r1
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f14:	f7fe fe3e 	bl	8003b94 <HAL_GetTick>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f1e:	f7fe fe39 	bl	8003b94 <HAL_GetTick>
 8004f22:	0002      	movs	r2, r0
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e1e2      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f30:	4b36      	ldr	r3, [pc, #216]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	2202      	movs	r2, #2
 8004f36:	4013      	ands	r3, r2
 8004f38:	d0f1      	beq.n	8004f1e <HAL_RCC_OscConfig+0x242>
 8004f3a:	e018      	b.n	8004f6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f3c:	4b33      	ldr	r3, [pc, #204]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f40:	4b32      	ldr	r3, [pc, #200]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004f42:	2101      	movs	r1, #1
 8004f44:	438a      	bics	r2, r1
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f48:	f7fe fe24 	bl	8003b94 <HAL_GetTick>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f52:	f7fe fe1f 	bl	8003b94 <HAL_GetTick>
 8004f56:	0002      	movs	r2, r0
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e1c8      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f64:	4b29      	ldr	r3, [pc, #164]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2202      	movs	r2, #2
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d1f1      	bne.n	8004f52 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2204      	movs	r2, #4
 8004f74:	4013      	ands	r3, r2
 8004f76:	d100      	bne.n	8004f7a <HAL_RCC_OscConfig+0x29e>
 8004f78:	e0b6      	b.n	80050e8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7a:	231f      	movs	r3, #31
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f82:	4b22      	ldr	r3, [pc, #136]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004f84:	69da      	ldr	r2, [r3, #28]
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	055b      	lsls	r3, r3, #21
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d111      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8e:	4b1f      	ldr	r3, [pc, #124]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	4b1e      	ldr	r3, [pc, #120]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004f94:	2180      	movs	r1, #128	; 0x80
 8004f96:	0549      	lsls	r1, r1, #21
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	61da      	str	r2, [r3, #28]
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004f9e:	69da      	ldr	r2, [r3, #28]
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	055b      	lsls	r3, r3, #21
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004faa:	231f      	movs	r3, #31
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	2201      	movs	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb2:	4b19      	ldr	r3, [pc, #100]	; (8005018 <HAL_RCC_OscConfig+0x33c>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d11a      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fbe:	4b16      	ldr	r3, [pc, #88]	; (8005018 <HAL_RCC_OscConfig+0x33c>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <HAL_RCC_OscConfig+0x33c>)
 8004fc4:	2180      	movs	r1, #128	; 0x80
 8004fc6:	0049      	lsls	r1, r1, #1
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fcc:	f7fe fde2 	bl	8003b94 <HAL_GetTick>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd6:	f7fe fddd 	bl	8003b94 <HAL_GetTick>
 8004fda:	0002      	movs	r2, r0
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b64      	cmp	r3, #100	; 0x64
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e186      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <HAL_RCC_OscConfig+0x33c>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d10f      	bne.n	800501c <HAL_RCC_OscConfig+0x340>
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8004ffe:	6a1a      	ldr	r2, [r3, #32]
 8005000:	4b02      	ldr	r3, [pc, #8]	; (800500c <HAL_RCC_OscConfig+0x330>)
 8005002:	2101      	movs	r1, #1
 8005004:	430a      	orrs	r2, r1
 8005006:	621a      	str	r2, [r3, #32]
 8005008:	e036      	b.n	8005078 <HAL_RCC_OscConfig+0x39c>
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	40021000 	.word	0x40021000
 8005010:	fffeffff 	.word	0xfffeffff
 8005014:	fffbffff 	.word	0xfffbffff
 8005018:	40007000 	.word	0x40007000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10c      	bne.n	800503e <HAL_RCC_OscConfig+0x362>
 8005024:	4bb6      	ldr	r3, [pc, #728]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005026:	6a1a      	ldr	r2, [r3, #32]
 8005028:	4bb5      	ldr	r3, [pc, #724]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800502a:	2101      	movs	r1, #1
 800502c:	438a      	bics	r2, r1
 800502e:	621a      	str	r2, [r3, #32]
 8005030:	4bb3      	ldr	r3, [pc, #716]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005032:	6a1a      	ldr	r2, [r3, #32]
 8005034:	4bb2      	ldr	r3, [pc, #712]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005036:	2104      	movs	r1, #4
 8005038:	438a      	bics	r2, r1
 800503a:	621a      	str	r2, [r3, #32]
 800503c:	e01c      	b.n	8005078 <HAL_RCC_OscConfig+0x39c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b05      	cmp	r3, #5
 8005044:	d10c      	bne.n	8005060 <HAL_RCC_OscConfig+0x384>
 8005046:	4bae      	ldr	r3, [pc, #696]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	4bad      	ldr	r3, [pc, #692]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800504c:	2104      	movs	r1, #4
 800504e:	430a      	orrs	r2, r1
 8005050:	621a      	str	r2, [r3, #32]
 8005052:	4bab      	ldr	r3, [pc, #684]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005054:	6a1a      	ldr	r2, [r3, #32]
 8005056:	4baa      	ldr	r3, [pc, #680]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005058:	2101      	movs	r1, #1
 800505a:	430a      	orrs	r2, r1
 800505c:	621a      	str	r2, [r3, #32]
 800505e:	e00b      	b.n	8005078 <HAL_RCC_OscConfig+0x39c>
 8005060:	4ba7      	ldr	r3, [pc, #668]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005062:	6a1a      	ldr	r2, [r3, #32]
 8005064:	4ba6      	ldr	r3, [pc, #664]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005066:	2101      	movs	r1, #1
 8005068:	438a      	bics	r2, r1
 800506a:	621a      	str	r2, [r3, #32]
 800506c:	4ba4      	ldr	r3, [pc, #656]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800506e:	6a1a      	ldr	r2, [r3, #32]
 8005070:	4ba3      	ldr	r3, [pc, #652]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005072:	2104      	movs	r1, #4
 8005074:	438a      	bics	r2, r1
 8005076:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d014      	beq.n	80050aa <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005080:	f7fe fd88 	bl	8003b94 <HAL_GetTick>
 8005084:	0003      	movs	r3, r0
 8005086:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005088:	e009      	b.n	800509e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800508a:	f7fe fd83 	bl	8003b94 <HAL_GetTick>
 800508e:	0002      	movs	r2, r0
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	4a9b      	ldr	r2, [pc, #620]	; (8005304 <HAL_RCC_OscConfig+0x628>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e12b      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509e:	4b98      	ldr	r3, [pc, #608]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	2202      	movs	r2, #2
 80050a4:	4013      	ands	r3, r2
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x3ae>
 80050a8:	e013      	b.n	80050d2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050aa:	f7fe fd73 	bl	8003b94 <HAL_GetTick>
 80050ae:	0003      	movs	r3, r0
 80050b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b2:	e009      	b.n	80050c8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050b4:	f7fe fd6e 	bl	8003b94 <HAL_GetTick>
 80050b8:	0002      	movs	r2, r0
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	4a91      	ldr	r2, [pc, #580]	; (8005304 <HAL_RCC_OscConfig+0x628>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e116      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c8:	4b8d      	ldr	r3, [pc, #564]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	2202      	movs	r2, #2
 80050ce:	4013      	ands	r3, r2
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050d2:	231f      	movs	r3, #31
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d105      	bne.n	80050e8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050dc:	4b88      	ldr	r3, [pc, #544]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	4b87      	ldr	r3, [pc, #540]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 80050e2:	4989      	ldr	r1, [pc, #548]	; (8005308 <HAL_RCC_OscConfig+0x62c>)
 80050e4:	400a      	ands	r2, r1
 80050e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2210      	movs	r2, #16
 80050ee:	4013      	ands	r3, r2
 80050f0:	d063      	beq.n	80051ba <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d12a      	bne.n	8005150 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80050fa:	4b81      	ldr	r3, [pc, #516]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 80050fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fe:	4b80      	ldr	r3, [pc, #512]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005100:	2104      	movs	r1, #4
 8005102:	430a      	orrs	r2, r1
 8005104:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005106:	4b7e      	ldr	r3, [pc, #504]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800510a:	4b7d      	ldr	r3, [pc, #500]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800510c:	2101      	movs	r1, #1
 800510e:	430a      	orrs	r2, r1
 8005110:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005112:	f7fe fd3f 	bl	8003b94 <HAL_GetTick>
 8005116:	0003      	movs	r3, r0
 8005118:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800511c:	f7fe fd3a 	bl	8003b94 <HAL_GetTick>
 8005120:	0002      	movs	r2, r0
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e0e3      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800512e:	4b74      	ldr	r3, [pc, #464]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	2202      	movs	r2, #2
 8005134:	4013      	ands	r3, r2
 8005136:	d0f1      	beq.n	800511c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005138:	4b71      	ldr	r3, [pc, #452]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	22f8      	movs	r2, #248	; 0xf8
 800513e:	4393      	bics	r3, r2
 8005140:	0019      	movs	r1, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	00da      	lsls	r2, r3, #3
 8005148:	4b6d      	ldr	r3, [pc, #436]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800514a:	430a      	orrs	r2, r1
 800514c:	635a      	str	r2, [r3, #52]	; 0x34
 800514e:	e034      	b.n	80051ba <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	3305      	adds	r3, #5
 8005156:	d111      	bne.n	800517c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005158:	4b69      	ldr	r3, [pc, #420]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800515a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800515c:	4b68      	ldr	r3, [pc, #416]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800515e:	2104      	movs	r1, #4
 8005160:	438a      	bics	r2, r1
 8005162:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005164:	4b66      	ldr	r3, [pc, #408]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	22f8      	movs	r2, #248	; 0xf8
 800516a:	4393      	bics	r3, r2
 800516c:	0019      	movs	r1, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	00da      	lsls	r2, r3, #3
 8005174:	4b62      	ldr	r3, [pc, #392]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005176:	430a      	orrs	r2, r1
 8005178:	635a      	str	r2, [r3, #52]	; 0x34
 800517a:	e01e      	b.n	80051ba <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800517c:	4b60      	ldr	r3, [pc, #384]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800517e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005180:	4b5f      	ldr	r3, [pc, #380]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005182:	2104      	movs	r1, #4
 8005184:	430a      	orrs	r2, r1
 8005186:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005188:	4b5d      	ldr	r3, [pc, #372]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800518a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518c:	4b5c      	ldr	r3, [pc, #368]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800518e:	2101      	movs	r1, #1
 8005190:	438a      	bics	r2, r1
 8005192:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005194:	f7fe fcfe 	bl	8003b94 <HAL_GetTick>
 8005198:	0003      	movs	r3, r0
 800519a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800519e:	f7fe fcf9 	bl	8003b94 <HAL_GetTick>
 80051a2:	0002      	movs	r2, r0
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e0a2      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80051b0:	4b53      	ldr	r3, [pc, #332]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 80051b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b4:	2202      	movs	r2, #2
 80051b6:	4013      	ands	r3, r2
 80051b8:	d1f1      	bne.n	800519e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d100      	bne.n	80051c4 <HAL_RCC_OscConfig+0x4e8>
 80051c2:	e097      	b.n	80052f4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051c4:	4b4e      	ldr	r3, [pc, #312]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	220c      	movs	r2, #12
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d100      	bne.n	80051d2 <HAL_RCC_OscConfig+0x4f6>
 80051d0:	e06b      	b.n	80052aa <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d14c      	bne.n	8005274 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051da:	4b49      	ldr	r3, [pc, #292]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4b48      	ldr	r3, [pc, #288]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 80051e0:	494a      	ldr	r1, [pc, #296]	; (800530c <HAL_RCC_OscConfig+0x630>)
 80051e2:	400a      	ands	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e6:	f7fe fcd5 	bl	8003b94 <HAL_GetTick>
 80051ea:	0003      	movs	r3, r0
 80051ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fe fcd0 	bl	8003b94 <HAL_GetTick>
 80051f4:	0002      	movs	r2, r0
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e079      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005202:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	049b      	lsls	r3, r3, #18
 800520a:	4013      	ands	r3, r2
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800520e:	4b3c      	ldr	r3, [pc, #240]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	220f      	movs	r2, #15
 8005214:	4393      	bics	r3, r2
 8005216:	0019      	movs	r1, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521c:	4b38      	ldr	r3, [pc, #224]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800521e:	430a      	orrs	r2, r1
 8005220:	62da      	str	r2, [r3, #44]	; 0x2c
 8005222:	4b37      	ldr	r3, [pc, #220]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4a3a      	ldr	r2, [pc, #232]	; (8005310 <HAL_RCC_OscConfig+0x634>)
 8005228:	4013      	ands	r3, r2
 800522a:	0019      	movs	r1, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	431a      	orrs	r2, r3
 8005236:	4b32      	ldr	r3, [pc, #200]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005238:	430a      	orrs	r2, r1
 800523a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800523c:	4b30      	ldr	r3, [pc, #192]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	4b2f      	ldr	r3, [pc, #188]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005242:	2180      	movs	r1, #128	; 0x80
 8005244:	0449      	lsls	r1, r1, #17
 8005246:	430a      	orrs	r2, r1
 8005248:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524a:	f7fe fca3 	bl	8003b94 <HAL_GetTick>
 800524e:	0003      	movs	r3, r0
 8005250:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005254:	f7fe fc9e 	bl	8003b94 <HAL_GetTick>
 8005258:	0002      	movs	r2, r0
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e047      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005266:	4b26      	ldr	r3, [pc, #152]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	049b      	lsls	r3, r3, #18
 800526e:	4013      	ands	r3, r2
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x578>
 8005272:	e03f      	b.n	80052f4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005274:	4b22      	ldr	r3, [pc, #136]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b21      	ldr	r3, [pc, #132]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800527a:	4924      	ldr	r1, [pc, #144]	; (800530c <HAL_RCC_OscConfig+0x630>)
 800527c:	400a      	ands	r2, r1
 800527e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005280:	f7fe fc88 	bl	8003b94 <HAL_GetTick>
 8005284:	0003      	movs	r3, r0
 8005286:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528a:	f7fe fc83 	bl	8003b94 <HAL_GetTick>
 800528e:	0002      	movs	r2, r0
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e02c      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800529c:	4b18      	ldr	r3, [pc, #96]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	049b      	lsls	r3, r3, #18
 80052a4:	4013      	ands	r3, r2
 80052a6:	d1f0      	bne.n	800528a <HAL_RCC_OscConfig+0x5ae>
 80052a8:	e024      	b.n	80052f4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e01f      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80052b6:	4b12      	ldr	r3, [pc, #72]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80052bc:	4b10      	ldr	r3, [pc, #64]	; (8005300 <HAL_RCC_OscConfig+0x624>)
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	025b      	lsls	r3, r3, #9
 80052c8:	401a      	ands	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d10e      	bne.n	80052f0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	220f      	movs	r2, #15
 80052d6:	401a      	ands	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d107      	bne.n	80052f0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	23f0      	movs	r3, #240	; 0xf0
 80052e4:	039b      	lsls	r3, r3, #14
 80052e6:	401a      	ands	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	0018      	movs	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b008      	add	sp, #32
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	40021000 	.word	0x40021000
 8005304:	00001388 	.word	0x00001388
 8005308:	efffffff 	.word	0xefffffff
 800530c:	feffffff 	.word	0xfeffffff
 8005310:	ffc2ffff 	.word	0xffc2ffff

08005314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0b3      	b.n	8005490 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005328:	4b5b      	ldr	r3, [pc, #364]	; (8005498 <HAL_RCC_ClockConfig+0x184>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2201      	movs	r2, #1
 800532e:	4013      	ands	r3, r2
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d911      	bls.n	800535a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b58      	ldr	r3, [pc, #352]	; (8005498 <HAL_RCC_ClockConfig+0x184>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2201      	movs	r2, #1
 800533c:	4393      	bics	r3, r2
 800533e:	0019      	movs	r1, r3
 8005340:	4b55      	ldr	r3, [pc, #340]	; (8005498 <HAL_RCC_ClockConfig+0x184>)
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005348:	4b53      	ldr	r3, [pc, #332]	; (8005498 <HAL_RCC_ClockConfig+0x184>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2201      	movs	r2, #1
 800534e:	4013      	ands	r3, r2
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d001      	beq.n	800535a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e09a      	b.n	8005490 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2202      	movs	r2, #2
 8005360:	4013      	ands	r3, r2
 8005362:	d015      	beq.n	8005390 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2204      	movs	r2, #4
 800536a:	4013      	ands	r3, r2
 800536c:	d006      	beq.n	800537c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800536e:	4b4b      	ldr	r3, [pc, #300]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	4b4a      	ldr	r3, [pc, #296]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 8005374:	21e0      	movs	r1, #224	; 0xe0
 8005376:	00c9      	lsls	r1, r1, #3
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800537c:	4b47      	ldr	r3, [pc, #284]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	22f0      	movs	r2, #240	; 0xf0
 8005382:	4393      	bics	r3, r2
 8005384:	0019      	movs	r1, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	4b44      	ldr	r3, [pc, #272]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2201      	movs	r2, #1
 8005396:	4013      	ands	r3, r2
 8005398:	d040      	beq.n	800541c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d107      	bne.n	80053b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a2:	4b3e      	ldr	r3, [pc, #248]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	4013      	ands	r3, r2
 80053ac:	d114      	bne.n	80053d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e06e      	b.n	8005490 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ba:	4b38      	ldr	r3, [pc, #224]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	049b      	lsls	r3, r3, #18
 80053c2:	4013      	ands	r3, r2
 80053c4:	d108      	bne.n	80053d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e062      	b.n	8005490 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ca:	4b34      	ldr	r3, [pc, #208]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2202      	movs	r2, #2
 80053d0:	4013      	ands	r3, r2
 80053d2:	d101      	bne.n	80053d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e05b      	b.n	8005490 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053d8:	4b30      	ldr	r3, [pc, #192]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2203      	movs	r2, #3
 80053de:	4393      	bics	r3, r2
 80053e0:	0019      	movs	r1, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	4b2d      	ldr	r3, [pc, #180]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053ec:	f7fe fbd2 	bl	8003b94 <HAL_GetTick>
 80053f0:	0003      	movs	r3, r0
 80053f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f4:	e009      	b.n	800540a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f6:	f7fe fbcd 	bl	8003b94 <HAL_GetTick>
 80053fa:	0002      	movs	r2, r0
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <HAL_RCC_ClockConfig+0x18c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e042      	b.n	8005490 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	220c      	movs	r2, #12
 8005410:	401a      	ands	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	429a      	cmp	r2, r3
 800541a:	d1ec      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800541c:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <HAL_RCC_ClockConfig+0x184>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2201      	movs	r2, #1
 8005422:	4013      	ands	r3, r2
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d211      	bcs.n	800544e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542a:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <HAL_RCC_ClockConfig+0x184>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2201      	movs	r2, #1
 8005430:	4393      	bics	r3, r2
 8005432:	0019      	movs	r1, r3
 8005434:	4b18      	ldr	r3, [pc, #96]	; (8005498 <HAL_RCC_ClockConfig+0x184>)
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543c:	4b16      	ldr	r3, [pc, #88]	; (8005498 <HAL_RCC_ClockConfig+0x184>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2201      	movs	r2, #1
 8005442:	4013      	ands	r3, r2
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d001      	beq.n	800544e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e020      	b.n	8005490 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2204      	movs	r2, #4
 8005454:	4013      	ands	r3, r2
 8005456:	d009      	beq.n	800546c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005458:	4b10      	ldr	r3, [pc, #64]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	4a11      	ldr	r2, [pc, #68]	; (80054a4 <HAL_RCC_ClockConfig+0x190>)
 800545e:	4013      	ands	r3, r2
 8005460:	0019      	movs	r1, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	4b0d      	ldr	r3, [pc, #52]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800546c:	f000 f820 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8005470:	0001      	movs	r1, r0
 8005472:	4b0a      	ldr	r3, [pc, #40]	; (800549c <HAL_RCC_ClockConfig+0x188>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	220f      	movs	r2, #15
 800547a:	4013      	ands	r3, r2
 800547c:	4a0a      	ldr	r2, [pc, #40]	; (80054a8 <HAL_RCC_ClockConfig+0x194>)
 800547e:	5cd3      	ldrb	r3, [r2, r3]
 8005480:	000a      	movs	r2, r1
 8005482:	40da      	lsrs	r2, r3
 8005484:	4b09      	ldr	r3, [pc, #36]	; (80054ac <HAL_RCC_ClockConfig+0x198>)
 8005486:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005488:	2000      	movs	r0, #0
 800548a:	f7fe fb3d 	bl	8003b08 <HAL_InitTick>
  
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	0018      	movs	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	b004      	add	sp, #16
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40022000 	.word	0x40022000
 800549c:	40021000 	.word	0x40021000
 80054a0:	00001388 	.word	0x00001388
 80054a4:	fffff8ff 	.word	0xfffff8ff
 80054a8:	0800b1f4 	.word	0x0800b1f4
 80054ac:	20000014 	.word	0x20000014

080054b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b08f      	sub	sp, #60	; 0x3c
 80054b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80054b6:	2314      	movs	r3, #20
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80054be:	c313      	stmia	r3!, {r0, r1, r4}
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80054c4:	1d3b      	adds	r3, r7, #4
 80054c6:	4a29      	ldr	r2, [pc, #164]	; (800556c <HAL_RCC_GetSysClockFreq+0xbc>)
 80054c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80054ca:	c313      	stmia	r3!, {r0, r1, r4}
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d4:	2300      	movs	r3, #0
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d8:	2300      	movs	r3, #0
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
 80054dc:	2300      	movs	r3, #0
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80054e4:	4b22      	ldr	r3, [pc, #136]	; (8005570 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	220c      	movs	r2, #12
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d002      	beq.n	80054fa <HAL_RCC_GetSysClockFreq+0x4a>
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d003      	beq.n	8005500 <HAL_RCC_GetSysClockFreq+0x50>
 80054f8:	e02d      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054fa:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <HAL_RCC_GetSysClockFreq+0xc4>)
 80054fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054fe:	e02d      	b.n	800555c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	0c9b      	lsrs	r3, r3, #18
 8005504:	220f      	movs	r2, #15
 8005506:	4013      	ands	r3, r2
 8005508:	2214      	movs	r2, #20
 800550a:	18ba      	adds	r2, r7, r2
 800550c:	5cd3      	ldrb	r3, [r2, r3]
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	220f      	movs	r2, #15
 8005516:	4013      	ands	r3, r2
 8005518:	1d3a      	adds	r2, r7, #4
 800551a:	5cd3      	ldrb	r3, [r2, r3]
 800551c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800551e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	025b      	lsls	r3, r3, #9
 8005524:	4013      	ands	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800552a:	4812      	ldr	r0, [pc, #72]	; (8005574 <HAL_RCC_GetSysClockFreq+0xc4>)
 800552c:	f7fa fdfe 	bl	800012c <__udivsi3>
 8005530:	0003      	movs	r3, r0
 8005532:	001a      	movs	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	4353      	muls	r3, r2
 8005538:	637b      	str	r3, [r7, #52]	; 0x34
 800553a:	e009      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800553c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800553e:	000a      	movs	r2, r1
 8005540:	0152      	lsls	r2, r2, #5
 8005542:	1a52      	subs	r2, r2, r1
 8005544:	0193      	lsls	r3, r2, #6
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	185b      	adds	r3, r3, r1
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005552:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005554:	e002      	b.n	800555c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005556:	4b07      	ldr	r3, [pc, #28]	; (8005574 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005558:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800555a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800555e:	0018      	movs	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	b00f      	add	sp, #60	; 0x3c
 8005564:	bd90      	pop	{r4, r7, pc}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	0800b094 	.word	0x0800b094
 800556c:	0800b0a4 	.word	0x0800b0a4
 8005570:	40021000 	.word	0x40021000
 8005574:	007a1200 	.word	0x007a1200

08005578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800557c:	4b02      	ldr	r3, [pc, #8]	; (8005588 <HAL_RCC_GetHCLKFreq+0x10>)
 800557e:	681b      	ldr	r3, [r3, #0]
}
 8005580:	0018      	movs	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	20000014 	.word	0x20000014

0800558c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005590:	f7ff fff2 	bl	8005578 <HAL_RCC_GetHCLKFreq>
 8005594:	0001      	movs	r1, r0
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	2207      	movs	r2, #7
 800559e:	4013      	ands	r3, r2
 80055a0:	4a04      	ldr	r2, [pc, #16]	; (80055b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055a2:	5cd3      	ldrb	r3, [r2, r3]
 80055a4:	40d9      	lsrs	r1, r3
 80055a6:	000b      	movs	r3, r1
}    
 80055a8:	0018      	movs	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	40021000 	.word	0x40021000
 80055b4:	0800b204 	.word	0x0800b204

080055b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	025b      	lsls	r3, r3, #9
 80055d0:	4013      	ands	r3, r2
 80055d2:	d100      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80055d4:	e08f      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80055d6:	2317      	movs	r3, #23
 80055d8:	18fb      	adds	r3, r7, r3
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055de:	4b57      	ldr	r3, [pc, #348]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	055b      	lsls	r3, r3, #21
 80055e6:	4013      	ands	r3, r2
 80055e8:	d111      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055ea:	4b54      	ldr	r3, [pc, #336]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	4b53      	ldr	r3, [pc, #332]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055f0:	2180      	movs	r1, #128	; 0x80
 80055f2:	0549      	lsls	r1, r1, #21
 80055f4:	430a      	orrs	r2, r1
 80055f6:	61da      	str	r2, [r3, #28]
 80055f8:	4b50      	ldr	r3, [pc, #320]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	055b      	lsls	r3, r3, #21
 8005600:	4013      	ands	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005606:	2317      	movs	r3, #23
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560e:	4b4c      	ldr	r3, [pc, #304]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4013      	ands	r3, r2
 8005618:	d11a      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800561a:	4b49      	ldr	r3, [pc, #292]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b48      	ldr	r3, [pc, #288]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005620:	2180      	movs	r1, #128	; 0x80
 8005622:	0049      	lsls	r1, r1, #1
 8005624:	430a      	orrs	r2, r1
 8005626:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005628:	f7fe fab4 	bl	8003b94 <HAL_GetTick>
 800562c:	0003      	movs	r3, r0
 800562e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005630:	e008      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005632:	f7fe faaf 	bl	8003b94 <HAL_GetTick>
 8005636:	0002      	movs	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b64      	cmp	r3, #100	; 0x64
 800563e:	d901      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e077      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005644:	4b3e      	ldr	r3, [pc, #248]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	2380      	movs	r3, #128	; 0x80
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	4013      	ands	r3, r2
 800564e:	d0f0      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005650:	4b3a      	ldr	r3, [pc, #232]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005652:	6a1a      	ldr	r2, [r3, #32]
 8005654:	23c0      	movs	r3, #192	; 0xc0
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4013      	ands	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d034      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	23c0      	movs	r3, #192	; 0xc0
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4013      	ands	r3, r2
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	429a      	cmp	r2, r3
 8005670:	d02c      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005672:	4b32      	ldr	r3, [pc, #200]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	4a33      	ldr	r2, [pc, #204]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005678:	4013      	ands	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800567c:	4b2f      	ldr	r3, [pc, #188]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	4b2e      	ldr	r3, [pc, #184]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005682:	2180      	movs	r1, #128	; 0x80
 8005684:	0249      	lsls	r1, r1, #9
 8005686:	430a      	orrs	r2, r1
 8005688:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800568a:	4b2c      	ldr	r3, [pc, #176]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800568c:	6a1a      	ldr	r2, [r3, #32]
 800568e:	4b2b      	ldr	r3, [pc, #172]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005690:	492d      	ldr	r1, [pc, #180]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005692:	400a      	ands	r2, r1
 8005694:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	4013      	ands	r3, r2
 80056a2:	d013      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a4:	f7fe fa76 	bl	8003b94 <HAL_GetTick>
 80056a8:	0003      	movs	r3, r0
 80056aa:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ac:	e009      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ae:	f7fe fa71 	bl	8003b94 <HAL_GetTick>
 80056b2:	0002      	movs	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	4a24      	ldr	r2, [pc, #144]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e038      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c2:	4b1e      	ldr	r3, [pc, #120]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	2202      	movs	r2, #2
 80056c8:	4013      	ands	r3, r2
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056cc:	4b1b      	ldr	r3, [pc, #108]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	0019      	movs	r1, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	4b18      	ldr	r3, [pc, #96]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056dc:	430a      	orrs	r2, r1
 80056de:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056e0:	2317      	movs	r3, #23
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d105      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ea:	4b14      	ldr	r3, [pc, #80]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056ec:	69da      	ldr	r2, [r3, #28]
 80056ee:	4b13      	ldr	r3, [pc, #76]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056f0:	4917      	ldr	r1, [pc, #92]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80056f2:	400a      	ands	r2, r1
 80056f4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	4013      	ands	r3, r2
 80056fe:	d009      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005700:	4b0e      	ldr	r3, [pc, #56]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	2203      	movs	r2, #3
 8005706:	4393      	bics	r3, r2
 8005708:	0019      	movs	r1, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	4b0b      	ldr	r3, [pc, #44]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005710:	430a      	orrs	r2, r1
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2220      	movs	r2, #32
 800571a:	4013      	ands	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800571e:	4b07      	ldr	r3, [pc, #28]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	2210      	movs	r2, #16
 8005724:	4393      	bics	r3, r2
 8005726:	0019      	movs	r1, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	4b03      	ldr	r3, [pc, #12]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800572e:	430a      	orrs	r2, r1
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	0018      	movs	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	b006      	add	sp, #24
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40021000 	.word	0x40021000
 8005740:	40007000 	.word	0x40007000
 8005744:	fffffcff 	.word	0xfffffcff
 8005748:	fffeffff 	.word	0xfffeffff
 800574c:	00001388 	.word	0x00001388
 8005750:	efffffff 	.word	0xefffffff

08005754 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e081      	b.n	800586a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7f5b      	ldrb	r3, [r3, #29]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	0018      	movs	r0, r3
 800577a:	f7fd fef3 	bl	8003564 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2202      	movs	r2, #2
 8005782:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	22ca      	movs	r2, #202	; 0xca
 800578a:	625a      	str	r2, [r3, #36]	; 0x24
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2253      	movs	r2, #83	; 0x53
 8005792:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	0018      	movs	r0, r3
 8005798:	f000 faa9 	bl	8005cee <RTC_EnterInitMode>
 800579c:	1e03      	subs	r3, r0, #0
 800579e:	d008      	beq.n	80057b2 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	22ff      	movs	r2, #255	; 0xff
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2204      	movs	r2, #4
 80057ac:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e05b      	b.n	800586a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	492d      	ldr	r1, [pc, #180]	; (8005874 <HAL_RTC_Init+0x120>)
 80057be:	400a      	ands	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6899      	ldr	r1, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68d2      	ldr	r2, [r2, #12]
 80057e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6919      	ldr	r1, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	041a      	lsls	r2, r3, #16
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2180      	movs	r1, #128	; 0x80
 800580a:	438a      	bics	r2, r1
 800580c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2220      	movs	r2, #32
 8005816:	4013      	ands	r3, r2
 8005818:	d10e      	bne.n	8005838 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	0018      	movs	r0, r3
 800581e:	f000 fa3d 	bl	8005c9c <HAL_RTC_WaitForSynchro>
 8005822:	1e03      	subs	r3, r0, #0
 8005824:	d008      	beq.n	8005838 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	22ff      	movs	r2, #255	; 0xff
 800582c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2204      	movs	r2, #4
 8005832:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e018      	b.n	800586a <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	490d      	ldr	r1, [pc, #52]	; (8005878 <HAL_RTC_Init+0x124>)
 8005844:	400a      	ands	r2, r1
 8005846:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	22ff      	movs	r2, #255	; 0xff
 8005860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005868:	2300      	movs	r3, #0
  }
}
 800586a:	0018      	movs	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	b002      	add	sp, #8
 8005870:	bd80      	pop	{r7, pc}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	ff8fffbf 	.word	0xff8fffbf
 8005878:	fffbffff 	.word	0xfffbffff

0800587c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	7f1b      	ldrb	r3, [r3, #28]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_RTC_SetTime+0x1c>
 8005894:	2302      	movs	r3, #2
 8005896:	e0a5      	b.n	80059e4 <HAL_RTC_SetTime+0x168>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2202      	movs	r2, #2
 80058a2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d125      	bne.n	80058f6 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2240      	movs	r2, #64	; 0x40
 80058b2:	4013      	ands	r3, r2
 80058b4:	d102      	bne.n	80058bc <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2200      	movs	r2, #0
 80058ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	0018      	movs	r0, r3
 80058c2:	f000 fa40 	bl	8005d46 <RTC_ByteToBcd2>
 80058c6:	0003      	movs	r3, r0
 80058c8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	0018      	movs	r0, r3
 80058d0:	f000 fa39 	bl	8005d46 <RTC_ByteToBcd2>
 80058d4:	0003      	movs	r3, r0
 80058d6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80058d8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	789b      	ldrb	r3, [r3, #2]
 80058de:	0018      	movs	r0, r3
 80058e0:	f000 fa31 	bl	8005d46 <RTC_ByteToBcd2>
 80058e4:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80058e6:	0022      	movs	r2, r4
 80058e8:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	78db      	ldrb	r3, [r3, #3]
 80058ee:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	e017      	b.n	8005926 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2240      	movs	r2, #64	; 0x40
 80058fe:	4013      	ands	r3, r2
 8005900:	d102      	bne.n	8005908 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2200      	movs	r2, #0
 8005906:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005914:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800591a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	78db      	ldrb	r3, [r3, #3]
 8005920:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	22ca      	movs	r2, #202	; 0xca
 800592c:	625a      	str	r2, [r3, #36]	; 0x24
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2253      	movs	r2, #83	; 0x53
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	0018      	movs	r0, r3
 800593a:	f000 f9d8 	bl	8005cee <RTC_EnterInitMode>
 800593e:	1e03      	subs	r3, r0, #0
 8005940:	d00b      	beq.n	800595a <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	22ff      	movs	r2, #255	; 0xff
 8005948:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2204      	movs	r2, #4
 800594e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e044      	b.n	80059e4 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4922      	ldr	r1, [pc, #136]	; (80059ec <HAL_RTC_SetTime+0x170>)
 8005962:	400a      	ands	r2, r1
 8005964:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	491f      	ldr	r1, [pc, #124]	; (80059f0 <HAL_RTC_SetTime+0x174>)
 8005972:	400a      	ands	r2, r1
 8005974:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6899      	ldr	r1, [r3, #8]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	431a      	orrs	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2180      	movs	r1, #128	; 0x80
 800599a:	438a      	bics	r2, r1
 800599c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2220      	movs	r2, #32
 80059a6:	4013      	ands	r3, r2
 80059a8:	d111      	bne.n	80059ce <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	0018      	movs	r0, r3
 80059ae:	f000 f975 	bl	8005c9c <HAL_RTC_WaitForSynchro>
 80059b2:	1e03      	subs	r3, r0, #0
 80059b4:	d00b      	beq.n	80059ce <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	22ff      	movs	r2, #255	; 0xff
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2204      	movs	r2, #4
 80059c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e00a      	b.n	80059e4 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	22ff      	movs	r2, #255	; 0xff
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80059e2:	2300      	movs	r3, #0
  }
}
 80059e4:	0018      	movs	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b007      	add	sp, #28
 80059ea:	bd90      	pop	{r4, r7, pc}
 80059ec:	007f7f7f 	.word	0x007f7f7f
 80059f0:	fffbffff 	.word	0xfffbffff

080059f4 <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	045b      	lsls	r3, r3, #17
 8005a16:	0c5a      	lsrs	r2, r3, #17
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a22      	ldr	r2, [pc, #136]	; (8005aac <HAL_RTC_GetTime+0xb8>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	0c1b      	lsrs	r3, r3, #16
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	223f      	movs	r2, #63	; 0x3f
 8005a30:	4013      	ands	r3, r2
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	227f      	movs	r2, #127	; 0x7f
 8005a40:	4013      	ands	r3, r2
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	227f      	movs	r2, #127	; 0x7f
 8005a4e:	4013      	ands	r3, r2
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2240      	movs	r2, #64	; 0x40
 8005a5e:	4013      	ands	r3, r2
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11a      	bne.n	8005aa2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	0018      	movs	r0, r3
 8005a72:	f000 f989 	bl	8005d88 <RTC_Bcd2ToByte>
 8005a76:	0003      	movs	r3, r0
 8005a78:	001a      	movs	r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f000 f980 	bl	8005d88 <RTC_Bcd2ToByte>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	789b      	ldrb	r3, [r3, #2]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f000 f977 	bl	8005d88 <RTC_Bcd2ToByte>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	001a      	movs	r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	b006      	add	sp, #24
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	007f7f7f 	.word	0x007f7f7f

08005ab0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	7f1b      	ldrb	r3, [r3, #28]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_RTC_SetDate+0x1c>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e091      	b.n	8005bf0 <HAL_RTC_SetDate+0x140>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10e      	bne.n	8005afc <HAL_RTC_SetDate+0x4c>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	001a      	movs	r2, r3
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d008      	beq.n	8005afc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	2210      	movs	r2, #16
 8005af0:	4393      	bics	r3, r2
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	330a      	adds	r3, #10
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d11c      	bne.n	8005b3c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	78db      	ldrb	r3, [r3, #3]
 8005b06:	0018      	movs	r0, r3
 8005b08:	f000 f91d 	bl	8005d46 <RTC_ByteToBcd2>
 8005b0c:	0003      	movs	r3, r0
 8005b0e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	0018      	movs	r0, r3
 8005b16:	f000 f916 	bl	8005d46 <RTC_ByteToBcd2>
 8005b1a:	0003      	movs	r3, r0
 8005b1c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b1e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	789b      	ldrb	r3, [r3, #2]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 f90e 	bl	8005d46 <RTC_ByteToBcd2>
 8005b2a:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005b2c:	0022      	movs	r2, r4
 8005b2e:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e00e      	b.n	8005b5a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	78db      	ldrb	r3, [r3, #3]
 8005b40:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b48:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005b4e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	22ca      	movs	r2, #202	; 0xca
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2253      	movs	r2, #83	; 0x53
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f000 f8be 	bl	8005cee <RTC_EnterInitMode>
 8005b72:	1e03      	subs	r3, r0, #0
 8005b74:	d00b      	beq.n	8005b8e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	22ff      	movs	r2, #255	; 0xff
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2204      	movs	r2, #4
 8005b82:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e030      	b.n	8005bf0 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4918      	ldr	r1, [pc, #96]	; (8005bf8 <HAL_RTC_SetDate+0x148>)
 8005b96:	400a      	ands	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2180      	movs	r1, #128	; 0x80
 8005ba6:	438a      	bics	r2, r1
 8005ba8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d111      	bne.n	8005bda <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f000 f86f 	bl	8005c9c <HAL_RTC_WaitForSynchro>
 8005bbe:	1e03      	subs	r3, r0, #0
 8005bc0:	d00b      	beq.n	8005bda <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	22ff      	movs	r2, #255	; 0xff
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2204      	movs	r2, #4
 8005bce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e00a      	b.n	8005bf0 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	22ff      	movs	r2, #255	; 0xff
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005bee:	2300      	movs	r3, #0
  }
}
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b007      	add	sp, #28
 8005bf6:	bd90      	pop	{r4, r7, pc}
 8005bf8:	00ffff3f 	.word	0x00ffff3f

08005bfc <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4a21      	ldr	r2, [pc, #132]	; (8005c98 <HAL_RTC_GetDate+0x9c>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	0c1b      	lsrs	r3, r3, #16
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	0a1b      	lsrs	r3, r3, #8
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	221f      	movs	r2, #31
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	223f      	movs	r2, #63	; 0x3f
 8005c38:	4013      	ands	r3, r2
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	0b5b      	lsrs	r3, r3, #13
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2207      	movs	r2, #7
 8005c48:	4013      	ands	r3, r2
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d11a      	bne.n	8005c8c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	78db      	ldrb	r3, [r3, #3]
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f000 f894 	bl	8005d88 <RTC_Bcd2ToByte>
 8005c60:	0003      	movs	r3, r0
 8005c62:	001a      	movs	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f000 f88b 	bl	8005d88 <RTC_Bcd2ToByte>
 8005c72:	0003      	movs	r3, r0
 8005c74:	001a      	movs	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	789b      	ldrb	r3, [r3, #2]
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f000 f882 	bl	8005d88 <RTC_Bcd2ToByte>
 8005c84:	0003      	movs	r3, r0
 8005c86:	001a      	movs	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	0018      	movs	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b006      	add	sp, #24
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	00ffff3f 	.word	0x00ffff3f

08005c9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	21a0      	movs	r1, #160	; 0xa0
 8005cb4:	438a      	bics	r2, r1
 8005cb6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005cb8:	f7fd ff6c 	bl	8003b94 <HAL_GetTick>
 8005cbc:	0003      	movs	r3, r0
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005cc0:	e00a      	b.n	8005cd8 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cc2:	f7fd ff67 	bl	8003b94 <HAL_GetTick>
 8005cc6:	0002      	movs	r2, r0
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	23fa      	movs	r3, #250	; 0xfa
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e006      	b.n	8005ce6 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d0ee      	beq.n	8005cc2 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b004      	add	sp, #16
 8005cec:	bd80      	pop	{r7, pc}

08005cee <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	2240      	movs	r2, #64	; 0x40
 8005d02:	4013      	ands	r3, r2
 8005d04:	d11a      	bne.n	8005d3c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4252      	negs	r2, r2
 8005d0e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d10:	f7fd ff40 	bl	8003b94 <HAL_GetTick>
 8005d14:	0003      	movs	r3, r0
 8005d16:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d18:	e00a      	b.n	8005d30 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d1a:	f7fd ff3b 	bl	8003b94 <HAL_GetTick>
 8005d1e:	0002      	movs	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1ad2      	subs	r2, r2, r3
 8005d24:	23fa      	movs	r3, #250	; 0xfa
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d901      	bls.n	8005d30 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e006      	b.n	8005d3e <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2240      	movs	r2, #64	; 0x40
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d0ee      	beq.n	8005d1a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	0018      	movs	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b004      	add	sp, #16
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	0002      	movs	r2, r0
 8005d4e:	1dfb      	adds	r3, r7, #7
 8005d50:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005d56:	e007      	b.n	8005d68 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005d5e:	1dfb      	adds	r3, r7, #7
 8005d60:	1dfa      	adds	r2, r7, #7
 8005d62:	7812      	ldrb	r2, [r2, #0]
 8005d64:	3a0a      	subs	r2, #10
 8005d66:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8005d68:	1dfb      	adds	r3, r7, #7
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b09      	cmp	r3, #9
 8005d6e:	d8f3      	bhi.n	8005d58 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	1dfb      	adds	r3, r7, #7
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	b2db      	uxtb	r3, r3
}
 8005d80:	0018      	movs	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b004      	add	sp, #16
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	0002      	movs	r2, r0
 8005d90:	1dfb      	adds	r3, r7, #7
 8005d92:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8005d98:	1dfb      	adds	r3, r7, #7
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	091b      	lsrs	r3, r3, #4
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	001a      	movs	r2, r3
 8005da2:	0013      	movs	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	189b      	adds	r3, r3, r2
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8005dac:	1dfb      	adds	r3, r7, #7
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	220f      	movs	r2, #15
 8005db2:	4013      	ands	r3, r2
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	18d3      	adds	r3, r2, r3
 8005dbc:	b2db      	uxtb	r3, r3
}
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b004      	add	sp, #16
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e08a      	b.n	8005ef0 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	225d      	movs	r2, #93	; 0x5d
 8005de4:	5c9b      	ldrb	r3, [r3, r2]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d107      	bne.n	8005dfc <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	225c      	movs	r2, #92	; 0x5c
 8005df0:	2100      	movs	r1, #0
 8005df2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	0018      	movs	r0, r3
 8005df8:	f000 f880 	bl	8005efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	225d      	movs	r2, #93	; 0x5d
 8005e00:	2102      	movs	r1, #2
 8005e02:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2140      	movs	r1, #64	; 0x40
 8005e10:	438a      	bics	r2, r1
 8005e12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	23e0      	movs	r3, #224	; 0xe0
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d902      	bls.n	8005e26 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e002      	b.n	8005e2c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e26:	2380      	movs	r3, #128	; 0x80
 8005e28:	015b      	lsls	r3, r3, #5
 8005e2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	23f0      	movs	r3, #240	; 0xf0
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d008      	beq.n	8005e4a <HAL_SPI_Init+0x82>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	23e0      	movs	r3, #224	; 0xe0
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d002      	beq.n	8005e4a <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10c      	bne.n	8005e6c <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	23e0      	movs	r3, #224	; 0xe0
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d903      	bls.n	8005e66 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2202      	movs	r2, #2
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
 8005e64:	e002      	b.n	8005e6c <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6999      	ldr	r1, [r3, #24]
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	400b      	ands	r3, r1
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	0011      	movs	r1, r2
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	0c1b      	lsrs	r3, r3, #16
 8005eae:	2204      	movs	r2, #4
 8005eb0:	401a      	ands	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	0011      	movs	r1, r2
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69da      	ldr	r2, [r3, #28]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4907      	ldr	r1, [pc, #28]	; (8005ef8 <HAL_SPI_Init+0x130>)
 8005edc:	400a      	ands	r2, r1
 8005ede:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	225d      	movs	r2, #93	; 0x5d
 8005eea:	2101      	movs	r1, #1
 8005eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b004      	add	sp, #16
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	fffff7ff 	.word	0xfffff7ff

08005efc <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005f04:	46c0      	nop			; (mov r8, r8)
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b002      	add	sp, #8
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	1dbb      	adds	r3, r7, #6
 8005f1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f1c:	231f      	movs	r3, #31
 8005f1e:	18fb      	adds	r3, r7, r3
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	225c      	movs	r2, #92	; 0x5c
 8005f28:	5c9b      	ldrb	r3, [r3, r2]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_SPI_Transmit+0x26>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e169      	b.n	8006206 <HAL_SPI_Transmit+0x2fa>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	225c      	movs	r2, #92	; 0x5c
 8005f36:	2101      	movs	r1, #1
 8005f38:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f3a:	f7fd fe2b 	bl	8003b94 <HAL_GetTick>
 8005f3e:	0003      	movs	r3, r0
 8005f40:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f42:	2316      	movs	r3, #22
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	1dba      	adds	r2, r7, #6
 8005f48:	8812      	ldrh	r2, [r2, #0]
 8005f4a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	225d      	movs	r2, #93	; 0x5d
 8005f50:	5c9b      	ldrb	r3, [r3, r2]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d004      	beq.n	8005f62 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005f58:	231f      	movs	r3, #31
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f60:	e146      	b.n	80061f0 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_SPI_Transmit+0x64>
 8005f68:	1dbb      	adds	r3, r7, #6
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005f70:	231f      	movs	r3, #31
 8005f72:	18fb      	adds	r3, r7, r3
 8005f74:	2201      	movs	r2, #1
 8005f76:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f78:	e13a      	b.n	80061f0 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	225d      	movs	r2, #93	; 0x5d
 8005f7e:	2103      	movs	r1, #3
 8005f80:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1dba      	adds	r2, r7, #6
 8005f92:	8812      	ldrh	r2, [r2, #0]
 8005f94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1dba      	adds	r2, r7, #6
 8005f9a:	8812      	ldrh	r2, [r2, #0]
 8005f9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2244      	movs	r2, #68	; 0x44
 8005fa8:	2100      	movs	r1, #0
 8005faa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2246      	movs	r2, #70	; 0x46
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d108      	bne.n	8005fde <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2180      	movs	r1, #128	; 0x80
 8005fd8:	01c9      	lsls	r1, r1, #7
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2240      	movs	r2, #64	; 0x40
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b40      	cmp	r3, #64	; 0x40
 8005fea:	d007      	beq.n	8005ffc <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2140      	movs	r1, #64	; 0x40
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	23e0      	movs	r3, #224	; 0xe0
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	429a      	cmp	r2, r3
 8006006:	d94e      	bls.n	80060a6 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <HAL_SPI_Transmit+0x10e>
 8006010:	2316      	movs	r3, #22
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d13f      	bne.n	800609a <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	881a      	ldrh	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	1c9a      	adds	r2, r3, #2
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800603e:	e02c      	b.n	800609a <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2202      	movs	r2, #2
 8006048:	4013      	ands	r3, r2
 800604a:	2b02      	cmp	r3, #2
 800604c:	d112      	bne.n	8006074 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	881a      	ldrh	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	1c9a      	adds	r2, r3, #2
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006072:	e012      	b.n	800609a <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006074:	f7fd fd8e 	bl	8003b94 <HAL_GetTick>
 8006078:	0002      	movs	r2, r0
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	d802      	bhi.n	800608a <HAL_SPI_Transmit+0x17e>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	3301      	adds	r3, #1
 8006088:	d102      	bne.n	8006090 <HAL_SPI_Transmit+0x184>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8006090:	231f      	movs	r3, #31
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	2203      	movs	r2, #3
 8006096:	701a      	strb	r2, [r3, #0]
          goto error;
 8006098:	e0aa      	b.n	80061f0 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1cd      	bne.n	8006040 <HAL_SPI_Transmit+0x134>
 80060a4:	e080      	b.n	80061a8 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <HAL_SPI_Transmit+0x1ae>
 80060ae:	2316      	movs	r3, #22
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d000      	beq.n	80060ba <HAL_SPI_Transmit+0x1ae>
 80060b8:	e071      	b.n	800619e <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d912      	bls.n	80060ea <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	881a      	ldrh	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	1c9a      	adds	r2, r3, #2
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b02      	subs	r3, #2
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060e8:	e059      	b.n	800619e <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	330c      	adds	r3, #12
 80060f4:	7812      	ldrb	r2, [r2, #0]
 80060f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006110:	e045      	b.n	800619e <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2202      	movs	r2, #2
 800611a:	4013      	ands	r3, r2
 800611c:	2b02      	cmp	r3, #2
 800611e:	d12b      	bne.n	8006178 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	d912      	bls.n	8006150 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	881a      	ldrh	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	1c9a      	adds	r2, r3, #2
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b02      	subs	r3, #2
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800614e:	e026      	b.n	800619e <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	330c      	adds	r3, #12
 800615a:	7812      	ldrb	r2, [r2, #0]
 800615c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006176:	e012      	b.n	800619e <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006178:	f7fd fd0c 	bl	8003b94 <HAL_GetTick>
 800617c:	0002      	movs	r2, r0
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d802      	bhi.n	800618e <HAL_SPI_Transmit+0x282>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	3301      	adds	r3, #1
 800618c:	d102      	bne.n	8006194 <HAL_SPI_Transmit+0x288>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8006194:	231f      	movs	r3, #31
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	2203      	movs	r2, #3
 800619a:	701a      	strb	r2, [r3, #0]
          goto error;
 800619c:	e028      	b.n	80061f0 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1b4      	bne.n	8006112 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	0018      	movs	r0, r3
 80061b0:	f001 f9d2 	bl	8007558 <SPI_EndRxTxTransaction>
 80061b4:	1e03      	subs	r3, r0, #0
 80061b6:	d002      	beq.n	80061be <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2220      	movs	r2, #32
 80061bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d004      	beq.n	80061ee <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 80061e4:	231f      	movs	r3, #31
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	2201      	movs	r2, #1
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	e000      	b.n	80061f0 <HAL_SPI_Transmit+0x2e4>
  }

error:
 80061ee:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	225d      	movs	r2, #93	; 0x5d
 80061f4:	2101      	movs	r1, #1
 80061f6:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	225c      	movs	r2, #92	; 0x5c
 80061fc:	2100      	movs	r1, #0
 80061fe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006200:	231f      	movs	r3, #31
 8006202:	18fb      	adds	r3, r7, r3
 8006204:	781b      	ldrb	r3, [r3, #0]
}
 8006206:	0018      	movs	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	b008      	add	sp, #32
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b089      	sub	sp, #36	; 0x24
 8006214:	af02      	add	r7, sp, #8
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	1dbb      	adds	r3, r7, #6
 800621e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006220:	2317      	movs	r3, #23
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	2200      	movs	r2, #0
 8006226:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	2382      	movs	r3, #130	; 0x82
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	429a      	cmp	r2, r3
 8006232:	d113      	bne.n	800625c <HAL_SPI_Receive+0x4c>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10f      	bne.n	800625c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	225d      	movs	r2, #93	; 0x5d
 8006240:	2104      	movs	r1, #4
 8006242:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006244:	1dbb      	adds	r3, r7, #6
 8006246:	881c      	ldrh	r4, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	0023      	movs	r3, r4
 8006254:	f000 f920 	bl	8006498 <HAL_SPI_TransmitReceive>
 8006258:	0003      	movs	r3, r0
 800625a:	e114      	b.n	8006486 <HAL_SPI_Receive+0x276>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	225c      	movs	r2, #92	; 0x5c
 8006260:	5c9b      	ldrb	r3, [r3, r2]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_SPI_Receive+0x5a>
 8006266:	2302      	movs	r3, #2
 8006268:	e10d      	b.n	8006486 <HAL_SPI_Receive+0x276>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	225c      	movs	r2, #92	; 0x5c
 800626e:	2101      	movs	r1, #1
 8006270:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006272:	f7fd fc8f 	bl	8003b94 <HAL_GetTick>
 8006276:	0003      	movs	r3, r0
 8006278:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	225d      	movs	r2, #93	; 0x5d
 800627e:	5c9b      	ldrb	r3, [r3, r2]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d004      	beq.n	8006290 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006286:	2317      	movs	r3, #23
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	2202      	movs	r2, #2
 800628c:	701a      	strb	r2, [r3, #0]
    goto error;
 800628e:	e0ef      	b.n	8006470 <HAL_SPI_Receive+0x260>
  }

  if ((pData == NULL) || (Size == 0U))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_SPI_Receive+0x8e>
 8006296:	1dbb      	adds	r3, r7, #6
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800629e:	2317      	movs	r3, #23
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	2201      	movs	r2, #1
 80062a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80062a6:	e0e3      	b.n	8006470 <HAL_SPI_Receive+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	225d      	movs	r2, #93	; 0x5d
 80062ac:	2104      	movs	r1, #4
 80062ae:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1dba      	adds	r2, r7, #6
 80062c0:	2144      	movs	r1, #68	; 0x44
 80062c2:	8812      	ldrh	r2, [r2, #0]
 80062c4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	1dba      	adds	r2, r7, #6
 80062ca:	2146      	movs	r1, #70	; 0x46
 80062cc:	8812      	ldrh	r2, [r2, #0]
 80062ce:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	23e0      	movs	r3, #224	; 0xe0
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d908      	bls.n	800630c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4962      	ldr	r1, [pc, #392]	; (8006490 <HAL_SPI_Receive+0x280>)
 8006306:	400a      	ands	r2, r1
 8006308:	605a      	str	r2, [r3, #4]
 800630a:	e008      	b.n	800631e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	0149      	lsls	r1, r1, #5
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	2380      	movs	r3, #128	; 0x80
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	429a      	cmp	r2, r3
 8006328:	d107      	bne.n	800633a <HAL_SPI_Receive+0x12a>
  {
    SPI_1LINE_RX(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4957      	ldr	r1, [pc, #348]	; (8006494 <HAL_SPI_Receive+0x284>)
 8006336:	400a      	ands	r2, r1
 8006338:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2240      	movs	r2, #64	; 0x40
 8006342:	4013      	ands	r3, r2
 8006344:	2b40      	cmp	r3, #64	; 0x40
 8006346:	d007      	beq.n	8006358 <HAL_SPI_Receive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2140      	movs	r1, #64	; 0x40
 8006354:	430a      	orrs	r2, r1
 8006356:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	23e0      	movs	r3, #224	; 0xe0
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	429a      	cmp	r2, r3
 8006362:	d900      	bls.n	8006366 <HAL_SPI_Receive+0x156>
 8006364:	e069      	b.n	800643a <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006366:	e031      	b.n	80063cc <HAL_SPI_Receive+0x1bc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2201      	movs	r2, #1
 8006370:	4013      	ands	r3, r2
 8006372:	2b01      	cmp	r3, #1
 8006374:	d117      	bne.n	80063a6 <HAL_SPI_Receive+0x196>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	330c      	adds	r3, #12
 800637c:	001a      	movs	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2246      	movs	r2, #70	; 0x46
 8006396:	5a9b      	ldrh	r3, [r3, r2]
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b299      	uxth	r1, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2246      	movs	r2, #70	; 0x46
 80063a2:	5299      	strh	r1, [r3, r2]
 80063a4:	e012      	b.n	80063cc <HAL_SPI_Receive+0x1bc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063a6:	f7fd fbf5 	bl	8003b94 <HAL_GetTick>
 80063aa:	0002      	movs	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d802      	bhi.n	80063bc <HAL_SPI_Receive+0x1ac>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	3301      	adds	r3, #1
 80063ba:	d102      	bne.n	80063c2 <HAL_SPI_Receive+0x1b2>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <HAL_SPI_Receive+0x1bc>
        {
          errorcode = HAL_TIMEOUT;
 80063c2:	2317      	movs	r3, #23
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	2203      	movs	r2, #3
 80063c8:	701a      	strb	r2, [r3, #0]
          goto error;
 80063ca:	e051      	b.n	8006470 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2246      	movs	r2, #70	; 0x46
 80063d0:	5a9b      	ldrh	r3, [r3, r2]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1c7      	bne.n	8006368 <HAL_SPI_Receive+0x158>
 80063d8:	e035      	b.n	8006446 <HAL_SPI_Receive+0x236>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2201      	movs	r2, #1
 80063e2:	4013      	ands	r3, r2
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d115      	bne.n	8006414 <HAL_SPI_Receive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	b292      	uxth	r2, r2
 80063f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	1c9a      	adds	r2, r3, #2
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2246      	movs	r2, #70	; 0x46
 8006404:	5a9b      	ldrh	r3, [r3, r2]
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b299      	uxth	r1, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2246      	movs	r2, #70	; 0x46
 8006410:	5299      	strh	r1, [r3, r2]
 8006412:	e012      	b.n	800643a <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006414:	f7fd fbbe 	bl	8003b94 <HAL_GetTick>
 8006418:	0002      	movs	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d802      	bhi.n	800642a <HAL_SPI_Receive+0x21a>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	3301      	adds	r3, #1
 8006428:	d102      	bne.n	8006430 <HAL_SPI_Receive+0x220>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <HAL_SPI_Receive+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8006430:	2317      	movs	r3, #23
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	2203      	movs	r2, #3
 8006436:	701a      	strb	r2, [r3, #0]
          goto error;
 8006438:	e01a      	b.n	8006470 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2246      	movs	r2, #70	; 0x46
 800643e:	5a9b      	ldrh	r3, [r3, r2]
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1c9      	bne.n	80063da <HAL_SPI_Receive+0x1ca>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	0018      	movs	r0, r3
 800644e:	f001 f825 	bl	800749c <SPI_EndRxTransaction>
 8006452:	1e03      	subs	r3, r0, #0
 8006454:	d002      	beq.n	800645c <HAL_SPI_Receive+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <HAL_SPI_Receive+0x25e>
  {
    errorcode = HAL_ERROR;
 8006464:	2317      	movs	r3, #23
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	2201      	movs	r2, #1
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	e000      	b.n	8006470 <HAL_SPI_Receive+0x260>
  }

error :
 800646e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	225d      	movs	r2, #93	; 0x5d
 8006474:	2101      	movs	r1, #1
 8006476:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	225c      	movs	r2, #92	; 0x5c
 800647c:	2100      	movs	r1, #0
 800647e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006480:	2317      	movs	r3, #23
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	781b      	ldrb	r3, [r3, #0]
}
 8006486:	0018      	movs	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	b007      	add	sp, #28
 800648c:	bd90      	pop	{r4, r7, pc}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	ffffefff 	.word	0xffffefff
 8006494:	ffffbfff 	.word	0xffffbfff

08006498 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	001a      	movs	r2, r3
 80064a6:	1cbb      	adds	r3, r7, #2
 80064a8:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064aa:	2301      	movs	r3, #1
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064ae:	2323      	movs	r3, #35	; 0x23
 80064b0:	18fb      	adds	r3, r7, r3
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	225c      	movs	r2, #92	; 0x5c
 80064ba:	5c9b      	ldrb	r3, [r3, r2]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x2c>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e21f      	b.n	8006904 <HAL_SPI_TransmitReceive+0x46c>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	225c      	movs	r2, #92	; 0x5c
 80064c8:	2101      	movs	r1, #1
 80064ca:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064cc:	f7fd fb62 	bl	8003b94 <HAL_GetTick>
 80064d0:	0003      	movs	r3, r0
 80064d2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064d4:	201b      	movs	r0, #27
 80064d6:	183b      	adds	r3, r7, r0
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	215d      	movs	r1, #93	; 0x5d
 80064dc:	5c52      	ldrb	r2, [r2, r1]
 80064de:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80064e6:	2312      	movs	r3, #18
 80064e8:	18fb      	adds	r3, r7, r3
 80064ea:	1cba      	adds	r2, r7, #2
 80064ec:	8812      	ldrh	r2, [r2, #0]
 80064ee:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 80064f0:	2310      	movs	r3, #16
 80064f2:	18fb      	adds	r3, r7, r3
 80064f4:	1cba      	adds	r2, r7, #2
 80064f6:	8812      	ldrh	r2, [r2, #0]
 80064f8:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064fa:	183b      	adds	r3, r7, r0
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d012      	beq.n	8006528 <HAL_SPI_TransmitReceive+0x90>
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	2382      	movs	r3, #130	; 0x82
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	429a      	cmp	r2, r3
 800650a:	d108      	bne.n	800651e <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d104      	bne.n	800651e <HAL_SPI_TransmitReceive+0x86>
 8006514:	231b      	movs	r3, #27
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b04      	cmp	r3, #4
 800651c:	d004      	beq.n	8006528 <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 800651e:	2323      	movs	r3, #35	; 0x23
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	2202      	movs	r2, #2
 8006524:	701a      	strb	r2, [r3, #0]
    goto error;
 8006526:	e1e2      	b.n	80068ee <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d006      	beq.n	800653c <HAL_SPI_TransmitReceive+0xa4>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_SPI_TransmitReceive+0xa4>
 8006534:	1cbb      	adds	r3, r7, #2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 800653c:	2323      	movs	r3, #35	; 0x23
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	2201      	movs	r2, #1
 8006542:	701a      	strb	r2, [r3, #0]
    goto error;
 8006544:	e1d3      	b.n	80068ee <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	225d      	movs	r2, #93	; 0x5d
 800654a:	5c9b      	ldrb	r3, [r3, r2]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b04      	cmp	r3, #4
 8006550:	d003      	beq.n	800655a <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	225d      	movs	r2, #93	; 0x5d
 8006556:	2105      	movs	r1, #5
 8006558:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1cba      	adds	r2, r7, #2
 800656a:	2146      	movs	r1, #70	; 0x46
 800656c:	8812      	ldrh	r2, [r2, #0]
 800656e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	1cba      	adds	r2, r7, #2
 8006574:	2144      	movs	r1, #68	; 0x44
 8006576:	8812      	ldrh	r2, [r2, #0]
 8006578:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	1cba      	adds	r2, r7, #2
 8006584:	8812      	ldrh	r2, [r2, #0]
 8006586:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	1cba      	adds	r2, r7, #2
 800658c:	8812      	ldrh	r2, [r2, #0]
 800658e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	23e0      	movs	r3, #224	; 0xe0
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d804      	bhi.n	80065b2 <HAL_SPI_TransmitReceive+0x11a>
 80065a8:	2310      	movs	r3, #16
 80065aa:	18fb      	adds	r3, r7, r3
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d908      	bls.n	80065c4 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	49ca      	ldr	r1, [pc, #808]	; (80068e8 <HAL_SPI_TransmitReceive+0x450>)
 80065be:	400a      	ands	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
 80065c2:	e008      	b.n	80065d6 <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2180      	movs	r1, #128	; 0x80
 80065d0:	0149      	lsls	r1, r1, #5
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2240      	movs	r2, #64	; 0x40
 80065de:	4013      	ands	r3, r2
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d007      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2140      	movs	r1, #64	; 0x40
 80065f0:	430a      	orrs	r2, r1
 80065f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	23e0      	movs	r3, #224	; 0xe0
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d800      	bhi.n	8006602 <HAL_SPI_TransmitReceive+0x16a>
 8006600:	e07f      	b.n	8006702 <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_SPI_TransmitReceive+0x17e>
 800660a:	2312      	movs	r3, #18
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d000      	beq.n	8006616 <HAL_SPI_TransmitReceive+0x17e>
 8006614:	e069      	b.n	80066ea <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	881a      	ldrh	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	1c9a      	adds	r2, r3, #2
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800663a:	e056      	b.n	80066ea <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2202      	movs	r2, #2
 8006644:	4013      	ands	r3, r2
 8006646:	2b02      	cmp	r3, #2
 8006648:	d11b      	bne.n	8006682 <HAL_SPI_TransmitReceive+0x1ea>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d016      	beq.n	8006682 <HAL_SPI_TransmitReceive+0x1ea>
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	2b01      	cmp	r3, #1
 8006658:	d113      	bne.n	8006682 <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	881a      	ldrh	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	1c9a      	adds	r2, r3, #2
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2201      	movs	r2, #1
 800668a:	4013      	ands	r3, r2
 800668c:	2b01      	cmp	r3, #1
 800668e:	d11c      	bne.n	80066ca <HAL_SPI_TransmitReceive+0x232>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2246      	movs	r2, #70	; 0x46
 8006694:	5a9b      	ldrh	r3, [r3, r2]
 8006696:	b29b      	uxth	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d016      	beq.n	80066ca <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	b292      	uxth	r2, r2
 80066a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	1c9a      	adds	r2, r3, #2
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2246      	movs	r2, #70	; 0x46
 80066b8:	5a9b      	ldrh	r3, [r3, r2]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b299      	uxth	r1, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2246      	movs	r2, #70	; 0x46
 80066c4:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066c6:	2301      	movs	r3, #1
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066ca:	f7fd fa63 	bl	8003b94 <HAL_GetTick>
 80066ce:	0002      	movs	r2, r0
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d807      	bhi.n	80066ea <HAL_SPI_TransmitReceive+0x252>
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	3301      	adds	r3, #1
 80066de:	d004      	beq.n	80066ea <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 80066e0:	2323      	movs	r3, #35	; 0x23
 80066e2:	18fb      	adds	r3, r7, r3
 80066e4:	2203      	movs	r2, #3
 80066e6:	701a      	strb	r2, [r3, #0]
        goto error;
 80066e8:	e101      	b.n	80068ee <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1a3      	bne.n	800663c <HAL_SPI_TransmitReceive+0x1a4>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2246      	movs	r2, #70	; 0x46
 80066f8:	5a9b      	ldrh	r3, [r3, r2]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d19d      	bne.n	800663c <HAL_SPI_TransmitReceive+0x1a4>
 8006700:	e0e2      	b.n	80068c8 <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d005      	beq.n	8006716 <HAL_SPI_TransmitReceive+0x27e>
 800670a:	2312      	movs	r3, #18
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d000      	beq.n	8006716 <HAL_SPI_TransmitReceive+0x27e>
 8006714:	e0cb      	b.n	80068ae <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b01      	cmp	r3, #1
 800671e:	d912      	bls.n	8006746 <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	881a      	ldrh	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	1c9a      	adds	r2, r3, #2
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b02      	subs	r3, #2
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006744:	e0b3      	b.n	80068ae <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	7812      	ldrb	r2, [r2, #0]
 8006752:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006762:	b29b      	uxth	r3, r3
 8006764:	3b01      	subs	r3, #1
 8006766:	b29a      	uxth	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800676c:	e09f      	b.n	80068ae <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	2202      	movs	r2, #2
 8006776:	4013      	ands	r3, r2
 8006778:	2b02      	cmp	r3, #2
 800677a:	d134      	bne.n	80067e6 <HAL_SPI_TransmitReceive+0x34e>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d02f      	beq.n	80067e6 <HAL_SPI_TransmitReceive+0x34e>
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	2b01      	cmp	r3, #1
 800678a:	d12c      	bne.n	80067e6 <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b01      	cmp	r3, #1
 8006794:	d912      	bls.n	80067bc <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	881a      	ldrh	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	1c9a      	adds	r2, r3, #2
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	3b02      	subs	r3, #2
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067ba:	e012      	b.n	80067e2 <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	330c      	adds	r3, #12
 80067c6:	7812      	ldrb	r2, [r2, #0]
 80067c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2201      	movs	r2, #1
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d149      	bne.n	8006888 <HAL_SPI_TransmitReceive+0x3f0>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2246      	movs	r2, #70	; 0x46
 80067f8:	5a9b      	ldrh	r3, [r3, r2]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d043      	beq.n	8006888 <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2246      	movs	r2, #70	; 0x46
 8006804:	5a9b      	ldrh	r3, [r3, r2]
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b01      	cmp	r3, #1
 800680a:	d924      	bls.n	8006856 <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	b292      	uxth	r2, r2
 8006818:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	1c9a      	adds	r2, r3, #2
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2246      	movs	r2, #70	; 0x46
 8006828:	5a9b      	ldrh	r3, [r3, r2]
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b02      	subs	r3, #2
 800682e:	b299      	uxth	r1, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2246      	movs	r2, #70	; 0x46
 8006834:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2246      	movs	r2, #70	; 0x46
 800683a:	5a9b      	ldrh	r3, [r3, r2]
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b01      	cmp	r3, #1
 8006840:	d820      	bhi.n	8006884 <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2180      	movs	r1, #128	; 0x80
 800684e:	0149      	lsls	r1, r1, #5
 8006850:	430a      	orrs	r2, r1
 8006852:	605a      	str	r2, [r3, #4]
 8006854:	e016      	b.n	8006884 <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	001a      	movs	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	7812      	ldrb	r2, [r2, #0]
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2246      	movs	r2, #70	; 0x46
 8006876:	5a9b      	ldrh	r3, [r3, r2]
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	b299      	uxth	r1, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2246      	movs	r2, #70	; 0x46
 8006882:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006884:	2301      	movs	r3, #1
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006888:	f7fd f984 	bl	8003b94 <HAL_GetTick>
 800688c:	0002      	movs	r2, r0
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006894:	429a      	cmp	r2, r3
 8006896:	d802      	bhi.n	800689e <HAL_SPI_TransmitReceive+0x406>
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	3301      	adds	r3, #1
 800689c:	d102      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x40c>
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 80068a4:	2323      	movs	r3, #35	; 0x23
 80068a6:	18fb      	adds	r3, r7, r3
 80068a8:	2203      	movs	r2, #3
 80068aa:	701a      	strb	r2, [r3, #0]
        goto error;
 80068ac:	e01f      	b.n	80068ee <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d000      	beq.n	80068ba <HAL_SPI_TransmitReceive+0x422>
 80068b8:	e759      	b.n	800676e <HAL_SPI_TransmitReceive+0x2d6>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2246      	movs	r2, #70	; 0x46
 80068be:	5a9b      	ldrh	r3, [r3, r2]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d000      	beq.n	80068c8 <HAL_SPI_TransmitReceive+0x430>
 80068c6:	e752      	b.n	800676e <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	0018      	movs	r0, r3
 80068d0:	f000 fe42 	bl	8007558 <SPI_EndRxTxTransaction>
 80068d4:	1e03      	subs	r3, r0, #0
 80068d6:	d009      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 80068d8:	2323      	movs	r3, #35	; 0x23
 80068da:	18fb      	adds	r3, r7, r3
 80068dc:	2201      	movs	r2, #1
 80068de:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2220      	movs	r2, #32
 80068e4:	661a      	str	r2, [r3, #96]	; 0x60
 80068e6:	e002      	b.n	80068ee <HAL_SPI_TransmitReceive+0x456>
 80068e8:	ffffefff 	.word	0xffffefff
  }

error :
 80068ec:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	225d      	movs	r2, #93	; 0x5d
 80068f2:	2101      	movs	r1, #1
 80068f4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	225c      	movs	r2, #92	; 0x5c
 80068fa:	2100      	movs	r1, #0
 80068fc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80068fe:	2323      	movs	r3, #35	; 0x23
 8006900:	18fb      	adds	r3, r7, r3
 8006902:	781b      	ldrb	r3, [r3, #0]
}
 8006904:	0018      	movs	r0, r3
 8006906:	46bd      	mov	sp, r7
 8006908:	b00a      	add	sp, #40	; 0x28
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	1dbb      	adds	r3, r7, #6
 8006918:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800691a:	2317      	movs	r3, #23
 800691c:	18fb      	adds	r3, r7, r3
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	225c      	movs	r2, #92	; 0x5c
 8006926:	5c9b      	ldrb	r3, [r3, r2]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_SPI_Transmit_IT+0x24>
 800692c:	2302      	movs	r3, #2
 800692e:	e076      	b.n	8006a1e <HAL_SPI_Transmit_IT+0x112>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	225c      	movs	r2, #92	; 0x5c
 8006934:	2101      	movs	r1, #1
 8006936:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_SPI_Transmit_IT+0x3a>
 800693e:	1dbb      	adds	r3, r7, #6
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d104      	bne.n	8006950 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8006946:	2317      	movs	r3, #23
 8006948:	18fb      	adds	r3, r7, r3
 800694a:	2201      	movs	r2, #1
 800694c:	701a      	strb	r2, [r3, #0]
    goto error;
 800694e:	e05f      	b.n	8006a10 <HAL_SPI_Transmit_IT+0x104>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	225d      	movs	r2, #93	; 0x5d
 8006954:	5c9b      	ldrb	r3, [r3, r2]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b01      	cmp	r3, #1
 800695a:	d004      	beq.n	8006966 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 800695c:	2317      	movs	r3, #23
 800695e:	18fb      	adds	r3, r7, r3
 8006960:	2202      	movs	r2, #2
 8006962:	701a      	strb	r2, [r3, #0]
    goto error;
 8006964:	e054      	b.n	8006a10 <HAL_SPI_Transmit_IT+0x104>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	225d      	movs	r2, #93	; 0x5d
 800696a:	2103      	movs	r1, #3
 800696c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1dba      	adds	r2, r7, #6
 800697e:	8812      	ldrh	r2, [r2, #0]
 8006980:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1dba      	adds	r2, r7, #6
 8006986:	8812      	ldrh	r2, [r2, #0]
 8006988:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2244      	movs	r2, #68	; 0x44
 8006994:	2100      	movs	r1, #0
 8006996:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2246      	movs	r2, #70	; 0x46
 800699c:	2100      	movs	r1, #0
 800699e:	5299      	strh	r1, [r3, r2]
  hspi->RxISR       = NULL;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	23e0      	movs	r3, #224	; 0xe0
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d903      	bls.n	80069ba <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4a1c      	ldr	r2, [pc, #112]	; (8006a28 <HAL_SPI_Transmit_IT+0x11c>)
 80069b6:	651a      	str	r2, [r3, #80]	; 0x50
 80069b8:	e002      	b.n	80069c0 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4a1b      	ldr	r2, [pc, #108]	; (8006a2c <HAL_SPI_Transmit_IT+0x120>)
 80069be:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	2380      	movs	r3, #128	; 0x80
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d108      	bne.n	80069de <HAL_SPI_Transmit_IT+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2180      	movs	r1, #128	; 0x80
 80069d8:	01c9      	lsls	r1, r1, #7
 80069da:	430a      	orrs	r2, r1
 80069dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	21a0      	movs	r1, #160	; 0xa0
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2240      	movs	r2, #64	; 0x40
 80069f6:	4013      	ands	r3, r2
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	d008      	beq.n	8006a0e <HAL_SPI_Transmit_IT+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2140      	movs	r1, #64	; 0x40
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	e000      	b.n	8006a10 <HAL_SPI_Transmit_IT+0x104>
  }

error :
 8006a0e:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	225c      	movs	r2, #92	; 0x5c
 8006a14:	2100      	movs	r1, #0
 8006a16:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006a18:	2317      	movs	r3, #23
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	781b      	ldrb	r3, [r3, #0]
}
 8006a1e:	0018      	movs	r0, r3
 8006a20:	46bd      	mov	sp, r7
 8006a22:	b006      	add	sp, #24
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	0800728d 	.word	0x0800728d
 8006a2c:	08007245 	.word	0x08007245

08006a30 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	1dbb      	adds	r3, r7, #6
 8006a3c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a3e:	2317      	movs	r3, #23
 8006a40:	18fb      	adds	r3, r7, r3
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d112      	bne.n	8006a74 <HAL_SPI_Receive_IT+0x44>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	2382      	movs	r3, #130	; 0x82
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d10c      	bne.n	8006a74 <HAL_SPI_Receive_IT+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	225d      	movs	r2, #93	; 0x5d
 8006a5e:	2104      	movs	r1, #4
 8006a60:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006a62:	1dbb      	adds	r3, r7, #6
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	68b9      	ldr	r1, [r7, #8]
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f89c 	bl	8006ba8 <HAL_SPI_TransmitReceive_IT>
 8006a70:	0003      	movs	r3, r0
 8006a72:	e08d      	b.n	8006b90 <HAL_SPI_Receive_IT+0x160>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	225c      	movs	r2, #92	; 0x5c
 8006a78:	5c9b      	ldrb	r3, [r3, r2]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_SPI_Receive_IT+0x52>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e086      	b.n	8006b90 <HAL_SPI_Receive_IT+0x160>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	225c      	movs	r2, #92	; 0x5c
 8006a86:	2101      	movs	r1, #1
 8006a88:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	225d      	movs	r2, #93	; 0x5d
 8006a8e:	5c9b      	ldrb	r3, [r3, r2]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d004      	beq.n	8006aa0 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8006a96:	2317      	movs	r3, #23
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	701a      	strb	r2, [r3, #0]
    goto error;
 8006a9e:	e070      	b.n	8006b82 <HAL_SPI_Receive_IT+0x152>
  }

  if ((pData == NULL) || (Size == 0U))
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_SPI_Receive_IT+0x7e>
 8006aa6:	1dbb      	adds	r3, r7, #6
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <HAL_SPI_Receive_IT+0x88>
  {
    errorcode = HAL_ERROR;
 8006aae:	2317      	movs	r3, #23
 8006ab0:	18fb      	adds	r3, r7, r3
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ab6:	e064      	b.n	8006b82 <HAL_SPI_Receive_IT+0x152>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	225d      	movs	r2, #93	; 0x5d
 8006abc:	2104      	movs	r1, #4
 8006abe:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	1dba      	adds	r2, r7, #6
 8006ad0:	2144      	movs	r1, #68	; 0x44
 8006ad2:	8812      	ldrh	r2, [r2, #0]
 8006ad4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1dba      	adds	r2, r7, #6
 8006ada:	2146      	movs	r1, #70	; 0x46
 8006adc:	8812      	ldrh	r2, [r2, #0]
 8006ade:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	23e0      	movs	r3, #224	; 0xe0
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d90b      	bls.n	8006b1c <HAL_SPI_Receive_IT+0xec>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4922      	ldr	r1, [pc, #136]	; (8006b98 <HAL_SPI_Receive_IT+0x168>)
 8006b10:	400a      	ands	r2, r1
 8006b12:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4a21      	ldr	r2, [pc, #132]	; (8006b9c <HAL_SPI_Receive_IT+0x16c>)
 8006b18:	64da      	str	r2, [r3, #76]	; 0x4c
 8006b1a:	e00b      	b.n	8006b34 <HAL_SPI_Receive_IT+0x104>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2180      	movs	r1, #128	; 0x80
 8006b28:	0149      	lsls	r1, r1, #5
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4a1b      	ldr	r2, [pc, #108]	; (8006ba0 <HAL_SPI_Receive_IT+0x170>)
 8006b32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	2380      	movs	r3, #128	; 0x80
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d107      	bne.n	8006b50 <HAL_SPI_Receive_IT+0x120>
  {
    SPI_1LINE_RX(hspi);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4916      	ldr	r1, [pc, #88]	; (8006ba4 <HAL_SPI_Receive_IT+0x174>)
 8006b4c:	400a      	ands	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2160      	movs	r1, #96	; 0x60
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2240      	movs	r2, #64	; 0x40
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2b40      	cmp	r3, #64	; 0x40
 8006b6c:	d008      	beq.n	8006b80 <HAL_SPI_Receive_IT+0x150>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2140      	movs	r1, #64	; 0x40
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e000      	b.n	8006b82 <HAL_SPI_Receive_IT+0x152>
  }

error :
 8006b80:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	225c      	movs	r2, #92	; 0x5c
 8006b86:	2100      	movs	r1, #0
 8006b88:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006b8a:	2317      	movs	r3, #23
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	781b      	ldrb	r3, [r3, #0]
}
 8006b90:	0018      	movs	r0, r3
 8006b92:	46bd      	mov	sp, r7
 8006b94:	b006      	add	sp, #24
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	ffffefff 	.word	0xffffefff
 8006b9c:	080071f7 	.word	0x080071f7
 8006ba0:	080071a5 	.word	0x080071a5
 8006ba4:	ffffbfff 	.word	0xffffbfff

08006ba8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	1cbb      	adds	r3, r7, #2
 8006bb8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006bba:	2317      	movs	r3, #23
 8006bbc:	18fb      	adds	r3, r7, r3
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	225c      	movs	r2, #92	; 0x5c
 8006bc6:	5c9b      	ldrb	r3, [r3, r2]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_SPI_TransmitReceive_IT+0x28>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e0a6      	b.n	8006d1e <HAL_SPI_TransmitReceive_IT+0x176>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	225c      	movs	r2, #92	; 0x5c
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006bd8:	2016      	movs	r0, #22
 8006bda:	183b      	adds	r3, r7, r0
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	215d      	movs	r1, #93	; 0x5d
 8006be0:	5c52      	ldrb	r2, [r2, r1]
 8006be2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bea:	183b      	adds	r3, r7, r0
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d012      	beq.n	8006c18 <HAL_SPI_TransmitReceive_IT+0x70>
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	2382      	movs	r3, #130	; 0x82
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d108      	bne.n	8006c0e <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d104      	bne.n	8006c0e <HAL_SPI_TransmitReceive_IT+0x66>
 8006c04:	2316      	movs	r3, #22
 8006c06:	18fb      	adds	r3, r7, r3
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d004      	beq.n	8006c18 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8006c0e:	2317      	movs	r3, #23
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	2202      	movs	r2, #2
 8006c14:	701a      	strb	r2, [r3, #0]
    goto error;
 8006c16:	e07b      	b.n	8006d10 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d006      	beq.n	8006c2c <HAL_SPI_TransmitReceive_IT+0x84>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_SPI_TransmitReceive_IT+0x84>
 8006c24:	1cbb      	adds	r3, r7, #2
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d104      	bne.n	8006c36 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8006c2c:	2317      	movs	r3, #23
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	2201      	movs	r2, #1
 8006c32:	701a      	strb	r2, [r3, #0]
    goto error;
 8006c34:	e06c      	b.n	8006d10 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	225d      	movs	r2, #93	; 0x5d
 8006c3a:	5c9b      	ldrb	r3, [r3, r2]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d003      	beq.n	8006c4a <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	225d      	movs	r2, #93	; 0x5d
 8006c46:	2105      	movs	r1, #5
 8006c48:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	1cba      	adds	r2, r7, #2
 8006c5a:	8812      	ldrh	r2, [r2, #0]
 8006c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1cba      	adds	r2, r7, #2
 8006c62:	8812      	ldrh	r2, [r2, #0]
 8006c64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	1cba      	adds	r2, r7, #2
 8006c70:	2144      	movs	r1, #68	; 0x44
 8006c72:	8812      	ldrh	r2, [r2, #0]
 8006c74:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	1cba      	adds	r2, r7, #2
 8006c7a:	2146      	movs	r1, #70	; 0x46
 8006c7c:	8812      	ldrh	r2, [r2, #0]
 8006c7e:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	23e0      	movs	r3, #224	; 0xe0
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d906      	bls.n	8006c9a <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a26      	ldr	r2, [pc, #152]	; (8006d28 <HAL_SPI_TransmitReceive_IT+0x180>)
 8006c90:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4a25      	ldr	r2, [pc, #148]	; (8006d2c <HAL_SPI_TransmitReceive_IT+0x184>)
 8006c96:	651a      	str	r2, [r3, #80]	; 0x50
 8006c98:	e005      	b.n	8006ca6 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	4a24      	ldr	r2, [pc, #144]	; (8006d30 <HAL_SPI_TransmitReceive_IT+0x188>)
 8006c9e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4a24      	ldr	r2, [pc, #144]	; (8006d34 <HAL_SPI_TransmitReceive_IT+0x18c>)
 8006ca4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	23e0      	movs	r3, #224	; 0xe0
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d803      	bhi.n	8006cba <HAL_SPI_TransmitReceive_IT+0x112>
 8006cb2:	1cbb      	adds	r3, r7, #2
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d908      	bls.n	8006ccc <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	491c      	ldr	r1, [pc, #112]	; (8006d38 <HAL_SPI_TransmitReceive_IT+0x190>)
 8006cc6:	400a      	ands	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	e008      	b.n	8006cde <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2180      	movs	r1, #128	; 0x80
 8006cd8:	0149      	lsls	r1, r1, #5
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	21e0      	movs	r1, #224	; 0xe0
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2240      	movs	r2, #64	; 0x40
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	2b40      	cmp	r3, #64	; 0x40
 8006cfa:	d008      	beq.n	8006d0e <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2140      	movs	r1, #64	; 0x40
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	e000      	b.n	8006d10 <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 8006d0e:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	225c      	movs	r2, #92	; 0x5c
 8006d14:	2100      	movs	r1, #0
 8006d16:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006d18:	2317      	movs	r3, #23
 8006d1a:	18fb      	adds	r3, r7, r3
 8006d1c:	781b      	ldrb	r3, [r3, #0]
}
 8006d1e:	0018      	movs	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b006      	add	sp, #24
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	080070db 	.word	0x080070db
 8006d2c:	08007143 	.word	0x08007143
 8006d30:	08006f85 	.word	0x08006f85
 8006d34:	08007047 	.word	0x08007047
 8006d38:	ffffefff 	.word	0xffffefff

08006d3c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	001a      	movs	r2, r3
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d10f      	bne.n	8006d80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	2201      	movs	r2, #1
 8006d64:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d66:	d00b      	beq.n	8006d80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	099b      	lsrs	r3, r3, #6
 8006d6c:	001a      	movs	r2, r3
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4013      	ands	r3, r2
 8006d72:	d005      	beq.n	8006d80 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	0010      	movs	r0, r2
 8006d7c:	4798      	blx	r3
    return;
 8006d7e:	e0d6      	b.n	8006f2e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	001a      	movs	r2, r3
 8006d86:	2301      	movs	r3, #1
 8006d88:	4013      	ands	r3, r2
 8006d8a:	d00b      	beq.n	8006da4 <HAL_SPI_IRQHandler+0x68>
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	09db      	lsrs	r3, r3, #7
 8006d90:	001a      	movs	r2, r3
 8006d92:	2301      	movs	r3, #1
 8006d94:	4013      	ands	r3, r2
 8006d96:	d005      	beq.n	8006da4 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	0010      	movs	r0, r2
 8006da0:	4798      	blx	r3
    return;
 8006da2:	e0c4      	b.n	8006f2e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	001a      	movs	r2, r3
 8006daa:	2301      	movs	r3, #1
 8006dac:	4013      	ands	r3, r2
 8006dae:	d10c      	bne.n	8006dca <HAL_SPI_IRQHandler+0x8e>
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	099b      	lsrs	r3, r3, #6
 8006db4:	001a      	movs	r2, r3
 8006db6:	2301      	movs	r3, #1
 8006db8:	4013      	ands	r3, r2
 8006dba:	d106      	bne.n	8006dca <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	0a1b      	lsrs	r3, r3, #8
 8006dc0:	001a      	movs	r2, r3
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	d100      	bne.n	8006dca <HAL_SPI_IRQHandler+0x8e>
 8006dc8:	e0b1      	b.n	8006f2e <HAL_SPI_IRQHandler+0x1f2>
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	001a      	movs	r2, r3
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	d100      	bne.n	8006dd8 <HAL_SPI_IRQHandler+0x9c>
 8006dd6:	e0aa      	b.n	8006f2e <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	099b      	lsrs	r3, r3, #6
 8006ddc:	001a      	movs	r2, r3
 8006dde:	2301      	movs	r3, #1
 8006de0:	4013      	ands	r3, r2
 8006de2:	d023      	beq.n	8006e2c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	225d      	movs	r2, #93	; 0x5d
 8006de8:	5c9b      	ldrb	r3, [r3, r2]
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d011      	beq.n	8006e14 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df4:	2204      	movs	r2, #4
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	e00b      	b.n	8006e2c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e14:	2300      	movs	r3, #0
 8006e16:	613b      	str	r3, [r7, #16]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	693b      	ldr	r3, [r7, #16]
        return;
 8006e2a:	e080      	b.n	8006f2e <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	095b      	lsrs	r3, r3, #5
 8006e30:	001a      	movs	r2, r3
 8006e32:	2301      	movs	r3, #1
 8006e34:	4013      	ands	r3, r2
 8006e36:	d014      	beq.n	8006e62 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2140      	movs	r1, #64	; 0x40
 8006e5c:	438a      	bics	r2, r1
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	0a1b      	lsrs	r3, r3, #8
 8006e66:	001a      	movs	r2, r3
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	d00c      	beq.n	8006e88 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e72:	2208      	movs	r2, #8
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60bb      	str	r3, [r7, #8]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	60bb      	str	r3, [r7, #8]
 8006e86:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d04d      	beq.n	8006f2c <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	21e0      	movs	r1, #224	; 0xe0
 8006e9c:	438a      	bics	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	225d      	movs	r2, #93	; 0x5d
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	4013      	ands	r3, r2
 8006eae:	d103      	bne.n	8006eb8 <HAL_SPI_IRQHandler+0x17c>
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	d032      	beq.n	8006f1e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2103      	movs	r1, #3
 8006ec4:	438a      	bics	r2, r1
 8006ec6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d010      	beq.n	8006ef2 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed4:	4a17      	ldr	r2, [pc, #92]	; (8006f34 <HAL_SPI_IRQHandler+0x1f8>)
 8006ed6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006edc:	0018      	movs	r0, r3
 8006ede:	f7fd fbe1 	bl	80046a4 <HAL_DMA_Abort_IT>
 8006ee2:	1e03      	subs	r3, r0, #0
 8006ee4:	d005      	beq.n	8006ef2 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eea:	2240      	movs	r2, #64	; 0x40
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d016      	beq.n	8006f28 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efe:	4a0d      	ldr	r2, [pc, #52]	; (8006f34 <HAL_SPI_IRQHandler+0x1f8>)
 8006f00:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	0018      	movs	r0, r3
 8006f08:	f7fd fbcc 	bl	80046a4 <HAL_DMA_Abort_IT>
 8006f0c:	1e03      	subs	r3, r0, #0
 8006f0e:	d00b      	beq.n	8006f28 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f14:	2240      	movs	r2, #64	; 0x40
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006f1c:	e004      	b.n	8006f28 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	0018      	movs	r0, r3
 8006f22:	f000 f811 	bl	8006f48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006f26:	e000      	b.n	8006f2a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006f28:	46c0      	nop			; (mov r8, r8)
    return;
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	46c0      	nop			; (mov r8, r8)
  }
}
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b008      	add	sp, #32
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	08006f59 	.word	0x08006f59

08006f38 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006f40:	46c0      	nop			; (mov r8, r8)
 8006f42:	46bd      	mov	sp, r7
 8006f44:	b002      	add	sp, #8
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006f50:	46c0      	nop			; (mov r8, r8)
 8006f52:	46bd      	mov	sp, r7
 8006f54:	b002      	add	sp, #8
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2246      	movs	r2, #70	; 0x46
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	0018      	movs	r0, r3
 8006f78:	f7ff ffe6 	bl	8006f48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	b004      	add	sp, #16
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2246      	movs	r2, #70	; 0x46
 8006f90:	5a9b      	ldrh	r3, [r3, r2]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d924      	bls.n	8006fe2 <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	b292      	uxth	r2, r2
 8006fa4:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	1c9a      	adds	r2, r3, #2
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2246      	movs	r2, #70	; 0x46
 8006fb4:	5a9b      	ldrh	r3, [r3, r2]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b02      	subs	r3, #2
 8006fba:	b299      	uxth	r1, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2246      	movs	r2, #70	; 0x46
 8006fc0:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2246      	movs	r2, #70	; 0x46
 8006fc6:	5a9b      	ldrh	r3, [r3, r2]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d120      	bne.n	8007010 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2180      	movs	r1, #128	; 0x80
 8006fda:	0149      	lsls	r1, r1, #5
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	605a      	str	r2, [r3, #4]
 8006fe0:	e016      	b.n	8007010 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	330c      	adds	r3, #12
 8006fe8:	001a      	movs	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	7812      	ldrb	r2, [r2, #0]
 8006ff0:	b2d2      	uxtb	r2, r2
 8006ff2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2246      	movs	r2, #70	; 0x46
 8007002:	5a9b      	ldrh	r3, [r3, r2]
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b299      	uxth	r1, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2246      	movs	r2, #70	; 0x46
 800700e:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2246      	movs	r2, #70	; 0x46
 8007014:	5a9b      	ldrh	r3, [r3, r2]
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d110      	bne.n	800703e <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2160      	movs	r1, #96	; 0x60
 8007028:	438a      	bics	r2, r1
 800702a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d103      	bne.n	800703e <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	0018      	movs	r0, r3
 800703a:	f000 fad3 	bl	80075e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800703e:	46c0      	nop			; (mov r8, r8)
 8007040:	46bd      	mov	sp, r7
 8007042:	b002      	add	sp, #8
 8007044:	bd80      	pop	{r7, pc}

08007046 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b01      	cmp	r3, #1
 8007056:	d912      	bls.n	800707e <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	881a      	ldrh	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	1c9a      	adds	r2, r3, #2
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b02      	subs	r3, #2
 8007076:	b29a      	uxth	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800707c:	e012      	b.n	80070a4 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	330c      	adds	r3, #12
 8007088:	7812      	ldrb	r2, [r2, #0]
 800708a:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800709a:	b29b      	uxth	r3, r3
 800709c:	3b01      	subs	r3, #1
 800709e:	b29a      	uxth	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d111      	bne.n	80070d2 <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2180      	movs	r1, #128	; 0x80
 80070ba:	438a      	bics	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2246      	movs	r2, #70	; 0x46
 80070c2:	5a9b      	ldrh	r3, [r3, r2]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d103      	bne.n	80070d2 <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	0018      	movs	r0, r3
 80070ce:	f000 fa89 	bl	80075e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	46bd      	mov	sp, r7
 80070d6:	b002      	add	sp, #8
 80070d8:	bd80      	pop	{r7, pc}

080070da <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68da      	ldr	r2, [r3, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	b292      	uxth	r2, r2
 80070ee:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f4:	1c9a      	adds	r2, r3, #2
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2246      	movs	r2, #70	; 0x46
 80070fe:	5a9b      	ldrh	r3, [r3, r2]
 8007100:	b29b      	uxth	r3, r3
 8007102:	3b01      	subs	r3, #1
 8007104:	b299      	uxth	r1, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2246      	movs	r2, #70	; 0x46
 800710a:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2246      	movs	r2, #70	; 0x46
 8007110:	5a9b      	ldrh	r3, [r3, r2]
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d110      	bne.n	800713a <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2140      	movs	r1, #64	; 0x40
 8007124:	438a      	bics	r2, r1
 8007126:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d103      	bne.n	800713a <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0018      	movs	r0, r3
 8007136:	f000 fa55 	bl	80075e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	46bd      	mov	sp, r7
 800713e:	b002      	add	sp, #8
 8007140:	bd80      	pop	{r7, pc}

08007142 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	881a      	ldrh	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715a:	1c9a      	adds	r2, r3, #2
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d111      	bne.n	800719c <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2180      	movs	r1, #128	; 0x80
 8007184:	438a      	bics	r2, r1
 8007186:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2246      	movs	r2, #70	; 0x46
 800718c:	5a9b      	ldrh	r3, [r3, r2]
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d103      	bne.n	800719c <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	0018      	movs	r0, r3
 8007198:	f000 fa24 	bl	80075e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800719c:	46c0      	nop			; (mov r8, r8)
 800719e:	46bd      	mov	sp, r7
 80071a0:	b002      	add	sp, #8
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	001a      	movs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	7812      	ldrb	r2, [r2, #0]
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2246      	movs	r2, #70	; 0x46
 80071cc:	5a9b      	ldrh	r3, [r3, r2]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b299      	uxth	r1, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2246      	movs	r2, #70	; 0x46
 80071d8:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2246      	movs	r2, #70	; 0x46
 80071de:	5a9b      	ldrh	r3, [r3, r2]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	0018      	movs	r0, r3
 80071ea:	f000 fa41 	bl	8007670 <SPI_CloseRx_ISR>
  }
}
 80071ee:	46c0      	nop			; (mov r8, r8)
 80071f0:	46bd      	mov	sp, r7
 80071f2:	b002      	add	sp, #8
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	b292      	uxth	r2, r2
 800720a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	1c9a      	adds	r2, r3, #2
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2246      	movs	r2, #70	; 0x46
 800721a:	5a9b      	ldrh	r3, [r3, r2]
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	b299      	uxth	r1, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2246      	movs	r2, #70	; 0x46
 8007226:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2246      	movs	r2, #70	; 0x46
 800722c:	5a9b      	ldrh	r3, [r3, r2]
 800722e:	b29b      	uxth	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d103      	bne.n	800723c <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	0018      	movs	r0, r3
 8007238:	f000 fa1a 	bl	8007670 <SPI_CloseRx_ISR>
  }
}
 800723c:	46c0      	nop			; (mov r8, r8)
 800723e:	46bd      	mov	sp, r7
 8007240:	b002      	add	sp, #8
 8007242:	bd80      	pop	{r7, pc}

08007244 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	330c      	adds	r3, #12
 8007256:	7812      	ldrb	r2, [r2, #0]
 8007258:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007276:	b29b      	uxth	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d103      	bne.n	8007284 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	0018      	movs	r0, r3
 8007280:	f000 fa27 	bl	80076d2 <SPI_CloseTx_ISR>
  }
}
 8007284:	46c0      	nop			; (mov r8, r8)
 8007286:	46bd      	mov	sp, r7
 8007288:	b002      	add	sp, #8
 800728a:	bd80      	pop	{r7, pc}

0800728c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007298:	881a      	ldrh	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a4:	1c9a      	adds	r2, r3, #2
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	0018      	movs	r0, r3
 80072c6:	f000 fa04 	bl	80076d2 <SPI_CloseTx_ISR>
  }
}
 80072ca:	46c0      	nop			; (mov r8, r8)
 80072cc:	46bd      	mov	sp, r7
 80072ce:	b002      	add	sp, #8
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	1dfb      	adds	r3, r7, #7
 80072e2:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072e4:	e050      	b.n	8007388 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	3301      	adds	r3, #1
 80072ea:	d04d      	beq.n	8007388 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80072ec:	f7fc fc52 	bl	8003b94 <HAL_GetTick>
 80072f0:	0002      	movs	r2, r0
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d902      	bls.n	8007302 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d142      	bne.n	8007388 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	21e0      	movs	r1, #224	; 0xe0
 800730e:	438a      	bics	r2, r1
 8007310:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	2382      	movs	r3, #130	; 0x82
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	429a      	cmp	r2, r3
 800731c:	d113      	bne.n	8007346 <SPI_WaitFlagStateUntilTimeout+0x72>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	2380      	movs	r3, #128	; 0x80
 8007324:	021b      	lsls	r3, r3, #8
 8007326:	429a      	cmp	r2, r3
 8007328:	d005      	beq.n	8007336 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	2380      	movs	r3, #128	; 0x80
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	429a      	cmp	r2, r3
 8007334:	d107      	bne.n	8007346 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2140      	movs	r1, #64	; 0x40
 8007342:	438a      	bics	r2, r1
 8007344:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800734a:	2380      	movs	r3, #128	; 0x80
 800734c:	019b      	lsls	r3, r3, #6
 800734e:	429a      	cmp	r2, r3
 8007350:	d110      	bne.n	8007374 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4914      	ldr	r1, [pc, #80]	; (80073b0 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800735e:	400a      	ands	r2, r1
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2180      	movs	r1, #128	; 0x80
 800736e:	0189      	lsls	r1, r1, #6
 8007370:	430a      	orrs	r2, r1
 8007372:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	225d      	movs	r2, #93	; 0x5d
 8007378:	2101      	movs	r1, #1
 800737a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	225c      	movs	r2, #92	; 0x5c
 8007380:	2100      	movs	r1, #0
 8007382:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e00f      	b.n	80073a8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	4013      	ands	r3, r2
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	425a      	negs	r2, r3
 8007398:	4153      	adcs	r3, r2
 800739a:	b2db      	uxtb	r3, r3
 800739c:	001a      	movs	r2, r3
 800739e:	1dfb      	adds	r3, r7, #7
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d19f      	bne.n	80072e6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	0018      	movs	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	b004      	add	sp, #16
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	ffffdfff 	.word	0xffffdfff

080073b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80073c2:	e05c      	b.n	800747e <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	23c0      	movs	r3, #192	; 0xc0
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d106      	bne.n	80073dc <SPI_WaitFifoStateUntilTimeout+0x28>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d103      	bne.n	80073dc <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	330c      	adds	r3, #12
 80073da:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	3301      	adds	r3, #1
 80073e0:	d04d      	beq.n	800747e <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80073e2:	f7fc fbd7 	bl	8003b94 <HAL_GetTick>
 80073e6:	0002      	movs	r2, r0
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d902      	bls.n	80073f8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d142      	bne.n	800747e <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	21e0      	movs	r1, #224	; 0xe0
 8007404:	438a      	bics	r2, r1
 8007406:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	2382      	movs	r3, #130	; 0x82
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	429a      	cmp	r2, r3
 8007412:	d113      	bne.n	800743c <SPI_WaitFifoStateUntilTimeout+0x88>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	2380      	movs	r3, #128	; 0x80
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	429a      	cmp	r2, r3
 800741e:	d005      	beq.n	800742c <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	2380      	movs	r3, #128	; 0x80
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	429a      	cmp	r2, r3
 800742a:	d107      	bne.n	800743c <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2140      	movs	r1, #64	; 0x40
 8007438:	438a      	bics	r2, r1
 800743a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007440:	2380      	movs	r3, #128	; 0x80
 8007442:	019b      	lsls	r3, r3, #6
 8007444:	429a      	cmp	r2, r3
 8007446:	d110      	bne.n	800746a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4911      	ldr	r1, [pc, #68]	; (8007498 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8007454:	400a      	ands	r2, r1
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2180      	movs	r1, #128	; 0x80
 8007464:	0189      	lsls	r1, r1, #6
 8007466:	430a      	orrs	r2, r1
 8007468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	225d      	movs	r2, #93	; 0x5d
 800746e:	2101      	movs	r1, #1
 8007470:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	225c      	movs	r2, #92	; 0x5c
 8007476:	2100      	movs	r1, #0
 8007478:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e008      	b.n	8007490 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	4013      	ands	r3, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	429a      	cmp	r2, r3
 800748c:	d19a      	bne.n	80073c4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	0018      	movs	r0, r3
 8007492:	46bd      	mov	sp, r7
 8007494:	b004      	add	sp, #16
 8007496:	bd80      	pop	{r7, pc}
 8007498:	ffffdfff 	.word	0xffffdfff

0800749c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	2382      	movs	r3, #130	; 0x82
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d113      	bne.n	80074dc <SPI_EndRxTransaction+0x40>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	2380      	movs	r3, #128	; 0x80
 80074ba:	021b      	lsls	r3, r3, #8
 80074bc:	429a      	cmp	r2, r3
 80074be:	d005      	beq.n	80074cc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	2380      	movs	r3, #128	; 0x80
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d107      	bne.n	80074dc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2140      	movs	r1, #64	; 0x40
 80074d8:	438a      	bics	r2, r1
 80074da:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	0013      	movs	r3, r2
 80074e6:	2200      	movs	r2, #0
 80074e8:	2180      	movs	r1, #128	; 0x80
 80074ea:	f7ff fef3 	bl	80072d4 <SPI_WaitFlagStateUntilTimeout>
 80074ee:	1e03      	subs	r3, r0, #0
 80074f0:	d007      	beq.n	8007502 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f6:	2220      	movs	r2, #32
 80074f8:	431a      	orrs	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e026      	b.n	8007550 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	2382      	movs	r3, #130	; 0x82
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	429a      	cmp	r2, r3
 800750c:	d11f      	bne.n	800754e <SPI_EndRxTransaction+0xb2>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	2380      	movs	r3, #128	; 0x80
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	429a      	cmp	r2, r3
 8007518:	d005      	beq.n	8007526 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	2380      	movs	r3, #128	; 0x80
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	429a      	cmp	r2, r3
 8007524:	d113      	bne.n	800754e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	23c0      	movs	r3, #192	; 0xc0
 800752a:	00d9      	lsls	r1, r3, #3
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	0013      	movs	r3, r2
 8007534:	2200      	movs	r2, #0
 8007536:	f7ff ff3d 	bl	80073b4 <SPI_WaitFifoStateUntilTimeout>
 800753a:	1e03      	subs	r3, r0, #0
 800753c:	d007      	beq.n	800754e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007542:	2220      	movs	r2, #32
 8007544:	431a      	orrs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e000      	b.n	8007550 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	0018      	movs	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	b004      	add	sp, #16
 8007556:	bd80      	pop	{r7, pc}

08007558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	23c0      	movs	r3, #192	; 0xc0
 8007568:	0159      	lsls	r1, r3, #5
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	0013      	movs	r3, r2
 8007572:	2200      	movs	r2, #0
 8007574:	f7ff ff1e 	bl	80073b4 <SPI_WaitFifoStateUntilTimeout>
 8007578:	1e03      	subs	r3, r0, #0
 800757a:	d007      	beq.n	800758c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007580:	2220      	movs	r2, #32
 8007582:	431a      	orrs	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e027      	b.n	80075dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	0013      	movs	r3, r2
 8007596:	2200      	movs	r2, #0
 8007598:	2180      	movs	r1, #128	; 0x80
 800759a:	f7ff fe9b 	bl	80072d4 <SPI_WaitFlagStateUntilTimeout>
 800759e:	1e03      	subs	r3, r0, #0
 80075a0:	d007      	beq.n	80075b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a6:	2220      	movs	r2, #32
 80075a8:	431a      	orrs	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e014      	b.n	80075dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	23c0      	movs	r3, #192	; 0xc0
 80075b6:	00d9      	lsls	r1, r3, #3
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	0013      	movs	r3, r2
 80075c0:	2200      	movs	r2, #0
 80075c2:	f7ff fef7 	bl	80073b4 <SPI_WaitFifoStateUntilTimeout>
 80075c6:	1e03      	subs	r3, r0, #0
 80075c8:	d007      	beq.n	80075da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ce:	2220      	movs	r2, #32
 80075d0:	431a      	orrs	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e000      	b.n	80075dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	0018      	movs	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	b004      	add	sp, #16
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80075ec:	f7fc fad2 	bl	8003b94 <HAL_GetTick>
 80075f0:	0003      	movs	r3, r0
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2120      	movs	r1, #32
 8007600:	438a      	bics	r2, r1
 8007602:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2164      	movs	r1, #100	; 0x64
 800760a:	0018      	movs	r0, r3
 800760c:	f7ff ffa4 	bl	8007558 <SPI_EndRxTxTransaction>
 8007610:	1e03      	subs	r3, r0, #0
 8007612:	d005      	beq.n	8007620 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007618:	2220      	movs	r2, #32
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007624:	2b00      	cmp	r3, #0
 8007626:	d117      	bne.n	8007658 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	225d      	movs	r2, #93	; 0x5d
 800762c:	5c9b      	ldrb	r3, [r3, r2]
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b04      	cmp	r3, #4
 8007632:	d108      	bne.n	8007646 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	225d      	movs	r2, #93	; 0x5d
 8007638:	2101      	movs	r1, #1
 800763a:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	0018      	movs	r0, r3
 8007640:	f7fc f982 	bl	8003948 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007644:	e010      	b.n	8007668 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	225d      	movs	r2, #93	; 0x5d
 800764a:	2101      	movs	r1, #1
 800764c:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	0018      	movs	r0, r3
 8007652:	f7ff fc71 	bl	8006f38 <HAL_SPI_TxRxCpltCallback>
}
 8007656:	e007      	b.n	8007668 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	225d      	movs	r2, #93	; 0x5d
 800765c:	2101      	movs	r1, #1
 800765e:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	0018      	movs	r0, r3
 8007664:	f7ff fc70 	bl	8006f48 <HAL_SPI_ErrorCallback>
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	46bd      	mov	sp, r7
 800766c:	b004      	add	sp, #16
 800766e:	bd80      	pop	{r7, pc}

08007670 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2160      	movs	r1, #96	; 0x60
 8007684:	438a      	bics	r2, r1
 8007686:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007688:	f7fc fa84 	bl	8003b94 <HAL_GetTick>
 800768c:	0002      	movs	r2, r0
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2164      	movs	r1, #100	; 0x64
 8007692:	0018      	movs	r0, r3
 8007694:	f7ff ff02 	bl	800749c <SPI_EndRxTransaction>
 8007698:	1e03      	subs	r3, r0, #0
 800769a:	d005      	beq.n	80076a8 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a0:	2220      	movs	r2, #32
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	225d      	movs	r2, #93	; 0x5d
 80076ac:	2101      	movs	r1, #1
 80076ae:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	0018      	movs	r0, r3
 80076bc:	f7fc f944 	bl	8003948 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80076c0:	e003      	b.n	80076ca <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	0018      	movs	r0, r3
 80076c6:	f7ff fc3f 	bl	8006f48 <HAL_SPI_ErrorCallback>
}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	46bd      	mov	sp, r7
 80076ce:	b002      	add	sp, #8
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076da:	f7fc fa5b 	bl	8003b94 <HAL_GetTick>
 80076de:	0003      	movs	r3, r0
 80076e0:	60fb      	str	r3, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	21a0      	movs	r1, #160	; 0xa0
 80076ee:	438a      	bics	r2, r1
 80076f0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2164      	movs	r1, #100	; 0x64
 80076f8:	0018      	movs	r0, r3
 80076fa:	f7ff ff2d 	bl	8007558 <SPI_EndRxTxTransaction>
 80076fe:	1e03      	subs	r3, r0, #0
 8007700:	d005      	beq.n	800770e <SPI_CloseTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007706:	2220      	movs	r2, #32
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10a      	bne.n	800772c <SPI_CloseTx_ISR+0x5a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007716:	2300      	movs	r3, #0
 8007718:	60bb      	str	r3, [r7, #8]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	60bb      	str	r3, [r7, #8]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	60bb      	str	r3, [r7, #8]
 800772a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	225d      	movs	r2, #93	; 0x5d
 8007730:	2101      	movs	r1, #1
 8007732:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <SPI_CloseTx_ISR+0x74>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	0018      	movs	r0, r3
 8007740:	f7ff fc02 	bl	8006f48 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007744:	e003      	b.n	800774e <SPI_CloseTx_ISR+0x7c>
    HAL_SPI_TxCpltCallback(hspi);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	0018      	movs	r0, r3
 800774a:	f7fc f8df 	bl	800390c <HAL_SPI_TxCpltCallback>
}
 800774e:	46c0      	nop			; (mov r8, r8)
 8007750:	46bd      	mov	sp, r7
 8007752:	b004      	add	sp, #16
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e01e      	b.n	80077a6 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	223d      	movs	r2, #61	; 0x3d
 800776c:	5c9b      	ldrb	r3, [r3, r2]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d107      	bne.n	8007784 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	223c      	movs	r2, #60	; 0x3c
 8007778:	2100      	movs	r1, #0
 800777a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	0018      	movs	r0, r3
 8007780:	f7fb ff26 	bl	80035d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	223d      	movs	r2, #61	; 0x3d
 8007788:	2102      	movs	r1, #2
 800778a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3304      	adds	r3, #4
 8007794:	0019      	movs	r1, r3
 8007796:	0010      	movs	r0, r2
 8007798:	f000 fb08 	bl	8007dac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	223d      	movs	r2, #61	; 0x3d
 80077a0:	2101      	movs	r1, #1
 80077a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	0018      	movs	r0, r3
 80077a8:	46bd      	mov	sp, r7
 80077aa:	b002      	add	sp, #8
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	223d      	movs	r2, #61	; 0x3d
 80077ba:	2102      	movs	r1, #2
 80077bc:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2207      	movs	r2, #7
 80077c6:	4013      	ands	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b06      	cmp	r3, #6
 80077ce:	d007      	beq.n	80077e0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2101      	movs	r1, #1
 80077dc:	430a      	orrs	r2, r1
 80077de:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	223d      	movs	r2, #61	; 0x3d
 80077e4:	2101      	movs	r1, #1
 80077e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	0018      	movs	r0, r3
 80077ec:	46bd      	mov	sp, r7
 80077ee:	b004      	add	sp, #16
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	223d      	movs	r2, #61	; 0x3d
 8007800:	2102      	movs	r1, #2
 8007802:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	4a0d      	ldr	r2, [pc, #52]	; (8007840 <HAL_TIM_Base_Stop+0x4c>)
 800780c:	4013      	ands	r3, r2
 800780e:	d10d      	bne.n	800782c <HAL_TIM_Base_Stop+0x38>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	4a0b      	ldr	r2, [pc, #44]	; (8007844 <HAL_TIM_Base_Stop+0x50>)
 8007818:	4013      	ands	r3, r2
 800781a:	d107      	bne.n	800782c <HAL_TIM_Base_Stop+0x38>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2101      	movs	r1, #1
 8007828:	438a      	bics	r2, r1
 800782a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	223d      	movs	r2, #61	; 0x3d
 8007830:	2101      	movs	r1, #1
 8007832:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	0018      	movs	r0, r3
 8007838:	46bd      	mov	sp, r7
 800783a:	b002      	add	sp, #8
 800783c:	bd80      	pop	{r7, pc}
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	00001111 	.word	0x00001111
 8007844:	00000444 	.word	0x00000444

08007848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2101      	movs	r1, #1
 800785c:	430a      	orrs	r2, r1
 800785e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2207      	movs	r2, #7
 8007868:	4013      	ands	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b06      	cmp	r3, #6
 8007870:	d007      	beq.n	8007882 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2101      	movs	r1, #1
 800787e:	430a      	orrs	r2, r1
 8007880:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	0018      	movs	r0, r3
 8007886:	46bd      	mov	sp, r7
 8007888:	b004      	add	sp, #16
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2101      	movs	r1, #1
 80078a0:	438a      	bics	r2, r1
 80078a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	4a0b      	ldr	r2, [pc, #44]	; (80078d8 <HAL_TIM_Base_Stop_IT+0x4c>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	d10d      	bne.n	80078cc <HAL_TIM_Base_Stop_IT+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <HAL_TIM_Base_Stop_IT+0x50>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	d107      	bne.n	80078cc <HAL_TIM_Base_Stop_IT+0x40>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2101      	movs	r1, #1
 80078c8:	438a      	bics	r2, r1
 80078ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	0018      	movs	r0, r3
 80078d0:	46bd      	mov	sp, r7
 80078d2:	b002      	add	sp, #8
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	00001111 	.word	0x00001111
 80078dc:	00000444 	.word	0x00000444

080078e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e01e      	b.n	8007930 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	223d      	movs	r2, #61	; 0x3d
 80078f6:	5c9b      	ldrb	r3, [r3, r2]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d107      	bne.n	800790e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	223c      	movs	r2, #60	; 0x3c
 8007902:	2100      	movs	r1, #0
 8007904:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	0018      	movs	r0, r3
 800790a:	f7fb fe43 	bl	8003594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	223d      	movs	r2, #61	; 0x3d
 8007912:	2102      	movs	r1, #2
 8007914:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3304      	adds	r3, #4
 800791e:	0019      	movs	r1, r3
 8007920:	0010      	movs	r0, r2
 8007922:	f000 fa43 	bl	8007dac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	223d      	movs	r2, #61	; 0x3d
 800792a:	2101      	movs	r1, #1
 800792c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	0018      	movs	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	b002      	add	sp, #8
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	2201      	movs	r2, #1
 800794a:	0018      	movs	r0, r3
 800794c:	f000 fca0 	bl	8008290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a1a      	ldr	r2, [pc, #104]	; (80079c0 <HAL_TIM_PWM_Start+0x88>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00e      	beq.n	8007978 <HAL_TIM_PWM_Start+0x40>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a19      	ldr	r2, [pc, #100]	; (80079c4 <HAL_TIM_PWM_Start+0x8c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d009      	beq.n	8007978 <HAL_TIM_PWM_Start+0x40>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a17      	ldr	r2, [pc, #92]	; (80079c8 <HAL_TIM_PWM_Start+0x90>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d004      	beq.n	8007978 <HAL_TIM_PWM_Start+0x40>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a16      	ldr	r2, [pc, #88]	; (80079cc <HAL_TIM_PWM_Start+0x94>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d101      	bne.n	800797c <HAL_TIM_PWM_Start+0x44>
 8007978:	2301      	movs	r3, #1
 800797a:	e000      	b.n	800797e <HAL_TIM_PWM_Start+0x46>
 800797c:	2300      	movs	r3, #0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d008      	beq.n	8007994 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2180      	movs	r1, #128	; 0x80
 800798e:	0209      	lsls	r1, r1, #8
 8007990:	430a      	orrs	r2, r1
 8007992:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	2207      	movs	r2, #7
 800799c:	4013      	ands	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b06      	cmp	r3, #6
 80079a4:	d007      	beq.n	80079b6 <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2101      	movs	r1, #1
 80079b2:	430a      	orrs	r2, r1
 80079b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	0018      	movs	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	b004      	add	sp, #16
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	40012c00 	.word	0x40012c00
 80079c4:	40014000 	.word	0x40014000
 80079c8:	40014400 	.word	0x40014400
 80079cc:	40014800 	.word	0x40014800

080079d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2202      	movs	r2, #2
 80079e0:	4013      	ands	r3, r2
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d124      	bne.n	8007a30 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	2202      	movs	r2, #2
 80079ee:	4013      	ands	r3, r2
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d11d      	bne.n	8007a30 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2203      	movs	r2, #3
 80079fa:	4252      	negs	r2, r2
 80079fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	d004      	beq.n	8007a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	0018      	movs	r0, r3
 8007a14:	f000 f9b2 	bl	8007d7c <HAL_TIM_IC_CaptureCallback>
 8007a18:	e007      	b.n	8007a2a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f000 f9a5 	bl	8007d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	0018      	movs	r0, r3
 8007a26:	f000 f9b1 	bl	8007d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2204      	movs	r2, #4
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	d125      	bne.n	8007a8a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2204      	movs	r2, #4
 8007a46:	4013      	ands	r3, r2
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d11e      	bne.n	8007a8a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2205      	movs	r2, #5
 8007a52:	4252      	negs	r2, r2
 8007a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	23c0      	movs	r3, #192	; 0xc0
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4013      	ands	r3, r2
 8007a68:	d004      	beq.n	8007a74 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	f000 f985 	bl	8007d7c <HAL_TIM_IC_CaptureCallback>
 8007a72:	e007      	b.n	8007a84 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	0018      	movs	r0, r3
 8007a78:	f000 f978 	bl	8007d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	0018      	movs	r0, r3
 8007a80:	f000 f984 	bl	8007d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	2208      	movs	r2, #8
 8007a92:	4013      	ands	r3, r2
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d124      	bne.n	8007ae2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	2b08      	cmp	r3, #8
 8007aa4:	d11d      	bne.n	8007ae2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2209      	movs	r2, #9
 8007aac:	4252      	negs	r2, r2
 8007aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2204      	movs	r2, #4
 8007ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	2203      	movs	r2, #3
 8007abe:	4013      	ands	r3, r2
 8007ac0:	d004      	beq.n	8007acc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f000 f959 	bl	8007d7c <HAL_TIM_IC_CaptureCallback>
 8007aca:	e007      	b.n	8007adc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f000 f94c 	bl	8007d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	f000 f958 	bl	8007d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2210      	movs	r2, #16
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b10      	cmp	r3, #16
 8007aee:	d125      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	2210      	movs	r2, #16
 8007af8:	4013      	ands	r3, r2
 8007afa:	2b10      	cmp	r3, #16
 8007afc:	d11e      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2211      	movs	r2, #17
 8007b04:	4252      	negs	r2, r2
 8007b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2208      	movs	r2, #8
 8007b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	23c0      	movs	r3, #192	; 0xc0
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4013      	ands	r3, r2
 8007b1a:	d004      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f000 f92c 	bl	8007d7c <HAL_TIM_IC_CaptureCallback>
 8007b24:	e007      	b.n	8007b36 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	0018      	movs	r0, r3
 8007b2a:	f000 f91f 	bl	8007d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	0018      	movs	r0, r3
 8007b32:	f000 f92b 	bl	8007d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2201      	movs	r2, #1
 8007b44:	4013      	ands	r3, r2
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d10f      	bne.n	8007b6a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	4013      	ands	r3, r2
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d108      	bne.n	8007b6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	4252      	negs	r2, r2
 8007b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	0018      	movs	r0, r3
 8007b66:	f7fb feb1 	bl	80038cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2280      	movs	r2, #128	; 0x80
 8007b72:	4013      	ands	r3, r2
 8007b74:	2b80      	cmp	r3, #128	; 0x80
 8007b76:	d10f      	bne.n	8007b98 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	2280      	movs	r2, #128	; 0x80
 8007b80:	4013      	ands	r3, r2
 8007b82:	2b80      	cmp	r3, #128	; 0x80
 8007b84:	d108      	bne.n	8007b98 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2281      	movs	r2, #129	; 0x81
 8007b8c:	4252      	negs	r2, r2
 8007b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	0018      	movs	r0, r3
 8007b94:	f000 fc00 	bl	8008398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	2240      	movs	r2, #64	; 0x40
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	2b40      	cmp	r3, #64	; 0x40
 8007ba4:	d10f      	bne.n	8007bc6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	2240      	movs	r2, #64	; 0x40
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b40      	cmp	r3, #64	; 0x40
 8007bb2:	d108      	bne.n	8007bc6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2241      	movs	r2, #65	; 0x41
 8007bba:	4252      	negs	r2, r2
 8007bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f000 f8eb 	bl	8007d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	4013      	ands	r3, r2
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d10f      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	4013      	ands	r3, r2
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d108      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2221      	movs	r2, #33	; 0x21
 8007be8:	4252      	negs	r2, r2
 8007bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f000 fbca 	bl	8008388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bf4:	46c0      	nop			; (mov r8, r8)
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	b002      	add	sp, #8
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	223c      	movs	r2, #60	; 0x3c
 8007c0c:	5c9b      	ldrb	r3, [r3, r2]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d101      	bne.n	8007c16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007c12:	2302      	movs	r3, #2
 8007c14:	e0a4      	b.n	8007d60 <HAL_TIM_PWM_ConfigChannel+0x164>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	223c      	movs	r2, #60	; 0x3c
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	223d      	movs	r2, #61	; 0x3d
 8007c22:	2102      	movs	r1, #2
 8007c24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d029      	beq.n	8007c80 <HAL_TIM_PWM_ConfigChannel+0x84>
 8007c2c:	d802      	bhi.n	8007c34 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8007c32:	e08c      	b.n	8007d4e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d046      	beq.n	8007cc6 <HAL_TIM_PWM_ConfigChannel+0xca>
 8007c38:	2b0c      	cmp	r3, #12
 8007c3a:	d065      	beq.n	8007d08 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8007c3c:	e087      	b.n	8007d4e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	0011      	movs	r1, r2
 8007c46:	0018      	movs	r0, r3
 8007c48:	f000 f926 	bl	8007e98 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2108      	movs	r1, #8
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2104      	movs	r1, #4
 8007c68:	438a      	bics	r2, r1
 8007c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6999      	ldr	r1, [r3, #24]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	691a      	ldr	r2, [r3, #16]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	619a      	str	r2, [r3, #24]
      break;
 8007c7e:	e066      	b.n	8007d4e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	0011      	movs	r1, r2
 8007c88:	0018      	movs	r0, r3
 8007c8a:	f000 f98d 	bl	8007fa8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699a      	ldr	r2, [r3, #24]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2180      	movs	r1, #128	; 0x80
 8007c9a:	0109      	lsls	r1, r1, #4
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699a      	ldr	r2, [r3, #24]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	492f      	ldr	r1, [pc, #188]	; (8007d68 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007cac:	400a      	ands	r2, r1
 8007cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6999      	ldr	r1, [r3, #24]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	021a      	lsls	r2, r3, #8
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	619a      	str	r2, [r3, #24]
      break;
 8007cc4:	e043      	b.n	8007d4e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	0011      	movs	r1, r2
 8007cce:	0018      	movs	r0, r3
 8007cd0:	f000 f9ee 	bl	80080b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69da      	ldr	r2, [r3, #28]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2108      	movs	r1, #8
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	69da      	ldr	r2, [r3, #28]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2104      	movs	r1, #4
 8007cf0:	438a      	bics	r2, r1
 8007cf2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69d9      	ldr	r1, [r3, #28]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	61da      	str	r2, [r3, #28]
      break;
 8007d06:	e022      	b.n	8007d4e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	0011      	movs	r1, r2
 8007d10:	0018      	movs	r0, r3
 8007d12:	f000 fa53 	bl	80081bc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2180      	movs	r1, #128	; 0x80
 8007d22:	0109      	lsls	r1, r1, #4
 8007d24:	430a      	orrs	r2, r1
 8007d26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	69da      	ldr	r2, [r3, #28]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	490d      	ldr	r1, [pc, #52]	; (8007d68 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007d34:	400a      	ands	r2, r1
 8007d36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	69d9      	ldr	r1, [r3, #28]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	021a      	lsls	r2, r3, #8
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	61da      	str	r2, [r3, #28]
      break;
 8007d4c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	223d      	movs	r2, #61	; 0x3d
 8007d52:	2101      	movs	r1, #1
 8007d54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	223c      	movs	r2, #60	; 0x3c
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	0018      	movs	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	b004      	add	sp, #16
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	fffffbff 	.word	0xfffffbff

08007d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d74:	46c0      	nop			; (mov r8, r8)
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b002      	add	sp, #8
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d84:	46c0      	nop			; (mov r8, r8)
 8007d86:	46bd      	mov	sp, r7
 8007d88:	b002      	add	sp, #8
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d94:	46c0      	nop			; (mov r8, r8)
 8007d96:	46bd      	mov	sp, r7
 8007d98:	b002      	add	sp, #8
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007da4:	46c0      	nop			; (mov r8, r8)
 8007da6:	46bd      	mov	sp, r7
 8007da8:	b002      	add	sp, #8
 8007daa:	bd80      	pop	{r7, pc}

08007dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a2f      	ldr	r2, [pc, #188]	; (8007e7c <TIM_Base_SetConfig+0xd0>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d003      	beq.n	8007dcc <TIM_Base_SetConfig+0x20>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a2e      	ldr	r2, [pc, #184]	; (8007e80 <TIM_Base_SetConfig+0xd4>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d108      	bne.n	8007dde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2270      	movs	r2, #112	; 0x70
 8007dd0:	4393      	bics	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a26      	ldr	r2, [pc, #152]	; (8007e7c <TIM_Base_SetConfig+0xd0>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d013      	beq.n	8007e0e <TIM_Base_SetConfig+0x62>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a25      	ldr	r2, [pc, #148]	; (8007e80 <TIM_Base_SetConfig+0xd4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d00f      	beq.n	8007e0e <TIM_Base_SetConfig+0x62>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a24      	ldr	r2, [pc, #144]	; (8007e84 <TIM_Base_SetConfig+0xd8>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d00b      	beq.n	8007e0e <TIM_Base_SetConfig+0x62>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a23      	ldr	r2, [pc, #140]	; (8007e88 <TIM_Base_SetConfig+0xdc>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d007      	beq.n	8007e0e <TIM_Base_SetConfig+0x62>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a22      	ldr	r2, [pc, #136]	; (8007e8c <TIM_Base_SetConfig+0xe0>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d003      	beq.n	8007e0e <TIM_Base_SetConfig+0x62>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a21      	ldr	r2, [pc, #132]	; (8007e90 <TIM_Base_SetConfig+0xe4>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d108      	bne.n	8007e20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4a20      	ldr	r2, [pc, #128]	; (8007e94 <TIM_Base_SetConfig+0xe8>)
 8007e12:	4013      	ands	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2280      	movs	r2, #128	; 0x80
 8007e24:	4393      	bics	r3, r2
 8007e26:	001a      	movs	r2, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a0c      	ldr	r2, [pc, #48]	; (8007e7c <TIM_Base_SetConfig+0xd0>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00b      	beq.n	8007e66 <TIM_Base_SetConfig+0xba>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a0d      	ldr	r2, [pc, #52]	; (8007e88 <TIM_Base_SetConfig+0xdc>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d007      	beq.n	8007e66 <TIM_Base_SetConfig+0xba>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a0c      	ldr	r2, [pc, #48]	; (8007e8c <TIM_Base_SetConfig+0xe0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d003      	beq.n	8007e66 <TIM_Base_SetConfig+0xba>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a0b      	ldr	r2, [pc, #44]	; (8007e90 <TIM_Base_SetConfig+0xe4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d103      	bne.n	8007e6e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	691a      	ldr	r2, [r3, #16]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	615a      	str	r2, [r3, #20]
}
 8007e74:	46c0      	nop			; (mov r8, r8)
 8007e76:	46bd      	mov	sp, r7
 8007e78:	b004      	add	sp, #16
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	40012c00 	.word	0x40012c00
 8007e80:	40000400 	.word	0x40000400
 8007e84:	40002000 	.word	0x40002000
 8007e88:	40014000 	.word	0x40014000
 8007e8c:	40014400 	.word	0x40014400
 8007e90:	40014800 	.word	0x40014800
 8007e94:	fffffcff 	.word	0xfffffcff

08007e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4393      	bics	r3, r2
 8007eaa:	001a      	movs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2270      	movs	r2, #112	; 0x70
 8007ec6:	4393      	bics	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2203      	movs	r2, #3
 8007ece:	4393      	bics	r3, r2
 8007ed0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	4393      	bics	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a27      	ldr	r2, [pc, #156]	; (8007f90 <TIM_OC1_SetConfig+0xf8>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00b      	beq.n	8007f0e <TIM_OC1_SetConfig+0x76>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a26      	ldr	r2, [pc, #152]	; (8007f94 <TIM_OC1_SetConfig+0xfc>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d007      	beq.n	8007f0e <TIM_OC1_SetConfig+0x76>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a25      	ldr	r2, [pc, #148]	; (8007f98 <TIM_OC1_SetConfig+0x100>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d003      	beq.n	8007f0e <TIM_OC1_SetConfig+0x76>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a24      	ldr	r2, [pc, #144]	; (8007f9c <TIM_OC1_SetConfig+0x104>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d10c      	bne.n	8007f28 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2208      	movs	r2, #8
 8007f12:	4393      	bics	r3, r2
 8007f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2204      	movs	r2, #4
 8007f24:	4393      	bics	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a19      	ldr	r2, [pc, #100]	; (8007f90 <TIM_OC1_SetConfig+0xf8>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00b      	beq.n	8007f48 <TIM_OC1_SetConfig+0xb0>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a18      	ldr	r2, [pc, #96]	; (8007f94 <TIM_OC1_SetConfig+0xfc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d007      	beq.n	8007f48 <TIM_OC1_SetConfig+0xb0>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <TIM_OC1_SetConfig+0x100>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_OC1_SetConfig+0xb0>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a16      	ldr	r2, [pc, #88]	; (8007f9c <TIM_OC1_SetConfig+0x104>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d111      	bne.n	8007f6c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	4a15      	ldr	r2, [pc, #84]	; (8007fa0 <TIM_OC1_SetConfig+0x108>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4a14      	ldr	r2, [pc, #80]	; (8007fa4 <TIM_OC1_SetConfig+0x10c>)
 8007f54:	4013      	ands	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	621a      	str	r2, [r3, #32]
}
 8007f86:	46c0      	nop			; (mov r8, r8)
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	b006      	add	sp, #24
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	46c0      	nop			; (mov r8, r8)
 8007f90:	40012c00 	.word	0x40012c00
 8007f94:	40014000 	.word	0x40014000
 8007f98:	40014400 	.word	0x40014400
 8007f9c:	40014800 	.word	0x40014800
 8007fa0:	fffffeff 	.word	0xfffffeff
 8007fa4:	fffffdff 	.word	0xfffffdff

08007fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	2210      	movs	r2, #16
 8007fb8:	4393      	bics	r3, r2
 8007fba:	001a      	movs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4a2e      	ldr	r2, [pc, #184]	; (8008090 <TIM_OC2_SetConfig+0xe8>)
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4a2d      	ldr	r2, [pc, #180]	; (8008094 <TIM_OC2_SetConfig+0xec>)
 8007fde:	4013      	ands	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	4393      	bics	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a24      	ldr	r2, [pc, #144]	; (8008098 <TIM_OC2_SetConfig+0xf0>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d10d      	bne.n	8008026 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2280      	movs	r2, #128	; 0x80
 800800e:	4393      	bics	r3, r2
 8008010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2240      	movs	r2, #64	; 0x40
 8008022:	4393      	bics	r3, r2
 8008024:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a1b      	ldr	r2, [pc, #108]	; (8008098 <TIM_OC2_SetConfig+0xf0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00b      	beq.n	8008046 <TIM_OC2_SetConfig+0x9e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a1a      	ldr	r2, [pc, #104]	; (800809c <TIM_OC2_SetConfig+0xf4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d007      	beq.n	8008046 <TIM_OC2_SetConfig+0x9e>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a19      	ldr	r2, [pc, #100]	; (80080a0 <TIM_OC2_SetConfig+0xf8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d003      	beq.n	8008046 <TIM_OC2_SetConfig+0x9e>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a18      	ldr	r2, [pc, #96]	; (80080a4 <TIM_OC2_SetConfig+0xfc>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d113      	bne.n	800806e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	4a17      	ldr	r2, [pc, #92]	; (80080a8 <TIM_OC2_SetConfig+0x100>)
 800804a:	4013      	ands	r3, r2
 800804c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	4a16      	ldr	r2, [pc, #88]	; (80080ac <TIM_OC2_SetConfig+0x104>)
 8008052:	4013      	ands	r3, r2
 8008054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	621a      	str	r2, [r3, #32]
}
 8008088:	46c0      	nop			; (mov r8, r8)
 800808a:	46bd      	mov	sp, r7
 800808c:	b006      	add	sp, #24
 800808e:	bd80      	pop	{r7, pc}
 8008090:	ffff8fff 	.word	0xffff8fff
 8008094:	fffffcff 	.word	0xfffffcff
 8008098:	40012c00 	.word	0x40012c00
 800809c:	40014000 	.word	0x40014000
 80080a0:	40014400 	.word	0x40014400
 80080a4:	40014800 	.word	0x40014800
 80080a8:	fffffbff 	.word	0xfffffbff
 80080ac:	fffff7ff 	.word	0xfffff7ff

080080b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	4a35      	ldr	r2, [pc, #212]	; (8008194 <TIM_OC3_SetConfig+0xe4>)
 80080c0:	401a      	ands	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2270      	movs	r2, #112	; 0x70
 80080dc:	4393      	bics	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2203      	movs	r2, #3
 80080e4:	4393      	bics	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	4a28      	ldr	r2, [pc, #160]	; (8008198 <TIM_OC3_SetConfig+0xe8>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	021b      	lsls	r3, r3, #8
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a24      	ldr	r2, [pc, #144]	; (800819c <TIM_OC3_SetConfig+0xec>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d10d      	bne.n	800812a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	4a23      	ldr	r2, [pc, #140]	; (80081a0 <TIM_OC3_SetConfig+0xf0>)
 8008112:	4013      	ands	r3, r2
 8008114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	021b      	lsls	r3, r3, #8
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	4313      	orrs	r3, r2
 8008120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	4a1f      	ldr	r2, [pc, #124]	; (80081a4 <TIM_OC3_SetConfig+0xf4>)
 8008126:	4013      	ands	r3, r2
 8008128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a1b      	ldr	r2, [pc, #108]	; (800819c <TIM_OC3_SetConfig+0xec>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00b      	beq.n	800814a <TIM_OC3_SetConfig+0x9a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a1c      	ldr	r2, [pc, #112]	; (80081a8 <TIM_OC3_SetConfig+0xf8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d007      	beq.n	800814a <TIM_OC3_SetConfig+0x9a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a1b      	ldr	r2, [pc, #108]	; (80081ac <TIM_OC3_SetConfig+0xfc>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d003      	beq.n	800814a <TIM_OC3_SetConfig+0x9a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a1a      	ldr	r2, [pc, #104]	; (80081b0 <TIM_OC3_SetConfig+0x100>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d113      	bne.n	8008172 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	4a19      	ldr	r2, [pc, #100]	; (80081b4 <TIM_OC3_SetConfig+0x104>)
 800814e:	4013      	ands	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4a18      	ldr	r2, [pc, #96]	; (80081b8 <TIM_OC3_SetConfig+0x108>)
 8008156:	4013      	ands	r3, r2
 8008158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	4313      	orrs	r3, r2
 8008164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	011b      	lsls	r3, r3, #4
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	4313      	orrs	r3, r2
 8008170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	621a      	str	r2, [r3, #32]
}
 800818c:	46c0      	nop			; (mov r8, r8)
 800818e:	46bd      	mov	sp, r7
 8008190:	b006      	add	sp, #24
 8008192:	bd80      	pop	{r7, pc}
 8008194:	fffffeff 	.word	0xfffffeff
 8008198:	fffffdff 	.word	0xfffffdff
 800819c:	40012c00 	.word	0x40012c00
 80081a0:	fffff7ff 	.word	0xfffff7ff
 80081a4:	fffffbff 	.word	0xfffffbff
 80081a8:	40014000 	.word	0x40014000
 80081ac:	40014400 	.word	0x40014400
 80081b0:	40014800 	.word	0x40014800
 80081b4:	ffffefff 	.word	0xffffefff
 80081b8:	ffffdfff 	.word	0xffffdfff

080081bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	4a28      	ldr	r2, [pc, #160]	; (800826c <TIM_OC4_SetConfig+0xb0>)
 80081cc:	401a      	ands	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4a22      	ldr	r2, [pc, #136]	; (8008270 <TIM_OC4_SetConfig+0xb4>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4a21      	ldr	r2, [pc, #132]	; (8008274 <TIM_OC4_SetConfig+0xb8>)
 80081f0:	4013      	ands	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	021b      	lsls	r3, r3, #8
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	4a1d      	ldr	r2, [pc, #116]	; (8008278 <TIM_OC4_SetConfig+0xbc>)
 8008204:	4013      	ands	r3, r2
 8008206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	031b      	lsls	r3, r3, #12
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a19      	ldr	r2, [pc, #100]	; (800827c <TIM_OC4_SetConfig+0xc0>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00b      	beq.n	8008234 <TIM_OC4_SetConfig+0x78>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a18      	ldr	r2, [pc, #96]	; (8008280 <TIM_OC4_SetConfig+0xc4>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d007      	beq.n	8008234 <TIM_OC4_SetConfig+0x78>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a17      	ldr	r2, [pc, #92]	; (8008284 <TIM_OC4_SetConfig+0xc8>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d003      	beq.n	8008234 <TIM_OC4_SetConfig+0x78>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a16      	ldr	r2, [pc, #88]	; (8008288 <TIM_OC4_SetConfig+0xcc>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d109      	bne.n	8008248 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	4a15      	ldr	r2, [pc, #84]	; (800828c <TIM_OC4_SetConfig+0xd0>)
 8008238:	4013      	ands	r3, r2
 800823a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	695b      	ldr	r3, [r3, #20]
 8008240:	019b      	lsls	r3, r3, #6
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4313      	orrs	r3, r2
 8008246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	621a      	str	r2, [r3, #32]
}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	46bd      	mov	sp, r7
 8008266:	b006      	add	sp, #24
 8008268:	bd80      	pop	{r7, pc}
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	ffffefff 	.word	0xffffefff
 8008270:	ffff8fff 	.word	0xffff8fff
 8008274:	fffffcff 	.word	0xfffffcff
 8008278:	ffffdfff 	.word	0xffffdfff
 800827c:	40012c00 	.word	0x40012c00
 8008280:	40014000 	.word	0x40014000
 8008284:	40014400 	.word	0x40014400
 8008288:	40014800 	.word	0x40014800
 800828c:	ffffbfff 	.word	0xffffbfff

08008290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	221f      	movs	r2, #31
 80082a0:	4013      	ands	r3, r2
 80082a2:	2201      	movs	r2, #1
 80082a4:	409a      	lsls	r2, r3
 80082a6:	0013      	movs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	43d2      	mvns	r2, r2
 80082b2:	401a      	ands	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a1a      	ldr	r2, [r3, #32]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	211f      	movs	r1, #31
 80082c0:	400b      	ands	r3, r1
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	4099      	lsls	r1, r3
 80082c6:	000b      	movs	r3, r1
 80082c8:	431a      	orrs	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	621a      	str	r2, [r3, #32]
}
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	46bd      	mov	sp, r7
 80082d2:	b006      	add	sp, #24
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	223c      	movs	r2, #60	; 0x3c
 80082e6:	5c9b      	ldrb	r3, [r3, r2]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d101      	bne.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082ec:	2302      	movs	r3, #2
 80082ee:	e041      	b.n	8008374 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	223c      	movs	r2, #60	; 0x3c
 80082f4:	2101      	movs	r1, #1
 80082f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	223d      	movs	r2, #61	; 0x3d
 80082fc:	2102      	movs	r1, #2
 80082fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2270      	movs	r2, #112	; 0x70
 8008314:	4393      	bics	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a13      	ldr	r2, [pc, #76]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d009      	beq.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a11      	ldr	r2, [pc, #68]	; (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d004      	beq.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a10      	ldr	r2, [pc, #64]	; (8008384 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d10c      	bne.n	8008362 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2280      	movs	r2, #128	; 0x80
 800834c:	4393      	bics	r3, r2
 800834e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	4313      	orrs	r3, r2
 8008358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	223d      	movs	r2, #61	; 0x3d
 8008366:	2101      	movs	r1, #1
 8008368:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	223c      	movs	r2, #60	; 0x3c
 800836e:	2100      	movs	r1, #0
 8008370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	0018      	movs	r0, r3
 8008376:	46bd      	mov	sp, r7
 8008378:	b004      	add	sp, #16
 800837a:	bd80      	pop	{r7, pc}
 800837c:	40012c00 	.word	0x40012c00
 8008380:	40000400 	.word	0x40000400
 8008384:	40014000 	.word	0x40014000

08008388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008390:	46c0      	nop			; (mov r8, r8)
 8008392:	46bd      	mov	sp, r7
 8008394:	b002      	add	sp, #8
 8008396:	bd80      	pop	{r7, pc}

08008398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083a0:	46c0      	nop			; (mov r8, r8)
 80083a2:	46bd      	mov	sp, r7
 80083a4:	b002      	add	sp, #8
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e044      	b.n	8008444 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d107      	bne.n	80083d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2270      	movs	r2, #112	; 0x70
 80083c6:	2100      	movs	r1, #0
 80083c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	0018      	movs	r0, r3
 80083ce:	f7fb f97b 	bl	80036c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2224      	movs	r2, #36	; 0x24
 80083d6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2101      	movs	r1, #1
 80083e4:	438a      	bics	r2, r1
 80083e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	0018      	movs	r0, r3
 80083ec:	f000 fa10 	bl	8008810 <UART_SetConfig>
 80083f0:	0003      	movs	r3, r0
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d101      	bne.n	80083fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e024      	b.n	8008444 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	0018      	movs	r0, r3
 8008406:	f000 fb89 	bl	8008b1c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	490d      	ldr	r1, [pc, #52]	; (800844c <HAL_UART_Init+0xa4>)
 8008416:	400a      	ands	r2, r1
 8008418:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2108      	movs	r1, #8
 8008426:	438a      	bics	r2, r1
 8008428:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2101      	movs	r1, #1
 8008436:	430a      	orrs	r2, r1
 8008438:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	0018      	movs	r0, r3
 800843e:	f000 fc21 	bl	8008c84 <UART_CheckIdleState>
 8008442:	0003      	movs	r3, r0
}
 8008444:	0018      	movs	r0, r3
 8008446:	46bd      	mov	sp, r7
 8008448:	b002      	add	sp, #8
 800844a:	bd80      	pop	{r7, pc}
 800844c:	fffff7ff 	.word	0xfffff7ff

08008450 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08a      	sub	sp, #40	; 0x28
 8008454:	af02      	add	r7, sp, #8
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	1dbb      	adds	r3, r7, #6
 800845e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008464:	2b20      	cmp	r3, #32
 8008466:	d000      	beq.n	800846a <HAL_UART_Transmit+0x1a>
 8008468:	e095      	b.n	8008596 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <HAL_UART_Transmit+0x28>
 8008470:	1dbb      	adds	r3, r7, #6
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e08d      	b.n	8008598 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	2380      	movs	r3, #128	; 0x80
 8008482:	015b      	lsls	r3, r3, #5
 8008484:	429a      	cmp	r2, r3
 8008486:	d109      	bne.n	800849c <HAL_UART_Transmit+0x4c>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d105      	bne.n	800849c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2201      	movs	r2, #1
 8008494:	4013      	ands	r3, r2
 8008496:	d001      	beq.n	800849c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e07d      	b.n	8008598 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2270      	movs	r2, #112	; 0x70
 80084a0:	5c9b      	ldrb	r3, [r3, r2]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d101      	bne.n	80084aa <HAL_UART_Transmit+0x5a>
 80084a6:	2302      	movs	r3, #2
 80084a8:	e076      	b.n	8008598 <HAL_UART_Transmit+0x148>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2270      	movs	r2, #112	; 0x70
 80084ae:	2101      	movs	r1, #1
 80084b0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2221      	movs	r2, #33	; 0x21
 80084bc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80084be:	f7fb fb69 	bl	8003b94 <HAL_GetTick>
 80084c2:	0003      	movs	r3, r0
 80084c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	1dba      	adds	r2, r7, #6
 80084ca:	2150      	movs	r1, #80	; 0x50
 80084cc:	8812      	ldrh	r2, [r2, #0]
 80084ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	1dba      	adds	r2, r7, #6
 80084d4:	2152      	movs	r1, #82	; 0x52
 80084d6:	8812      	ldrh	r2, [r2, #0]
 80084d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	2380      	movs	r3, #128	; 0x80
 80084e0:	015b      	lsls	r3, r3, #5
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d108      	bne.n	80084f8 <HAL_UART_Transmit+0xa8>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d104      	bne.n	80084f8 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	61bb      	str	r3, [r7, #24]
 80084f6:	e003      	b.n	8008500 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008500:	e02d      	b.n	800855e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	0013      	movs	r3, r2
 800850c:	2200      	movs	r2, #0
 800850e:	2180      	movs	r1, #128	; 0x80
 8008510:	f000 fbfe 	bl	8008d10 <UART_WaitOnFlagUntilTimeout>
 8008514:	1e03      	subs	r3, r0, #0
 8008516:	d001      	beq.n	800851c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e03d      	b.n	8008598 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10b      	bne.n	800853a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	881a      	ldrh	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	05d2      	lsls	r2, r2, #23
 800852c:	0dd2      	lsrs	r2, r2, #23
 800852e:	b292      	uxth	r2, r2
 8008530:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	3302      	adds	r3, #2
 8008536:	61bb      	str	r3, [r7, #24]
 8008538:	e008      	b.n	800854c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	b292      	uxth	r2, r2
 8008544:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	3301      	adds	r3, #1
 800854a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2252      	movs	r2, #82	; 0x52
 8008550:	5a9b      	ldrh	r3, [r3, r2]
 8008552:	b29b      	uxth	r3, r3
 8008554:	3b01      	subs	r3, #1
 8008556:	b299      	uxth	r1, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2252      	movs	r2, #82	; 0x52
 800855c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2252      	movs	r2, #82	; 0x52
 8008562:	5a9b      	ldrh	r3, [r3, r2]
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1cb      	bne.n	8008502 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	0013      	movs	r3, r2
 8008574:	2200      	movs	r2, #0
 8008576:	2140      	movs	r1, #64	; 0x40
 8008578:	f000 fbca 	bl	8008d10 <UART_WaitOnFlagUntilTimeout>
 800857c:	1e03      	subs	r3, r0, #0
 800857e:	d001      	beq.n	8008584 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e009      	b.n	8008598 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2220      	movs	r2, #32
 8008588:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2270      	movs	r2, #112	; 0x70
 800858e:	2100      	movs	r1, #0
 8008590:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	e000      	b.n	8008598 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8008596:	2302      	movs	r3, #2
  }
}
 8008598:	0018      	movs	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	b008      	add	sp, #32
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	4a89      	ldr	r2, [pc, #548]	; (80087e8 <HAL_UART_IRQHandler+0x248>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d112      	bne.n	80085f4 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	2220      	movs	r2, #32
 80085d2:	4013      	ands	r3, r2
 80085d4:	d00e      	beq.n	80085f4 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2220      	movs	r2, #32
 80085da:	4013      	ands	r3, r2
 80085dc:	d00a      	beq.n	80085f4 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d100      	bne.n	80085e8 <HAL_UART_IRQHandler+0x48>
 80085e6:	e0f7      	b.n	80087d8 <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	0010      	movs	r0, r2
 80085f0:	4798      	blx	r3
      }
      return;
 80085f2:	e0f1      	b.n	80087d8 <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d100      	bne.n	80085fc <HAL_UART_IRQHandler+0x5c>
 80085fa:	e0cd      	b.n	8008798 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2201      	movs	r2, #1
 8008600:	4013      	ands	r3, r2
 8008602:	d105      	bne.n	8008610 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	2390      	movs	r3, #144	; 0x90
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	4013      	ands	r3, r2
 800860c:	d100      	bne.n	8008610 <HAL_UART_IRQHandler+0x70>
 800860e:	e0c3      	b.n	8008798 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	2201      	movs	r2, #1
 8008614:	4013      	ands	r3, r2
 8008616:	d00e      	beq.n	8008636 <HAL_UART_IRQHandler+0x96>
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	2380      	movs	r3, #128	; 0x80
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	4013      	ands	r3, r2
 8008620:	d009      	beq.n	8008636 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2201      	movs	r2, #1
 8008628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800862e:	2201      	movs	r2, #1
 8008630:	431a      	orrs	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	2202      	movs	r2, #2
 800863a:	4013      	ands	r3, r2
 800863c:	d00d      	beq.n	800865a <HAL_UART_IRQHandler+0xba>
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2201      	movs	r2, #1
 8008642:	4013      	ands	r3, r2
 8008644:	d009      	beq.n	800865a <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2202      	movs	r2, #2
 800864c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008652:	2204      	movs	r2, #4
 8008654:	431a      	orrs	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	2204      	movs	r2, #4
 800865e:	4013      	ands	r3, r2
 8008660:	d00d      	beq.n	800867e <HAL_UART_IRQHandler+0xde>
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2201      	movs	r2, #1
 8008666:	4013      	ands	r3, r2
 8008668:	d009      	beq.n	800867e <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2204      	movs	r2, #4
 8008670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008676:	2202      	movs	r2, #2
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	2208      	movs	r2, #8
 8008682:	4013      	ands	r3, r2
 8008684:	d011      	beq.n	80086aa <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2220      	movs	r2, #32
 800868a:	4013      	ands	r3, r2
 800868c:	d103      	bne.n	8008696 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2201      	movs	r2, #1
 8008692:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008694:	d009      	beq.n	80086aa <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2208      	movs	r2, #8
 800869c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a2:	2208      	movs	r2, #8
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	2380      	movs	r3, #128	; 0x80
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	4013      	ands	r3, r2
 80086b2:	d00f      	beq.n	80086d4 <HAL_UART_IRQHandler+0x134>
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	2380      	movs	r3, #128	; 0x80
 80086b8:	04db      	lsls	r3, r3, #19
 80086ba:	4013      	ands	r3, r2
 80086bc:	d00a      	beq.n	80086d4 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2280      	movs	r2, #128	; 0x80
 80086c4:	0112      	lsls	r2, r2, #4
 80086c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086cc:	2220      	movs	r2, #32
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d100      	bne.n	80086de <HAL_UART_IRQHandler+0x13e>
 80086dc:	e07e      	b.n	80087dc <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	2220      	movs	r2, #32
 80086e2:	4013      	ands	r3, r2
 80086e4:	d00c      	beq.n	8008700 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2220      	movs	r2, #32
 80086ea:	4013      	ands	r3, r2
 80086ec:	d008      	beq.n	8008700 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	0010      	movs	r0, r2
 80086fe:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008704:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	2240      	movs	r2, #64	; 0x40
 800870e:	4013      	ands	r3, r2
 8008710:	2b40      	cmp	r3, #64	; 0x40
 8008712:	d003      	beq.n	800871c <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2228      	movs	r2, #40	; 0x28
 8008718:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800871a:	d033      	beq.n	8008784 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	0018      	movs	r0, r3
 8008720:	f000 fb74 	bl	8008e0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2240      	movs	r2, #64	; 0x40
 800872c:	4013      	ands	r3, r2
 800872e:	2b40      	cmp	r3, #64	; 0x40
 8008730:	d123      	bne.n	800877a <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689a      	ldr	r2, [r3, #8]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2140      	movs	r1, #64	; 0x40
 800873e:	438a      	bics	r2, r1
 8008740:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008746:	2b00      	cmp	r3, #0
 8008748:	d012      	beq.n	8008770 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800874e:	4a27      	ldr	r2, [pc, #156]	; (80087ec <HAL_UART_IRQHandler+0x24c>)
 8008750:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008756:	0018      	movs	r0, r3
 8008758:	f7fb ffa4 	bl	80046a4 <HAL_DMA_Abort_IT>
 800875c:	1e03      	subs	r3, r0, #0
 800875e:	d019      	beq.n	8008794 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800876a:	0018      	movs	r0, r3
 800876c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800876e:	e011      	b.n	8008794 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	0018      	movs	r0, r3
 8008774:	f000 f844 	bl	8008800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008778:	e00c      	b.n	8008794 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	0018      	movs	r0, r3
 800877e:	f000 f83f 	bl	8008800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008782:	e007      	b.n	8008794 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	0018      	movs	r0, r3
 8008788:	f000 f83a 	bl	8008800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008792:	e023      	b.n	80087dc <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008794:	46c0      	nop			; (mov r8, r8)
    return;
 8008796:	e021      	b.n	80087dc <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	2280      	movs	r2, #128	; 0x80
 800879c:	4013      	ands	r3, r2
 800879e:	d00d      	beq.n	80087bc <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2280      	movs	r2, #128	; 0x80
 80087a4:	4013      	ands	r3, r2
 80087a6:	d009      	beq.n	80087bc <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d017      	beq.n	80087e0 <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	0010      	movs	r0, r2
 80087b8:	4798      	blx	r3
    }
    return;
 80087ba:	e011      	b.n	80087e0 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	2240      	movs	r2, #64	; 0x40
 80087c0:	4013      	ands	r3, r2
 80087c2:	d00e      	beq.n	80087e2 <HAL_UART_IRQHandler+0x242>
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	2240      	movs	r2, #64	; 0x40
 80087c8:	4013      	ands	r3, r2
 80087ca:	d00a      	beq.n	80087e2 <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	0018      	movs	r0, r3
 80087d0:	f000 fb53 	bl	8008e7a <UART_EndTransmit_IT>
    return;
 80087d4:	46c0      	nop			; (mov r8, r8)
 80087d6:	e004      	b.n	80087e2 <HAL_UART_IRQHandler+0x242>
      return;
 80087d8:	46c0      	nop			; (mov r8, r8)
 80087da:	e002      	b.n	80087e2 <HAL_UART_IRQHandler+0x242>
    return;
 80087dc:	46c0      	nop			; (mov r8, r8)
 80087de:	e000      	b.n	80087e2 <HAL_UART_IRQHandler+0x242>
    return;
 80087e0:	46c0      	nop			; (mov r8, r8)
  }

}
 80087e2:	46bd      	mov	sp, r7
 80087e4:	b008      	add	sp, #32
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	0000080f 	.word	0x0000080f
 80087ec:	08008e4d 	.word	0x08008e4d

080087f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80087f8:	46c0      	nop			; (mov r8, r8)
 80087fa:	46bd      	mov	sp, r7
 80087fc:	b002      	add	sp, #8
 80087fe:	bd80      	pop	{r7, pc}

08008800 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008808:	46c0      	nop			; (mov r8, r8)
 800880a:	46bd      	mov	sp, r7
 800880c:	b002      	add	sp, #8
 800880e:	bd80      	pop	{r7, pc}

08008810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008818:	2300      	movs	r3, #0
 800881a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800881c:	2317      	movs	r3, #23
 800881e:	18fb      	adds	r3, r7, r3
 8008820:	2200      	movs	r2, #0
 8008822:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	4313      	orrs	r3, r2
 800883a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4aad      	ldr	r2, [pc, #692]	; (8008af8 <UART_SetConfig+0x2e8>)
 8008844:	4013      	ands	r3, r2
 8008846:	0019      	movs	r1, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	430a      	orrs	r2, r1
 8008850:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4aa8      	ldr	r2, [pc, #672]	; (8008afc <UART_SetConfig+0x2ec>)
 800885a:	4013      	ands	r3, r2
 800885c:	0019      	movs	r1, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	4a9f      	ldr	r2, [pc, #636]	; (8008b00 <UART_SetConfig+0x2f0>)
 8008882:	4013      	ands	r3, r2
 8008884:	0019      	movs	r1, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	430a      	orrs	r2, r1
 800888e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a9b      	ldr	r2, [pc, #620]	; (8008b04 <UART_SetConfig+0x2f4>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d125      	bne.n	80088e6 <UART_SetConfig+0xd6>
 800889a:	4b9b      	ldr	r3, [pc, #620]	; (8008b08 <UART_SetConfig+0x2f8>)
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	2203      	movs	r2, #3
 80088a0:	4013      	ands	r3, r2
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d00f      	beq.n	80088c6 <UART_SetConfig+0xb6>
 80088a6:	d304      	bcc.n	80088b2 <UART_SetConfig+0xa2>
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d011      	beq.n	80088d0 <UART_SetConfig+0xc0>
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d005      	beq.n	80088bc <UART_SetConfig+0xac>
 80088b0:	e013      	b.n	80088da <UART_SetConfig+0xca>
 80088b2:	231f      	movs	r3, #31
 80088b4:	18fb      	adds	r3, r7, r3
 80088b6:	2200      	movs	r2, #0
 80088b8:	701a      	strb	r2, [r3, #0]
 80088ba:	e022      	b.n	8008902 <UART_SetConfig+0xf2>
 80088bc:	231f      	movs	r3, #31
 80088be:	18fb      	adds	r3, r7, r3
 80088c0:	2202      	movs	r2, #2
 80088c2:	701a      	strb	r2, [r3, #0]
 80088c4:	e01d      	b.n	8008902 <UART_SetConfig+0xf2>
 80088c6:	231f      	movs	r3, #31
 80088c8:	18fb      	adds	r3, r7, r3
 80088ca:	2204      	movs	r2, #4
 80088cc:	701a      	strb	r2, [r3, #0]
 80088ce:	e018      	b.n	8008902 <UART_SetConfig+0xf2>
 80088d0:	231f      	movs	r3, #31
 80088d2:	18fb      	adds	r3, r7, r3
 80088d4:	2208      	movs	r2, #8
 80088d6:	701a      	strb	r2, [r3, #0]
 80088d8:	e013      	b.n	8008902 <UART_SetConfig+0xf2>
 80088da:	231f      	movs	r3, #31
 80088dc:	18fb      	adds	r3, r7, r3
 80088de:	2210      	movs	r2, #16
 80088e0:	701a      	strb	r2, [r3, #0]
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	e00d      	b.n	8008902 <UART_SetConfig+0xf2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a88      	ldr	r2, [pc, #544]	; (8008b0c <UART_SetConfig+0x2fc>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d104      	bne.n	80088fa <UART_SetConfig+0xea>
 80088f0:	231f      	movs	r3, #31
 80088f2:	18fb      	adds	r3, r7, r3
 80088f4:	2200      	movs	r2, #0
 80088f6:	701a      	strb	r2, [r3, #0]
 80088f8:	e003      	b.n	8008902 <UART_SetConfig+0xf2>
 80088fa:	231f      	movs	r3, #31
 80088fc:	18fb      	adds	r3, r7, r3
 80088fe:	2210      	movs	r2, #16
 8008900:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69da      	ldr	r2, [r3, #28]
 8008906:	2380      	movs	r3, #128	; 0x80
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	429a      	cmp	r2, r3
 800890c:	d000      	beq.n	8008910 <UART_SetConfig+0x100>
 800890e:	e07d      	b.n	8008a0c <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8008910:	231f      	movs	r3, #31
 8008912:	18fb      	adds	r3, r7, r3
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b02      	cmp	r3, #2
 8008918:	d01c      	beq.n	8008954 <UART_SetConfig+0x144>
 800891a:	dc02      	bgt.n	8008922 <UART_SetConfig+0x112>
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <UART_SetConfig+0x11c>
 8008920:	e04b      	b.n	80089ba <UART_SetConfig+0x1aa>
 8008922:	2b04      	cmp	r3, #4
 8008924:	d025      	beq.n	8008972 <UART_SetConfig+0x162>
 8008926:	2b08      	cmp	r3, #8
 8008928:	d037      	beq.n	800899a <UART_SetConfig+0x18a>
 800892a:	e046      	b.n	80089ba <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800892c:	f7fc fe2e 	bl	800558c <HAL_RCC_GetPCLK1Freq>
 8008930:	0003      	movs	r3, r0
 8008932:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	005a      	lsls	r2, r3, #1
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	085b      	lsrs	r3, r3, #1
 800893e:	18d2      	adds	r2, r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	0019      	movs	r1, r3
 8008946:	0010      	movs	r0, r2
 8008948:	f7f7 fbf0 	bl	800012c <__udivsi3>
 800894c:	0003      	movs	r3, r0
 800894e:	b29b      	uxth	r3, r3
 8008950:	61bb      	str	r3, [r7, #24]
        break;
 8008952:	e037      	b.n	80089c4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	4a6d      	ldr	r2, [pc, #436]	; (8008b10 <UART_SetConfig+0x300>)
 800895c:	189a      	adds	r2, r3, r2
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	0019      	movs	r1, r3
 8008964:	0010      	movs	r0, r2
 8008966:	f7f7 fbe1 	bl	800012c <__udivsi3>
 800896a:	0003      	movs	r3, r0
 800896c:	b29b      	uxth	r3, r3
 800896e:	61bb      	str	r3, [r7, #24]
        break;
 8008970:	e028      	b.n	80089c4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008972:	f7fc fd9d 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8008976:	0003      	movs	r3, r0
 8008978:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	005a      	lsls	r2, r3, #1
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	085b      	lsrs	r3, r3, #1
 8008984:	18d2      	adds	r2, r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	0019      	movs	r1, r3
 800898c:	0010      	movs	r0, r2
 800898e:	f7f7 fbcd 	bl	800012c <__udivsi3>
 8008992:	0003      	movs	r3, r0
 8008994:	b29b      	uxth	r3, r3
 8008996:	61bb      	str	r3, [r7, #24]
        break;
 8008998:	e014      	b.n	80089c4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	085b      	lsrs	r3, r3, #1
 80089a0:	2280      	movs	r2, #128	; 0x80
 80089a2:	0252      	lsls	r2, r2, #9
 80089a4:	189a      	adds	r2, r3, r2
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	0019      	movs	r1, r3
 80089ac:	0010      	movs	r0, r2
 80089ae:	f7f7 fbbd 	bl	800012c <__udivsi3>
 80089b2:	0003      	movs	r3, r0
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	61bb      	str	r3, [r7, #24]
        break;
 80089b8:	e004      	b.n	80089c4 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80089ba:	2317      	movs	r3, #23
 80089bc:	18fb      	adds	r3, r7, r3
 80089be:	2201      	movs	r2, #1
 80089c0:	701a      	strb	r2, [r3, #0]
        break;
 80089c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	2b0f      	cmp	r3, #15
 80089c8:	d91b      	bls.n	8008a02 <UART_SetConfig+0x1f2>
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	4a51      	ldr	r2, [pc, #324]	; (8008b14 <UART_SetConfig+0x304>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d817      	bhi.n	8008a02 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	200a      	movs	r0, #10
 80089d8:	183b      	adds	r3, r7, r0
 80089da:	210f      	movs	r1, #15
 80089dc:	438a      	bics	r2, r1
 80089de:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2207      	movs	r2, #7
 80089e8:	4013      	ands	r3, r2
 80089ea:	b299      	uxth	r1, r3
 80089ec:	183b      	adds	r3, r7, r0
 80089ee:	183a      	adds	r2, r7, r0
 80089f0:	8812      	ldrh	r2, [r2, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	183a      	adds	r2, r7, r0
 80089fc:	8812      	ldrh	r2, [r2, #0]
 80089fe:	60da      	str	r2, [r3, #12]
 8008a00:	e06c      	b.n	8008adc <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8008a02:	2317      	movs	r3, #23
 8008a04:	18fb      	adds	r3, r7, r3
 8008a06:	2201      	movs	r2, #1
 8008a08:	701a      	strb	r2, [r3, #0]
 8008a0a:	e067      	b.n	8008adc <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8008a0c:	231f      	movs	r3, #31
 8008a0e:	18fb      	adds	r3, r7, r3
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d01b      	beq.n	8008a4e <UART_SetConfig+0x23e>
 8008a16:	dc02      	bgt.n	8008a1e <UART_SetConfig+0x20e>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <UART_SetConfig+0x218>
 8008a1c:	e049      	b.n	8008ab2 <UART_SetConfig+0x2a2>
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d024      	beq.n	8008a6c <UART_SetConfig+0x25c>
 8008a22:	2b08      	cmp	r3, #8
 8008a24:	d035      	beq.n	8008a92 <UART_SetConfig+0x282>
 8008a26:	e044      	b.n	8008ab2 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a28:	f7fc fdb0 	bl	800558c <HAL_RCC_GetPCLK1Freq>
 8008a2c:	0003      	movs	r3, r0
 8008a2e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	085a      	lsrs	r2, r3, #1
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	18d2      	adds	r2, r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	0019      	movs	r1, r3
 8008a40:	0010      	movs	r0, r2
 8008a42:	f7f7 fb73 	bl	800012c <__udivsi3>
 8008a46:	0003      	movs	r3, r0
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	61bb      	str	r3, [r7, #24]
        break;
 8008a4c:	e036      	b.n	8008abc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	4a30      	ldr	r2, [pc, #192]	; (8008b18 <UART_SetConfig+0x308>)
 8008a56:	189a      	adds	r2, r3, r2
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	0019      	movs	r1, r3
 8008a5e:	0010      	movs	r0, r2
 8008a60:	f7f7 fb64 	bl	800012c <__udivsi3>
 8008a64:	0003      	movs	r3, r0
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	61bb      	str	r3, [r7, #24]
        break;
 8008a6a:	e027      	b.n	8008abc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a6c:	f7fc fd20 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8008a70:	0003      	movs	r3, r0
 8008a72:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	085a      	lsrs	r2, r3, #1
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	18d2      	adds	r2, r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	0019      	movs	r1, r3
 8008a84:	0010      	movs	r0, r2
 8008a86:	f7f7 fb51 	bl	800012c <__udivsi3>
 8008a8a:	0003      	movs	r3, r0
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	61bb      	str	r3, [r7, #24]
        break;
 8008a90:	e014      	b.n	8008abc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	085b      	lsrs	r3, r3, #1
 8008a98:	2280      	movs	r2, #128	; 0x80
 8008a9a:	0212      	lsls	r2, r2, #8
 8008a9c:	189a      	adds	r2, r3, r2
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	0019      	movs	r1, r3
 8008aa4:	0010      	movs	r0, r2
 8008aa6:	f7f7 fb41 	bl	800012c <__udivsi3>
 8008aaa:	0003      	movs	r3, r0
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	61bb      	str	r3, [r7, #24]
        break;
 8008ab0:	e004      	b.n	8008abc <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8008ab2:	2317      	movs	r3, #23
 8008ab4:	18fb      	adds	r3, r7, r3
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	701a      	strb	r2, [r3, #0]
        break;
 8008aba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	2b0f      	cmp	r3, #15
 8008ac0:	d908      	bls.n	8008ad4 <UART_SetConfig+0x2c4>
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	4a13      	ldr	r2, [pc, #76]	; (8008b14 <UART_SetConfig+0x304>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d804      	bhi.n	8008ad4 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	60da      	str	r2, [r3, #12]
 8008ad2:	e003      	b.n	8008adc <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8008ad4:	2317      	movs	r3, #23
 8008ad6:	18fb      	adds	r3, r7, r3
 8008ad8:	2201      	movs	r2, #1
 8008ada:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008ae8:	2317      	movs	r3, #23
 8008aea:	18fb      	adds	r3, r7, r3
 8008aec:	781b      	ldrb	r3, [r3, #0]
}
 8008aee:	0018      	movs	r0, r3
 8008af0:	46bd      	mov	sp, r7
 8008af2:	b008      	add	sp, #32
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	ffff69f3 	.word	0xffff69f3
 8008afc:	ffffcfff 	.word	0xffffcfff
 8008b00:	fffff4ff 	.word	0xfffff4ff
 8008b04:	40013800 	.word	0x40013800
 8008b08:	40021000 	.word	0x40021000
 8008b0c:	40004400 	.word	0x40004400
 8008b10:	00f42400 	.word	0x00f42400
 8008b14:	0000ffff 	.word	0x0000ffff
 8008b18:	007a1200 	.word	0x007a1200

08008b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	2201      	movs	r2, #1
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	d00b      	beq.n	8008b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	4a4a      	ldr	r2, [pc, #296]	; (8008c60 <UART_AdvFeatureConfig+0x144>)
 8008b36:	4013      	ands	r3, r2
 8008b38:	0019      	movs	r1, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	d00b      	beq.n	8008b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	4a43      	ldr	r2, [pc, #268]	; (8008c64 <UART_AdvFeatureConfig+0x148>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	0019      	movs	r1, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	430a      	orrs	r2, r1
 8008b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	2204      	movs	r2, #4
 8008b6e:	4013      	ands	r3, r2
 8008b70:	d00b      	beq.n	8008b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	4a3b      	ldr	r2, [pc, #236]	; (8008c68 <UART_AdvFeatureConfig+0x14c>)
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	0019      	movs	r1, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	430a      	orrs	r2, r1
 8008b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	2208      	movs	r2, #8
 8008b90:	4013      	ands	r3, r2
 8008b92:	d00b      	beq.n	8008bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	4a34      	ldr	r2, [pc, #208]	; (8008c6c <UART_AdvFeatureConfig+0x150>)
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	0019      	movs	r1, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	2210      	movs	r2, #16
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	d00b      	beq.n	8008bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	4a2c      	ldr	r2, [pc, #176]	; (8008c70 <UART_AdvFeatureConfig+0x154>)
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	0019      	movs	r1, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	d00b      	beq.n	8008bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	4a25      	ldr	r2, [pc, #148]	; (8008c74 <UART_AdvFeatureConfig+0x158>)
 8008be0:	4013      	ands	r3, r2
 8008be2:	0019      	movs	r1, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	2240      	movs	r2, #64	; 0x40
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	d01d      	beq.n	8008c36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	4a1d      	ldr	r2, [pc, #116]	; (8008c78 <UART_AdvFeatureConfig+0x15c>)
 8008c02:	4013      	ands	r3, r2
 8008c04:	0019      	movs	r1, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c16:	2380      	movs	r3, #128	; 0x80
 8008c18:	035b      	lsls	r3, r3, #13
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d10b      	bne.n	8008c36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	4a15      	ldr	r2, [pc, #84]	; (8008c7c <UART_AdvFeatureConfig+0x160>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	0019      	movs	r1, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	2280      	movs	r2, #128	; 0x80
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	d00b      	beq.n	8008c58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	4a0e      	ldr	r2, [pc, #56]	; (8008c80 <UART_AdvFeatureConfig+0x164>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	0019      	movs	r1, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	605a      	str	r2, [r3, #4]
  }
}
 8008c58:	46c0      	nop			; (mov r8, r8)
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	b002      	add	sp, #8
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	fffdffff 	.word	0xfffdffff
 8008c64:	fffeffff 	.word	0xfffeffff
 8008c68:	fffbffff 	.word	0xfffbffff
 8008c6c:	ffff7fff 	.word	0xffff7fff
 8008c70:	ffffefff 	.word	0xffffefff
 8008c74:	ffffdfff 	.word	0xffffdfff
 8008c78:	ffefffff 	.word	0xffefffff
 8008c7c:	ff9fffff 	.word	0xff9fffff
 8008c80:	fff7ffff 	.word	0xfff7ffff

08008c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af02      	add	r7, sp, #8
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008c92:	f7fa ff7f 	bl	8003b94 <HAL_GetTick>
 8008c96:	0003      	movs	r3, r0
 8008c98:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2208      	movs	r2, #8
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	2b08      	cmp	r3, #8
 8008ca6:	d10d      	bne.n	8008cc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	2380      	movs	r3, #128	; 0x80
 8008cac:	0399      	lsls	r1, r3, #14
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <UART_CheckIdleState+0x88>)
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	0013      	movs	r3, r2
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f000 f82a 	bl	8008d10 <UART_WaitOnFlagUntilTimeout>
 8008cbc:	1e03      	subs	r3, r0, #0
 8008cbe:	d001      	beq.n	8008cc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e01f      	b.n	8008d04 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2204      	movs	r2, #4
 8008ccc:	4013      	ands	r3, r2
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d10d      	bne.n	8008cee <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	2380      	movs	r3, #128	; 0x80
 8008cd6:	03d9      	lsls	r1, r3, #15
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <UART_CheckIdleState+0x88>)
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	0013      	movs	r3, r2
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f000 f815 	bl	8008d10 <UART_WaitOnFlagUntilTimeout>
 8008ce6:	1e03      	subs	r3, r0, #0
 8008ce8:	d001      	beq.n	8008cee <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e00a      	b.n	8008d04 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2270      	movs	r2, #112	; 0x70
 8008cfe:	2100      	movs	r1, #0
 8008d00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	0018      	movs	r0, r3
 8008d06:	46bd      	mov	sp, r7
 8008d08:	b004      	add	sp, #16
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	01ffffff 	.word	0x01ffffff

08008d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	1dfb      	adds	r3, r7, #7
 8008d1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d20:	e05d      	b.n	8008dde <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	3301      	adds	r3, #1
 8008d26:	d05a      	beq.n	8008dde <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d28:	f7fa ff34 	bl	8003b94 <HAL_GetTick>
 8008d2c:	0002      	movs	r2, r0
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d302      	bcc.n	8008d3e <UART_WaitOnFlagUntilTimeout+0x2e>
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d11b      	bne.n	8008d76 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	492f      	ldr	r1, [pc, #188]	; (8008e08 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8008d4a:	400a      	ands	r2, r1
 8008d4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2101      	movs	r1, #1
 8008d5a:	438a      	bics	r2, r1
 8008d5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2220      	movs	r2, #32
 8008d62:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2220      	movs	r2, #32
 8008d68:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2270      	movs	r2, #112	; 0x70
 8008d6e:	2100      	movs	r1, #0
 8008d70:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e043      	b.n	8008dfe <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2204      	movs	r2, #4
 8008d7e:	4013      	ands	r3, r2
 8008d80:	d02d      	beq.n	8008dde <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	69da      	ldr	r2, [r3, #28]
 8008d88:	2380      	movs	r3, #128	; 0x80
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	401a      	ands	r2, r3
 8008d8e:	2380      	movs	r3, #128	; 0x80
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d123      	bne.n	8008dde <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2280      	movs	r2, #128	; 0x80
 8008d9c:	0112      	lsls	r2, r2, #4
 8008d9e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4917      	ldr	r1, [pc, #92]	; (8008e08 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8008dac:	400a      	ands	r2, r1
 8008dae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2101      	movs	r1, #1
 8008dbc:	438a      	bics	r2, r1
 8008dbe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2270      	movs	r2, #112	; 0x70
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e00f      	b.n	8008dfe <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	4013      	ands	r3, r2
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	425a      	negs	r2, r3
 8008dee:	4153      	adcs	r3, r2
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	001a      	movs	r2, r3
 8008df4:	1dfb      	adds	r3, r7, #7
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d092      	beq.n	8008d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	0018      	movs	r0, r3
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b004      	add	sp, #16
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	fffffe5f 	.word	0xfffffe5f

08008e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	490a      	ldr	r1, [pc, #40]	; (8008e48 <UART_EndRxTransfer+0x3c>)
 8008e20:	400a      	ands	r2, r1
 8008e22:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689a      	ldr	r2, [r3, #8]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2101      	movs	r1, #1
 8008e30:	438a      	bics	r2, r1
 8008e32:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008e40:	46c0      	nop			; (mov r8, r8)
 8008e42:	46bd      	mov	sp, r7
 8008e44:	b002      	add	sp, #8
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	fffffedf 	.word	0xfffffedf

08008e4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	225a      	movs	r2, #90	; 0x5a
 8008e5e:	2100      	movs	r1, #0
 8008e60:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2252      	movs	r2, #82	; 0x52
 8008e66:	2100      	movs	r1, #0
 8008e68:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	0018      	movs	r0, r3
 8008e6e:	f7ff fcc7 	bl	8008800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e72:	46c0      	nop			; (mov r8, r8)
 8008e74:	46bd      	mov	sp, r7
 8008e76:	b004      	add	sp, #16
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2140      	movs	r1, #64	; 0x40
 8008e8e:	438a      	bics	r2, r1
 8008e90:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2220      	movs	r2, #32
 8008e96:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7ff fca5 	bl	80087f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ea6:	46c0      	nop			; (mov r8, r8)
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	b002      	add	sp, #8
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <__errno>:
 8008eb0:	4b01      	ldr	r3, [pc, #4]	; (8008eb8 <__errno+0x8>)
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	4770      	bx	lr
 8008eb6:	46c0      	nop			; (mov r8, r8)
 8008eb8:	20000020 	.word	0x20000020

08008ebc <__libc_init_array>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	2600      	movs	r6, #0
 8008ec0:	4d0c      	ldr	r5, [pc, #48]	; (8008ef4 <__libc_init_array+0x38>)
 8008ec2:	4c0d      	ldr	r4, [pc, #52]	; (8008ef8 <__libc_init_array+0x3c>)
 8008ec4:	1b64      	subs	r4, r4, r5
 8008ec6:	10a4      	asrs	r4, r4, #2
 8008ec8:	42a6      	cmp	r6, r4
 8008eca:	d109      	bne.n	8008ee0 <__libc_init_array+0x24>
 8008ecc:	2600      	movs	r6, #0
 8008ece:	f002 f89f 	bl	800b010 <_init>
 8008ed2:	4d0a      	ldr	r5, [pc, #40]	; (8008efc <__libc_init_array+0x40>)
 8008ed4:	4c0a      	ldr	r4, [pc, #40]	; (8008f00 <__libc_init_array+0x44>)
 8008ed6:	1b64      	subs	r4, r4, r5
 8008ed8:	10a4      	asrs	r4, r4, #2
 8008eda:	42a6      	cmp	r6, r4
 8008edc:	d105      	bne.n	8008eea <__libc_init_array+0x2e>
 8008ede:	bd70      	pop	{r4, r5, r6, pc}
 8008ee0:	00b3      	lsls	r3, r6, #2
 8008ee2:	58eb      	ldr	r3, [r5, r3]
 8008ee4:	4798      	blx	r3
 8008ee6:	3601      	adds	r6, #1
 8008ee8:	e7ee      	b.n	8008ec8 <__libc_init_array+0xc>
 8008eea:	00b3      	lsls	r3, r6, #2
 8008eec:	58eb      	ldr	r3, [r5, r3]
 8008eee:	4798      	blx	r3
 8008ef0:	3601      	adds	r6, #1
 8008ef2:	e7f2      	b.n	8008eda <__libc_init_array+0x1e>
 8008ef4:	0800b468 	.word	0x0800b468
 8008ef8:	0800b468 	.word	0x0800b468
 8008efc:	0800b468 	.word	0x0800b468
 8008f00:	0800b46c 	.word	0x0800b46c

08008f04 <memset>:
 8008f04:	0003      	movs	r3, r0
 8008f06:	1812      	adds	r2, r2, r0
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d100      	bne.n	8008f0e <memset+0xa>
 8008f0c:	4770      	bx	lr
 8008f0e:	7019      	strb	r1, [r3, #0]
 8008f10:	3301      	adds	r3, #1
 8008f12:	e7f9      	b.n	8008f08 <memset+0x4>

08008f14 <__cvt>:
 8008f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f16:	b08b      	sub	sp, #44	; 0x2c
 8008f18:	0014      	movs	r4, r2
 8008f1a:	1e1d      	subs	r5, r3, #0
 8008f1c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008f1e:	da53      	bge.n	8008fc8 <__cvt+0xb4>
 8008f20:	2480      	movs	r4, #128	; 0x80
 8008f22:	0624      	lsls	r4, r4, #24
 8008f24:	191b      	adds	r3, r3, r4
 8008f26:	001d      	movs	r5, r3
 8008f28:	0014      	movs	r4, r2
 8008f2a:	232d      	movs	r3, #45	; 0x2d
 8008f2c:	700b      	strb	r3, [r1, #0]
 8008f2e:	2320      	movs	r3, #32
 8008f30:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008f32:	2203      	movs	r2, #3
 8008f34:	439e      	bics	r6, r3
 8008f36:	2e46      	cmp	r6, #70	; 0x46
 8008f38:	d007      	beq.n	8008f4a <__cvt+0x36>
 8008f3a:	0033      	movs	r3, r6
 8008f3c:	3b45      	subs	r3, #69	; 0x45
 8008f3e:	4259      	negs	r1, r3
 8008f40:	414b      	adcs	r3, r1
 8008f42:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008f44:	3a01      	subs	r2, #1
 8008f46:	18cb      	adds	r3, r1, r3
 8008f48:	9310      	str	r3, [sp, #64]	; 0x40
 8008f4a:	ab09      	add	r3, sp, #36	; 0x24
 8008f4c:	9304      	str	r3, [sp, #16]
 8008f4e:	ab08      	add	r3, sp, #32
 8008f50:	9303      	str	r3, [sp, #12]
 8008f52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f54:	9200      	str	r2, [sp, #0]
 8008f56:	9302      	str	r3, [sp, #8]
 8008f58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f5a:	0022      	movs	r2, r4
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	002b      	movs	r3, r5
 8008f60:	f000 fcdc 	bl	800991c <_dtoa_r>
 8008f64:	0007      	movs	r7, r0
 8008f66:	2e47      	cmp	r6, #71	; 0x47
 8008f68:	d102      	bne.n	8008f70 <__cvt+0x5c>
 8008f6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f6c:	07db      	lsls	r3, r3, #31
 8008f6e:	d524      	bpl.n	8008fba <__cvt+0xa6>
 8008f70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f72:	18fb      	adds	r3, r7, r3
 8008f74:	9307      	str	r3, [sp, #28]
 8008f76:	2e46      	cmp	r6, #70	; 0x46
 8008f78:	d114      	bne.n	8008fa4 <__cvt+0x90>
 8008f7a:	783b      	ldrb	r3, [r7, #0]
 8008f7c:	2b30      	cmp	r3, #48	; 0x30
 8008f7e:	d10c      	bne.n	8008f9a <__cvt+0x86>
 8008f80:	2200      	movs	r2, #0
 8008f82:	2300      	movs	r3, #0
 8008f84:	0020      	movs	r0, r4
 8008f86:	0029      	movs	r1, r5
 8008f88:	f7f7 fa56 	bl	8000438 <__aeabi_dcmpeq>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d104      	bne.n	8008f9a <__cvt+0x86>
 8008f90:	2301      	movs	r3, #1
 8008f92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f9c:	9a07      	ldr	r2, [sp, #28]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	18d3      	adds	r3, r2, r3
 8008fa2:	9307      	str	r3, [sp, #28]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	0020      	movs	r0, r4
 8008faa:	0029      	movs	r1, r5
 8008fac:	f7f7 fa44 	bl	8000438 <__aeabi_dcmpeq>
 8008fb0:	2230      	movs	r2, #48	; 0x30
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d00d      	beq.n	8008fd2 <__cvt+0xbe>
 8008fb6:	9b07      	ldr	r3, [sp, #28]
 8008fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fba:	0038      	movs	r0, r7
 8008fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008fc0:	1bdb      	subs	r3, r3, r7
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	b00b      	add	sp, #44	; 0x2c
 8008fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fc8:	2300      	movs	r3, #0
 8008fca:	e7af      	b.n	8008f2c <__cvt+0x18>
 8008fcc:	1c59      	adds	r1, r3, #1
 8008fce:	9109      	str	r1, [sp, #36]	; 0x24
 8008fd0:	701a      	strb	r2, [r3, #0]
 8008fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd4:	9907      	ldr	r1, [sp, #28]
 8008fd6:	428b      	cmp	r3, r1
 8008fd8:	d3f8      	bcc.n	8008fcc <__cvt+0xb8>
 8008fda:	e7ee      	b.n	8008fba <__cvt+0xa6>

08008fdc <__exponent>:
 8008fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fde:	1c83      	adds	r3, r0, #2
 8008fe0:	b085      	sub	sp, #20
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	0006      	movs	r6, r0
 8008fe6:	000c      	movs	r4, r1
 8008fe8:	7002      	strb	r2, [r0, #0]
 8008fea:	232b      	movs	r3, #43	; 0x2b
 8008fec:	2900      	cmp	r1, #0
 8008fee:	da01      	bge.n	8008ff4 <__exponent+0x18>
 8008ff0:	232d      	movs	r3, #45	; 0x2d
 8008ff2:	424c      	negs	r4, r1
 8008ff4:	7073      	strb	r3, [r6, #1]
 8008ff6:	2c09      	cmp	r4, #9
 8008ff8:	dd22      	ble.n	8009040 <__exponent+0x64>
 8008ffa:	ab02      	add	r3, sp, #8
 8008ffc:	1ddd      	adds	r5, r3, #7
 8008ffe:	0020      	movs	r0, r4
 8009000:	210a      	movs	r1, #10
 8009002:	f7f7 fa03 	bl	800040c <__aeabi_idivmod>
 8009006:	1e6f      	subs	r7, r5, #1
 8009008:	3130      	adds	r1, #48	; 0x30
 800900a:	7039      	strb	r1, [r7, #0]
 800900c:	0020      	movs	r0, r4
 800900e:	210a      	movs	r1, #10
 8009010:	f7f7 f916 	bl	8000240 <__divsi3>
 8009014:	0004      	movs	r4, r0
 8009016:	2809      	cmp	r0, #9
 8009018:	dc0b      	bgt.n	8009032 <__exponent+0x56>
 800901a:	3d02      	subs	r5, #2
 800901c:	3430      	adds	r4, #48	; 0x30
 800901e:	9b01      	ldr	r3, [sp, #4]
 8009020:	702c      	strb	r4, [r5, #0]
 8009022:	aa02      	add	r2, sp, #8
 8009024:	3207      	adds	r2, #7
 8009026:	0018      	movs	r0, r3
 8009028:	42aa      	cmp	r2, r5
 800902a:	d804      	bhi.n	8009036 <__exponent+0x5a>
 800902c:	1b80      	subs	r0, r0, r6
 800902e:	b005      	add	sp, #20
 8009030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009032:	003d      	movs	r5, r7
 8009034:	e7e3      	b.n	8008ffe <__exponent+0x22>
 8009036:	782a      	ldrb	r2, [r5, #0]
 8009038:	3501      	adds	r5, #1
 800903a:	701a      	strb	r2, [r3, #0]
 800903c:	3301      	adds	r3, #1
 800903e:	e7f0      	b.n	8009022 <__exponent+0x46>
 8009040:	2330      	movs	r3, #48	; 0x30
 8009042:	18e4      	adds	r4, r4, r3
 8009044:	70b3      	strb	r3, [r6, #2]
 8009046:	1d30      	adds	r0, r6, #4
 8009048:	70f4      	strb	r4, [r6, #3]
 800904a:	e7ef      	b.n	800902c <__exponent+0x50>

0800904c <_printf_float>:
 800904c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800904e:	b095      	sub	sp, #84	; 0x54
 8009050:	000c      	movs	r4, r1
 8009052:	920a      	str	r2, [sp, #40]	; 0x28
 8009054:	930b      	str	r3, [sp, #44]	; 0x2c
 8009056:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009058:	9009      	str	r0, [sp, #36]	; 0x24
 800905a:	f001 fa3f 	bl	800a4dc <_localeconv_r>
 800905e:	6803      	ldr	r3, [r0, #0]
 8009060:	0018      	movs	r0, r3
 8009062:	930c      	str	r3, [sp, #48]	; 0x30
 8009064:	f7f7 f850 	bl	8000108 <strlen>
 8009068:	2300      	movs	r3, #0
 800906a:	9312      	str	r3, [sp, #72]	; 0x48
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	900e      	str	r0, [sp, #56]	; 0x38
 8009070:	930d      	str	r3, [sp, #52]	; 0x34
 8009072:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009074:	7e27      	ldrb	r7, [r4, #24]
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	2207      	movs	r2, #7
 800907a:	05c9      	lsls	r1, r1, #23
 800907c:	d545      	bpl.n	800910a <_printf_float+0xbe>
 800907e:	189b      	adds	r3, r3, r2
 8009080:	4393      	bics	r3, r2
 8009082:	001a      	movs	r2, r3
 8009084:	3208      	adds	r2, #8
 8009086:	602a      	str	r2, [r5, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	64a2      	str	r2, [r4, #72]	; 0x48
 800908e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009090:	2201      	movs	r2, #1
 8009092:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009094:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8009096:	006b      	lsls	r3, r5, #1
 8009098:	085b      	lsrs	r3, r3, #1
 800909a:	930f      	str	r3, [sp, #60]	; 0x3c
 800909c:	4252      	negs	r2, r2
 800909e:	4bac      	ldr	r3, [pc, #688]	; (8009350 <_printf_float+0x304>)
 80090a0:	0030      	movs	r0, r6
 80090a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80090a4:	f7f9 f95a 	bl	800235c <__aeabi_dcmpun>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d130      	bne.n	800910e <_printf_float+0xc2>
 80090ac:	2201      	movs	r2, #1
 80090ae:	4ba8      	ldr	r3, [pc, #672]	; (8009350 <_printf_float+0x304>)
 80090b0:	4252      	negs	r2, r2
 80090b2:	0030      	movs	r0, r6
 80090b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80090b6:	f7f7 f9cf 	bl	8000458 <__aeabi_dcmple>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d127      	bne.n	800910e <_printf_float+0xc2>
 80090be:	2200      	movs	r2, #0
 80090c0:	2300      	movs	r3, #0
 80090c2:	0030      	movs	r0, r6
 80090c4:	0029      	movs	r1, r5
 80090c6:	f7f7 f9bd 	bl	8000444 <__aeabi_dcmplt>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d003      	beq.n	80090d6 <_printf_float+0x8a>
 80090ce:	0023      	movs	r3, r4
 80090d0:	222d      	movs	r2, #45	; 0x2d
 80090d2:	3343      	adds	r3, #67	; 0x43
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	4d9f      	ldr	r5, [pc, #636]	; (8009354 <_printf_float+0x308>)
 80090d8:	2f47      	cmp	r7, #71	; 0x47
 80090da:	d800      	bhi.n	80090de <_printf_float+0x92>
 80090dc:	4d9e      	ldr	r5, [pc, #632]	; (8009358 <_printf_float+0x30c>)
 80090de:	2303      	movs	r3, #3
 80090e0:	2600      	movs	r6, #0
 80090e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090e4:	6123      	str	r3, [r4, #16]
 80090e6:	3301      	adds	r3, #1
 80090e8:	439a      	bics	r2, r3
 80090ea:	6022      	str	r2, [r4, #0]
 80090ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ee:	aa13      	add	r2, sp, #76	; 0x4c
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	0021      	movs	r1, r4
 80090f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090f8:	f000 f9f4 	bl	80094e4 <_printf_common>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d000      	beq.n	8009102 <_printf_float+0xb6>
 8009100:	e093      	b.n	800922a <_printf_float+0x1de>
 8009102:	2001      	movs	r0, #1
 8009104:	4240      	negs	r0, r0
 8009106:	b015      	add	sp, #84	; 0x54
 8009108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910a:	3307      	adds	r3, #7
 800910c:	e7b8      	b.n	8009080 <_printf_float+0x34>
 800910e:	0032      	movs	r2, r6
 8009110:	002b      	movs	r3, r5
 8009112:	0030      	movs	r0, r6
 8009114:	0029      	movs	r1, r5
 8009116:	f7f9 f921 	bl	800235c <__aeabi_dcmpun>
 800911a:	2800      	cmp	r0, #0
 800911c:	d004      	beq.n	8009128 <_printf_float+0xdc>
 800911e:	4d8f      	ldr	r5, [pc, #572]	; (800935c <_printf_float+0x310>)
 8009120:	2f47      	cmp	r7, #71	; 0x47
 8009122:	d8dc      	bhi.n	80090de <_printf_float+0x92>
 8009124:	4d8e      	ldr	r5, [pc, #568]	; (8009360 <_printf_float+0x314>)
 8009126:	e7da      	b.n	80090de <_printf_float+0x92>
 8009128:	2380      	movs	r3, #128	; 0x80
 800912a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800912c:	6862      	ldr	r2, [r4, #4]
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	430b      	orrs	r3, r1
 8009132:	1c51      	adds	r1, r2, #1
 8009134:	d143      	bne.n	80091be <_printf_float+0x172>
 8009136:	3207      	adds	r2, #7
 8009138:	6062      	str	r2, [r4, #4]
 800913a:	aa12      	add	r2, sp, #72	; 0x48
 800913c:	2100      	movs	r1, #0
 800913e:	9205      	str	r2, [sp, #20]
 8009140:	aa11      	add	r2, sp, #68	; 0x44
 8009142:	9203      	str	r2, [sp, #12]
 8009144:	2223      	movs	r2, #35	; 0x23
 8009146:	6023      	str	r3, [r4, #0]
 8009148:	9106      	str	r1, [sp, #24]
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	a908      	add	r1, sp, #32
 800914e:	6863      	ldr	r3, [r4, #4]
 8009150:	1852      	adds	r2, r2, r1
 8009152:	9202      	str	r2, [sp, #8]
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	0032      	movs	r2, r6
 8009158:	002b      	movs	r3, r5
 800915a:	9704      	str	r7, [sp, #16]
 800915c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800915e:	f7ff fed9 	bl	8008f14 <__cvt>
 8009162:	2320      	movs	r3, #32
 8009164:	003a      	movs	r2, r7
 8009166:	0005      	movs	r5, r0
 8009168:	439a      	bics	r2, r3
 800916a:	2a47      	cmp	r2, #71	; 0x47
 800916c:	d107      	bne.n	800917e <_printf_float+0x132>
 800916e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009170:	1cda      	adds	r2, r3, #3
 8009172:	db02      	blt.n	800917a <_printf_float+0x12e>
 8009174:	6862      	ldr	r2, [r4, #4]
 8009176:	4293      	cmp	r3, r2
 8009178:	dd45      	ble.n	8009206 <_printf_float+0x1ba>
 800917a:	3f02      	subs	r7, #2
 800917c:	b2ff      	uxtb	r7, r7
 800917e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009180:	2f65      	cmp	r7, #101	; 0x65
 8009182:	d825      	bhi.n	80091d0 <_printf_float+0x184>
 8009184:	0020      	movs	r0, r4
 8009186:	3901      	subs	r1, #1
 8009188:	003a      	movs	r2, r7
 800918a:	3050      	adds	r0, #80	; 0x50
 800918c:	9111      	str	r1, [sp, #68]	; 0x44
 800918e:	f7ff ff25 	bl	8008fdc <__exponent>
 8009192:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009194:	0006      	movs	r6, r0
 8009196:	1813      	adds	r3, r2, r0
 8009198:	6123      	str	r3, [r4, #16]
 800919a:	2a01      	cmp	r2, #1
 800919c:	dc02      	bgt.n	80091a4 <_printf_float+0x158>
 800919e:	6822      	ldr	r2, [r4, #0]
 80091a0:	07d2      	lsls	r2, r2, #31
 80091a2:	d501      	bpl.n	80091a8 <_printf_float+0x15c>
 80091a4:	3301      	adds	r3, #1
 80091a6:	6123      	str	r3, [r4, #16]
 80091a8:	2323      	movs	r3, #35	; 0x23
 80091aa:	aa08      	add	r2, sp, #32
 80091ac:	189b      	adds	r3, r3, r2
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d09b      	beq.n	80090ec <_printf_float+0xa0>
 80091b4:	0023      	movs	r3, r4
 80091b6:	222d      	movs	r2, #45	; 0x2d
 80091b8:	3343      	adds	r3, #67	; 0x43
 80091ba:	701a      	strb	r2, [r3, #0]
 80091bc:	e796      	b.n	80090ec <_printf_float+0xa0>
 80091be:	2f67      	cmp	r7, #103	; 0x67
 80091c0:	d100      	bne.n	80091c4 <_printf_float+0x178>
 80091c2:	e176      	b.n	80094b2 <_printf_float+0x466>
 80091c4:	2f47      	cmp	r7, #71	; 0x47
 80091c6:	d1b8      	bne.n	800913a <_printf_float+0xee>
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	d1b6      	bne.n	800913a <_printf_float+0xee>
 80091cc:	2201      	movs	r2, #1
 80091ce:	e7b3      	b.n	8009138 <_printf_float+0xec>
 80091d0:	2f66      	cmp	r7, #102	; 0x66
 80091d2:	d119      	bne.n	8009208 <_printf_float+0x1bc>
 80091d4:	6863      	ldr	r3, [r4, #4]
 80091d6:	2900      	cmp	r1, #0
 80091d8:	dd0c      	ble.n	80091f4 <_printf_float+0x1a8>
 80091da:	6121      	str	r1, [r4, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d102      	bne.n	80091e6 <_printf_float+0x19a>
 80091e0:	6822      	ldr	r2, [r4, #0]
 80091e2:	07d2      	lsls	r2, r2, #31
 80091e4:	d502      	bpl.n	80091ec <_printf_float+0x1a0>
 80091e6:	3301      	adds	r3, #1
 80091e8:	185b      	adds	r3, r3, r1
 80091ea:	6123      	str	r3, [r4, #16]
 80091ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091ee:	2600      	movs	r6, #0
 80091f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80091f2:	e7d9      	b.n	80091a8 <_printf_float+0x15c>
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d103      	bne.n	8009200 <_printf_float+0x1b4>
 80091f8:	2201      	movs	r2, #1
 80091fa:	6821      	ldr	r1, [r4, #0]
 80091fc:	4211      	tst	r1, r2
 80091fe:	d000      	beq.n	8009202 <_printf_float+0x1b6>
 8009200:	1c9a      	adds	r2, r3, #2
 8009202:	6122      	str	r2, [r4, #16]
 8009204:	e7f2      	b.n	80091ec <_printf_float+0x1a0>
 8009206:	2767      	movs	r7, #103	; 0x67
 8009208:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800920a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800920c:	4293      	cmp	r3, r2
 800920e:	db05      	blt.n	800921c <_printf_float+0x1d0>
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	6123      	str	r3, [r4, #16]
 8009214:	07d2      	lsls	r2, r2, #31
 8009216:	d5e9      	bpl.n	80091ec <_printf_float+0x1a0>
 8009218:	3301      	adds	r3, #1
 800921a:	e7e6      	b.n	80091ea <_printf_float+0x19e>
 800921c:	2101      	movs	r1, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	dc01      	bgt.n	8009226 <_printf_float+0x1da>
 8009222:	1849      	adds	r1, r1, r1
 8009224:	1ac9      	subs	r1, r1, r3
 8009226:	1852      	adds	r2, r2, r1
 8009228:	e7eb      	b.n	8009202 <_printf_float+0x1b6>
 800922a:	6822      	ldr	r2, [r4, #0]
 800922c:	0553      	lsls	r3, r2, #21
 800922e:	d408      	bmi.n	8009242 <_printf_float+0x1f6>
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	002a      	movs	r2, r5
 8009234:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009236:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009238:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800923a:	47a8      	blx	r5
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d129      	bne.n	8009294 <_printf_float+0x248>
 8009240:	e75f      	b.n	8009102 <_printf_float+0xb6>
 8009242:	2f65      	cmp	r7, #101	; 0x65
 8009244:	d800      	bhi.n	8009248 <_printf_float+0x1fc>
 8009246:	e0e0      	b.n	800940a <_printf_float+0x3be>
 8009248:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800924a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800924c:	2200      	movs	r2, #0
 800924e:	2300      	movs	r3, #0
 8009250:	f7f7 f8f2 	bl	8000438 <__aeabi_dcmpeq>
 8009254:	2800      	cmp	r0, #0
 8009256:	d034      	beq.n	80092c2 <_printf_float+0x276>
 8009258:	2301      	movs	r3, #1
 800925a:	4a42      	ldr	r2, [pc, #264]	; (8009364 <_printf_float+0x318>)
 800925c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800925e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009260:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009262:	47a8      	blx	r5
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d100      	bne.n	800926a <_printf_float+0x21e>
 8009268:	e74b      	b.n	8009102 <_printf_float+0xb6>
 800926a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800926c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800926e:	4293      	cmp	r3, r2
 8009270:	db02      	blt.n	8009278 <_printf_float+0x22c>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	07db      	lsls	r3, r3, #31
 8009276:	d50d      	bpl.n	8009294 <_printf_float+0x248>
 8009278:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800927a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800927c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800927e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009282:	47a8      	blx	r5
 8009284:	2500      	movs	r5, #0
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	d100      	bne.n	800928c <_printf_float+0x240>
 800928a:	e73a      	b.n	8009102 <_printf_float+0xb6>
 800928c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800928e:	3b01      	subs	r3, #1
 8009290:	42ab      	cmp	r3, r5
 8009292:	dc0a      	bgt.n	80092aa <_printf_float+0x25e>
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	079b      	lsls	r3, r3, #30
 8009298:	d500      	bpl.n	800929c <_printf_float+0x250>
 800929a:	e108      	b.n	80094ae <_printf_float+0x462>
 800929c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800929e:	68e0      	ldr	r0, [r4, #12]
 80092a0:	4298      	cmp	r0, r3
 80092a2:	db00      	blt.n	80092a6 <_printf_float+0x25a>
 80092a4:	e72f      	b.n	8009106 <_printf_float+0xba>
 80092a6:	0018      	movs	r0, r3
 80092a8:	e72d      	b.n	8009106 <_printf_float+0xba>
 80092aa:	0022      	movs	r2, r4
 80092ac:	2301      	movs	r3, #1
 80092ae:	321a      	adds	r2, #26
 80092b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80092b6:	47b0      	blx	r6
 80092b8:	1c43      	adds	r3, r0, #1
 80092ba:	d100      	bne.n	80092be <_printf_float+0x272>
 80092bc:	e721      	b.n	8009102 <_printf_float+0xb6>
 80092be:	3501      	adds	r5, #1
 80092c0:	e7e4      	b.n	800928c <_printf_float+0x240>
 80092c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	dc2d      	bgt.n	8009324 <_printf_float+0x2d8>
 80092c8:	2301      	movs	r3, #1
 80092ca:	4a26      	ldr	r2, [pc, #152]	; (8009364 <_printf_float+0x318>)
 80092cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80092d2:	47b0      	blx	r6
 80092d4:	1c43      	adds	r3, r0, #1
 80092d6:	d100      	bne.n	80092da <_printf_float+0x28e>
 80092d8:	e713      	b.n	8009102 <_printf_float+0xb6>
 80092da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d105      	bne.n	80092ec <_printf_float+0x2a0>
 80092e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d102      	bne.n	80092ec <_printf_float+0x2a0>
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	07db      	lsls	r3, r3, #31
 80092ea:	d5d3      	bpl.n	8009294 <_printf_float+0x248>
 80092ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80092ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092f6:	47b0      	blx	r6
 80092f8:	2600      	movs	r6, #0
 80092fa:	1c43      	adds	r3, r0, #1
 80092fc:	d100      	bne.n	8009300 <_printf_float+0x2b4>
 80092fe:	e700      	b.n	8009102 <_printf_float+0xb6>
 8009300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009302:	425b      	negs	r3, r3
 8009304:	42b3      	cmp	r3, r6
 8009306:	dc01      	bgt.n	800930c <_printf_float+0x2c0>
 8009308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800930a:	e792      	b.n	8009232 <_printf_float+0x1e6>
 800930c:	0022      	movs	r2, r4
 800930e:	2301      	movs	r3, #1
 8009310:	321a      	adds	r2, #26
 8009312:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009316:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009318:	47b8      	blx	r7
 800931a:	1c43      	adds	r3, r0, #1
 800931c:	d100      	bne.n	8009320 <_printf_float+0x2d4>
 800931e:	e6f0      	b.n	8009102 <_printf_float+0xb6>
 8009320:	3601      	adds	r6, #1
 8009322:	e7ed      	b.n	8009300 <_printf_float+0x2b4>
 8009324:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009326:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009328:	429f      	cmp	r7, r3
 800932a:	dd00      	ble.n	800932e <_printf_float+0x2e2>
 800932c:	001f      	movs	r7, r3
 800932e:	2f00      	cmp	r7, #0
 8009330:	dd08      	ble.n	8009344 <_printf_float+0x2f8>
 8009332:	003b      	movs	r3, r7
 8009334:	002a      	movs	r2, r5
 8009336:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800933a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800933c:	47b0      	blx	r6
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	d100      	bne.n	8009344 <_printf_float+0x2f8>
 8009342:	e6de      	b.n	8009102 <_printf_float+0xb6>
 8009344:	2300      	movs	r3, #0
 8009346:	930d      	str	r3, [sp, #52]	; 0x34
 8009348:	43fb      	mvns	r3, r7
 800934a:	17db      	asrs	r3, r3, #31
 800934c:	930f      	str	r3, [sp, #60]	; 0x3c
 800934e:	e018      	b.n	8009382 <_printf_float+0x336>
 8009350:	7fefffff 	.word	0x7fefffff
 8009354:	0800b210 	.word	0x0800b210
 8009358:	0800b20c 	.word	0x0800b20c
 800935c:	0800b218 	.word	0x0800b218
 8009360:	0800b214 	.word	0x0800b214
 8009364:	0800b21c 	.word	0x0800b21c
 8009368:	0022      	movs	r2, r4
 800936a:	2301      	movs	r3, #1
 800936c:	321a      	adds	r2, #26
 800936e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009372:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009374:	47b0      	blx	r6
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	d100      	bne.n	800937c <_printf_float+0x330>
 800937a:	e6c2      	b.n	8009102 <_printf_float+0xb6>
 800937c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800937e:	3301      	adds	r3, #1
 8009380:	930d      	str	r3, [sp, #52]	; 0x34
 8009382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009384:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8009386:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009388:	403b      	ands	r3, r7
 800938a:	1af3      	subs	r3, r6, r3
 800938c:	4293      	cmp	r3, r2
 800938e:	dceb      	bgt.n	8009368 <_printf_float+0x31c>
 8009390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009392:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009394:	19ad      	adds	r5, r5, r6
 8009396:	4293      	cmp	r3, r2
 8009398:	db10      	blt.n	80093bc <_printf_float+0x370>
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	07db      	lsls	r3, r3, #31
 800939e:	d40d      	bmi.n	80093bc <_printf_float+0x370>
 80093a0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80093a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093a4:	1bbe      	subs	r6, r7, r6
 80093a6:	1aff      	subs	r7, r7, r3
 80093a8:	42b7      	cmp	r7, r6
 80093aa:	dd00      	ble.n	80093ae <_printf_float+0x362>
 80093ac:	0037      	movs	r7, r6
 80093ae:	2f00      	cmp	r7, #0
 80093b0:	dc0d      	bgt.n	80093ce <_printf_float+0x382>
 80093b2:	43fe      	mvns	r6, r7
 80093b4:	17f3      	asrs	r3, r6, #31
 80093b6:	2500      	movs	r5, #0
 80093b8:	930c      	str	r3, [sp, #48]	; 0x30
 80093ba:	e01c      	b.n	80093f6 <_printf_float+0x3aa>
 80093bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093c4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80093c6:	47b8      	blx	r7
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d1e9      	bne.n	80093a0 <_printf_float+0x354>
 80093cc:	e699      	b.n	8009102 <_printf_float+0xb6>
 80093ce:	003b      	movs	r3, r7
 80093d0:	002a      	movs	r2, r5
 80093d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80093d8:	47a8      	blx	r5
 80093da:	1c43      	adds	r3, r0, #1
 80093dc:	d1e9      	bne.n	80093b2 <_printf_float+0x366>
 80093de:	e690      	b.n	8009102 <_printf_float+0xb6>
 80093e0:	0022      	movs	r2, r4
 80093e2:	2301      	movs	r3, #1
 80093e4:	321a      	adds	r2, #26
 80093e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80093ec:	47b0      	blx	r6
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	d100      	bne.n	80093f4 <_printf_float+0x3a8>
 80093f2:	e686      	b.n	8009102 <_printf_float+0xb6>
 80093f4:	3501      	adds	r5, #1
 80093f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093fc:	1a9b      	subs	r3, r3, r2
 80093fe:	003a      	movs	r2, r7
 8009400:	400a      	ands	r2, r1
 8009402:	1a9b      	subs	r3, r3, r2
 8009404:	42ab      	cmp	r3, r5
 8009406:	dceb      	bgt.n	80093e0 <_printf_float+0x394>
 8009408:	e744      	b.n	8009294 <_printf_float+0x248>
 800940a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800940c:	2b01      	cmp	r3, #1
 800940e:	dc02      	bgt.n	8009416 <_printf_float+0x3ca>
 8009410:	2301      	movs	r3, #1
 8009412:	421a      	tst	r2, r3
 8009414:	d032      	beq.n	800947c <_printf_float+0x430>
 8009416:	2301      	movs	r3, #1
 8009418:	002a      	movs	r2, r5
 800941a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800941c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800941e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009420:	47b8      	blx	r7
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	d100      	bne.n	8009428 <_printf_float+0x3dc>
 8009426:	e66c      	b.n	8009102 <_printf_float+0xb6>
 8009428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800942a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800942c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800942e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009430:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009432:	3501      	adds	r5, #1
 8009434:	47b8      	blx	r7
 8009436:	1c43      	adds	r3, r0, #1
 8009438:	d100      	bne.n	800943c <_printf_float+0x3f0>
 800943a:	e662      	b.n	8009102 <_printf_float+0xb6>
 800943c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800943e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009440:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009442:	2200      	movs	r2, #0
 8009444:	1e5f      	subs	r7, r3, #1
 8009446:	2300      	movs	r3, #0
 8009448:	f7f6 fff6 	bl	8000438 <__aeabi_dcmpeq>
 800944c:	003b      	movs	r3, r7
 800944e:	2800      	cmp	r0, #0
 8009450:	d014      	beq.n	800947c <_printf_float+0x430>
 8009452:	2500      	movs	r5, #0
 8009454:	e00a      	b.n	800946c <_printf_float+0x420>
 8009456:	0022      	movs	r2, r4
 8009458:	2301      	movs	r3, #1
 800945a:	321a      	adds	r2, #26
 800945c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800945e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009460:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009462:	47b8      	blx	r7
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d100      	bne.n	800946a <_printf_float+0x41e>
 8009468:	e64b      	b.n	8009102 <_printf_float+0xb6>
 800946a:	3501      	adds	r5, #1
 800946c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800946e:	3b01      	subs	r3, #1
 8009470:	42ab      	cmp	r3, r5
 8009472:	dcf0      	bgt.n	8009456 <_printf_float+0x40a>
 8009474:	0022      	movs	r2, r4
 8009476:	0033      	movs	r3, r6
 8009478:	3250      	adds	r2, #80	; 0x50
 800947a:	e6db      	b.n	8009234 <_printf_float+0x1e8>
 800947c:	002a      	movs	r2, r5
 800947e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009482:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009484:	47a8      	blx	r5
 8009486:	1c43      	adds	r3, r0, #1
 8009488:	d1f4      	bne.n	8009474 <_printf_float+0x428>
 800948a:	e63a      	b.n	8009102 <_printf_float+0xb6>
 800948c:	0022      	movs	r2, r4
 800948e:	2301      	movs	r3, #1
 8009490:	3219      	adds	r2, #25
 8009492:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009494:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009496:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009498:	47b0      	blx	r6
 800949a:	1c43      	adds	r3, r0, #1
 800949c:	d100      	bne.n	80094a0 <_printf_float+0x454>
 800949e:	e630      	b.n	8009102 <_printf_float+0xb6>
 80094a0:	3501      	adds	r5, #1
 80094a2:	68e3      	ldr	r3, [r4, #12]
 80094a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094a6:	1a9b      	subs	r3, r3, r2
 80094a8:	42ab      	cmp	r3, r5
 80094aa:	dcef      	bgt.n	800948c <_printf_float+0x440>
 80094ac:	e6f6      	b.n	800929c <_printf_float+0x250>
 80094ae:	2500      	movs	r5, #0
 80094b0:	e7f7      	b.n	80094a2 <_printf_float+0x456>
 80094b2:	2a00      	cmp	r2, #0
 80094b4:	d100      	bne.n	80094b8 <_printf_float+0x46c>
 80094b6:	e689      	b.n	80091cc <_printf_float+0x180>
 80094b8:	2100      	movs	r1, #0
 80094ba:	9106      	str	r1, [sp, #24]
 80094bc:	a912      	add	r1, sp, #72	; 0x48
 80094be:	9105      	str	r1, [sp, #20]
 80094c0:	a911      	add	r1, sp, #68	; 0x44
 80094c2:	9103      	str	r1, [sp, #12]
 80094c4:	2123      	movs	r1, #35	; 0x23
 80094c6:	a808      	add	r0, sp, #32
 80094c8:	1809      	adds	r1, r1, r0
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	9200      	str	r2, [sp, #0]
 80094d0:	002b      	movs	r3, r5
 80094d2:	9704      	str	r7, [sp, #16]
 80094d4:	9102      	str	r1, [sp, #8]
 80094d6:	0032      	movs	r2, r6
 80094d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094da:	f7ff fd1b 	bl	8008f14 <__cvt>
 80094de:	0005      	movs	r5, r0
 80094e0:	e645      	b.n	800916e <_printf_float+0x122>
 80094e2:	46c0      	nop			; (mov r8, r8)

080094e4 <_printf_common>:
 80094e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094e6:	0015      	movs	r5, r2
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	688a      	ldr	r2, [r1, #8]
 80094ec:	690b      	ldr	r3, [r1, #16]
 80094ee:	9000      	str	r0, [sp, #0]
 80094f0:	000c      	movs	r4, r1
 80094f2:	4293      	cmp	r3, r2
 80094f4:	da00      	bge.n	80094f8 <_printf_common+0x14>
 80094f6:	0013      	movs	r3, r2
 80094f8:	0022      	movs	r2, r4
 80094fa:	602b      	str	r3, [r5, #0]
 80094fc:	3243      	adds	r2, #67	; 0x43
 80094fe:	7812      	ldrb	r2, [r2, #0]
 8009500:	2a00      	cmp	r2, #0
 8009502:	d001      	beq.n	8009508 <_printf_common+0x24>
 8009504:	3301      	adds	r3, #1
 8009506:	602b      	str	r3, [r5, #0]
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	069b      	lsls	r3, r3, #26
 800950c:	d502      	bpl.n	8009514 <_printf_common+0x30>
 800950e:	682b      	ldr	r3, [r5, #0]
 8009510:	3302      	adds	r3, #2
 8009512:	602b      	str	r3, [r5, #0]
 8009514:	2706      	movs	r7, #6
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	401f      	ands	r7, r3
 800951a:	d027      	beq.n	800956c <_printf_common+0x88>
 800951c:	0023      	movs	r3, r4
 800951e:	3343      	adds	r3, #67	; 0x43
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	1e5a      	subs	r2, r3, #1
 8009524:	4193      	sbcs	r3, r2
 8009526:	6822      	ldr	r2, [r4, #0]
 8009528:	0692      	lsls	r2, r2, #26
 800952a:	d430      	bmi.n	800958e <_printf_common+0xaa>
 800952c:	0022      	movs	r2, r4
 800952e:	9901      	ldr	r1, [sp, #4]
 8009530:	3243      	adds	r2, #67	; 0x43
 8009532:	9800      	ldr	r0, [sp, #0]
 8009534:	9e08      	ldr	r6, [sp, #32]
 8009536:	47b0      	blx	r6
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	d025      	beq.n	8009588 <_printf_common+0xa4>
 800953c:	2306      	movs	r3, #6
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	682a      	ldr	r2, [r5, #0]
 8009542:	68e1      	ldr	r1, [r4, #12]
 8009544:	4003      	ands	r3, r0
 8009546:	2500      	movs	r5, #0
 8009548:	2b04      	cmp	r3, #4
 800954a:	d103      	bne.n	8009554 <_printf_common+0x70>
 800954c:	1a8d      	subs	r5, r1, r2
 800954e:	43eb      	mvns	r3, r5
 8009550:	17db      	asrs	r3, r3, #31
 8009552:	401d      	ands	r5, r3
 8009554:	68a3      	ldr	r3, [r4, #8]
 8009556:	6922      	ldr	r2, [r4, #16]
 8009558:	4293      	cmp	r3, r2
 800955a:	dd01      	ble.n	8009560 <_printf_common+0x7c>
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	18ed      	adds	r5, r5, r3
 8009560:	2700      	movs	r7, #0
 8009562:	42bd      	cmp	r5, r7
 8009564:	d120      	bne.n	80095a8 <_printf_common+0xc4>
 8009566:	2000      	movs	r0, #0
 8009568:	e010      	b.n	800958c <_printf_common+0xa8>
 800956a:	3701      	adds	r7, #1
 800956c:	68e3      	ldr	r3, [r4, #12]
 800956e:	682a      	ldr	r2, [r5, #0]
 8009570:	1a9b      	subs	r3, r3, r2
 8009572:	42bb      	cmp	r3, r7
 8009574:	ddd2      	ble.n	800951c <_printf_common+0x38>
 8009576:	0022      	movs	r2, r4
 8009578:	2301      	movs	r3, #1
 800957a:	3219      	adds	r2, #25
 800957c:	9901      	ldr	r1, [sp, #4]
 800957e:	9800      	ldr	r0, [sp, #0]
 8009580:	9e08      	ldr	r6, [sp, #32]
 8009582:	47b0      	blx	r6
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d1f0      	bne.n	800956a <_printf_common+0x86>
 8009588:	2001      	movs	r0, #1
 800958a:	4240      	negs	r0, r0
 800958c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800958e:	2030      	movs	r0, #48	; 0x30
 8009590:	18e1      	adds	r1, r4, r3
 8009592:	3143      	adds	r1, #67	; 0x43
 8009594:	7008      	strb	r0, [r1, #0]
 8009596:	0021      	movs	r1, r4
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	3145      	adds	r1, #69	; 0x45
 800959c:	7809      	ldrb	r1, [r1, #0]
 800959e:	18a2      	adds	r2, r4, r2
 80095a0:	3243      	adds	r2, #67	; 0x43
 80095a2:	3302      	adds	r3, #2
 80095a4:	7011      	strb	r1, [r2, #0]
 80095a6:	e7c1      	b.n	800952c <_printf_common+0x48>
 80095a8:	0022      	movs	r2, r4
 80095aa:	2301      	movs	r3, #1
 80095ac:	321a      	adds	r2, #26
 80095ae:	9901      	ldr	r1, [sp, #4]
 80095b0:	9800      	ldr	r0, [sp, #0]
 80095b2:	9e08      	ldr	r6, [sp, #32]
 80095b4:	47b0      	blx	r6
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	d0e6      	beq.n	8009588 <_printf_common+0xa4>
 80095ba:	3701      	adds	r7, #1
 80095bc:	e7d1      	b.n	8009562 <_printf_common+0x7e>
	...

080095c0 <_printf_i>:
 80095c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c2:	b089      	sub	sp, #36	; 0x24
 80095c4:	9204      	str	r2, [sp, #16]
 80095c6:	000a      	movs	r2, r1
 80095c8:	3243      	adds	r2, #67	; 0x43
 80095ca:	9305      	str	r3, [sp, #20]
 80095cc:	9003      	str	r0, [sp, #12]
 80095ce:	9202      	str	r2, [sp, #8]
 80095d0:	7e0a      	ldrb	r2, [r1, #24]
 80095d2:	000c      	movs	r4, r1
 80095d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095d6:	2a6e      	cmp	r2, #110	; 0x6e
 80095d8:	d100      	bne.n	80095dc <_printf_i+0x1c>
 80095da:	e086      	b.n	80096ea <_printf_i+0x12a>
 80095dc:	d81f      	bhi.n	800961e <_printf_i+0x5e>
 80095de:	2a63      	cmp	r2, #99	; 0x63
 80095e0:	d033      	beq.n	800964a <_printf_i+0x8a>
 80095e2:	d808      	bhi.n	80095f6 <_printf_i+0x36>
 80095e4:	2a00      	cmp	r2, #0
 80095e6:	d100      	bne.n	80095ea <_printf_i+0x2a>
 80095e8:	e08c      	b.n	8009704 <_printf_i+0x144>
 80095ea:	2a58      	cmp	r2, #88	; 0x58
 80095ec:	d04d      	beq.n	800968a <_printf_i+0xca>
 80095ee:	0025      	movs	r5, r4
 80095f0:	3542      	adds	r5, #66	; 0x42
 80095f2:	702a      	strb	r2, [r5, #0]
 80095f4:	e030      	b.n	8009658 <_printf_i+0x98>
 80095f6:	2a64      	cmp	r2, #100	; 0x64
 80095f8:	d001      	beq.n	80095fe <_printf_i+0x3e>
 80095fa:	2a69      	cmp	r2, #105	; 0x69
 80095fc:	d1f7      	bne.n	80095ee <_printf_i+0x2e>
 80095fe:	6819      	ldr	r1, [r3, #0]
 8009600:	6825      	ldr	r5, [r4, #0]
 8009602:	1d0a      	adds	r2, r1, #4
 8009604:	0628      	lsls	r0, r5, #24
 8009606:	d529      	bpl.n	800965c <_printf_i+0x9c>
 8009608:	6808      	ldr	r0, [r1, #0]
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	2800      	cmp	r0, #0
 800960e:	da03      	bge.n	8009618 <_printf_i+0x58>
 8009610:	232d      	movs	r3, #45	; 0x2d
 8009612:	9a02      	ldr	r2, [sp, #8]
 8009614:	4240      	negs	r0, r0
 8009616:	7013      	strb	r3, [r2, #0]
 8009618:	4e6b      	ldr	r6, [pc, #428]	; (80097c8 <_printf_i+0x208>)
 800961a:	270a      	movs	r7, #10
 800961c:	e04f      	b.n	80096be <_printf_i+0xfe>
 800961e:	2a73      	cmp	r2, #115	; 0x73
 8009620:	d074      	beq.n	800970c <_printf_i+0x14c>
 8009622:	d808      	bhi.n	8009636 <_printf_i+0x76>
 8009624:	2a6f      	cmp	r2, #111	; 0x6f
 8009626:	d01f      	beq.n	8009668 <_printf_i+0xa8>
 8009628:	2a70      	cmp	r2, #112	; 0x70
 800962a:	d1e0      	bne.n	80095ee <_printf_i+0x2e>
 800962c:	2220      	movs	r2, #32
 800962e:	6809      	ldr	r1, [r1, #0]
 8009630:	430a      	orrs	r2, r1
 8009632:	6022      	str	r2, [r4, #0]
 8009634:	e003      	b.n	800963e <_printf_i+0x7e>
 8009636:	2a75      	cmp	r2, #117	; 0x75
 8009638:	d016      	beq.n	8009668 <_printf_i+0xa8>
 800963a:	2a78      	cmp	r2, #120	; 0x78
 800963c:	d1d7      	bne.n	80095ee <_printf_i+0x2e>
 800963e:	0022      	movs	r2, r4
 8009640:	2178      	movs	r1, #120	; 0x78
 8009642:	3245      	adds	r2, #69	; 0x45
 8009644:	7011      	strb	r1, [r2, #0]
 8009646:	4e61      	ldr	r6, [pc, #388]	; (80097cc <_printf_i+0x20c>)
 8009648:	e022      	b.n	8009690 <_printf_i+0xd0>
 800964a:	0025      	movs	r5, r4
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	3542      	adds	r5, #66	; 0x42
 8009650:	1d11      	adds	r1, r2, #4
 8009652:	6019      	str	r1, [r3, #0]
 8009654:	6813      	ldr	r3, [r2, #0]
 8009656:	702b      	strb	r3, [r5, #0]
 8009658:	2301      	movs	r3, #1
 800965a:	e065      	b.n	8009728 <_printf_i+0x168>
 800965c:	6808      	ldr	r0, [r1, #0]
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	0669      	lsls	r1, r5, #25
 8009662:	d5d3      	bpl.n	800960c <_printf_i+0x4c>
 8009664:	b200      	sxth	r0, r0
 8009666:	e7d1      	b.n	800960c <_printf_i+0x4c>
 8009668:	6819      	ldr	r1, [r3, #0]
 800966a:	6825      	ldr	r5, [r4, #0]
 800966c:	1d08      	adds	r0, r1, #4
 800966e:	6018      	str	r0, [r3, #0]
 8009670:	6808      	ldr	r0, [r1, #0]
 8009672:	062e      	lsls	r6, r5, #24
 8009674:	d505      	bpl.n	8009682 <_printf_i+0xc2>
 8009676:	4e54      	ldr	r6, [pc, #336]	; (80097c8 <_printf_i+0x208>)
 8009678:	2708      	movs	r7, #8
 800967a:	2a6f      	cmp	r2, #111	; 0x6f
 800967c:	d01b      	beq.n	80096b6 <_printf_i+0xf6>
 800967e:	270a      	movs	r7, #10
 8009680:	e019      	b.n	80096b6 <_printf_i+0xf6>
 8009682:	066d      	lsls	r5, r5, #25
 8009684:	d5f7      	bpl.n	8009676 <_printf_i+0xb6>
 8009686:	b280      	uxth	r0, r0
 8009688:	e7f5      	b.n	8009676 <_printf_i+0xb6>
 800968a:	3145      	adds	r1, #69	; 0x45
 800968c:	4e4e      	ldr	r6, [pc, #312]	; (80097c8 <_printf_i+0x208>)
 800968e:	700a      	strb	r2, [r1, #0]
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	6822      	ldr	r2, [r4, #0]
 8009694:	1d01      	adds	r1, r0, #4
 8009696:	6800      	ldr	r0, [r0, #0]
 8009698:	6019      	str	r1, [r3, #0]
 800969a:	0615      	lsls	r5, r2, #24
 800969c:	d521      	bpl.n	80096e2 <_printf_i+0x122>
 800969e:	07d3      	lsls	r3, r2, #31
 80096a0:	d502      	bpl.n	80096a8 <_printf_i+0xe8>
 80096a2:	2320      	movs	r3, #32
 80096a4:	431a      	orrs	r2, r3
 80096a6:	6022      	str	r2, [r4, #0]
 80096a8:	2710      	movs	r7, #16
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d103      	bne.n	80096b6 <_printf_i+0xf6>
 80096ae:	2320      	movs	r3, #32
 80096b0:	6822      	ldr	r2, [r4, #0]
 80096b2:	439a      	bics	r2, r3
 80096b4:	6022      	str	r2, [r4, #0]
 80096b6:	0023      	movs	r3, r4
 80096b8:	2200      	movs	r2, #0
 80096ba:	3343      	adds	r3, #67	; 0x43
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	6863      	ldr	r3, [r4, #4]
 80096c0:	60a3      	str	r3, [r4, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	db58      	blt.n	8009778 <_printf_i+0x1b8>
 80096c6:	2204      	movs	r2, #4
 80096c8:	6821      	ldr	r1, [r4, #0]
 80096ca:	4391      	bics	r1, r2
 80096cc:	6021      	str	r1, [r4, #0]
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d154      	bne.n	800977c <_printf_i+0x1bc>
 80096d2:	9d02      	ldr	r5, [sp, #8]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d05a      	beq.n	800978e <_printf_i+0x1ce>
 80096d8:	0025      	movs	r5, r4
 80096da:	7833      	ldrb	r3, [r6, #0]
 80096dc:	3542      	adds	r5, #66	; 0x42
 80096de:	702b      	strb	r3, [r5, #0]
 80096e0:	e055      	b.n	800978e <_printf_i+0x1ce>
 80096e2:	0655      	lsls	r5, r2, #25
 80096e4:	d5db      	bpl.n	800969e <_printf_i+0xde>
 80096e6:	b280      	uxth	r0, r0
 80096e8:	e7d9      	b.n	800969e <_printf_i+0xde>
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	680d      	ldr	r5, [r1, #0]
 80096ee:	1d10      	adds	r0, r2, #4
 80096f0:	6949      	ldr	r1, [r1, #20]
 80096f2:	6018      	str	r0, [r3, #0]
 80096f4:	6813      	ldr	r3, [r2, #0]
 80096f6:	062e      	lsls	r6, r5, #24
 80096f8:	d501      	bpl.n	80096fe <_printf_i+0x13e>
 80096fa:	6019      	str	r1, [r3, #0]
 80096fc:	e002      	b.n	8009704 <_printf_i+0x144>
 80096fe:	066d      	lsls	r5, r5, #25
 8009700:	d5fb      	bpl.n	80096fa <_printf_i+0x13a>
 8009702:	8019      	strh	r1, [r3, #0]
 8009704:	2300      	movs	r3, #0
 8009706:	9d02      	ldr	r5, [sp, #8]
 8009708:	6123      	str	r3, [r4, #16]
 800970a:	e04f      	b.n	80097ac <_printf_i+0x1ec>
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	1d11      	adds	r1, r2, #4
 8009710:	6019      	str	r1, [r3, #0]
 8009712:	6815      	ldr	r5, [r2, #0]
 8009714:	2100      	movs	r1, #0
 8009716:	6862      	ldr	r2, [r4, #4]
 8009718:	0028      	movs	r0, r5
 800971a:	f000 fef5 	bl	800a508 <memchr>
 800971e:	2800      	cmp	r0, #0
 8009720:	d001      	beq.n	8009726 <_printf_i+0x166>
 8009722:	1b40      	subs	r0, r0, r5
 8009724:	6060      	str	r0, [r4, #4]
 8009726:	6863      	ldr	r3, [r4, #4]
 8009728:	6123      	str	r3, [r4, #16]
 800972a:	2300      	movs	r3, #0
 800972c:	9a02      	ldr	r2, [sp, #8]
 800972e:	7013      	strb	r3, [r2, #0]
 8009730:	e03c      	b.n	80097ac <_printf_i+0x1ec>
 8009732:	6923      	ldr	r3, [r4, #16]
 8009734:	002a      	movs	r2, r5
 8009736:	9904      	ldr	r1, [sp, #16]
 8009738:	9803      	ldr	r0, [sp, #12]
 800973a:	9d05      	ldr	r5, [sp, #20]
 800973c:	47a8      	blx	r5
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	d03e      	beq.n	80097c0 <_printf_i+0x200>
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	079b      	lsls	r3, r3, #30
 8009746:	d415      	bmi.n	8009774 <_printf_i+0x1b4>
 8009748:	9b07      	ldr	r3, [sp, #28]
 800974a:	68e0      	ldr	r0, [r4, #12]
 800974c:	4298      	cmp	r0, r3
 800974e:	da39      	bge.n	80097c4 <_printf_i+0x204>
 8009750:	0018      	movs	r0, r3
 8009752:	e037      	b.n	80097c4 <_printf_i+0x204>
 8009754:	0022      	movs	r2, r4
 8009756:	2301      	movs	r3, #1
 8009758:	3219      	adds	r2, #25
 800975a:	9904      	ldr	r1, [sp, #16]
 800975c:	9803      	ldr	r0, [sp, #12]
 800975e:	9e05      	ldr	r6, [sp, #20]
 8009760:	47b0      	blx	r6
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	d02c      	beq.n	80097c0 <_printf_i+0x200>
 8009766:	3501      	adds	r5, #1
 8009768:	68e3      	ldr	r3, [r4, #12]
 800976a:	9a07      	ldr	r2, [sp, #28]
 800976c:	1a9b      	subs	r3, r3, r2
 800976e:	42ab      	cmp	r3, r5
 8009770:	dcf0      	bgt.n	8009754 <_printf_i+0x194>
 8009772:	e7e9      	b.n	8009748 <_printf_i+0x188>
 8009774:	2500      	movs	r5, #0
 8009776:	e7f7      	b.n	8009768 <_printf_i+0x1a8>
 8009778:	2800      	cmp	r0, #0
 800977a:	d0ad      	beq.n	80096d8 <_printf_i+0x118>
 800977c:	9d02      	ldr	r5, [sp, #8]
 800977e:	0039      	movs	r1, r7
 8009780:	f7f6 fd5a 	bl	8000238 <__aeabi_uidivmod>
 8009784:	5c73      	ldrb	r3, [r6, r1]
 8009786:	3d01      	subs	r5, #1
 8009788:	702b      	strb	r3, [r5, #0]
 800978a:	2800      	cmp	r0, #0
 800978c:	d1f7      	bne.n	800977e <_printf_i+0x1be>
 800978e:	2f08      	cmp	r7, #8
 8009790:	d109      	bne.n	80097a6 <_printf_i+0x1e6>
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	07db      	lsls	r3, r3, #31
 8009796:	d506      	bpl.n	80097a6 <_printf_i+0x1e6>
 8009798:	6863      	ldr	r3, [r4, #4]
 800979a:	6922      	ldr	r2, [r4, #16]
 800979c:	4293      	cmp	r3, r2
 800979e:	dc02      	bgt.n	80097a6 <_printf_i+0x1e6>
 80097a0:	2330      	movs	r3, #48	; 0x30
 80097a2:	3d01      	subs	r5, #1
 80097a4:	702b      	strb	r3, [r5, #0]
 80097a6:	9b02      	ldr	r3, [sp, #8]
 80097a8:	1b5b      	subs	r3, r3, r5
 80097aa:	6123      	str	r3, [r4, #16]
 80097ac:	9b05      	ldr	r3, [sp, #20]
 80097ae:	aa07      	add	r2, sp, #28
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	0021      	movs	r1, r4
 80097b4:	9b04      	ldr	r3, [sp, #16]
 80097b6:	9803      	ldr	r0, [sp, #12]
 80097b8:	f7ff fe94 	bl	80094e4 <_printf_common>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d1b8      	bne.n	8009732 <_printf_i+0x172>
 80097c0:	2001      	movs	r0, #1
 80097c2:	4240      	negs	r0, r0
 80097c4:	b009      	add	sp, #36	; 0x24
 80097c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c8:	0800b21e 	.word	0x0800b21e
 80097cc:	0800b22f 	.word	0x0800b22f

080097d0 <siprintf>:
 80097d0:	b40e      	push	{r1, r2, r3}
 80097d2:	b500      	push	{lr}
 80097d4:	490b      	ldr	r1, [pc, #44]	; (8009804 <siprintf+0x34>)
 80097d6:	b09c      	sub	sp, #112	; 0x70
 80097d8:	ab1d      	add	r3, sp, #116	; 0x74
 80097da:	9002      	str	r0, [sp, #8]
 80097dc:	9006      	str	r0, [sp, #24]
 80097de:	9107      	str	r1, [sp, #28]
 80097e0:	9104      	str	r1, [sp, #16]
 80097e2:	4809      	ldr	r0, [pc, #36]	; (8009808 <siprintf+0x38>)
 80097e4:	4909      	ldr	r1, [pc, #36]	; (800980c <siprintf+0x3c>)
 80097e6:	cb04      	ldmia	r3!, {r2}
 80097e8:	9105      	str	r1, [sp, #20]
 80097ea:	6800      	ldr	r0, [r0, #0]
 80097ec:	a902      	add	r1, sp, #8
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	f001 fa9c 	bl	800ad2c <_svfiprintf_r>
 80097f4:	2300      	movs	r3, #0
 80097f6:	9a02      	ldr	r2, [sp, #8]
 80097f8:	7013      	strb	r3, [r2, #0]
 80097fa:	b01c      	add	sp, #112	; 0x70
 80097fc:	bc08      	pop	{r3}
 80097fe:	b003      	add	sp, #12
 8009800:	4718      	bx	r3
 8009802:	46c0      	nop			; (mov r8, r8)
 8009804:	7fffffff 	.word	0x7fffffff
 8009808:	20000020 	.word	0x20000020
 800980c:	ffff0208 	.word	0xffff0208

08009810 <quorem>:
 8009810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009812:	6903      	ldr	r3, [r0, #16]
 8009814:	690c      	ldr	r4, [r1, #16]
 8009816:	b089      	sub	sp, #36	; 0x24
 8009818:	0007      	movs	r7, r0
 800981a:	9105      	str	r1, [sp, #20]
 800981c:	2600      	movs	r6, #0
 800981e:	42a3      	cmp	r3, r4
 8009820:	db65      	blt.n	80098ee <quorem+0xde>
 8009822:	000b      	movs	r3, r1
 8009824:	3c01      	subs	r4, #1
 8009826:	3314      	adds	r3, #20
 8009828:	00a5      	lsls	r5, r4, #2
 800982a:	9303      	str	r3, [sp, #12]
 800982c:	195b      	adds	r3, r3, r5
 800982e:	9304      	str	r3, [sp, #16]
 8009830:	0003      	movs	r3, r0
 8009832:	3314      	adds	r3, #20
 8009834:	9302      	str	r3, [sp, #8]
 8009836:	195d      	adds	r5, r3, r5
 8009838:	9b04      	ldr	r3, [sp, #16]
 800983a:	6828      	ldr	r0, [r5, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	1c59      	adds	r1, r3, #1
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	f7f6 fc73 	bl	800012c <__udivsi3>
 8009846:	9001      	str	r0, [sp, #4]
 8009848:	42b0      	cmp	r0, r6
 800984a:	d029      	beq.n	80098a0 <quorem+0x90>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	9802      	ldr	r0, [sp, #8]
 8009850:	469c      	mov	ip, r3
 8009852:	9606      	str	r6, [sp, #24]
 8009854:	4662      	mov	r2, ip
 8009856:	ca08      	ldmia	r2!, {r3}
 8009858:	4694      	mov	ip, r2
 800985a:	9a01      	ldr	r2, [sp, #4]
 800985c:	b299      	uxth	r1, r3
 800985e:	4351      	muls	r1, r2
 8009860:	0c1b      	lsrs	r3, r3, #16
 8009862:	4353      	muls	r3, r2
 8009864:	1989      	adds	r1, r1, r6
 8009866:	0c0a      	lsrs	r2, r1, #16
 8009868:	189b      	adds	r3, r3, r2
 800986a:	9307      	str	r3, [sp, #28]
 800986c:	0c1e      	lsrs	r6, r3, #16
 800986e:	6803      	ldr	r3, [r0, #0]
 8009870:	b289      	uxth	r1, r1
 8009872:	b29a      	uxth	r2, r3
 8009874:	9b06      	ldr	r3, [sp, #24]
 8009876:	18d2      	adds	r2, r2, r3
 8009878:	6803      	ldr	r3, [r0, #0]
 800987a:	1a52      	subs	r2, r2, r1
 800987c:	0c19      	lsrs	r1, r3, #16
 800987e:	466b      	mov	r3, sp
 8009880:	8b9b      	ldrh	r3, [r3, #28]
 8009882:	1acb      	subs	r3, r1, r3
 8009884:	1411      	asrs	r1, r2, #16
 8009886:	185b      	adds	r3, r3, r1
 8009888:	1419      	asrs	r1, r3, #16
 800988a:	b292      	uxth	r2, r2
 800988c:	041b      	lsls	r3, r3, #16
 800988e:	431a      	orrs	r2, r3
 8009890:	9b04      	ldr	r3, [sp, #16]
 8009892:	9106      	str	r1, [sp, #24]
 8009894:	c004      	stmia	r0!, {r2}
 8009896:	4563      	cmp	r3, ip
 8009898:	d2dc      	bcs.n	8009854 <quorem+0x44>
 800989a:	682b      	ldr	r3, [r5, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d02d      	beq.n	80098fc <quorem+0xec>
 80098a0:	9905      	ldr	r1, [sp, #20]
 80098a2:	0038      	movs	r0, r7
 80098a4:	f001 f858 	bl	800a958 <__mcmp>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	db1f      	blt.n	80098ec <quorem+0xdc>
 80098ac:	2500      	movs	r5, #0
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	9802      	ldr	r0, [sp, #8]
 80098b2:	3301      	adds	r3, #1
 80098b4:	9903      	ldr	r1, [sp, #12]
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	6802      	ldr	r2, [r0, #0]
 80098ba:	c908      	ldmia	r1!, {r3}
 80098bc:	b292      	uxth	r2, r2
 80098be:	1955      	adds	r5, r2, r5
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	1aaa      	subs	r2, r5, r2
 80098c4:	6805      	ldr	r5, [r0, #0]
 80098c6:	0c1b      	lsrs	r3, r3, #16
 80098c8:	0c2d      	lsrs	r5, r5, #16
 80098ca:	1aeb      	subs	r3, r5, r3
 80098cc:	1415      	asrs	r5, r2, #16
 80098ce:	195b      	adds	r3, r3, r5
 80098d0:	141d      	asrs	r5, r3, #16
 80098d2:	b292      	uxth	r2, r2
 80098d4:	041b      	lsls	r3, r3, #16
 80098d6:	4313      	orrs	r3, r2
 80098d8:	c008      	stmia	r0!, {r3}
 80098da:	9b04      	ldr	r3, [sp, #16]
 80098dc:	428b      	cmp	r3, r1
 80098de:	d2eb      	bcs.n	80098b8 <quorem+0xa8>
 80098e0:	9a02      	ldr	r2, [sp, #8]
 80098e2:	00a3      	lsls	r3, r4, #2
 80098e4:	18d3      	adds	r3, r2, r3
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	2a00      	cmp	r2, #0
 80098ea:	d011      	beq.n	8009910 <quorem+0x100>
 80098ec:	9e01      	ldr	r6, [sp, #4]
 80098ee:	0030      	movs	r0, r6
 80098f0:	b009      	add	sp, #36	; 0x24
 80098f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d104      	bne.n	8009904 <quorem+0xf4>
 80098fa:	3c01      	subs	r4, #1
 80098fc:	9b02      	ldr	r3, [sp, #8]
 80098fe:	3d04      	subs	r5, #4
 8009900:	42ab      	cmp	r3, r5
 8009902:	d3f7      	bcc.n	80098f4 <quorem+0xe4>
 8009904:	613c      	str	r4, [r7, #16]
 8009906:	e7cb      	b.n	80098a0 <quorem+0x90>
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	2a00      	cmp	r2, #0
 800990c:	d104      	bne.n	8009918 <quorem+0x108>
 800990e:	3c01      	subs	r4, #1
 8009910:	9a02      	ldr	r2, [sp, #8]
 8009912:	3b04      	subs	r3, #4
 8009914:	429a      	cmp	r2, r3
 8009916:	d3f7      	bcc.n	8009908 <quorem+0xf8>
 8009918:	613c      	str	r4, [r7, #16]
 800991a:	e7e7      	b.n	80098ec <quorem+0xdc>

0800991c <_dtoa_r>:
 800991c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800991e:	0016      	movs	r6, r2
 8009920:	001f      	movs	r7, r3
 8009922:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009924:	b09b      	sub	sp, #108	; 0x6c
 8009926:	9002      	str	r0, [sp, #8]
 8009928:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800992a:	9606      	str	r6, [sp, #24]
 800992c:	9707      	str	r7, [sp, #28]
 800992e:	2c00      	cmp	r4, #0
 8009930:	d108      	bne.n	8009944 <_dtoa_r+0x28>
 8009932:	2010      	movs	r0, #16
 8009934:	f000 fdde 	bl	800a4f4 <malloc>
 8009938:	9b02      	ldr	r3, [sp, #8]
 800993a:	6258      	str	r0, [r3, #36]	; 0x24
 800993c:	6044      	str	r4, [r0, #4]
 800993e:	6084      	str	r4, [r0, #8]
 8009940:	6004      	str	r4, [r0, #0]
 8009942:	60c4      	str	r4, [r0, #12]
 8009944:	9b02      	ldr	r3, [sp, #8]
 8009946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009948:	6819      	ldr	r1, [r3, #0]
 800994a:	2900      	cmp	r1, #0
 800994c:	d00b      	beq.n	8009966 <_dtoa_r+0x4a>
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	2301      	movs	r3, #1
 8009952:	4093      	lsls	r3, r2
 8009954:	604a      	str	r2, [r1, #4]
 8009956:	608b      	str	r3, [r1, #8]
 8009958:	9802      	ldr	r0, [sp, #8]
 800995a:	f000 fe21 	bl	800a5a0 <_Bfree>
 800995e:	2200      	movs	r2, #0
 8009960:	9b02      	ldr	r3, [sp, #8]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	2f00      	cmp	r7, #0
 8009968:	da20      	bge.n	80099ac <_dtoa_r+0x90>
 800996a:	2301      	movs	r3, #1
 800996c:	602b      	str	r3, [r5, #0]
 800996e:	007b      	lsls	r3, r7, #1
 8009970:	085b      	lsrs	r3, r3, #1
 8009972:	9307      	str	r3, [sp, #28]
 8009974:	9c07      	ldr	r4, [sp, #28]
 8009976:	4bb2      	ldr	r3, [pc, #712]	; (8009c40 <_dtoa_r+0x324>)
 8009978:	0022      	movs	r2, r4
 800997a:	9317      	str	r3, [sp, #92]	; 0x5c
 800997c:	401a      	ands	r2, r3
 800997e:	429a      	cmp	r2, r3
 8009980:	d117      	bne.n	80099b2 <_dtoa_r+0x96>
 8009982:	4bb0      	ldr	r3, [pc, #704]	; (8009c44 <_dtoa_r+0x328>)
 8009984:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	9b06      	ldr	r3, [sp, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d103      	bne.n	8009996 <_dtoa_r+0x7a>
 800998e:	0324      	lsls	r4, r4, #12
 8009990:	d101      	bne.n	8009996 <_dtoa_r+0x7a>
 8009992:	f000 fd87 	bl	800a4a4 <_dtoa_r+0xb88>
 8009996:	4bac      	ldr	r3, [pc, #688]	; (8009c48 <_dtoa_r+0x32c>)
 8009998:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800999a:	9308      	str	r3, [sp, #32]
 800999c:	2a00      	cmp	r2, #0
 800999e:	d002      	beq.n	80099a6 <_dtoa_r+0x8a>
 80099a0:	4baa      	ldr	r3, [pc, #680]	; (8009c4c <_dtoa_r+0x330>)
 80099a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	9808      	ldr	r0, [sp, #32]
 80099a8:	b01b      	add	sp, #108	; 0x6c
 80099aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ac:	2300      	movs	r3, #0
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	e7e0      	b.n	8009974 <_dtoa_r+0x58>
 80099b2:	9e06      	ldr	r6, [sp, #24]
 80099b4:	9f07      	ldr	r7, [sp, #28]
 80099b6:	2200      	movs	r2, #0
 80099b8:	2300      	movs	r3, #0
 80099ba:	0030      	movs	r0, r6
 80099bc:	0039      	movs	r1, r7
 80099be:	f7f6 fd3b 	bl	8000438 <__aeabi_dcmpeq>
 80099c2:	1e05      	subs	r5, r0, #0
 80099c4:	d00b      	beq.n	80099de <_dtoa_r+0xc2>
 80099c6:	2301      	movs	r3, #1
 80099c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	4ba0      	ldr	r3, [pc, #640]	; (8009c50 <_dtoa_r+0x334>)
 80099ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80099d0:	9308      	str	r3, [sp, #32]
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	d0e7      	beq.n	80099a6 <_dtoa_r+0x8a>
 80099d6:	4a9f      	ldr	r2, [pc, #636]	; (8009c54 <_dtoa_r+0x338>)
 80099d8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80099da:	600a      	str	r2, [r1, #0]
 80099dc:	e7e3      	b.n	80099a6 <_dtoa_r+0x8a>
 80099de:	ab18      	add	r3, sp, #96	; 0x60
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	ab19      	add	r3, sp, #100	; 0x64
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	0032      	movs	r2, r6
 80099e8:	003b      	movs	r3, r7
 80099ea:	9802      	ldr	r0, [sp, #8]
 80099ec:	f001 f832 	bl	800aa54 <__d2b>
 80099f0:	0063      	lsls	r3, r4, #1
 80099f2:	9003      	str	r0, [sp, #12]
 80099f4:	0d5b      	lsrs	r3, r3, #21
 80099f6:	d074      	beq.n	8009ae2 <_dtoa_r+0x1c6>
 80099f8:	033a      	lsls	r2, r7, #12
 80099fa:	4c97      	ldr	r4, [pc, #604]	; (8009c58 <_dtoa_r+0x33c>)
 80099fc:	0b12      	lsrs	r2, r2, #12
 80099fe:	4314      	orrs	r4, r2
 8009a00:	0021      	movs	r1, r4
 8009a02:	4a96      	ldr	r2, [pc, #600]	; (8009c5c <_dtoa_r+0x340>)
 8009a04:	0030      	movs	r0, r6
 8009a06:	9516      	str	r5, [sp, #88]	; 0x58
 8009a08:	189e      	adds	r6, r3, r2
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	4b94      	ldr	r3, [pc, #592]	; (8009c60 <_dtoa_r+0x344>)
 8009a0e:	f7f8 f95d 	bl	8001ccc <__aeabi_dsub>
 8009a12:	4a94      	ldr	r2, [pc, #592]	; (8009c64 <_dtoa_r+0x348>)
 8009a14:	4b94      	ldr	r3, [pc, #592]	; (8009c68 <_dtoa_r+0x34c>)
 8009a16:	f7f7 fee7 	bl	80017e8 <__aeabi_dmul>
 8009a1a:	4a94      	ldr	r2, [pc, #592]	; (8009c6c <_dtoa_r+0x350>)
 8009a1c:	4b94      	ldr	r3, [pc, #592]	; (8009c70 <_dtoa_r+0x354>)
 8009a1e:	f7f6 ffbd 	bl	800099c <__aeabi_dadd>
 8009a22:	0004      	movs	r4, r0
 8009a24:	0030      	movs	r0, r6
 8009a26:	000d      	movs	r5, r1
 8009a28:	f7f8 fcea 	bl	8002400 <__aeabi_i2d>
 8009a2c:	4a91      	ldr	r2, [pc, #580]	; (8009c74 <_dtoa_r+0x358>)
 8009a2e:	4b92      	ldr	r3, [pc, #584]	; (8009c78 <_dtoa_r+0x35c>)
 8009a30:	f7f7 feda 	bl	80017e8 <__aeabi_dmul>
 8009a34:	0002      	movs	r2, r0
 8009a36:	000b      	movs	r3, r1
 8009a38:	0020      	movs	r0, r4
 8009a3a:	0029      	movs	r1, r5
 8009a3c:	f7f6 ffae 	bl	800099c <__aeabi_dadd>
 8009a40:	0004      	movs	r4, r0
 8009a42:	000d      	movs	r5, r1
 8009a44:	f7f8 fca6 	bl	8002394 <__aeabi_d2iz>
 8009a48:	2200      	movs	r2, #0
 8009a4a:	0007      	movs	r7, r0
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	0020      	movs	r0, r4
 8009a50:	0029      	movs	r1, r5
 8009a52:	f7f6 fcf7 	bl	8000444 <__aeabi_dcmplt>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d009      	beq.n	8009a6e <_dtoa_r+0x152>
 8009a5a:	0038      	movs	r0, r7
 8009a5c:	f7f8 fcd0 	bl	8002400 <__aeabi_i2d>
 8009a60:	002b      	movs	r3, r5
 8009a62:	0022      	movs	r2, r4
 8009a64:	f7f6 fce8 	bl	8000438 <__aeabi_dcmpeq>
 8009a68:	4243      	negs	r3, r0
 8009a6a:	4158      	adcs	r0, r3
 8009a6c:	1a3f      	subs	r7, r7, r0
 8009a6e:	2301      	movs	r3, #1
 8009a70:	9314      	str	r3, [sp, #80]	; 0x50
 8009a72:	2f16      	cmp	r7, #22
 8009a74:	d80d      	bhi.n	8009a92 <_dtoa_r+0x176>
 8009a76:	4981      	ldr	r1, [pc, #516]	; (8009c7c <_dtoa_r+0x360>)
 8009a78:	00fb      	lsls	r3, r7, #3
 8009a7a:	18c9      	adds	r1, r1, r3
 8009a7c:	6808      	ldr	r0, [r1, #0]
 8009a7e:	6849      	ldr	r1, [r1, #4]
 8009a80:	9a06      	ldr	r2, [sp, #24]
 8009a82:	9b07      	ldr	r3, [sp, #28]
 8009a84:	f7f6 fcf2 	bl	800046c <__aeabi_dcmpgt>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d046      	beq.n	8009b1a <_dtoa_r+0x1fe>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	3f01      	subs	r7, #1
 8009a90:	9314      	str	r3, [sp, #80]	; 0x50
 8009a92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009a94:	1b9e      	subs	r6, r3, r6
 8009a96:	2300      	movs	r3, #0
 8009a98:	930a      	str	r3, [sp, #40]	; 0x28
 8009a9a:	0033      	movs	r3, r6
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aa0:	d504      	bpl.n	8009aac <_dtoa_r+0x190>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	1b9b      	subs	r3, r3, r6
 8009aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aac:	2f00      	cmp	r7, #0
 8009aae:	db36      	blt.n	8009b1e <_dtoa_r+0x202>
 8009ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab2:	9711      	str	r7, [sp, #68]	; 0x44
 8009ab4:	19db      	adds	r3, r3, r7
 8009ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ab8:	2300      	movs	r3, #0
 8009aba:	9304      	str	r3, [sp, #16]
 8009abc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009abe:	2401      	movs	r4, #1
 8009ac0:	2b09      	cmp	r3, #9
 8009ac2:	d900      	bls.n	8009ac6 <_dtoa_r+0x1aa>
 8009ac4:	e084      	b.n	8009bd0 <_dtoa_r+0x2b4>
 8009ac6:	2b05      	cmp	r3, #5
 8009ac8:	dd02      	ble.n	8009ad0 <_dtoa_r+0x1b4>
 8009aca:	2400      	movs	r4, #0
 8009acc:	3b04      	subs	r3, #4
 8009ace:	9320      	str	r3, [sp, #128]	; 0x80
 8009ad0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009ad2:	1e98      	subs	r0, r3, #2
 8009ad4:	2803      	cmp	r0, #3
 8009ad6:	d900      	bls.n	8009ada <_dtoa_r+0x1be>
 8009ad8:	e084      	b.n	8009be4 <_dtoa_r+0x2c8>
 8009ada:	f7f6 fb1d 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009ade:	7775      	.short	0x7775
 8009ae0:	6a28      	.short	0x6a28
 8009ae2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009ae4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ae6:	189e      	adds	r6, r3, r2
 8009ae8:	4b65      	ldr	r3, [pc, #404]	; (8009c80 <_dtoa_r+0x364>)
 8009aea:	18f2      	adds	r2, r6, r3
 8009aec:	2a20      	cmp	r2, #32
 8009aee:	dd0f      	ble.n	8009b10 <_dtoa_r+0x1f4>
 8009af0:	2340      	movs	r3, #64	; 0x40
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	409c      	lsls	r4, r3
 8009af6:	4b63      	ldr	r3, [pc, #396]	; (8009c84 <_dtoa_r+0x368>)
 8009af8:	9806      	ldr	r0, [sp, #24]
 8009afa:	18f3      	adds	r3, r6, r3
 8009afc:	40d8      	lsrs	r0, r3
 8009afe:	4320      	orrs	r0, r4
 8009b00:	f7f8 fcb8 	bl	8002474 <__aeabi_ui2d>
 8009b04:	2301      	movs	r3, #1
 8009b06:	4c60      	ldr	r4, [pc, #384]	; (8009c88 <_dtoa_r+0x36c>)
 8009b08:	3e01      	subs	r6, #1
 8009b0a:	1909      	adds	r1, r1, r4
 8009b0c:	9316      	str	r3, [sp, #88]	; 0x58
 8009b0e:	e77c      	b.n	8009a0a <_dtoa_r+0xee>
 8009b10:	2320      	movs	r3, #32
 8009b12:	9806      	ldr	r0, [sp, #24]
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	4098      	lsls	r0, r3
 8009b18:	e7f2      	b.n	8009b00 <_dtoa_r+0x1e4>
 8009b1a:	9014      	str	r0, [sp, #80]	; 0x50
 8009b1c:	e7b9      	b.n	8009a92 <_dtoa_r+0x176>
 8009b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b20:	1bdb      	subs	r3, r3, r7
 8009b22:	930a      	str	r3, [sp, #40]	; 0x28
 8009b24:	427b      	negs	r3, r7
 8009b26:	9304      	str	r3, [sp, #16]
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9311      	str	r3, [sp, #68]	; 0x44
 8009b2c:	e7c6      	b.n	8009abc <_dtoa_r+0x1a0>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	930d      	str	r3, [sp, #52]	; 0x34
 8009b32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dd59      	ble.n	8009bec <_dtoa_r+0x2d0>
 8009b38:	930c      	str	r3, [sp, #48]	; 0x30
 8009b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3c:	9a02      	ldr	r2, [sp, #8]
 8009b3e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8009b40:	2200      	movs	r2, #0
 8009b42:	606a      	str	r2, [r5, #4]
 8009b44:	3204      	adds	r2, #4
 8009b46:	0010      	movs	r0, r2
 8009b48:	3014      	adds	r0, #20
 8009b4a:	6869      	ldr	r1, [r5, #4]
 8009b4c:	4298      	cmp	r0, r3
 8009b4e:	d952      	bls.n	8009bf6 <_dtoa_r+0x2da>
 8009b50:	9802      	ldr	r0, [sp, #8]
 8009b52:	f000 fced 	bl	800a530 <_Balloc>
 8009b56:	9b02      	ldr	r3, [sp, #8]
 8009b58:	6028      	str	r0, [r5, #0]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	9308      	str	r3, [sp, #32]
 8009b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b62:	2b0e      	cmp	r3, #14
 8009b64:	d900      	bls.n	8009b68 <_dtoa_r+0x24c>
 8009b66:	e10a      	b.n	8009d7e <_dtoa_r+0x462>
 8009b68:	2c00      	cmp	r4, #0
 8009b6a:	d100      	bne.n	8009b6e <_dtoa_r+0x252>
 8009b6c:	e107      	b.n	8009d7e <_dtoa_r+0x462>
 8009b6e:	9b06      	ldr	r3, [sp, #24]
 8009b70:	9c07      	ldr	r4, [sp, #28]
 8009b72:	9312      	str	r3, [sp, #72]	; 0x48
 8009b74:	9413      	str	r4, [sp, #76]	; 0x4c
 8009b76:	2f00      	cmp	r7, #0
 8009b78:	dc00      	bgt.n	8009b7c <_dtoa_r+0x260>
 8009b7a:	e089      	b.n	8009c90 <_dtoa_r+0x374>
 8009b7c:	210f      	movs	r1, #15
 8009b7e:	003a      	movs	r2, r7
 8009b80:	4b3e      	ldr	r3, [pc, #248]	; (8009c7c <_dtoa_r+0x360>)
 8009b82:	400a      	ands	r2, r1
 8009b84:	00d2      	lsls	r2, r2, #3
 8009b86:	189b      	adds	r3, r3, r2
 8009b88:	681d      	ldr	r5, [r3, #0]
 8009b8a:	685e      	ldr	r6, [r3, #4]
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	113c      	asrs	r4, r7, #4
 8009b90:	930e      	str	r3, [sp, #56]	; 0x38
 8009b92:	06e3      	lsls	r3, r4, #27
 8009b94:	d50b      	bpl.n	8009bae <_dtoa_r+0x292>
 8009b96:	4b3d      	ldr	r3, [pc, #244]	; (8009c8c <_dtoa_r+0x370>)
 8009b98:	400c      	ands	r4, r1
 8009b9a:	6a1a      	ldr	r2, [r3, #32]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009ba0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009ba2:	f7f7 fa17 	bl	8000fd4 <__aeabi_ddiv>
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	9006      	str	r0, [sp, #24]
 8009baa:	9107      	str	r1, [sp, #28]
 8009bac:	930e      	str	r3, [sp, #56]	; 0x38
 8009bae:	2300      	movs	r3, #0
 8009bb0:	e03a      	b.n	8009c28 <_dtoa_r+0x30c>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	930d      	str	r3, [sp, #52]	; 0x34
 8009bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bb8:	18fb      	adds	r3, r7, r3
 8009bba:	930c      	str	r3, [sp, #48]	; 0x30
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dcbb      	bgt.n	8009b3c <_dtoa_r+0x220>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e7b9      	b.n	8009b3c <_dtoa_r+0x220>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e7b1      	b.n	8009b30 <_dtoa_r+0x214>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e7f1      	b.n	8009bb4 <_dtoa_r+0x298>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	940d      	str	r4, [sp, #52]	; 0x34
 8009bd4:	9320      	str	r3, [sp, #128]	; 0x80
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	2200      	movs	r2, #0
 8009bda:	930c      	str	r3, [sp, #48]	; 0x30
 8009bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8009bde:	3313      	adds	r3, #19
 8009be0:	9221      	str	r2, [sp, #132]	; 0x84
 8009be2:	e7ab      	b.n	8009b3c <_dtoa_r+0x220>
 8009be4:	2301      	movs	r3, #1
 8009be6:	930d      	str	r3, [sp, #52]	; 0x34
 8009be8:	3b02      	subs	r3, #2
 8009bea:	e7f5      	b.n	8009bd8 <_dtoa_r+0x2bc>
 8009bec:	2301      	movs	r3, #1
 8009bee:	930c      	str	r3, [sp, #48]	; 0x30
 8009bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf2:	001a      	movs	r2, r3
 8009bf4:	e7f4      	b.n	8009be0 <_dtoa_r+0x2c4>
 8009bf6:	3101      	adds	r1, #1
 8009bf8:	6069      	str	r1, [r5, #4]
 8009bfa:	0052      	lsls	r2, r2, #1
 8009bfc:	e7a3      	b.n	8009b46 <_dtoa_r+0x22a>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	421c      	tst	r4, r3
 8009c02:	d00e      	beq.n	8009c22 <_dtoa_r+0x306>
 8009c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c06:	4a21      	ldr	r2, [pc, #132]	; (8009c8c <_dtoa_r+0x370>)
 8009c08:	3301      	adds	r3, #1
 8009c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8009c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c0e:	0028      	movs	r0, r5
 8009c10:	00db      	lsls	r3, r3, #3
 8009c12:	189b      	adds	r3, r3, r2
 8009c14:	0031      	movs	r1, r6
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f7f7 fde5 	bl	80017e8 <__aeabi_dmul>
 8009c1e:	0005      	movs	r5, r0
 8009c20:	000e      	movs	r6, r1
 8009c22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c24:	1064      	asrs	r4, r4, #1
 8009c26:	3301      	adds	r3, #1
 8009c28:	9310      	str	r3, [sp, #64]	; 0x40
 8009c2a:	2c00      	cmp	r4, #0
 8009c2c:	d1e7      	bne.n	8009bfe <_dtoa_r+0x2e2>
 8009c2e:	9806      	ldr	r0, [sp, #24]
 8009c30:	9907      	ldr	r1, [sp, #28]
 8009c32:	002a      	movs	r2, r5
 8009c34:	0033      	movs	r3, r6
 8009c36:	f7f7 f9cd 	bl	8000fd4 <__aeabi_ddiv>
 8009c3a:	9006      	str	r0, [sp, #24]
 8009c3c:	9107      	str	r1, [sp, #28]
 8009c3e:	e042      	b.n	8009cc6 <_dtoa_r+0x3aa>
 8009c40:	7ff00000 	.word	0x7ff00000
 8009c44:	0000270f 	.word	0x0000270f
 8009c48:	0800b249 	.word	0x0800b249
 8009c4c:	0800b24c 	.word	0x0800b24c
 8009c50:	0800b21c 	.word	0x0800b21c
 8009c54:	0800b21d 	.word	0x0800b21d
 8009c58:	3ff00000 	.word	0x3ff00000
 8009c5c:	fffffc01 	.word	0xfffffc01
 8009c60:	3ff80000 	.word	0x3ff80000
 8009c64:	636f4361 	.word	0x636f4361
 8009c68:	3fd287a7 	.word	0x3fd287a7
 8009c6c:	8b60c8b3 	.word	0x8b60c8b3
 8009c70:	3fc68a28 	.word	0x3fc68a28
 8009c74:	509f79fb 	.word	0x509f79fb
 8009c78:	3fd34413 	.word	0x3fd34413
 8009c7c:	0800b278 	.word	0x0800b278
 8009c80:	00000432 	.word	0x00000432
 8009c84:	00000412 	.word	0x00000412
 8009c88:	fe100000 	.word	0xfe100000
 8009c8c:	0800b250 	.word	0x0800b250
 8009c90:	2302      	movs	r3, #2
 8009c92:	930e      	str	r3, [sp, #56]	; 0x38
 8009c94:	2f00      	cmp	r7, #0
 8009c96:	d016      	beq.n	8009cc6 <_dtoa_r+0x3aa>
 8009c98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009c9c:	427c      	negs	r4, r7
 8009c9e:	330d      	adds	r3, #13
 8009ca0:	4023      	ands	r3, r4
 8009ca2:	4ace      	ldr	r2, [pc, #824]	; (8009fdc <_dtoa_r+0x6c0>)
 8009ca4:	00db      	lsls	r3, r3, #3
 8009ca6:	18d3      	adds	r3, r2, r3
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f7f7 fd9c 	bl	80017e8 <__aeabi_dmul>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	2601      	movs	r6, #1
 8009cb4:	001d      	movs	r5, r3
 8009cb6:	9006      	str	r0, [sp, #24]
 8009cb8:	9107      	str	r1, [sp, #28]
 8009cba:	1124      	asrs	r4, r4, #4
 8009cbc:	2c00      	cmp	r4, #0
 8009cbe:	d000      	beq.n	8009cc2 <_dtoa_r+0x3a6>
 8009cc0:	e08c      	b.n	8009ddc <_dtoa_r+0x4c0>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1b9      	bne.n	8009c3a <_dtoa_r+0x31e>
 8009cc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d100      	bne.n	8009cce <_dtoa_r+0x3b2>
 8009ccc:	e096      	b.n	8009dfc <_dtoa_r+0x4e0>
 8009cce:	9c06      	ldr	r4, [sp, #24]
 8009cd0:	9d07      	ldr	r5, [sp, #28]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	4bc2      	ldr	r3, [pc, #776]	; (8009fe0 <_dtoa_r+0x6c4>)
 8009cd6:	0020      	movs	r0, r4
 8009cd8:	0029      	movs	r1, r5
 8009cda:	f7f6 fbb3 	bl	8000444 <__aeabi_dcmplt>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d100      	bne.n	8009ce4 <_dtoa_r+0x3c8>
 8009ce2:	e08b      	b.n	8009dfc <_dtoa_r+0x4e0>
 8009ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d100      	bne.n	8009cec <_dtoa_r+0x3d0>
 8009cea:	e087      	b.n	8009dfc <_dtoa_r+0x4e0>
 8009cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	dd41      	ble.n	8009d76 <_dtoa_r+0x45a>
 8009cf2:	4bbc      	ldr	r3, [pc, #752]	; (8009fe4 <_dtoa_r+0x6c8>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	0020      	movs	r0, r4
 8009cf8:	0029      	movs	r1, r5
 8009cfa:	f7f7 fd75 	bl	80017e8 <__aeabi_dmul>
 8009cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d00:	9006      	str	r0, [sp, #24]
 8009d02:	9107      	str	r1, [sp, #28]
 8009d04:	3301      	adds	r3, #1
 8009d06:	930e      	str	r3, [sp, #56]	; 0x38
 8009d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d0a:	1e7e      	subs	r6, r7, #1
 8009d0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009d0e:	9310      	str	r3, [sp, #64]	; 0x40
 8009d10:	f7f8 fb76 	bl	8002400 <__aeabi_i2d>
 8009d14:	9a06      	ldr	r2, [sp, #24]
 8009d16:	9b07      	ldr	r3, [sp, #28]
 8009d18:	f7f7 fd66 	bl	80017e8 <__aeabi_dmul>
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	4bb2      	ldr	r3, [pc, #712]	; (8009fe8 <_dtoa_r+0x6cc>)
 8009d20:	f7f6 fe3c 	bl	800099c <__aeabi_dadd>
 8009d24:	4ab1      	ldr	r2, [pc, #708]	; (8009fec <_dtoa_r+0x6d0>)
 8009d26:	900e      	str	r0, [sp, #56]	; 0x38
 8009d28:	910f      	str	r1, [sp, #60]	; 0x3c
 8009d2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009d2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009d2e:	4694      	mov	ip, r2
 8009d30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d32:	4463      	add	r3, ip
 8009d34:	9315      	str	r3, [sp, #84]	; 0x54
 8009d36:	001d      	movs	r5, r3
 8009d38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d161      	bne.n	8009e02 <_dtoa_r+0x4e6>
 8009d3e:	9806      	ldr	r0, [sp, #24]
 8009d40:	9907      	ldr	r1, [sp, #28]
 8009d42:	2200      	movs	r2, #0
 8009d44:	4baa      	ldr	r3, [pc, #680]	; (8009ff0 <_dtoa_r+0x6d4>)
 8009d46:	f7f7 ffc1 	bl	8001ccc <__aeabi_dsub>
 8009d4a:	0022      	movs	r2, r4
 8009d4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d4e:	9006      	str	r0, [sp, #24]
 8009d50:	9107      	str	r1, [sp, #28]
 8009d52:	f7f6 fb8b 	bl	800046c <__aeabi_dcmpgt>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d000      	beq.n	8009d5c <_dtoa_r+0x440>
 8009d5a:	e2a8      	b.n	800a2ae <_dtoa_r+0x992>
 8009d5c:	48a5      	ldr	r0, [pc, #660]	; (8009ff4 <_dtoa_r+0x6d8>)
 8009d5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d60:	4684      	mov	ip, r0
 8009d62:	4461      	add	r1, ip
 8009d64:	000b      	movs	r3, r1
 8009d66:	9806      	ldr	r0, [sp, #24]
 8009d68:	9907      	ldr	r1, [sp, #28]
 8009d6a:	0022      	movs	r2, r4
 8009d6c:	f7f6 fb6a 	bl	8000444 <__aeabi_dcmplt>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	d000      	beq.n	8009d76 <_dtoa_r+0x45a>
 8009d74:	e295      	b.n	800a2a2 <_dtoa_r+0x986>
 8009d76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009d7a:	9306      	str	r3, [sp, #24]
 8009d7c:	9407      	str	r4, [sp, #28]
 8009d7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	da00      	bge.n	8009d86 <_dtoa_r+0x46a>
 8009d84:	e15c      	b.n	800a040 <_dtoa_r+0x724>
 8009d86:	2f0e      	cmp	r7, #14
 8009d88:	dd00      	ble.n	8009d8c <_dtoa_r+0x470>
 8009d8a:	e159      	b.n	800a040 <_dtoa_r+0x724>
 8009d8c:	4b93      	ldr	r3, [pc, #588]	; (8009fdc <_dtoa_r+0x6c0>)
 8009d8e:	00fa      	lsls	r2, r7, #3
 8009d90:	189b      	adds	r3, r3, r2
 8009d92:	685c      	ldr	r4, [r3, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	9304      	str	r3, [sp, #16]
 8009d98:	9405      	str	r4, [sp, #20]
 8009d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	db00      	blt.n	8009da2 <_dtoa_r+0x486>
 8009da0:	e0d8      	b.n	8009f54 <_dtoa_r+0x638>
 8009da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	dd00      	ble.n	8009daa <_dtoa_r+0x48e>
 8009da8:	e0d4      	b.n	8009f54 <_dtoa_r+0x638>
 8009daa:	d000      	beq.n	8009dae <_dtoa_r+0x492>
 8009dac:	e27d      	b.n	800a2aa <_dtoa_r+0x98e>
 8009dae:	9804      	ldr	r0, [sp, #16]
 8009db0:	9905      	ldr	r1, [sp, #20]
 8009db2:	2200      	movs	r2, #0
 8009db4:	4b8e      	ldr	r3, [pc, #568]	; (8009ff0 <_dtoa_r+0x6d4>)
 8009db6:	f7f7 fd17 	bl	80017e8 <__aeabi_dmul>
 8009dba:	9a06      	ldr	r2, [sp, #24]
 8009dbc:	9b07      	ldr	r3, [sp, #28]
 8009dbe:	f7f6 fb5f 	bl	8000480 <__aeabi_dcmpge>
 8009dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	001e      	movs	r6, r3
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d000      	beq.n	8009dce <_dtoa_r+0x4b2>
 8009dcc:	e24f      	b.n	800a26e <_dtoa_r+0x952>
 8009dce:	9b08      	ldr	r3, [sp, #32]
 8009dd0:	9a08      	ldr	r2, [sp, #32]
 8009dd2:	1c5d      	adds	r5, r3, #1
 8009dd4:	2331      	movs	r3, #49	; 0x31
 8009dd6:	3701      	adds	r7, #1
 8009dd8:	7013      	strb	r3, [r2, #0]
 8009dda:	e24b      	b.n	800a274 <_dtoa_r+0x958>
 8009ddc:	4234      	tst	r4, r6
 8009dde:	d00a      	beq.n	8009df6 <_dtoa_r+0x4da>
 8009de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009de2:	4a85      	ldr	r2, [pc, #532]	; (8009ff8 <_dtoa_r+0x6dc>)
 8009de4:	3301      	adds	r3, #1
 8009de6:	930e      	str	r3, [sp, #56]	; 0x38
 8009de8:	00eb      	lsls	r3, r5, #3
 8009dea:	189b      	adds	r3, r3, r2
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	f7f7 fcfa 	bl	80017e8 <__aeabi_dmul>
 8009df4:	0033      	movs	r3, r6
 8009df6:	1064      	asrs	r4, r4, #1
 8009df8:	3501      	adds	r5, #1
 8009dfa:	e75f      	b.n	8009cbc <_dtoa_r+0x3a0>
 8009dfc:	003e      	movs	r6, r7
 8009dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e00:	e784      	b.n	8009d0c <_dtoa_r+0x3f0>
 8009e02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e06:	1e5a      	subs	r2, r3, #1
 8009e08:	4b74      	ldr	r3, [pc, #464]	; (8009fdc <_dtoa_r+0x6c0>)
 8009e0a:	00d2      	lsls	r2, r2, #3
 8009e0c:	189b      	adds	r3, r3, r2
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	2900      	cmp	r1, #0
 8009e14:	d049      	beq.n	8009eaa <_dtoa_r+0x58e>
 8009e16:	2000      	movs	r0, #0
 8009e18:	4978      	ldr	r1, [pc, #480]	; (8009ffc <_dtoa_r+0x6e0>)
 8009e1a:	f7f7 f8db 	bl	8000fd4 <__aeabi_ddiv>
 8009e1e:	002b      	movs	r3, r5
 8009e20:	0022      	movs	r2, r4
 8009e22:	f7f7 ff53 	bl	8001ccc <__aeabi_dsub>
 8009e26:	9b08      	ldr	r3, [sp, #32]
 8009e28:	900e      	str	r0, [sp, #56]	; 0x38
 8009e2a:	910f      	str	r1, [sp, #60]	; 0x3c
 8009e2c:	9315      	str	r3, [sp, #84]	; 0x54
 8009e2e:	9806      	ldr	r0, [sp, #24]
 8009e30:	9907      	ldr	r1, [sp, #28]
 8009e32:	f7f8 faaf 	bl	8002394 <__aeabi_d2iz>
 8009e36:	0004      	movs	r4, r0
 8009e38:	f7f8 fae2 	bl	8002400 <__aeabi_i2d>
 8009e3c:	0002      	movs	r2, r0
 8009e3e:	000b      	movs	r3, r1
 8009e40:	9806      	ldr	r0, [sp, #24]
 8009e42:	9907      	ldr	r1, [sp, #28]
 8009e44:	f7f7 ff42 	bl	8001ccc <__aeabi_dsub>
 8009e48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e4a:	3430      	adds	r4, #48	; 0x30
 8009e4c:	1c5d      	adds	r5, r3, #1
 8009e4e:	701c      	strb	r4, [r3, #0]
 8009e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e54:	9006      	str	r0, [sp, #24]
 8009e56:	9107      	str	r1, [sp, #28]
 8009e58:	f7f6 faf4 	bl	8000444 <__aeabi_dcmplt>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d16c      	bne.n	8009f3a <_dtoa_r+0x61e>
 8009e60:	9a06      	ldr	r2, [sp, #24]
 8009e62:	9b07      	ldr	r3, [sp, #28]
 8009e64:	2000      	movs	r0, #0
 8009e66:	495e      	ldr	r1, [pc, #376]	; (8009fe0 <_dtoa_r+0x6c4>)
 8009e68:	f7f7 ff30 	bl	8001ccc <__aeabi_dsub>
 8009e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e70:	f7f6 fae8 	bl	8000444 <__aeabi_dcmplt>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d000      	beq.n	8009e7a <_dtoa_r+0x55e>
 8009e78:	e0c3      	b.n	800a002 <_dtoa_r+0x6e6>
 8009e7a:	9b08      	ldr	r3, [sp, #32]
 8009e7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e7e:	1aeb      	subs	r3, r5, r3
 8009e80:	429a      	cmp	r2, r3
 8009e82:	dc00      	bgt.n	8009e86 <_dtoa_r+0x56a>
 8009e84:	e777      	b.n	8009d76 <_dtoa_r+0x45a>
 8009e86:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009e88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	4b55      	ldr	r3, [pc, #340]	; (8009fe4 <_dtoa_r+0x6c8>)
 8009e8e:	f7f7 fcab 	bl	80017e8 <__aeabi_dmul>
 8009e92:	2200      	movs	r2, #0
 8009e94:	900e      	str	r0, [sp, #56]	; 0x38
 8009e96:	910f      	str	r1, [sp, #60]	; 0x3c
 8009e98:	9806      	ldr	r0, [sp, #24]
 8009e9a:	9907      	ldr	r1, [sp, #28]
 8009e9c:	4b51      	ldr	r3, [pc, #324]	; (8009fe4 <_dtoa_r+0x6c8>)
 8009e9e:	f7f7 fca3 	bl	80017e8 <__aeabi_dmul>
 8009ea2:	9515      	str	r5, [sp, #84]	; 0x54
 8009ea4:	9006      	str	r0, [sp, #24]
 8009ea6:	9107      	str	r1, [sp, #28]
 8009ea8:	e7c1      	b.n	8009e2e <_dtoa_r+0x512>
 8009eaa:	0020      	movs	r0, r4
 8009eac:	0029      	movs	r1, r5
 8009eae:	f7f7 fc9b 	bl	80017e8 <__aeabi_dmul>
 8009eb2:	9c08      	ldr	r4, [sp, #32]
 8009eb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009eb6:	0023      	movs	r3, r4
 8009eb8:	4694      	mov	ip, r2
 8009eba:	900e      	str	r0, [sp, #56]	; 0x38
 8009ebc:	910f      	str	r1, [sp, #60]	; 0x3c
 8009ebe:	4463      	add	r3, ip
 8009ec0:	9315      	str	r3, [sp, #84]	; 0x54
 8009ec2:	9806      	ldr	r0, [sp, #24]
 8009ec4:	9907      	ldr	r1, [sp, #28]
 8009ec6:	f7f8 fa65 	bl	8002394 <__aeabi_d2iz>
 8009eca:	0005      	movs	r5, r0
 8009ecc:	f7f8 fa98 	bl	8002400 <__aeabi_i2d>
 8009ed0:	000b      	movs	r3, r1
 8009ed2:	0002      	movs	r2, r0
 8009ed4:	9806      	ldr	r0, [sp, #24]
 8009ed6:	9907      	ldr	r1, [sp, #28]
 8009ed8:	f7f7 fef8 	bl	8001ccc <__aeabi_dsub>
 8009edc:	3530      	adds	r5, #48	; 0x30
 8009ede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee0:	7025      	strb	r5, [r4, #0]
 8009ee2:	3401      	adds	r4, #1
 8009ee4:	9006      	str	r0, [sp, #24]
 8009ee6:	9107      	str	r1, [sp, #28]
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	d12a      	bne.n	8009f42 <_dtoa_r+0x626>
 8009eec:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009eee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ef0:	9a08      	ldr	r2, [sp, #32]
 8009ef2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ef4:	4694      	mov	ip, r2
 8009ef6:	4463      	add	r3, ip
 8009ef8:	2200      	movs	r2, #0
 8009efa:	001d      	movs	r5, r3
 8009efc:	4b3f      	ldr	r3, [pc, #252]	; (8009ffc <_dtoa_r+0x6e0>)
 8009efe:	f7f6 fd4d 	bl	800099c <__aeabi_dadd>
 8009f02:	0002      	movs	r2, r0
 8009f04:	000b      	movs	r3, r1
 8009f06:	9806      	ldr	r0, [sp, #24]
 8009f08:	9907      	ldr	r1, [sp, #28]
 8009f0a:	f7f6 faaf 	bl	800046c <__aeabi_dcmpgt>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d000      	beq.n	8009f14 <_dtoa_r+0x5f8>
 8009f12:	e076      	b.n	800a002 <_dtoa_r+0x6e6>
 8009f14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f18:	2000      	movs	r0, #0
 8009f1a:	4938      	ldr	r1, [pc, #224]	; (8009ffc <_dtoa_r+0x6e0>)
 8009f1c:	f7f7 fed6 	bl	8001ccc <__aeabi_dsub>
 8009f20:	0002      	movs	r2, r0
 8009f22:	000b      	movs	r3, r1
 8009f24:	9806      	ldr	r0, [sp, #24]
 8009f26:	9907      	ldr	r1, [sp, #28]
 8009f28:	f7f6 fa8c 	bl	8000444 <__aeabi_dcmplt>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d100      	bne.n	8009f32 <_dtoa_r+0x616>
 8009f30:	e721      	b.n	8009d76 <_dtoa_r+0x45a>
 8009f32:	1e6b      	subs	r3, r5, #1
 8009f34:	781a      	ldrb	r2, [r3, #0]
 8009f36:	2a30      	cmp	r2, #48	; 0x30
 8009f38:	d001      	beq.n	8009f3e <_dtoa_r+0x622>
 8009f3a:	0037      	movs	r7, r6
 8009f3c:	e03f      	b.n	8009fbe <_dtoa_r+0x6a2>
 8009f3e:	001d      	movs	r5, r3
 8009f40:	e7f7      	b.n	8009f32 <_dtoa_r+0x616>
 8009f42:	9806      	ldr	r0, [sp, #24]
 8009f44:	9907      	ldr	r1, [sp, #28]
 8009f46:	2200      	movs	r2, #0
 8009f48:	4b26      	ldr	r3, [pc, #152]	; (8009fe4 <_dtoa_r+0x6c8>)
 8009f4a:	f7f7 fc4d 	bl	80017e8 <__aeabi_dmul>
 8009f4e:	9006      	str	r0, [sp, #24]
 8009f50:	9107      	str	r1, [sp, #28]
 8009f52:	e7b6      	b.n	8009ec2 <_dtoa_r+0x5a6>
 8009f54:	9e08      	ldr	r6, [sp, #32]
 8009f56:	9a04      	ldr	r2, [sp, #16]
 8009f58:	9b05      	ldr	r3, [sp, #20]
 8009f5a:	9806      	ldr	r0, [sp, #24]
 8009f5c:	9907      	ldr	r1, [sp, #28]
 8009f5e:	f7f7 f839 	bl	8000fd4 <__aeabi_ddiv>
 8009f62:	f7f8 fa17 	bl	8002394 <__aeabi_d2iz>
 8009f66:	0004      	movs	r4, r0
 8009f68:	f7f8 fa4a 	bl	8002400 <__aeabi_i2d>
 8009f6c:	9a04      	ldr	r2, [sp, #16]
 8009f6e:	9b05      	ldr	r3, [sp, #20]
 8009f70:	f7f7 fc3a 	bl	80017e8 <__aeabi_dmul>
 8009f74:	0002      	movs	r2, r0
 8009f76:	000b      	movs	r3, r1
 8009f78:	9806      	ldr	r0, [sp, #24]
 8009f7a:	9907      	ldr	r1, [sp, #28]
 8009f7c:	f7f7 fea6 	bl	8001ccc <__aeabi_dsub>
 8009f80:	0023      	movs	r3, r4
 8009f82:	3330      	adds	r3, #48	; 0x30
 8009f84:	7033      	strb	r3, [r6, #0]
 8009f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f88:	9b08      	ldr	r3, [sp, #32]
 8009f8a:	1c75      	adds	r5, r6, #1
 8009f8c:	1aeb      	subs	r3, r5, r3
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d148      	bne.n	800a024 <_dtoa_r+0x708>
 8009f92:	0002      	movs	r2, r0
 8009f94:	000b      	movs	r3, r1
 8009f96:	f7f6 fd01 	bl	800099c <__aeabi_dadd>
 8009f9a:	9a04      	ldr	r2, [sp, #16]
 8009f9c:	9b05      	ldr	r3, [sp, #20]
 8009f9e:	9006      	str	r0, [sp, #24]
 8009fa0:	9107      	str	r1, [sp, #28]
 8009fa2:	f7f6 fa63 	bl	800046c <__aeabi_dcmpgt>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d12a      	bne.n	800a000 <_dtoa_r+0x6e4>
 8009faa:	9a04      	ldr	r2, [sp, #16]
 8009fac:	9b05      	ldr	r3, [sp, #20]
 8009fae:	9806      	ldr	r0, [sp, #24]
 8009fb0:	9907      	ldr	r1, [sp, #28]
 8009fb2:	f7f6 fa41 	bl	8000438 <__aeabi_dcmpeq>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d001      	beq.n	8009fbe <_dtoa_r+0x6a2>
 8009fba:	07e3      	lsls	r3, r4, #31
 8009fbc:	d420      	bmi.n	800a000 <_dtoa_r+0x6e4>
 8009fbe:	9903      	ldr	r1, [sp, #12]
 8009fc0:	9802      	ldr	r0, [sp, #8]
 8009fc2:	f000 faed 	bl	800a5a0 <_Bfree>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	702b      	strb	r3, [r5, #0]
 8009fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fcc:	3701      	adds	r7, #1
 8009fce:	601f      	str	r7, [r3, #0]
 8009fd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d100      	bne.n	8009fd8 <_dtoa_r+0x6bc>
 8009fd6:	e4e6      	b.n	80099a6 <_dtoa_r+0x8a>
 8009fd8:	601d      	str	r5, [r3, #0]
 8009fda:	e4e4      	b.n	80099a6 <_dtoa_r+0x8a>
 8009fdc:	0800b278 	.word	0x0800b278
 8009fe0:	3ff00000 	.word	0x3ff00000
 8009fe4:	40240000 	.word	0x40240000
 8009fe8:	401c0000 	.word	0x401c0000
 8009fec:	fcc00000 	.word	0xfcc00000
 8009ff0:	40140000 	.word	0x40140000
 8009ff4:	7cc00000 	.word	0x7cc00000
 8009ff8:	0800b250 	.word	0x0800b250
 8009ffc:	3fe00000 	.word	0x3fe00000
 800a000:	003e      	movs	r6, r7
 800a002:	1e6b      	subs	r3, r5, #1
 800a004:	781a      	ldrb	r2, [r3, #0]
 800a006:	2a39      	cmp	r2, #57	; 0x39
 800a008:	d106      	bne.n	800a018 <_dtoa_r+0x6fc>
 800a00a:	9a08      	ldr	r2, [sp, #32]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d107      	bne.n	800a020 <_dtoa_r+0x704>
 800a010:	2330      	movs	r3, #48	; 0x30
 800a012:	7013      	strb	r3, [r2, #0]
 800a014:	0013      	movs	r3, r2
 800a016:	3601      	adds	r6, #1
 800a018:	781a      	ldrb	r2, [r3, #0]
 800a01a:	3201      	adds	r2, #1
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	e78c      	b.n	8009f3a <_dtoa_r+0x61e>
 800a020:	001d      	movs	r5, r3
 800a022:	e7ee      	b.n	800a002 <_dtoa_r+0x6e6>
 800a024:	2200      	movs	r2, #0
 800a026:	4ba4      	ldr	r3, [pc, #656]	; (800a2b8 <_dtoa_r+0x99c>)
 800a028:	f7f7 fbde 	bl	80017e8 <__aeabi_dmul>
 800a02c:	2200      	movs	r2, #0
 800a02e:	2300      	movs	r3, #0
 800a030:	9006      	str	r0, [sp, #24]
 800a032:	9107      	str	r1, [sp, #28]
 800a034:	002e      	movs	r6, r5
 800a036:	f7f6 f9ff 	bl	8000438 <__aeabi_dcmpeq>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d08b      	beq.n	8009f56 <_dtoa_r+0x63a>
 800a03e:	e7be      	b.n	8009fbe <_dtoa_r+0x6a2>
 800a040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a042:	2a00      	cmp	r2, #0
 800a044:	d100      	bne.n	800a048 <_dtoa_r+0x72c>
 800a046:	e0da      	b.n	800a1fe <_dtoa_r+0x8e2>
 800a048:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a04a:	2a01      	cmp	r2, #1
 800a04c:	dd00      	ble.n	800a050 <_dtoa_r+0x734>
 800a04e:	e0bd      	b.n	800a1cc <_dtoa_r+0x8b0>
 800a050:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a052:	2a00      	cmp	r2, #0
 800a054:	d100      	bne.n	800a058 <_dtoa_r+0x73c>
 800a056:	e0b5      	b.n	800a1c4 <_dtoa_r+0x8a8>
 800a058:	4a98      	ldr	r2, [pc, #608]	; (800a2bc <_dtoa_r+0x9a0>)
 800a05a:	189b      	adds	r3, r3, r2
 800a05c:	9d04      	ldr	r5, [sp, #16]
 800a05e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a062:	2101      	movs	r1, #1
 800a064:	18d2      	adds	r2, r2, r3
 800a066:	920a      	str	r2, [sp, #40]	; 0x28
 800a068:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a06a:	9802      	ldr	r0, [sp, #8]
 800a06c:	18d3      	adds	r3, r2, r3
 800a06e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a070:	f000 fb36 	bl	800a6e0 <__i2b>
 800a074:	0006      	movs	r6, r0
 800a076:	2c00      	cmp	r4, #0
 800a078:	dd0e      	ble.n	800a098 <_dtoa_r+0x77c>
 800a07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	dd0b      	ble.n	800a098 <_dtoa_r+0x77c>
 800a080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a082:	0023      	movs	r3, r4
 800a084:	4294      	cmp	r4, r2
 800a086:	dd00      	ble.n	800a08a <_dtoa_r+0x76e>
 800a088:	0013      	movs	r3, r2
 800a08a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a08c:	1ae4      	subs	r4, r4, r3
 800a08e:	1ad2      	subs	r2, r2, r3
 800a090:	920a      	str	r2, [sp, #40]	; 0x28
 800a092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	930b      	str	r3, [sp, #44]	; 0x2c
 800a098:	9b04      	ldr	r3, [sp, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d01f      	beq.n	800a0de <_dtoa_r+0x7c2>
 800a09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d100      	bne.n	800a0a6 <_dtoa_r+0x78a>
 800a0a4:	e0af      	b.n	800a206 <_dtoa_r+0x8ea>
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	d011      	beq.n	800a0ce <_dtoa_r+0x7b2>
 800a0aa:	0031      	movs	r1, r6
 800a0ac:	002a      	movs	r2, r5
 800a0ae:	9802      	ldr	r0, [sp, #8]
 800a0b0:	f000 fbae 	bl	800a810 <__pow5mult>
 800a0b4:	9a03      	ldr	r2, [sp, #12]
 800a0b6:	0001      	movs	r1, r0
 800a0b8:	0006      	movs	r6, r0
 800a0ba:	9802      	ldr	r0, [sp, #8]
 800a0bc:	f000 fb19 	bl	800a6f2 <__multiply>
 800a0c0:	9903      	ldr	r1, [sp, #12]
 800a0c2:	9010      	str	r0, [sp, #64]	; 0x40
 800a0c4:	9802      	ldr	r0, [sp, #8]
 800a0c6:	f000 fa6b 	bl	800a5a0 <_Bfree>
 800a0ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0cc:	9303      	str	r3, [sp, #12]
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	1b5a      	subs	r2, r3, r5
 800a0d2:	d004      	beq.n	800a0de <_dtoa_r+0x7c2>
 800a0d4:	9903      	ldr	r1, [sp, #12]
 800a0d6:	9802      	ldr	r0, [sp, #8]
 800a0d8:	f000 fb9a 	bl	800a810 <__pow5mult>
 800a0dc:	9003      	str	r0, [sp, #12]
 800a0de:	2101      	movs	r1, #1
 800a0e0:	9802      	ldr	r0, [sp, #8]
 800a0e2:	f000 fafd 	bl	800a6e0 <__i2b>
 800a0e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0e8:	9004      	str	r0, [sp, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d100      	bne.n	800a0f0 <_dtoa_r+0x7d4>
 800a0ee:	e1e3      	b.n	800a4b8 <_dtoa_r+0xb9c>
 800a0f0:	001a      	movs	r2, r3
 800a0f2:	0001      	movs	r1, r0
 800a0f4:	9802      	ldr	r0, [sp, #8]
 800a0f6:	f000 fb8b 	bl	800a810 <__pow5mult>
 800a0fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a0fc:	9004      	str	r0, [sp, #16]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	dd00      	ble.n	800a104 <_dtoa_r+0x7e8>
 800a102:	e082      	b.n	800a20a <_dtoa_r+0x8ee>
 800a104:	2500      	movs	r5, #0
 800a106:	9b06      	ldr	r3, [sp, #24]
 800a108:	42ab      	cmp	r3, r5
 800a10a:	d10e      	bne.n	800a12a <_dtoa_r+0x80e>
 800a10c:	9b07      	ldr	r3, [sp, #28]
 800a10e:	031b      	lsls	r3, r3, #12
 800a110:	42ab      	cmp	r3, r5
 800a112:	d10a      	bne.n	800a12a <_dtoa_r+0x80e>
 800a114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a116:	9a07      	ldr	r2, [sp, #28]
 800a118:	4213      	tst	r3, r2
 800a11a:	d006      	beq.n	800a12a <_dtoa_r+0x80e>
 800a11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a11e:	3501      	adds	r5, #1
 800a120:	3301      	adds	r3, #1
 800a122:	930a      	str	r3, [sp, #40]	; 0x28
 800a124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a126:	3301      	adds	r3, #1
 800a128:	930b      	str	r3, [sp, #44]	; 0x2c
 800a12a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a12c:	2001      	movs	r0, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d16c      	bne.n	800a20c <_dtoa_r+0x8f0>
 800a132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a134:	1818      	adds	r0, r3, r0
 800a136:	231f      	movs	r3, #31
 800a138:	4018      	ands	r0, r3
 800a13a:	d07e      	beq.n	800a23a <_dtoa_r+0x91e>
 800a13c:	3301      	adds	r3, #1
 800a13e:	1a1b      	subs	r3, r3, r0
 800a140:	2b04      	cmp	r3, #4
 800a142:	dd70      	ble.n	800a226 <_dtoa_r+0x90a>
 800a144:	231c      	movs	r3, #28
 800a146:	1a18      	subs	r0, r3, r0
 800a148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14a:	1824      	adds	r4, r4, r0
 800a14c:	181b      	adds	r3, r3, r0
 800a14e:	930a      	str	r3, [sp, #40]	; 0x28
 800a150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a152:	181b      	adds	r3, r3, r0
 800a154:	930b      	str	r3, [sp, #44]	; 0x2c
 800a156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a158:	2b00      	cmp	r3, #0
 800a15a:	dd05      	ble.n	800a168 <_dtoa_r+0x84c>
 800a15c:	001a      	movs	r2, r3
 800a15e:	9903      	ldr	r1, [sp, #12]
 800a160:	9802      	ldr	r0, [sp, #8]
 800a162:	f000 fba7 	bl	800a8b4 <__lshift>
 800a166:	9003      	str	r0, [sp, #12]
 800a168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	dd05      	ble.n	800a17a <_dtoa_r+0x85e>
 800a16e:	001a      	movs	r2, r3
 800a170:	9904      	ldr	r1, [sp, #16]
 800a172:	9802      	ldr	r0, [sp, #8]
 800a174:	f000 fb9e 	bl	800a8b4 <__lshift>
 800a178:	9004      	str	r0, [sp, #16]
 800a17a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d05e      	beq.n	800a23e <_dtoa_r+0x922>
 800a180:	9904      	ldr	r1, [sp, #16]
 800a182:	9803      	ldr	r0, [sp, #12]
 800a184:	f000 fbe8 	bl	800a958 <__mcmp>
 800a188:	2800      	cmp	r0, #0
 800a18a:	da58      	bge.n	800a23e <_dtoa_r+0x922>
 800a18c:	2300      	movs	r3, #0
 800a18e:	220a      	movs	r2, #10
 800a190:	9903      	ldr	r1, [sp, #12]
 800a192:	9802      	ldr	r0, [sp, #8]
 800a194:	f000 fa1d 	bl	800a5d2 <__multadd>
 800a198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a19a:	3f01      	subs	r7, #1
 800a19c:	9003      	str	r0, [sp, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d100      	bne.n	800a1a4 <_dtoa_r+0x888>
 800a1a2:	e190      	b.n	800a4c6 <_dtoa_r+0xbaa>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	0031      	movs	r1, r6
 800a1a8:	220a      	movs	r2, #10
 800a1aa:	9802      	ldr	r0, [sp, #8]
 800a1ac:	f000 fa11 	bl	800a5d2 <__multadd>
 800a1b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1b2:	0006      	movs	r6, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	dd00      	ble.n	800a1ba <_dtoa_r+0x89e>
 800a1b8:	e088      	b.n	800a2cc <_dtoa_r+0x9b0>
 800a1ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	dc00      	bgt.n	800a1c2 <_dtoa_r+0x8a6>
 800a1c0:	e084      	b.n	800a2cc <_dtoa_r+0x9b0>
 800a1c2:	e044      	b.n	800a24e <_dtoa_r+0x932>
 800a1c4:	2336      	movs	r3, #54	; 0x36
 800a1c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a1c8:	1a9b      	subs	r3, r3, r2
 800a1ca:	e747      	b.n	800a05c <_dtoa_r+0x740>
 800a1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ce:	1e5d      	subs	r5, r3, #1
 800a1d0:	9b04      	ldr	r3, [sp, #16]
 800a1d2:	42ab      	cmp	r3, r5
 800a1d4:	db08      	blt.n	800a1e8 <_dtoa_r+0x8cc>
 800a1d6:	1b5d      	subs	r5, r3, r5
 800a1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	da0c      	bge.n	800a1f8 <_dtoa_r+0x8dc>
 800a1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1e2:	1a9c      	subs	r4, r3, r2
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e73b      	b.n	800a060 <_dtoa_r+0x744>
 800a1e8:	9b04      	ldr	r3, [sp, #16]
 800a1ea:	9504      	str	r5, [sp, #16]
 800a1ec:	1aea      	subs	r2, r5, r3
 800a1ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1f0:	2500      	movs	r5, #0
 800a1f2:	189b      	adds	r3, r3, r2
 800a1f4:	9311      	str	r3, [sp, #68]	; 0x44
 800a1f6:	e7ef      	b.n	800a1d8 <_dtoa_r+0x8bc>
 800a1f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fc:	e730      	b.n	800a060 <_dtoa_r+0x744>
 800a1fe:	9d04      	ldr	r5, [sp, #16]
 800a200:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a202:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a204:	e737      	b.n	800a076 <_dtoa_r+0x75a>
 800a206:	9a04      	ldr	r2, [sp, #16]
 800a208:	e764      	b.n	800a0d4 <_dtoa_r+0x7b8>
 800a20a:	2500      	movs	r5, #0
 800a20c:	9b04      	ldr	r3, [sp, #16]
 800a20e:	9a04      	ldr	r2, [sp, #16]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	9310      	str	r3, [sp, #64]	; 0x40
 800a214:	3303      	adds	r3, #3
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	18d3      	adds	r3, r2, r3
 800a21a:	6858      	ldr	r0, [r3, #4]
 800a21c:	f000 fa17 	bl	800a64e <__hi0bits>
 800a220:	2320      	movs	r3, #32
 800a222:	1a18      	subs	r0, r3, r0
 800a224:	e785      	b.n	800a132 <_dtoa_r+0x816>
 800a226:	2b04      	cmp	r3, #4
 800a228:	d095      	beq.n	800a156 <_dtoa_r+0x83a>
 800a22a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a22c:	331c      	adds	r3, #28
 800a22e:	18d2      	adds	r2, r2, r3
 800a230:	920a      	str	r2, [sp, #40]	; 0x28
 800a232:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a234:	18e4      	adds	r4, r4, r3
 800a236:	18d3      	adds	r3, r2, r3
 800a238:	e78c      	b.n	800a154 <_dtoa_r+0x838>
 800a23a:	0003      	movs	r3, r0
 800a23c:	e7f5      	b.n	800a22a <_dtoa_r+0x90e>
 800a23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a240:	2b00      	cmp	r3, #0
 800a242:	dc3d      	bgt.n	800a2c0 <_dtoa_r+0x9a4>
 800a244:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a246:	2b02      	cmp	r3, #2
 800a248:	dd3a      	ble.n	800a2c0 <_dtoa_r+0x9a4>
 800a24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24c:	930c      	str	r3, [sp, #48]	; 0x30
 800a24e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10c      	bne.n	800a26e <_dtoa_r+0x952>
 800a254:	9904      	ldr	r1, [sp, #16]
 800a256:	2205      	movs	r2, #5
 800a258:	9802      	ldr	r0, [sp, #8]
 800a25a:	f000 f9ba 	bl	800a5d2 <__multadd>
 800a25e:	9004      	str	r0, [sp, #16]
 800a260:	0001      	movs	r1, r0
 800a262:	9803      	ldr	r0, [sp, #12]
 800a264:	f000 fb78 	bl	800a958 <__mcmp>
 800a268:	2800      	cmp	r0, #0
 800a26a:	dd00      	ble.n	800a26e <_dtoa_r+0x952>
 800a26c:	e5af      	b.n	8009dce <_dtoa_r+0x4b2>
 800a26e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a270:	9d08      	ldr	r5, [sp, #32]
 800a272:	43df      	mvns	r7, r3
 800a274:	2300      	movs	r3, #0
 800a276:	9309      	str	r3, [sp, #36]	; 0x24
 800a278:	9904      	ldr	r1, [sp, #16]
 800a27a:	9802      	ldr	r0, [sp, #8]
 800a27c:	f000 f990 	bl	800a5a0 <_Bfree>
 800a280:	2e00      	cmp	r6, #0
 800a282:	d100      	bne.n	800a286 <_dtoa_r+0x96a>
 800a284:	e69b      	b.n	8009fbe <_dtoa_r+0x6a2>
 800a286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d005      	beq.n	800a298 <_dtoa_r+0x97c>
 800a28c:	42b3      	cmp	r3, r6
 800a28e:	d003      	beq.n	800a298 <_dtoa_r+0x97c>
 800a290:	0019      	movs	r1, r3
 800a292:	9802      	ldr	r0, [sp, #8]
 800a294:	f000 f984 	bl	800a5a0 <_Bfree>
 800a298:	0031      	movs	r1, r6
 800a29a:	9802      	ldr	r0, [sp, #8]
 800a29c:	f000 f980 	bl	800a5a0 <_Bfree>
 800a2a0:	e68d      	b.n	8009fbe <_dtoa_r+0x6a2>
 800a2a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2a4:	9304      	str	r3, [sp, #16]
 800a2a6:	001e      	movs	r6, r3
 800a2a8:	e7e1      	b.n	800a26e <_dtoa_r+0x952>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e7fa      	b.n	800a2a4 <_dtoa_r+0x988>
 800a2ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2b0:	0037      	movs	r7, r6
 800a2b2:	9304      	str	r3, [sp, #16]
 800a2b4:	001e      	movs	r6, r3
 800a2b6:	e58a      	b.n	8009dce <_dtoa_r+0x4b2>
 800a2b8:	40240000 	.word	0x40240000
 800a2bc:	00000433 	.word	0x00000433
 800a2c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d100      	bne.n	800a2c8 <_dtoa_r+0x9ac>
 800a2c6:	e0b2      	b.n	800a42e <_dtoa_r+0xb12>
 800a2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a2cc:	2c00      	cmp	r4, #0
 800a2ce:	dd05      	ble.n	800a2dc <_dtoa_r+0x9c0>
 800a2d0:	0031      	movs	r1, r6
 800a2d2:	0022      	movs	r2, r4
 800a2d4:	9802      	ldr	r0, [sp, #8]
 800a2d6:	f000 faed 	bl	800a8b4 <__lshift>
 800a2da:	0006      	movs	r6, r0
 800a2dc:	0030      	movs	r0, r6
 800a2de:	2d00      	cmp	r5, #0
 800a2e0:	d011      	beq.n	800a306 <_dtoa_r+0x9ea>
 800a2e2:	6871      	ldr	r1, [r6, #4]
 800a2e4:	9802      	ldr	r0, [sp, #8]
 800a2e6:	f000 f923 	bl	800a530 <_Balloc>
 800a2ea:	0031      	movs	r1, r6
 800a2ec:	0004      	movs	r4, r0
 800a2ee:	6933      	ldr	r3, [r6, #16]
 800a2f0:	310c      	adds	r1, #12
 800a2f2:	1c9a      	adds	r2, r3, #2
 800a2f4:	0092      	lsls	r2, r2, #2
 800a2f6:	300c      	adds	r0, #12
 800a2f8:	f000 f911 	bl	800a51e <memcpy>
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	0021      	movs	r1, r4
 800a300:	9802      	ldr	r0, [sp, #8]
 800a302:	f000 fad7 	bl	800a8b4 <__lshift>
 800a306:	9609      	str	r6, [sp, #36]	; 0x24
 800a308:	0006      	movs	r6, r0
 800a30a:	9b08      	ldr	r3, [sp, #32]
 800a30c:	930a      	str	r3, [sp, #40]	; 0x28
 800a30e:	9904      	ldr	r1, [sp, #16]
 800a310:	9803      	ldr	r0, [sp, #12]
 800a312:	f7ff fa7d 	bl	8009810 <quorem>
 800a316:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a318:	900d      	str	r0, [sp, #52]	; 0x34
 800a31a:	0004      	movs	r4, r0
 800a31c:	9803      	ldr	r0, [sp, #12]
 800a31e:	f000 fb1b 	bl	800a958 <__mcmp>
 800a322:	0032      	movs	r2, r6
 800a324:	9010      	str	r0, [sp, #64]	; 0x40
 800a326:	9904      	ldr	r1, [sp, #16]
 800a328:	9802      	ldr	r0, [sp, #8]
 800a32a:	f000 fb2f 	bl	800a98c <__mdiff>
 800a32e:	2301      	movs	r3, #1
 800a330:	930b      	str	r3, [sp, #44]	; 0x2c
 800a332:	68c3      	ldr	r3, [r0, #12]
 800a334:	3430      	adds	r4, #48	; 0x30
 800a336:	0005      	movs	r5, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d104      	bne.n	800a346 <_dtoa_r+0xa2a>
 800a33c:	0001      	movs	r1, r0
 800a33e:	9803      	ldr	r0, [sp, #12]
 800a340:	f000 fb0a 	bl	800a958 <__mcmp>
 800a344:	900b      	str	r0, [sp, #44]	; 0x2c
 800a346:	0029      	movs	r1, r5
 800a348:	9802      	ldr	r0, [sp, #8]
 800a34a:	f000 f929 	bl	800a5a0 <_Bfree>
 800a34e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a350:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a352:	4313      	orrs	r3, r2
 800a354:	d10e      	bne.n	800a374 <_dtoa_r+0xa58>
 800a356:	9a06      	ldr	r2, [sp, #24]
 800a358:	3301      	adds	r3, #1
 800a35a:	4213      	tst	r3, r2
 800a35c:	d10a      	bne.n	800a374 <_dtoa_r+0xa58>
 800a35e:	2c39      	cmp	r4, #57	; 0x39
 800a360:	d026      	beq.n	800a3b0 <_dtoa_r+0xa94>
 800a362:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	dd01      	ble.n	800a36c <_dtoa_r+0xa50>
 800a368:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a36a:	3431      	adds	r4, #49	; 0x31
 800a36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36e:	1c5d      	adds	r5, r3, #1
 800a370:	701c      	strb	r4, [r3, #0]
 800a372:	e781      	b.n	800a278 <_dtoa_r+0x95c>
 800a374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a376:	2b00      	cmp	r3, #0
 800a378:	db07      	blt.n	800a38a <_dtoa_r+0xa6e>
 800a37a:	001d      	movs	r5, r3
 800a37c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a37e:	431d      	orrs	r5, r3
 800a380:	d122      	bne.n	800a3c8 <_dtoa_r+0xaac>
 800a382:	2301      	movs	r3, #1
 800a384:	9a06      	ldr	r2, [sp, #24]
 800a386:	4213      	tst	r3, r2
 800a388:	d11e      	bne.n	800a3c8 <_dtoa_r+0xaac>
 800a38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	dded      	ble.n	800a36c <_dtoa_r+0xa50>
 800a390:	9903      	ldr	r1, [sp, #12]
 800a392:	2201      	movs	r2, #1
 800a394:	9802      	ldr	r0, [sp, #8]
 800a396:	f000 fa8d 	bl	800a8b4 <__lshift>
 800a39a:	9904      	ldr	r1, [sp, #16]
 800a39c:	9003      	str	r0, [sp, #12]
 800a39e:	f000 fadb 	bl	800a958 <__mcmp>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	dc02      	bgt.n	800a3ac <_dtoa_r+0xa90>
 800a3a6:	d1e1      	bne.n	800a36c <_dtoa_r+0xa50>
 800a3a8:	07e3      	lsls	r3, r4, #31
 800a3aa:	d5df      	bpl.n	800a36c <_dtoa_r+0xa50>
 800a3ac:	2c39      	cmp	r4, #57	; 0x39
 800a3ae:	d1db      	bne.n	800a368 <_dtoa_r+0xa4c>
 800a3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3b4:	1c5d      	adds	r5, r3, #1
 800a3b6:	2339      	movs	r3, #57	; 0x39
 800a3b8:	7013      	strb	r3, [r2, #0]
 800a3ba:	1e6b      	subs	r3, r5, #1
 800a3bc:	781a      	ldrb	r2, [r3, #0]
 800a3be:	2a39      	cmp	r2, #57	; 0x39
 800a3c0:	d067      	beq.n	800a492 <_dtoa_r+0xb76>
 800a3c2:	3201      	adds	r2, #1
 800a3c4:	701a      	strb	r2, [r3, #0]
 800a3c6:	e757      	b.n	800a278 <_dtoa_r+0x95c>
 800a3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ca:	1c5d      	adds	r5, r3, #1
 800a3cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	dd04      	ble.n	800a3dc <_dtoa_r+0xac0>
 800a3d2:	2c39      	cmp	r4, #57	; 0x39
 800a3d4:	d0ec      	beq.n	800a3b0 <_dtoa_r+0xa94>
 800a3d6:	3401      	adds	r4, #1
 800a3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3da:	e7c9      	b.n	800a370 <_dtoa_r+0xa54>
 800a3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3e0:	701c      	strb	r4, [r3, #0]
 800a3e2:	9b08      	ldr	r3, [sp, #32]
 800a3e4:	1aeb      	subs	r3, r5, r3
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d03e      	beq.n	800a468 <_dtoa_r+0xb4c>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	220a      	movs	r2, #10
 800a3ee:	9903      	ldr	r1, [sp, #12]
 800a3f0:	9802      	ldr	r0, [sp, #8]
 800a3f2:	f000 f8ee 	bl	800a5d2 <__multadd>
 800a3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f8:	9003      	str	r0, [sp, #12]
 800a3fa:	42b3      	cmp	r3, r6
 800a3fc:	d109      	bne.n	800a412 <_dtoa_r+0xaf6>
 800a3fe:	2300      	movs	r3, #0
 800a400:	220a      	movs	r2, #10
 800a402:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a404:	9802      	ldr	r0, [sp, #8]
 800a406:	f000 f8e4 	bl	800a5d2 <__multadd>
 800a40a:	9009      	str	r0, [sp, #36]	; 0x24
 800a40c:	0006      	movs	r6, r0
 800a40e:	950a      	str	r5, [sp, #40]	; 0x28
 800a410:	e77d      	b.n	800a30e <_dtoa_r+0x9f2>
 800a412:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a414:	2300      	movs	r3, #0
 800a416:	220a      	movs	r2, #10
 800a418:	9802      	ldr	r0, [sp, #8]
 800a41a:	f000 f8da 	bl	800a5d2 <__multadd>
 800a41e:	2300      	movs	r3, #0
 800a420:	9009      	str	r0, [sp, #36]	; 0x24
 800a422:	220a      	movs	r2, #10
 800a424:	0031      	movs	r1, r6
 800a426:	9802      	ldr	r0, [sp, #8]
 800a428:	f000 f8d3 	bl	800a5d2 <__multadd>
 800a42c:	e7ee      	b.n	800a40c <_dtoa_r+0xaf0>
 800a42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a430:	930c      	str	r3, [sp, #48]	; 0x30
 800a432:	9b08      	ldr	r3, [sp, #32]
 800a434:	9306      	str	r3, [sp, #24]
 800a436:	9904      	ldr	r1, [sp, #16]
 800a438:	9803      	ldr	r0, [sp, #12]
 800a43a:	f7ff f9e9 	bl	8009810 <quorem>
 800a43e:	9b06      	ldr	r3, [sp, #24]
 800a440:	3030      	adds	r0, #48	; 0x30
 800a442:	1c5d      	adds	r5, r3, #1
 800a444:	7018      	strb	r0, [r3, #0]
 800a446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a448:	9b08      	ldr	r3, [sp, #32]
 800a44a:	0004      	movs	r4, r0
 800a44c:	1aeb      	subs	r3, r5, r3
 800a44e:	429a      	cmp	r2, r3
 800a450:	dd08      	ble.n	800a464 <_dtoa_r+0xb48>
 800a452:	2300      	movs	r3, #0
 800a454:	220a      	movs	r2, #10
 800a456:	9903      	ldr	r1, [sp, #12]
 800a458:	9802      	ldr	r0, [sp, #8]
 800a45a:	f000 f8ba 	bl	800a5d2 <__multadd>
 800a45e:	9506      	str	r5, [sp, #24]
 800a460:	9003      	str	r0, [sp, #12]
 800a462:	e7e8      	b.n	800a436 <_dtoa_r+0xb1a>
 800a464:	2300      	movs	r3, #0
 800a466:	9309      	str	r3, [sp, #36]	; 0x24
 800a468:	9903      	ldr	r1, [sp, #12]
 800a46a:	2201      	movs	r2, #1
 800a46c:	9802      	ldr	r0, [sp, #8]
 800a46e:	f000 fa21 	bl	800a8b4 <__lshift>
 800a472:	9904      	ldr	r1, [sp, #16]
 800a474:	9003      	str	r0, [sp, #12]
 800a476:	f000 fa6f 	bl	800a958 <__mcmp>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	dc9d      	bgt.n	800a3ba <_dtoa_r+0xa9e>
 800a47e:	d101      	bne.n	800a484 <_dtoa_r+0xb68>
 800a480:	07e3      	lsls	r3, r4, #31
 800a482:	d49a      	bmi.n	800a3ba <_dtoa_r+0xa9e>
 800a484:	1e6b      	subs	r3, r5, #1
 800a486:	781a      	ldrb	r2, [r3, #0]
 800a488:	2a30      	cmp	r2, #48	; 0x30
 800a48a:	d000      	beq.n	800a48e <_dtoa_r+0xb72>
 800a48c:	e6f4      	b.n	800a278 <_dtoa_r+0x95c>
 800a48e:	001d      	movs	r5, r3
 800a490:	e7f8      	b.n	800a484 <_dtoa_r+0xb68>
 800a492:	9a08      	ldr	r2, [sp, #32]
 800a494:	429a      	cmp	r2, r3
 800a496:	d103      	bne.n	800a4a0 <_dtoa_r+0xb84>
 800a498:	2331      	movs	r3, #49	; 0x31
 800a49a:	3701      	adds	r7, #1
 800a49c:	7013      	strb	r3, [r2, #0]
 800a49e:	e6eb      	b.n	800a278 <_dtoa_r+0x95c>
 800a4a0:	001d      	movs	r5, r3
 800a4a2:	e78a      	b.n	800a3ba <_dtoa_r+0xa9e>
 800a4a4:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <_dtoa_r+0xbb8>)
 800a4a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4a8:	9308      	str	r3, [sp, #32]
 800a4aa:	4b0b      	ldr	r3, [pc, #44]	; (800a4d8 <_dtoa_r+0xbbc>)
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	d001      	beq.n	800a4b4 <_dtoa_r+0xb98>
 800a4b0:	f7ff fa77 	bl	80099a2 <_dtoa_r+0x86>
 800a4b4:	f7ff fa77 	bl	80099a6 <_dtoa_r+0x8a>
 800a4b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	dc00      	bgt.n	800a4c0 <_dtoa_r+0xba4>
 800a4be:	e621      	b.n	800a104 <_dtoa_r+0x7e8>
 800a4c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a4c2:	2001      	movs	r0, #1
 800a4c4:	e635      	b.n	800a132 <_dtoa_r+0x816>
 800a4c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dcb2      	bgt.n	800a432 <_dtoa_r+0xb16>
 800a4cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	ddaf      	ble.n	800a432 <_dtoa_r+0xb16>
 800a4d2:	e6bc      	b.n	800a24e <_dtoa_r+0x932>
 800a4d4:	0800b240 	.word	0x0800b240
 800a4d8:	0800b248 	.word	0x0800b248

0800a4dc <_localeconv_r>:
 800a4dc:	4b03      	ldr	r3, [pc, #12]	; (800a4ec <_localeconv_r+0x10>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6a18      	ldr	r0, [r3, #32]
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d100      	bne.n	800a4e8 <_localeconv_r+0xc>
 800a4e6:	4802      	ldr	r0, [pc, #8]	; (800a4f0 <_localeconv_r+0x14>)
 800a4e8:	30f0      	adds	r0, #240	; 0xf0
 800a4ea:	4770      	bx	lr
 800a4ec:	20000020 	.word	0x20000020
 800a4f0:	20000084 	.word	0x20000084

0800a4f4 <malloc>:
 800a4f4:	b510      	push	{r4, lr}
 800a4f6:	4b03      	ldr	r3, [pc, #12]	; (800a504 <malloc+0x10>)
 800a4f8:	0001      	movs	r1, r0
 800a4fa:	6818      	ldr	r0, [r3, #0]
 800a4fc:	f000 fb56 	bl	800abac <_malloc_r>
 800a500:	bd10      	pop	{r4, pc}
 800a502:	46c0      	nop			; (mov r8, r8)
 800a504:	20000020 	.word	0x20000020

0800a508 <memchr>:
 800a508:	b2c9      	uxtb	r1, r1
 800a50a:	1882      	adds	r2, r0, r2
 800a50c:	4290      	cmp	r0, r2
 800a50e:	d101      	bne.n	800a514 <memchr+0xc>
 800a510:	2000      	movs	r0, #0
 800a512:	4770      	bx	lr
 800a514:	7803      	ldrb	r3, [r0, #0]
 800a516:	428b      	cmp	r3, r1
 800a518:	d0fb      	beq.n	800a512 <memchr+0xa>
 800a51a:	3001      	adds	r0, #1
 800a51c:	e7f6      	b.n	800a50c <memchr+0x4>

0800a51e <memcpy>:
 800a51e:	2300      	movs	r3, #0
 800a520:	b510      	push	{r4, lr}
 800a522:	429a      	cmp	r2, r3
 800a524:	d100      	bne.n	800a528 <memcpy+0xa>
 800a526:	bd10      	pop	{r4, pc}
 800a528:	5ccc      	ldrb	r4, [r1, r3]
 800a52a:	54c4      	strb	r4, [r0, r3]
 800a52c:	3301      	adds	r3, #1
 800a52e:	e7f8      	b.n	800a522 <memcpy+0x4>

0800a530 <_Balloc>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a534:	0004      	movs	r4, r0
 800a536:	000d      	movs	r5, r1
 800a538:	2e00      	cmp	r6, #0
 800a53a:	d107      	bne.n	800a54c <_Balloc+0x1c>
 800a53c:	2010      	movs	r0, #16
 800a53e:	f7ff ffd9 	bl	800a4f4 <malloc>
 800a542:	6260      	str	r0, [r4, #36]	; 0x24
 800a544:	6046      	str	r6, [r0, #4]
 800a546:	6086      	str	r6, [r0, #8]
 800a548:	6006      	str	r6, [r0, #0]
 800a54a:	60c6      	str	r6, [r0, #12]
 800a54c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a54e:	68f3      	ldr	r3, [r6, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d013      	beq.n	800a57c <_Balloc+0x4c>
 800a554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a556:	00aa      	lsls	r2, r5, #2
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	189b      	adds	r3, r3, r2
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	2800      	cmp	r0, #0
 800a560:	d118      	bne.n	800a594 <_Balloc+0x64>
 800a562:	2101      	movs	r1, #1
 800a564:	000e      	movs	r6, r1
 800a566:	40ae      	lsls	r6, r5
 800a568:	1d72      	adds	r2, r6, #5
 800a56a:	0092      	lsls	r2, r2, #2
 800a56c:	0020      	movs	r0, r4
 800a56e:	f000 fac5 	bl	800aafc <_calloc_r>
 800a572:	2800      	cmp	r0, #0
 800a574:	d00c      	beq.n	800a590 <_Balloc+0x60>
 800a576:	6045      	str	r5, [r0, #4]
 800a578:	6086      	str	r6, [r0, #8]
 800a57a:	e00d      	b.n	800a598 <_Balloc+0x68>
 800a57c:	2221      	movs	r2, #33	; 0x21
 800a57e:	2104      	movs	r1, #4
 800a580:	0020      	movs	r0, r4
 800a582:	f000 fabb 	bl	800aafc <_calloc_r>
 800a586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a588:	60f0      	str	r0, [r6, #12]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e1      	bne.n	800a554 <_Balloc+0x24>
 800a590:	2000      	movs	r0, #0
 800a592:	bd70      	pop	{r4, r5, r6, pc}
 800a594:	6802      	ldr	r2, [r0, #0]
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	2300      	movs	r3, #0
 800a59a:	6103      	str	r3, [r0, #16]
 800a59c:	60c3      	str	r3, [r0, #12]
 800a59e:	e7f8      	b.n	800a592 <_Balloc+0x62>

0800a5a0 <_Bfree>:
 800a5a0:	b570      	push	{r4, r5, r6, lr}
 800a5a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a5a4:	0006      	movs	r6, r0
 800a5a6:	000d      	movs	r5, r1
 800a5a8:	2c00      	cmp	r4, #0
 800a5aa:	d107      	bne.n	800a5bc <_Bfree+0x1c>
 800a5ac:	2010      	movs	r0, #16
 800a5ae:	f7ff ffa1 	bl	800a4f4 <malloc>
 800a5b2:	6270      	str	r0, [r6, #36]	; 0x24
 800a5b4:	6044      	str	r4, [r0, #4]
 800a5b6:	6084      	str	r4, [r0, #8]
 800a5b8:	6004      	str	r4, [r0, #0]
 800a5ba:	60c4      	str	r4, [r0, #12]
 800a5bc:	2d00      	cmp	r5, #0
 800a5be:	d007      	beq.n	800a5d0 <_Bfree+0x30>
 800a5c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a5c2:	686a      	ldr	r2, [r5, #4]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	0092      	lsls	r2, r2, #2
 800a5c8:	189b      	adds	r3, r3, r2
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	602a      	str	r2, [r5, #0]
 800a5ce:	601d      	str	r5, [r3, #0]
 800a5d0:	bd70      	pop	{r4, r5, r6, pc}

0800a5d2 <__multadd>:
 800a5d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5d4:	001e      	movs	r6, r3
 800a5d6:	2314      	movs	r3, #20
 800a5d8:	469c      	mov	ip, r3
 800a5da:	0007      	movs	r7, r0
 800a5dc:	000c      	movs	r4, r1
 800a5de:	2000      	movs	r0, #0
 800a5e0:	690d      	ldr	r5, [r1, #16]
 800a5e2:	448c      	add	ip, r1
 800a5e4:	4663      	mov	r3, ip
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	b299      	uxth	r1, r3
 800a5ec:	4663      	mov	r3, ip
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4351      	muls	r1, r2
 800a5f2:	0c1b      	lsrs	r3, r3, #16
 800a5f4:	4353      	muls	r3, r2
 800a5f6:	1989      	adds	r1, r1, r6
 800a5f8:	0c0e      	lsrs	r6, r1, #16
 800a5fa:	199b      	adds	r3, r3, r6
 800a5fc:	b289      	uxth	r1, r1
 800a5fe:	0c1e      	lsrs	r6, r3, #16
 800a600:	041b      	lsls	r3, r3, #16
 800a602:	185b      	adds	r3, r3, r1
 800a604:	4661      	mov	r1, ip
 800a606:	c108      	stmia	r1!, {r3}
 800a608:	468c      	mov	ip, r1
 800a60a:	4285      	cmp	r5, r0
 800a60c:	dcea      	bgt.n	800a5e4 <__multadd+0x12>
 800a60e:	2e00      	cmp	r6, #0
 800a610:	d01b      	beq.n	800a64a <__multadd+0x78>
 800a612:	68a3      	ldr	r3, [r4, #8]
 800a614:	42ab      	cmp	r3, r5
 800a616:	dc12      	bgt.n	800a63e <__multadd+0x6c>
 800a618:	6863      	ldr	r3, [r4, #4]
 800a61a:	0038      	movs	r0, r7
 800a61c:	1c59      	adds	r1, r3, #1
 800a61e:	f7ff ff87 	bl	800a530 <_Balloc>
 800a622:	0021      	movs	r1, r4
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	9001      	str	r0, [sp, #4]
 800a628:	1c9a      	adds	r2, r3, #2
 800a62a:	0092      	lsls	r2, r2, #2
 800a62c:	310c      	adds	r1, #12
 800a62e:	300c      	adds	r0, #12
 800a630:	f7ff ff75 	bl	800a51e <memcpy>
 800a634:	0021      	movs	r1, r4
 800a636:	0038      	movs	r0, r7
 800a638:	f7ff ffb2 	bl	800a5a0 <_Bfree>
 800a63c:	9c01      	ldr	r4, [sp, #4]
 800a63e:	1d2b      	adds	r3, r5, #4
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	18e3      	adds	r3, r4, r3
 800a644:	3501      	adds	r5, #1
 800a646:	605e      	str	r6, [r3, #4]
 800a648:	6125      	str	r5, [r4, #16]
 800a64a:	0020      	movs	r0, r4
 800a64c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800a64e <__hi0bits>:
 800a64e:	0003      	movs	r3, r0
 800a650:	0c02      	lsrs	r2, r0, #16
 800a652:	2000      	movs	r0, #0
 800a654:	4282      	cmp	r2, r0
 800a656:	d101      	bne.n	800a65c <__hi0bits+0xe>
 800a658:	041b      	lsls	r3, r3, #16
 800a65a:	3010      	adds	r0, #16
 800a65c:	0e1a      	lsrs	r2, r3, #24
 800a65e:	d101      	bne.n	800a664 <__hi0bits+0x16>
 800a660:	3008      	adds	r0, #8
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	0f1a      	lsrs	r2, r3, #28
 800a666:	d101      	bne.n	800a66c <__hi0bits+0x1e>
 800a668:	3004      	adds	r0, #4
 800a66a:	011b      	lsls	r3, r3, #4
 800a66c:	0f9a      	lsrs	r2, r3, #30
 800a66e:	d101      	bne.n	800a674 <__hi0bits+0x26>
 800a670:	3002      	adds	r0, #2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	2b00      	cmp	r3, #0
 800a676:	db03      	blt.n	800a680 <__hi0bits+0x32>
 800a678:	3001      	adds	r0, #1
 800a67a:	005b      	lsls	r3, r3, #1
 800a67c:	d400      	bmi.n	800a680 <__hi0bits+0x32>
 800a67e:	2020      	movs	r0, #32
 800a680:	4770      	bx	lr

0800a682 <__lo0bits>:
 800a682:	2207      	movs	r2, #7
 800a684:	6803      	ldr	r3, [r0, #0]
 800a686:	b510      	push	{r4, lr}
 800a688:	0001      	movs	r1, r0
 800a68a:	401a      	ands	r2, r3
 800a68c:	d00d      	beq.n	800a6aa <__lo0bits+0x28>
 800a68e:	2401      	movs	r4, #1
 800a690:	2000      	movs	r0, #0
 800a692:	4223      	tst	r3, r4
 800a694:	d105      	bne.n	800a6a2 <__lo0bits+0x20>
 800a696:	3002      	adds	r0, #2
 800a698:	4203      	tst	r3, r0
 800a69a:	d003      	beq.n	800a6a4 <__lo0bits+0x22>
 800a69c:	40e3      	lsrs	r3, r4
 800a69e:	0020      	movs	r0, r4
 800a6a0:	600b      	str	r3, [r1, #0]
 800a6a2:	bd10      	pop	{r4, pc}
 800a6a4:	089b      	lsrs	r3, r3, #2
 800a6a6:	600b      	str	r3, [r1, #0]
 800a6a8:	e7fb      	b.n	800a6a2 <__lo0bits+0x20>
 800a6aa:	b29c      	uxth	r4, r3
 800a6ac:	0010      	movs	r0, r2
 800a6ae:	2c00      	cmp	r4, #0
 800a6b0:	d101      	bne.n	800a6b6 <__lo0bits+0x34>
 800a6b2:	2010      	movs	r0, #16
 800a6b4:	0c1b      	lsrs	r3, r3, #16
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	2a00      	cmp	r2, #0
 800a6ba:	d101      	bne.n	800a6c0 <__lo0bits+0x3e>
 800a6bc:	3008      	adds	r0, #8
 800a6be:	0a1b      	lsrs	r3, r3, #8
 800a6c0:	071a      	lsls	r2, r3, #28
 800a6c2:	d101      	bne.n	800a6c8 <__lo0bits+0x46>
 800a6c4:	3004      	adds	r0, #4
 800a6c6:	091b      	lsrs	r3, r3, #4
 800a6c8:	079a      	lsls	r2, r3, #30
 800a6ca:	d101      	bne.n	800a6d0 <__lo0bits+0x4e>
 800a6cc:	3002      	adds	r0, #2
 800a6ce:	089b      	lsrs	r3, r3, #2
 800a6d0:	07da      	lsls	r2, r3, #31
 800a6d2:	d4e8      	bmi.n	800a6a6 <__lo0bits+0x24>
 800a6d4:	085b      	lsrs	r3, r3, #1
 800a6d6:	d001      	beq.n	800a6dc <__lo0bits+0x5a>
 800a6d8:	3001      	adds	r0, #1
 800a6da:	e7e4      	b.n	800a6a6 <__lo0bits+0x24>
 800a6dc:	2020      	movs	r0, #32
 800a6de:	e7e0      	b.n	800a6a2 <__lo0bits+0x20>

0800a6e0 <__i2b>:
 800a6e0:	b510      	push	{r4, lr}
 800a6e2:	000c      	movs	r4, r1
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	f7ff ff23 	bl	800a530 <_Balloc>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	6144      	str	r4, [r0, #20]
 800a6ee:	6103      	str	r3, [r0, #16]
 800a6f0:	bd10      	pop	{r4, pc}

0800a6f2 <__multiply>:
 800a6f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6f4:	690b      	ldr	r3, [r1, #16]
 800a6f6:	0014      	movs	r4, r2
 800a6f8:	6912      	ldr	r2, [r2, #16]
 800a6fa:	b089      	sub	sp, #36	; 0x24
 800a6fc:	000d      	movs	r5, r1
 800a6fe:	4293      	cmp	r3, r2
 800a700:	da01      	bge.n	800a706 <__multiply+0x14>
 800a702:	0025      	movs	r5, r4
 800a704:	000c      	movs	r4, r1
 800a706:	692f      	ldr	r7, [r5, #16]
 800a708:	6926      	ldr	r6, [r4, #16]
 800a70a:	6869      	ldr	r1, [r5, #4]
 800a70c:	19bb      	adds	r3, r7, r6
 800a70e:	9302      	str	r3, [sp, #8]
 800a710:	68ab      	ldr	r3, [r5, #8]
 800a712:	19ba      	adds	r2, r7, r6
 800a714:	4293      	cmp	r3, r2
 800a716:	da00      	bge.n	800a71a <__multiply+0x28>
 800a718:	3101      	adds	r1, #1
 800a71a:	f7ff ff09 	bl	800a530 <_Balloc>
 800a71e:	0002      	movs	r2, r0
 800a720:	19bb      	adds	r3, r7, r6
 800a722:	3214      	adds	r2, #20
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	18d3      	adds	r3, r2, r3
 800a728:	469c      	mov	ip, r3
 800a72a:	2100      	movs	r1, #0
 800a72c:	0013      	movs	r3, r2
 800a72e:	9004      	str	r0, [sp, #16]
 800a730:	4563      	cmp	r3, ip
 800a732:	d31d      	bcc.n	800a770 <__multiply+0x7e>
 800a734:	3514      	adds	r5, #20
 800a736:	00bf      	lsls	r7, r7, #2
 800a738:	19eb      	adds	r3, r5, r7
 800a73a:	3414      	adds	r4, #20
 800a73c:	00b6      	lsls	r6, r6, #2
 800a73e:	9305      	str	r3, [sp, #20]
 800a740:	19a3      	adds	r3, r4, r6
 800a742:	9503      	str	r5, [sp, #12]
 800a744:	9401      	str	r4, [sp, #4]
 800a746:	9307      	str	r3, [sp, #28]
 800a748:	9b07      	ldr	r3, [sp, #28]
 800a74a:	9901      	ldr	r1, [sp, #4]
 800a74c:	4299      	cmp	r1, r3
 800a74e:	d311      	bcc.n	800a774 <__multiply+0x82>
 800a750:	9b02      	ldr	r3, [sp, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	dd06      	ble.n	800a764 <__multiply+0x72>
 800a756:	2304      	movs	r3, #4
 800a758:	425b      	negs	r3, r3
 800a75a:	449c      	add	ip, r3
 800a75c:	4663      	mov	r3, ip
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d051      	beq.n	800a808 <__multiply+0x116>
 800a764:	9b04      	ldr	r3, [sp, #16]
 800a766:	9a02      	ldr	r2, [sp, #8]
 800a768:	0018      	movs	r0, r3
 800a76a:	611a      	str	r2, [r3, #16]
 800a76c:	b009      	add	sp, #36	; 0x24
 800a76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a770:	c302      	stmia	r3!, {r1}
 800a772:	e7dd      	b.n	800a730 <__multiply+0x3e>
 800a774:	9b01      	ldr	r3, [sp, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	b298      	uxth	r0, r3
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d01c      	beq.n	800a7b8 <__multiply+0xc6>
 800a77e:	0015      	movs	r5, r2
 800a780:	2600      	movs	r6, #0
 800a782:	9f03      	ldr	r7, [sp, #12]
 800a784:	cf02      	ldmia	r7!, {r1}
 800a786:	682c      	ldr	r4, [r5, #0]
 800a788:	b28b      	uxth	r3, r1
 800a78a:	4343      	muls	r3, r0
 800a78c:	0c09      	lsrs	r1, r1, #16
 800a78e:	4341      	muls	r1, r0
 800a790:	b2a4      	uxth	r4, r4
 800a792:	191b      	adds	r3, r3, r4
 800a794:	199b      	adds	r3, r3, r6
 800a796:	000e      	movs	r6, r1
 800a798:	6829      	ldr	r1, [r5, #0]
 800a79a:	9506      	str	r5, [sp, #24]
 800a79c:	0c09      	lsrs	r1, r1, #16
 800a79e:	1871      	adds	r1, r6, r1
 800a7a0:	0c1e      	lsrs	r6, r3, #16
 800a7a2:	1989      	adds	r1, r1, r6
 800a7a4:	0c0e      	lsrs	r6, r1, #16
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	0409      	lsls	r1, r1, #16
 800a7aa:	430b      	orrs	r3, r1
 800a7ac:	c508      	stmia	r5!, {r3}
 800a7ae:	9b05      	ldr	r3, [sp, #20]
 800a7b0:	42bb      	cmp	r3, r7
 800a7b2:	d8e7      	bhi.n	800a784 <__multiply+0x92>
 800a7b4:	9b06      	ldr	r3, [sp, #24]
 800a7b6:	605e      	str	r6, [r3, #4]
 800a7b8:	9b01      	ldr	r3, [sp, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	0c1d      	lsrs	r5, r3, #16
 800a7be:	d01e      	beq.n	800a7fe <__multiply+0x10c>
 800a7c0:	0010      	movs	r0, r2
 800a7c2:	2700      	movs	r7, #0
 800a7c4:	6813      	ldr	r3, [r2, #0]
 800a7c6:	9e03      	ldr	r6, [sp, #12]
 800a7c8:	6831      	ldr	r1, [r6, #0]
 800a7ca:	6804      	ldr	r4, [r0, #0]
 800a7cc:	b289      	uxth	r1, r1
 800a7ce:	4369      	muls	r1, r5
 800a7d0:	0c24      	lsrs	r4, r4, #16
 800a7d2:	1909      	adds	r1, r1, r4
 800a7d4:	19c9      	adds	r1, r1, r7
 800a7d6:	040f      	lsls	r7, r1, #16
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	433b      	orrs	r3, r7
 800a7dc:	6003      	str	r3, [r0, #0]
 800a7de:	ce80      	ldmia	r6!, {r7}
 800a7e0:	6843      	ldr	r3, [r0, #4]
 800a7e2:	0c3f      	lsrs	r7, r7, #16
 800a7e4:	436f      	muls	r7, r5
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	18fb      	adds	r3, r7, r3
 800a7ea:	0c09      	lsrs	r1, r1, #16
 800a7ec:	185b      	adds	r3, r3, r1
 800a7ee:	9905      	ldr	r1, [sp, #20]
 800a7f0:	9006      	str	r0, [sp, #24]
 800a7f2:	0c1f      	lsrs	r7, r3, #16
 800a7f4:	3004      	adds	r0, #4
 800a7f6:	42b1      	cmp	r1, r6
 800a7f8:	d8e6      	bhi.n	800a7c8 <__multiply+0xd6>
 800a7fa:	9906      	ldr	r1, [sp, #24]
 800a7fc:	604b      	str	r3, [r1, #4]
 800a7fe:	9b01      	ldr	r3, [sp, #4]
 800a800:	3204      	adds	r2, #4
 800a802:	3304      	adds	r3, #4
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	e79f      	b.n	800a748 <__multiply+0x56>
 800a808:	9b02      	ldr	r3, [sp, #8]
 800a80a:	3b01      	subs	r3, #1
 800a80c:	9302      	str	r3, [sp, #8]
 800a80e:	e79f      	b.n	800a750 <__multiply+0x5e>

0800a810 <__pow5mult>:
 800a810:	2303      	movs	r3, #3
 800a812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a814:	4013      	ands	r3, r2
 800a816:	0005      	movs	r5, r0
 800a818:	000e      	movs	r6, r1
 800a81a:	0014      	movs	r4, r2
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d008      	beq.n	800a832 <__pow5mult+0x22>
 800a820:	4922      	ldr	r1, [pc, #136]	; (800a8ac <__pow5mult+0x9c>)
 800a822:	3b01      	subs	r3, #1
 800a824:	009a      	lsls	r2, r3, #2
 800a826:	5852      	ldr	r2, [r2, r1]
 800a828:	2300      	movs	r3, #0
 800a82a:	0031      	movs	r1, r6
 800a82c:	f7ff fed1 	bl	800a5d2 <__multadd>
 800a830:	0006      	movs	r6, r0
 800a832:	10a3      	asrs	r3, r4, #2
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	d036      	beq.n	800a8a6 <__pow5mult+0x96>
 800a838:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800a83a:	2c00      	cmp	r4, #0
 800a83c:	d107      	bne.n	800a84e <__pow5mult+0x3e>
 800a83e:	2010      	movs	r0, #16
 800a840:	f7ff fe58 	bl	800a4f4 <malloc>
 800a844:	6268      	str	r0, [r5, #36]	; 0x24
 800a846:	6044      	str	r4, [r0, #4]
 800a848:	6084      	str	r4, [r0, #8]
 800a84a:	6004      	str	r4, [r0, #0]
 800a84c:	60c4      	str	r4, [r0, #12]
 800a84e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800a850:	68bc      	ldr	r4, [r7, #8]
 800a852:	2c00      	cmp	r4, #0
 800a854:	d107      	bne.n	800a866 <__pow5mult+0x56>
 800a856:	4916      	ldr	r1, [pc, #88]	; (800a8b0 <__pow5mult+0xa0>)
 800a858:	0028      	movs	r0, r5
 800a85a:	f7ff ff41 	bl	800a6e0 <__i2b>
 800a85e:	2300      	movs	r3, #0
 800a860:	0004      	movs	r4, r0
 800a862:	60b8      	str	r0, [r7, #8]
 800a864:	6003      	str	r3, [r0, #0]
 800a866:	2201      	movs	r2, #1
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	4213      	tst	r3, r2
 800a86c:	d00a      	beq.n	800a884 <__pow5mult+0x74>
 800a86e:	0031      	movs	r1, r6
 800a870:	0022      	movs	r2, r4
 800a872:	0028      	movs	r0, r5
 800a874:	f7ff ff3d 	bl	800a6f2 <__multiply>
 800a878:	0007      	movs	r7, r0
 800a87a:	0031      	movs	r1, r6
 800a87c:	0028      	movs	r0, r5
 800a87e:	f7ff fe8f 	bl	800a5a0 <_Bfree>
 800a882:	003e      	movs	r6, r7
 800a884:	9b01      	ldr	r3, [sp, #4]
 800a886:	105b      	asrs	r3, r3, #1
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	d00c      	beq.n	800a8a6 <__pow5mult+0x96>
 800a88c:	6820      	ldr	r0, [r4, #0]
 800a88e:	2800      	cmp	r0, #0
 800a890:	d107      	bne.n	800a8a2 <__pow5mult+0x92>
 800a892:	0022      	movs	r2, r4
 800a894:	0021      	movs	r1, r4
 800a896:	0028      	movs	r0, r5
 800a898:	f7ff ff2b 	bl	800a6f2 <__multiply>
 800a89c:	2300      	movs	r3, #0
 800a89e:	6020      	str	r0, [r4, #0]
 800a8a0:	6003      	str	r3, [r0, #0]
 800a8a2:	0004      	movs	r4, r0
 800a8a4:	e7df      	b.n	800a866 <__pow5mult+0x56>
 800a8a6:	0030      	movs	r0, r6
 800a8a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8aa:	46c0      	nop			; (mov r8, r8)
 800a8ac:	0800b340 	.word	0x0800b340
 800a8b0:	00000271 	.word	0x00000271

0800a8b4 <__lshift>:
 800a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8b6:	000d      	movs	r5, r1
 800a8b8:	0017      	movs	r7, r2
 800a8ba:	692b      	ldr	r3, [r5, #16]
 800a8bc:	1154      	asrs	r4, r2, #5
 800a8be:	b085      	sub	sp, #20
 800a8c0:	18e3      	adds	r3, r4, r3
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	6849      	ldr	r1, [r1, #4]
 800a8ca:	68ab      	ldr	r3, [r5, #8]
 800a8cc:	9002      	str	r0, [sp, #8]
 800a8ce:	9a00      	ldr	r2, [sp, #0]
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	db35      	blt.n	800a940 <__lshift+0x8c>
 800a8d4:	9802      	ldr	r0, [sp, #8]
 800a8d6:	f7ff fe2b 	bl	800a530 <_Balloc>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	0002      	movs	r2, r0
 800a8de:	0006      	movs	r6, r0
 800a8e0:	0019      	movs	r1, r3
 800a8e2:	3214      	adds	r2, #20
 800a8e4:	42a3      	cmp	r3, r4
 800a8e6:	db2e      	blt.n	800a946 <__lshift+0x92>
 800a8e8:	43e3      	mvns	r3, r4
 800a8ea:	17db      	asrs	r3, r3, #31
 800a8ec:	401c      	ands	r4, r3
 800a8ee:	002b      	movs	r3, r5
 800a8f0:	00a4      	lsls	r4, r4, #2
 800a8f2:	1914      	adds	r4, r2, r4
 800a8f4:	692a      	ldr	r2, [r5, #16]
 800a8f6:	3314      	adds	r3, #20
 800a8f8:	0092      	lsls	r2, r2, #2
 800a8fa:	189a      	adds	r2, r3, r2
 800a8fc:	4694      	mov	ip, r2
 800a8fe:	221f      	movs	r2, #31
 800a900:	4017      	ands	r7, r2
 800a902:	d024      	beq.n	800a94e <__lshift+0x9a>
 800a904:	3201      	adds	r2, #1
 800a906:	1bd2      	subs	r2, r2, r7
 800a908:	9203      	str	r2, [sp, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	6819      	ldr	r1, [r3, #0]
 800a90e:	0020      	movs	r0, r4
 800a910:	40b9      	lsls	r1, r7
 800a912:	430a      	orrs	r2, r1
 800a914:	c404      	stmia	r4!, {r2}
 800a916:	cb04      	ldmia	r3!, {r2}
 800a918:	9903      	ldr	r1, [sp, #12]
 800a91a:	40ca      	lsrs	r2, r1
 800a91c:	459c      	cmp	ip, r3
 800a91e:	d8f5      	bhi.n	800a90c <__lshift+0x58>
 800a920:	6042      	str	r2, [r0, #4]
 800a922:	2a00      	cmp	r2, #0
 800a924:	d002      	beq.n	800a92c <__lshift+0x78>
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	3302      	adds	r3, #2
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	9b00      	ldr	r3, [sp, #0]
 800a92e:	9802      	ldr	r0, [sp, #8]
 800a930:	3b01      	subs	r3, #1
 800a932:	6133      	str	r3, [r6, #16]
 800a934:	0029      	movs	r1, r5
 800a936:	f7ff fe33 	bl	800a5a0 <_Bfree>
 800a93a:	0030      	movs	r0, r6
 800a93c:	b005      	add	sp, #20
 800a93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a940:	3101      	adds	r1, #1
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	e7c3      	b.n	800a8ce <__lshift+0x1a>
 800a946:	0098      	lsls	r0, r3, #2
 800a948:	5011      	str	r1, [r2, r0]
 800a94a:	3301      	adds	r3, #1
 800a94c:	e7ca      	b.n	800a8e4 <__lshift+0x30>
 800a94e:	cb04      	ldmia	r3!, {r2}
 800a950:	c404      	stmia	r4!, {r2}
 800a952:	459c      	cmp	ip, r3
 800a954:	d8fb      	bhi.n	800a94e <__lshift+0x9a>
 800a956:	e7e9      	b.n	800a92c <__lshift+0x78>

0800a958 <__mcmp>:
 800a958:	690a      	ldr	r2, [r1, #16]
 800a95a:	6903      	ldr	r3, [r0, #16]
 800a95c:	b530      	push	{r4, r5, lr}
 800a95e:	1a9b      	subs	r3, r3, r2
 800a960:	d10d      	bne.n	800a97e <__mcmp+0x26>
 800a962:	0092      	lsls	r2, r2, #2
 800a964:	3014      	adds	r0, #20
 800a966:	3114      	adds	r1, #20
 800a968:	1884      	adds	r4, r0, r2
 800a96a:	1889      	adds	r1, r1, r2
 800a96c:	3c04      	subs	r4, #4
 800a96e:	3904      	subs	r1, #4
 800a970:	6825      	ldr	r5, [r4, #0]
 800a972:	680a      	ldr	r2, [r1, #0]
 800a974:	4295      	cmp	r5, r2
 800a976:	d004      	beq.n	800a982 <__mcmp+0x2a>
 800a978:	2301      	movs	r3, #1
 800a97a:	4295      	cmp	r5, r2
 800a97c:	d304      	bcc.n	800a988 <__mcmp+0x30>
 800a97e:	0018      	movs	r0, r3
 800a980:	bd30      	pop	{r4, r5, pc}
 800a982:	42a0      	cmp	r0, r4
 800a984:	d3f2      	bcc.n	800a96c <__mcmp+0x14>
 800a986:	e7fa      	b.n	800a97e <__mcmp+0x26>
 800a988:	425b      	negs	r3, r3
 800a98a:	e7f8      	b.n	800a97e <__mcmp+0x26>

0800a98c <__mdiff>:
 800a98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a98e:	000d      	movs	r5, r1
 800a990:	b085      	sub	sp, #20
 800a992:	0007      	movs	r7, r0
 800a994:	0011      	movs	r1, r2
 800a996:	0028      	movs	r0, r5
 800a998:	0014      	movs	r4, r2
 800a99a:	f7ff ffdd 	bl	800a958 <__mcmp>
 800a99e:	1e06      	subs	r6, r0, #0
 800a9a0:	d108      	bne.n	800a9b4 <__mdiff+0x28>
 800a9a2:	0001      	movs	r1, r0
 800a9a4:	0038      	movs	r0, r7
 800a9a6:	f7ff fdc3 	bl	800a530 <_Balloc>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	6146      	str	r6, [r0, #20]
 800a9ae:	6103      	str	r3, [r0, #16]
 800a9b0:	b005      	add	sp, #20
 800a9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	db04      	blt.n	800a9c6 <__mdiff+0x3a>
 800a9bc:	0023      	movs	r3, r4
 800a9be:	002c      	movs	r4, r5
 800a9c0:	001d      	movs	r5, r3
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	6861      	ldr	r1, [r4, #4]
 800a9c8:	0038      	movs	r0, r7
 800a9ca:	f7ff fdb1 	bl	800a530 <_Balloc>
 800a9ce:	002f      	movs	r7, r5
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	9b01      	ldr	r3, [sp, #4]
 800a9d4:	6926      	ldr	r6, [r4, #16]
 800a9d6:	60c3      	str	r3, [r0, #12]
 800a9d8:	3414      	adds	r4, #20
 800a9da:	00b3      	lsls	r3, r6, #2
 800a9dc:	18e3      	adds	r3, r4, r3
 800a9de:	9302      	str	r3, [sp, #8]
 800a9e0:	692b      	ldr	r3, [r5, #16]
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	18fb      	adds	r3, r7, r3
 800a9e8:	9303      	str	r3, [sp, #12]
 800a9ea:	0003      	movs	r3, r0
 800a9ec:	4694      	mov	ip, r2
 800a9ee:	3314      	adds	r3, #20
 800a9f0:	cc20      	ldmia	r4!, {r5}
 800a9f2:	cf04      	ldmia	r7!, {r2}
 800a9f4:	9201      	str	r2, [sp, #4]
 800a9f6:	b2aa      	uxth	r2, r5
 800a9f8:	4494      	add	ip, r2
 800a9fa:	466a      	mov	r2, sp
 800a9fc:	4661      	mov	r1, ip
 800a9fe:	8892      	ldrh	r2, [r2, #4]
 800aa00:	0c2d      	lsrs	r5, r5, #16
 800aa02:	1a8a      	subs	r2, r1, r2
 800aa04:	9901      	ldr	r1, [sp, #4]
 800aa06:	0c09      	lsrs	r1, r1, #16
 800aa08:	1a69      	subs	r1, r5, r1
 800aa0a:	1415      	asrs	r5, r2, #16
 800aa0c:	1949      	adds	r1, r1, r5
 800aa0e:	140d      	asrs	r5, r1, #16
 800aa10:	b292      	uxth	r2, r2
 800aa12:	0409      	lsls	r1, r1, #16
 800aa14:	430a      	orrs	r2, r1
 800aa16:	601a      	str	r2, [r3, #0]
 800aa18:	9a03      	ldr	r2, [sp, #12]
 800aa1a:	46ac      	mov	ip, r5
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	42ba      	cmp	r2, r7
 800aa20:	d8e6      	bhi.n	800a9f0 <__mdiff+0x64>
 800aa22:	9902      	ldr	r1, [sp, #8]
 800aa24:	001a      	movs	r2, r3
 800aa26:	428c      	cmp	r4, r1
 800aa28:	d305      	bcc.n	800aa36 <__mdiff+0xaa>
 800aa2a:	3a04      	subs	r2, #4
 800aa2c:	6813      	ldr	r3, [r2, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00e      	beq.n	800aa50 <__mdiff+0xc4>
 800aa32:	6106      	str	r6, [r0, #16]
 800aa34:	e7bc      	b.n	800a9b0 <__mdiff+0x24>
 800aa36:	cc04      	ldmia	r4!, {r2}
 800aa38:	b291      	uxth	r1, r2
 800aa3a:	4461      	add	r1, ip
 800aa3c:	140d      	asrs	r5, r1, #16
 800aa3e:	0c12      	lsrs	r2, r2, #16
 800aa40:	1952      	adds	r2, r2, r5
 800aa42:	1415      	asrs	r5, r2, #16
 800aa44:	b289      	uxth	r1, r1
 800aa46:	0412      	lsls	r2, r2, #16
 800aa48:	430a      	orrs	r2, r1
 800aa4a:	46ac      	mov	ip, r5
 800aa4c:	c304      	stmia	r3!, {r2}
 800aa4e:	e7e8      	b.n	800aa22 <__mdiff+0x96>
 800aa50:	3e01      	subs	r6, #1
 800aa52:	e7ea      	b.n	800aa2a <__mdiff+0x9e>

0800aa54 <__d2b>:
 800aa54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa56:	001d      	movs	r5, r3
 800aa58:	2101      	movs	r1, #1
 800aa5a:	0014      	movs	r4, r2
 800aa5c:	9f08      	ldr	r7, [sp, #32]
 800aa5e:	f7ff fd67 	bl	800a530 <_Balloc>
 800aa62:	032b      	lsls	r3, r5, #12
 800aa64:	006d      	lsls	r5, r5, #1
 800aa66:	0006      	movs	r6, r0
 800aa68:	0b1b      	lsrs	r3, r3, #12
 800aa6a:	0d6d      	lsrs	r5, r5, #21
 800aa6c:	d124      	bne.n	800aab8 <__d2b+0x64>
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	2c00      	cmp	r4, #0
 800aa72:	d027      	beq.n	800aac4 <__d2b+0x70>
 800aa74:	4668      	mov	r0, sp
 800aa76:	9400      	str	r4, [sp, #0]
 800aa78:	f7ff fe03 	bl	800a682 <__lo0bits>
 800aa7c:	9c00      	ldr	r4, [sp, #0]
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d01e      	beq.n	800aac0 <__d2b+0x6c>
 800aa82:	9b01      	ldr	r3, [sp, #4]
 800aa84:	2120      	movs	r1, #32
 800aa86:	001a      	movs	r2, r3
 800aa88:	1a09      	subs	r1, r1, r0
 800aa8a:	408a      	lsls	r2, r1
 800aa8c:	40c3      	lsrs	r3, r0
 800aa8e:	4322      	orrs	r2, r4
 800aa90:	6172      	str	r2, [r6, #20]
 800aa92:	9301      	str	r3, [sp, #4]
 800aa94:	9c01      	ldr	r4, [sp, #4]
 800aa96:	61b4      	str	r4, [r6, #24]
 800aa98:	1e63      	subs	r3, r4, #1
 800aa9a:	419c      	sbcs	r4, r3
 800aa9c:	3401      	adds	r4, #1
 800aa9e:	6134      	str	r4, [r6, #16]
 800aaa0:	2d00      	cmp	r5, #0
 800aaa2:	d018      	beq.n	800aad6 <__d2b+0x82>
 800aaa4:	4b12      	ldr	r3, [pc, #72]	; (800aaf0 <__d2b+0x9c>)
 800aaa6:	18ed      	adds	r5, r5, r3
 800aaa8:	2335      	movs	r3, #53	; 0x35
 800aaaa:	182d      	adds	r5, r5, r0
 800aaac:	603d      	str	r5, [r7, #0]
 800aaae:	1a18      	subs	r0, r3, r0
 800aab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab2:	6018      	str	r0, [r3, #0]
 800aab4:	0030      	movs	r0, r6
 800aab6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aab8:	2280      	movs	r2, #128	; 0x80
 800aaba:	0352      	lsls	r2, r2, #13
 800aabc:	4313      	orrs	r3, r2
 800aabe:	e7d6      	b.n	800aa6e <__d2b+0x1a>
 800aac0:	6174      	str	r4, [r6, #20]
 800aac2:	e7e7      	b.n	800aa94 <__d2b+0x40>
 800aac4:	a801      	add	r0, sp, #4
 800aac6:	f7ff fddc 	bl	800a682 <__lo0bits>
 800aaca:	2401      	movs	r4, #1
 800aacc:	9b01      	ldr	r3, [sp, #4]
 800aace:	6134      	str	r4, [r6, #16]
 800aad0:	6173      	str	r3, [r6, #20]
 800aad2:	3020      	adds	r0, #32
 800aad4:	e7e4      	b.n	800aaa0 <__d2b+0x4c>
 800aad6:	4b07      	ldr	r3, [pc, #28]	; (800aaf4 <__d2b+0xa0>)
 800aad8:	18c0      	adds	r0, r0, r3
 800aada:	4b07      	ldr	r3, [pc, #28]	; (800aaf8 <__d2b+0xa4>)
 800aadc:	6038      	str	r0, [r7, #0]
 800aade:	18e3      	adds	r3, r4, r3
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	18f3      	adds	r3, r6, r3
 800aae4:	6958      	ldr	r0, [r3, #20]
 800aae6:	f7ff fdb2 	bl	800a64e <__hi0bits>
 800aaea:	0164      	lsls	r4, r4, #5
 800aaec:	1a20      	subs	r0, r4, r0
 800aaee:	e7df      	b.n	800aab0 <__d2b+0x5c>
 800aaf0:	fffffbcd 	.word	0xfffffbcd
 800aaf4:	fffffbce 	.word	0xfffffbce
 800aaf8:	3fffffff 	.word	0x3fffffff

0800aafc <_calloc_r>:
 800aafc:	434a      	muls	r2, r1
 800aafe:	b570      	push	{r4, r5, r6, lr}
 800ab00:	0011      	movs	r1, r2
 800ab02:	0014      	movs	r4, r2
 800ab04:	f000 f852 	bl	800abac <_malloc_r>
 800ab08:	1e05      	subs	r5, r0, #0
 800ab0a:	d003      	beq.n	800ab14 <_calloc_r+0x18>
 800ab0c:	0022      	movs	r2, r4
 800ab0e:	2100      	movs	r1, #0
 800ab10:	f7fe f9f8 	bl	8008f04 <memset>
 800ab14:	0028      	movs	r0, r5
 800ab16:	bd70      	pop	{r4, r5, r6, pc}

0800ab18 <_free_r>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	0005      	movs	r5, r0
 800ab1c:	2900      	cmp	r1, #0
 800ab1e:	d010      	beq.n	800ab42 <_free_r+0x2a>
 800ab20:	1f0c      	subs	r4, r1, #4
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	da00      	bge.n	800ab2a <_free_r+0x12>
 800ab28:	18e4      	adds	r4, r4, r3
 800ab2a:	0028      	movs	r0, r5
 800ab2c:	f000 fa33 	bl	800af96 <__malloc_lock>
 800ab30:	4a1d      	ldr	r2, [pc, #116]	; (800aba8 <_free_r+0x90>)
 800ab32:	6813      	ldr	r3, [r2, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d105      	bne.n	800ab44 <_free_r+0x2c>
 800ab38:	6063      	str	r3, [r4, #4]
 800ab3a:	6014      	str	r4, [r2, #0]
 800ab3c:	0028      	movs	r0, r5
 800ab3e:	f000 fa2b 	bl	800af98 <__malloc_unlock>
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	d909      	bls.n	800ab5c <_free_r+0x44>
 800ab48:	6821      	ldr	r1, [r4, #0]
 800ab4a:	1860      	adds	r0, r4, r1
 800ab4c:	4283      	cmp	r3, r0
 800ab4e:	d1f3      	bne.n	800ab38 <_free_r+0x20>
 800ab50:	6818      	ldr	r0, [r3, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	1841      	adds	r1, r0, r1
 800ab56:	6021      	str	r1, [r4, #0]
 800ab58:	e7ee      	b.n	800ab38 <_free_r+0x20>
 800ab5a:	0013      	movs	r3, r2
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	2a00      	cmp	r2, #0
 800ab60:	d001      	beq.n	800ab66 <_free_r+0x4e>
 800ab62:	42a2      	cmp	r2, r4
 800ab64:	d9f9      	bls.n	800ab5a <_free_r+0x42>
 800ab66:	6819      	ldr	r1, [r3, #0]
 800ab68:	1858      	adds	r0, r3, r1
 800ab6a:	42a0      	cmp	r0, r4
 800ab6c:	d10b      	bne.n	800ab86 <_free_r+0x6e>
 800ab6e:	6820      	ldr	r0, [r4, #0]
 800ab70:	1809      	adds	r1, r1, r0
 800ab72:	1858      	adds	r0, r3, r1
 800ab74:	6019      	str	r1, [r3, #0]
 800ab76:	4282      	cmp	r2, r0
 800ab78:	d1e0      	bne.n	800ab3c <_free_r+0x24>
 800ab7a:	6810      	ldr	r0, [r2, #0]
 800ab7c:	6852      	ldr	r2, [r2, #4]
 800ab7e:	1841      	adds	r1, r0, r1
 800ab80:	6019      	str	r1, [r3, #0]
 800ab82:	605a      	str	r2, [r3, #4]
 800ab84:	e7da      	b.n	800ab3c <_free_r+0x24>
 800ab86:	42a0      	cmp	r0, r4
 800ab88:	d902      	bls.n	800ab90 <_free_r+0x78>
 800ab8a:	230c      	movs	r3, #12
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	e7d5      	b.n	800ab3c <_free_r+0x24>
 800ab90:	6821      	ldr	r1, [r4, #0]
 800ab92:	1860      	adds	r0, r4, r1
 800ab94:	4282      	cmp	r2, r0
 800ab96:	d103      	bne.n	800aba0 <_free_r+0x88>
 800ab98:	6810      	ldr	r0, [r2, #0]
 800ab9a:	6852      	ldr	r2, [r2, #4]
 800ab9c:	1841      	adds	r1, r0, r1
 800ab9e:	6021      	str	r1, [r4, #0]
 800aba0:	6062      	str	r2, [r4, #4]
 800aba2:	605c      	str	r4, [r3, #4]
 800aba4:	e7ca      	b.n	800ab3c <_free_r+0x24>
 800aba6:	46c0      	nop			; (mov r8, r8)
 800aba8:	20000284 	.word	0x20000284

0800abac <_malloc_r>:
 800abac:	2303      	movs	r3, #3
 800abae:	b570      	push	{r4, r5, r6, lr}
 800abb0:	1ccd      	adds	r5, r1, #3
 800abb2:	439d      	bics	r5, r3
 800abb4:	3508      	adds	r5, #8
 800abb6:	0006      	movs	r6, r0
 800abb8:	2d0c      	cmp	r5, #12
 800abba:	d21e      	bcs.n	800abfa <_malloc_r+0x4e>
 800abbc:	250c      	movs	r5, #12
 800abbe:	42a9      	cmp	r1, r5
 800abc0:	d81d      	bhi.n	800abfe <_malloc_r+0x52>
 800abc2:	0030      	movs	r0, r6
 800abc4:	f000 f9e7 	bl	800af96 <__malloc_lock>
 800abc8:	4a25      	ldr	r2, [pc, #148]	; (800ac60 <_malloc_r+0xb4>)
 800abca:	6814      	ldr	r4, [r2, #0]
 800abcc:	0021      	movs	r1, r4
 800abce:	2900      	cmp	r1, #0
 800abd0:	d119      	bne.n	800ac06 <_malloc_r+0x5a>
 800abd2:	4c24      	ldr	r4, [pc, #144]	; (800ac64 <_malloc_r+0xb8>)
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d103      	bne.n	800abe2 <_malloc_r+0x36>
 800abda:	0030      	movs	r0, r6
 800abdc:	f000 f9a4 	bl	800af28 <_sbrk_r>
 800abe0:	6020      	str	r0, [r4, #0]
 800abe2:	0029      	movs	r1, r5
 800abe4:	0030      	movs	r0, r6
 800abe6:	f000 f99f 	bl	800af28 <_sbrk_r>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	d12b      	bne.n	800ac46 <_malloc_r+0x9a>
 800abee:	230c      	movs	r3, #12
 800abf0:	0030      	movs	r0, r6
 800abf2:	6033      	str	r3, [r6, #0]
 800abf4:	f000 f9d0 	bl	800af98 <__malloc_unlock>
 800abf8:	e003      	b.n	800ac02 <_malloc_r+0x56>
 800abfa:	2d00      	cmp	r5, #0
 800abfc:	dadf      	bge.n	800abbe <_malloc_r+0x12>
 800abfe:	230c      	movs	r3, #12
 800ac00:	6033      	str	r3, [r6, #0]
 800ac02:	2000      	movs	r0, #0
 800ac04:	bd70      	pop	{r4, r5, r6, pc}
 800ac06:	680b      	ldr	r3, [r1, #0]
 800ac08:	1b5b      	subs	r3, r3, r5
 800ac0a:	d419      	bmi.n	800ac40 <_malloc_r+0x94>
 800ac0c:	2b0b      	cmp	r3, #11
 800ac0e:	d903      	bls.n	800ac18 <_malloc_r+0x6c>
 800ac10:	600b      	str	r3, [r1, #0]
 800ac12:	18cc      	adds	r4, r1, r3
 800ac14:	6025      	str	r5, [r4, #0]
 800ac16:	e003      	b.n	800ac20 <_malloc_r+0x74>
 800ac18:	684b      	ldr	r3, [r1, #4]
 800ac1a:	428c      	cmp	r4, r1
 800ac1c:	d10d      	bne.n	800ac3a <_malloc_r+0x8e>
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	0030      	movs	r0, r6
 800ac22:	f000 f9b9 	bl	800af98 <__malloc_unlock>
 800ac26:	0020      	movs	r0, r4
 800ac28:	2207      	movs	r2, #7
 800ac2a:	300b      	adds	r0, #11
 800ac2c:	1d23      	adds	r3, r4, #4
 800ac2e:	4390      	bics	r0, r2
 800ac30:	1ac3      	subs	r3, r0, r3
 800ac32:	d0e7      	beq.n	800ac04 <_malloc_r+0x58>
 800ac34:	425a      	negs	r2, r3
 800ac36:	50e2      	str	r2, [r4, r3]
 800ac38:	e7e4      	b.n	800ac04 <_malloc_r+0x58>
 800ac3a:	6063      	str	r3, [r4, #4]
 800ac3c:	000c      	movs	r4, r1
 800ac3e:	e7ef      	b.n	800ac20 <_malloc_r+0x74>
 800ac40:	000c      	movs	r4, r1
 800ac42:	6849      	ldr	r1, [r1, #4]
 800ac44:	e7c3      	b.n	800abce <_malloc_r+0x22>
 800ac46:	2303      	movs	r3, #3
 800ac48:	1cc4      	adds	r4, r0, #3
 800ac4a:	439c      	bics	r4, r3
 800ac4c:	42a0      	cmp	r0, r4
 800ac4e:	d0e1      	beq.n	800ac14 <_malloc_r+0x68>
 800ac50:	1a21      	subs	r1, r4, r0
 800ac52:	0030      	movs	r0, r6
 800ac54:	f000 f968 	bl	800af28 <_sbrk_r>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d1db      	bne.n	800ac14 <_malloc_r+0x68>
 800ac5c:	e7c7      	b.n	800abee <_malloc_r+0x42>
 800ac5e:	46c0      	nop			; (mov r8, r8)
 800ac60:	20000284 	.word	0x20000284
 800ac64:	20000288 	.word	0x20000288

0800ac68 <__ssputs_r>:
 800ac68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac6a:	688e      	ldr	r6, [r1, #8]
 800ac6c:	b085      	sub	sp, #20
 800ac6e:	0007      	movs	r7, r0
 800ac70:	000c      	movs	r4, r1
 800ac72:	9203      	str	r2, [sp, #12]
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	429e      	cmp	r6, r3
 800ac78:	d83c      	bhi.n	800acf4 <__ssputs_r+0x8c>
 800ac7a:	2390      	movs	r3, #144	; 0x90
 800ac7c:	898a      	ldrh	r2, [r1, #12]
 800ac7e:	00db      	lsls	r3, r3, #3
 800ac80:	421a      	tst	r2, r3
 800ac82:	d034      	beq.n	800acee <__ssputs_r+0x86>
 800ac84:	2503      	movs	r5, #3
 800ac86:	6909      	ldr	r1, [r1, #16]
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	1a5b      	subs	r3, r3, r1
 800ac8c:	9302      	str	r3, [sp, #8]
 800ac8e:	6963      	ldr	r3, [r4, #20]
 800ac90:	9802      	ldr	r0, [sp, #8]
 800ac92:	435d      	muls	r5, r3
 800ac94:	0feb      	lsrs	r3, r5, #31
 800ac96:	195d      	adds	r5, r3, r5
 800ac98:	9b01      	ldr	r3, [sp, #4]
 800ac9a:	106d      	asrs	r5, r5, #1
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	181b      	adds	r3, r3, r0
 800aca0:	42ab      	cmp	r3, r5
 800aca2:	d900      	bls.n	800aca6 <__ssputs_r+0x3e>
 800aca4:	001d      	movs	r5, r3
 800aca6:	0553      	lsls	r3, r2, #21
 800aca8:	d532      	bpl.n	800ad10 <__ssputs_r+0xa8>
 800acaa:	0029      	movs	r1, r5
 800acac:	0038      	movs	r0, r7
 800acae:	f7ff ff7d 	bl	800abac <_malloc_r>
 800acb2:	1e06      	subs	r6, r0, #0
 800acb4:	d109      	bne.n	800acca <__ssputs_r+0x62>
 800acb6:	230c      	movs	r3, #12
 800acb8:	603b      	str	r3, [r7, #0]
 800acba:	2340      	movs	r3, #64	; 0x40
 800acbc:	2001      	movs	r0, #1
 800acbe:	89a2      	ldrh	r2, [r4, #12]
 800acc0:	4240      	negs	r0, r0
 800acc2:	4313      	orrs	r3, r2
 800acc4:	81a3      	strh	r3, [r4, #12]
 800acc6:	b005      	add	sp, #20
 800acc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acca:	9a02      	ldr	r2, [sp, #8]
 800accc:	6921      	ldr	r1, [r4, #16]
 800acce:	f7ff fc26 	bl	800a51e <memcpy>
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	4a14      	ldr	r2, [pc, #80]	; (800ad28 <__ssputs_r+0xc0>)
 800acd6:	401a      	ands	r2, r3
 800acd8:	2380      	movs	r3, #128	; 0x80
 800acda:	4313      	orrs	r3, r2
 800acdc:	81a3      	strh	r3, [r4, #12]
 800acde:	9b02      	ldr	r3, [sp, #8]
 800ace0:	6126      	str	r6, [r4, #16]
 800ace2:	18f6      	adds	r6, r6, r3
 800ace4:	6026      	str	r6, [r4, #0]
 800ace6:	6165      	str	r5, [r4, #20]
 800ace8:	9e01      	ldr	r6, [sp, #4]
 800acea:	1aed      	subs	r5, r5, r3
 800acec:	60a5      	str	r5, [r4, #8]
 800acee:	9b01      	ldr	r3, [sp, #4]
 800acf0:	429e      	cmp	r6, r3
 800acf2:	d900      	bls.n	800acf6 <__ssputs_r+0x8e>
 800acf4:	9e01      	ldr	r6, [sp, #4]
 800acf6:	0032      	movs	r2, r6
 800acf8:	9903      	ldr	r1, [sp, #12]
 800acfa:	6820      	ldr	r0, [r4, #0]
 800acfc:	f000 f938 	bl	800af70 <memmove>
 800ad00:	68a3      	ldr	r3, [r4, #8]
 800ad02:	2000      	movs	r0, #0
 800ad04:	1b9b      	subs	r3, r3, r6
 800ad06:	60a3      	str	r3, [r4, #8]
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	199e      	adds	r6, r3, r6
 800ad0c:	6026      	str	r6, [r4, #0]
 800ad0e:	e7da      	b.n	800acc6 <__ssputs_r+0x5e>
 800ad10:	002a      	movs	r2, r5
 800ad12:	0038      	movs	r0, r7
 800ad14:	f000 f941 	bl	800af9a <_realloc_r>
 800ad18:	1e06      	subs	r6, r0, #0
 800ad1a:	d1e0      	bne.n	800acde <__ssputs_r+0x76>
 800ad1c:	6921      	ldr	r1, [r4, #16]
 800ad1e:	0038      	movs	r0, r7
 800ad20:	f7ff fefa 	bl	800ab18 <_free_r>
 800ad24:	e7c7      	b.n	800acb6 <__ssputs_r+0x4e>
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	fffffb7f 	.word	0xfffffb7f

0800ad2c <_svfiprintf_r>:
 800ad2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad2e:	b0a1      	sub	sp, #132	; 0x84
 800ad30:	9003      	str	r0, [sp, #12]
 800ad32:	001d      	movs	r5, r3
 800ad34:	898b      	ldrh	r3, [r1, #12]
 800ad36:	000f      	movs	r7, r1
 800ad38:	0016      	movs	r6, r2
 800ad3a:	061b      	lsls	r3, r3, #24
 800ad3c:	d511      	bpl.n	800ad62 <_svfiprintf_r+0x36>
 800ad3e:	690b      	ldr	r3, [r1, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10e      	bne.n	800ad62 <_svfiprintf_r+0x36>
 800ad44:	2140      	movs	r1, #64	; 0x40
 800ad46:	f7ff ff31 	bl	800abac <_malloc_r>
 800ad4a:	6038      	str	r0, [r7, #0]
 800ad4c:	6138      	str	r0, [r7, #16]
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d105      	bne.n	800ad5e <_svfiprintf_r+0x32>
 800ad52:	230c      	movs	r3, #12
 800ad54:	9a03      	ldr	r2, [sp, #12]
 800ad56:	3801      	subs	r0, #1
 800ad58:	6013      	str	r3, [r2, #0]
 800ad5a:	b021      	add	sp, #132	; 0x84
 800ad5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad5e:	2340      	movs	r3, #64	; 0x40
 800ad60:	617b      	str	r3, [r7, #20]
 800ad62:	2300      	movs	r3, #0
 800ad64:	ac08      	add	r4, sp, #32
 800ad66:	6163      	str	r3, [r4, #20]
 800ad68:	3320      	adds	r3, #32
 800ad6a:	7663      	strb	r3, [r4, #25]
 800ad6c:	3310      	adds	r3, #16
 800ad6e:	76a3      	strb	r3, [r4, #26]
 800ad70:	9507      	str	r5, [sp, #28]
 800ad72:	0035      	movs	r5, r6
 800ad74:	782b      	ldrb	r3, [r5, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <_svfiprintf_r+0x52>
 800ad7a:	2b25      	cmp	r3, #37	; 0x25
 800ad7c:	d146      	bne.n	800ae0c <_svfiprintf_r+0xe0>
 800ad7e:	1bab      	subs	r3, r5, r6
 800ad80:	9305      	str	r3, [sp, #20]
 800ad82:	d00c      	beq.n	800ad9e <_svfiprintf_r+0x72>
 800ad84:	0032      	movs	r2, r6
 800ad86:	0039      	movs	r1, r7
 800ad88:	9803      	ldr	r0, [sp, #12]
 800ad8a:	f7ff ff6d 	bl	800ac68 <__ssputs_r>
 800ad8e:	1c43      	adds	r3, r0, #1
 800ad90:	d100      	bne.n	800ad94 <_svfiprintf_r+0x68>
 800ad92:	e0ae      	b.n	800aef2 <_svfiprintf_r+0x1c6>
 800ad94:	6962      	ldr	r2, [r4, #20]
 800ad96:	9b05      	ldr	r3, [sp, #20]
 800ad98:	4694      	mov	ip, r2
 800ad9a:	4463      	add	r3, ip
 800ad9c:	6163      	str	r3, [r4, #20]
 800ad9e:	782b      	ldrb	r3, [r5, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d100      	bne.n	800ada6 <_svfiprintf_r+0x7a>
 800ada4:	e0a5      	b.n	800aef2 <_svfiprintf_r+0x1c6>
 800ada6:	2201      	movs	r2, #1
 800ada8:	2300      	movs	r3, #0
 800adaa:	4252      	negs	r2, r2
 800adac:	6062      	str	r2, [r4, #4]
 800adae:	a904      	add	r1, sp, #16
 800adb0:	3254      	adds	r2, #84	; 0x54
 800adb2:	1852      	adds	r2, r2, r1
 800adb4:	1c6e      	adds	r6, r5, #1
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	60e3      	str	r3, [r4, #12]
 800adba:	60a3      	str	r3, [r4, #8]
 800adbc:	7013      	strb	r3, [r2, #0]
 800adbe:	65a3      	str	r3, [r4, #88]	; 0x58
 800adc0:	7831      	ldrb	r1, [r6, #0]
 800adc2:	2205      	movs	r2, #5
 800adc4:	4853      	ldr	r0, [pc, #332]	; (800af14 <_svfiprintf_r+0x1e8>)
 800adc6:	f7ff fb9f 	bl	800a508 <memchr>
 800adca:	1c75      	adds	r5, r6, #1
 800adcc:	2800      	cmp	r0, #0
 800adce:	d11f      	bne.n	800ae10 <_svfiprintf_r+0xe4>
 800add0:	6822      	ldr	r2, [r4, #0]
 800add2:	06d3      	lsls	r3, r2, #27
 800add4:	d504      	bpl.n	800ade0 <_svfiprintf_r+0xb4>
 800add6:	2353      	movs	r3, #83	; 0x53
 800add8:	a904      	add	r1, sp, #16
 800adda:	185b      	adds	r3, r3, r1
 800addc:	2120      	movs	r1, #32
 800adde:	7019      	strb	r1, [r3, #0]
 800ade0:	0713      	lsls	r3, r2, #28
 800ade2:	d504      	bpl.n	800adee <_svfiprintf_r+0xc2>
 800ade4:	2353      	movs	r3, #83	; 0x53
 800ade6:	a904      	add	r1, sp, #16
 800ade8:	185b      	adds	r3, r3, r1
 800adea:	212b      	movs	r1, #43	; 0x2b
 800adec:	7019      	strb	r1, [r3, #0]
 800adee:	7833      	ldrb	r3, [r6, #0]
 800adf0:	2b2a      	cmp	r3, #42	; 0x2a
 800adf2:	d016      	beq.n	800ae22 <_svfiprintf_r+0xf6>
 800adf4:	0035      	movs	r5, r6
 800adf6:	2100      	movs	r1, #0
 800adf8:	200a      	movs	r0, #10
 800adfa:	68e3      	ldr	r3, [r4, #12]
 800adfc:	782a      	ldrb	r2, [r5, #0]
 800adfe:	1c6e      	adds	r6, r5, #1
 800ae00:	3a30      	subs	r2, #48	; 0x30
 800ae02:	2a09      	cmp	r2, #9
 800ae04:	d94e      	bls.n	800aea4 <_svfiprintf_r+0x178>
 800ae06:	2900      	cmp	r1, #0
 800ae08:	d018      	beq.n	800ae3c <_svfiprintf_r+0x110>
 800ae0a:	e010      	b.n	800ae2e <_svfiprintf_r+0x102>
 800ae0c:	3501      	adds	r5, #1
 800ae0e:	e7b1      	b.n	800ad74 <_svfiprintf_r+0x48>
 800ae10:	4b40      	ldr	r3, [pc, #256]	; (800af14 <_svfiprintf_r+0x1e8>)
 800ae12:	6822      	ldr	r2, [r4, #0]
 800ae14:	1ac0      	subs	r0, r0, r3
 800ae16:	2301      	movs	r3, #1
 800ae18:	4083      	lsls	r3, r0
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	002e      	movs	r6, r5
 800ae20:	e7ce      	b.n	800adc0 <_svfiprintf_r+0x94>
 800ae22:	9b07      	ldr	r3, [sp, #28]
 800ae24:	1d19      	adds	r1, r3, #4
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	9107      	str	r1, [sp, #28]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	db01      	blt.n	800ae32 <_svfiprintf_r+0x106>
 800ae2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae30:	e004      	b.n	800ae3c <_svfiprintf_r+0x110>
 800ae32:	425b      	negs	r3, r3
 800ae34:	60e3      	str	r3, [r4, #12]
 800ae36:	2302      	movs	r3, #2
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	782b      	ldrb	r3, [r5, #0]
 800ae3e:	2b2e      	cmp	r3, #46	; 0x2e
 800ae40:	d10a      	bne.n	800ae58 <_svfiprintf_r+0x12c>
 800ae42:	786b      	ldrb	r3, [r5, #1]
 800ae44:	2b2a      	cmp	r3, #42	; 0x2a
 800ae46:	d135      	bne.n	800aeb4 <_svfiprintf_r+0x188>
 800ae48:	9b07      	ldr	r3, [sp, #28]
 800ae4a:	3502      	adds	r5, #2
 800ae4c:	1d1a      	adds	r2, r3, #4
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	9207      	str	r2, [sp, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	db2b      	blt.n	800aeae <_svfiprintf_r+0x182>
 800ae56:	9309      	str	r3, [sp, #36]	; 0x24
 800ae58:	4e2f      	ldr	r6, [pc, #188]	; (800af18 <_svfiprintf_r+0x1ec>)
 800ae5a:	7829      	ldrb	r1, [r5, #0]
 800ae5c:	2203      	movs	r2, #3
 800ae5e:	0030      	movs	r0, r6
 800ae60:	f7ff fb52 	bl	800a508 <memchr>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d006      	beq.n	800ae76 <_svfiprintf_r+0x14a>
 800ae68:	2340      	movs	r3, #64	; 0x40
 800ae6a:	1b80      	subs	r0, r0, r6
 800ae6c:	4083      	lsls	r3, r0
 800ae6e:	6822      	ldr	r2, [r4, #0]
 800ae70:	3501      	adds	r5, #1
 800ae72:	4313      	orrs	r3, r2
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	7829      	ldrb	r1, [r5, #0]
 800ae78:	2206      	movs	r2, #6
 800ae7a:	4828      	ldr	r0, [pc, #160]	; (800af1c <_svfiprintf_r+0x1f0>)
 800ae7c:	1c6e      	adds	r6, r5, #1
 800ae7e:	7621      	strb	r1, [r4, #24]
 800ae80:	f7ff fb42 	bl	800a508 <memchr>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d03c      	beq.n	800af02 <_svfiprintf_r+0x1d6>
 800ae88:	4b25      	ldr	r3, [pc, #148]	; (800af20 <_svfiprintf_r+0x1f4>)
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d125      	bne.n	800aeda <_svfiprintf_r+0x1ae>
 800ae8e:	2207      	movs	r2, #7
 800ae90:	9b07      	ldr	r3, [sp, #28]
 800ae92:	3307      	adds	r3, #7
 800ae94:	4393      	bics	r3, r2
 800ae96:	3308      	adds	r3, #8
 800ae98:	9307      	str	r3, [sp, #28]
 800ae9a:	6963      	ldr	r3, [r4, #20]
 800ae9c:	9a04      	ldr	r2, [sp, #16]
 800ae9e:	189b      	adds	r3, r3, r2
 800aea0:	6163      	str	r3, [r4, #20]
 800aea2:	e766      	b.n	800ad72 <_svfiprintf_r+0x46>
 800aea4:	4343      	muls	r3, r0
 800aea6:	2101      	movs	r1, #1
 800aea8:	189b      	adds	r3, r3, r2
 800aeaa:	0035      	movs	r5, r6
 800aeac:	e7a6      	b.n	800adfc <_svfiprintf_r+0xd0>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	425b      	negs	r3, r3
 800aeb2:	e7d0      	b.n	800ae56 <_svfiprintf_r+0x12a>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	200a      	movs	r0, #10
 800aeb8:	001a      	movs	r2, r3
 800aeba:	3501      	adds	r5, #1
 800aebc:	6063      	str	r3, [r4, #4]
 800aebe:	7829      	ldrb	r1, [r5, #0]
 800aec0:	1c6e      	adds	r6, r5, #1
 800aec2:	3930      	subs	r1, #48	; 0x30
 800aec4:	2909      	cmp	r1, #9
 800aec6:	d903      	bls.n	800aed0 <_svfiprintf_r+0x1a4>
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d0c5      	beq.n	800ae58 <_svfiprintf_r+0x12c>
 800aecc:	9209      	str	r2, [sp, #36]	; 0x24
 800aece:	e7c3      	b.n	800ae58 <_svfiprintf_r+0x12c>
 800aed0:	4342      	muls	r2, r0
 800aed2:	2301      	movs	r3, #1
 800aed4:	1852      	adds	r2, r2, r1
 800aed6:	0035      	movs	r5, r6
 800aed8:	e7f1      	b.n	800aebe <_svfiprintf_r+0x192>
 800aeda:	ab07      	add	r3, sp, #28
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	003a      	movs	r2, r7
 800aee0:	4b10      	ldr	r3, [pc, #64]	; (800af24 <_svfiprintf_r+0x1f8>)
 800aee2:	0021      	movs	r1, r4
 800aee4:	9803      	ldr	r0, [sp, #12]
 800aee6:	f7fe f8b1 	bl	800904c <_printf_float>
 800aeea:	9004      	str	r0, [sp, #16]
 800aeec:	9b04      	ldr	r3, [sp, #16]
 800aeee:	3301      	adds	r3, #1
 800aef0:	d1d3      	bne.n	800ae9a <_svfiprintf_r+0x16e>
 800aef2:	89bb      	ldrh	r3, [r7, #12]
 800aef4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aef6:	065b      	lsls	r3, r3, #25
 800aef8:	d400      	bmi.n	800aefc <_svfiprintf_r+0x1d0>
 800aefa:	e72e      	b.n	800ad5a <_svfiprintf_r+0x2e>
 800aefc:	2001      	movs	r0, #1
 800aefe:	4240      	negs	r0, r0
 800af00:	e72b      	b.n	800ad5a <_svfiprintf_r+0x2e>
 800af02:	ab07      	add	r3, sp, #28
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	003a      	movs	r2, r7
 800af08:	4b06      	ldr	r3, [pc, #24]	; (800af24 <_svfiprintf_r+0x1f8>)
 800af0a:	0021      	movs	r1, r4
 800af0c:	9803      	ldr	r0, [sp, #12]
 800af0e:	f7fe fb57 	bl	80095c0 <_printf_i>
 800af12:	e7ea      	b.n	800aeea <_svfiprintf_r+0x1be>
 800af14:	0800b34c 	.word	0x0800b34c
 800af18:	0800b352 	.word	0x0800b352
 800af1c:	0800b356 	.word	0x0800b356
 800af20:	0800904d 	.word	0x0800904d
 800af24:	0800ac69 	.word	0x0800ac69

0800af28 <_sbrk_r>:
 800af28:	2300      	movs	r3, #0
 800af2a:	b570      	push	{r4, r5, r6, lr}
 800af2c:	4c06      	ldr	r4, [pc, #24]	; (800af48 <_sbrk_r+0x20>)
 800af2e:	0005      	movs	r5, r0
 800af30:	0008      	movs	r0, r1
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	f7f8 fd78 	bl	8003a28 <_sbrk>
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	d103      	bne.n	800af44 <_sbrk_r+0x1c>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d000      	beq.n	800af44 <_sbrk_r+0x1c>
 800af42:	602b      	str	r3, [r5, #0]
 800af44:	bd70      	pop	{r4, r5, r6, pc}
 800af46:	46c0      	nop			; (mov r8, r8)
 800af48:	20000998 	.word	0x20000998

0800af4c <__ascii_mbtowc>:
 800af4c:	b082      	sub	sp, #8
 800af4e:	2900      	cmp	r1, #0
 800af50:	d100      	bne.n	800af54 <__ascii_mbtowc+0x8>
 800af52:	a901      	add	r1, sp, #4
 800af54:	1e10      	subs	r0, r2, #0
 800af56:	d006      	beq.n	800af66 <__ascii_mbtowc+0x1a>
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d006      	beq.n	800af6a <__ascii_mbtowc+0x1e>
 800af5c:	7813      	ldrb	r3, [r2, #0]
 800af5e:	600b      	str	r3, [r1, #0]
 800af60:	7810      	ldrb	r0, [r2, #0]
 800af62:	1e43      	subs	r3, r0, #1
 800af64:	4198      	sbcs	r0, r3
 800af66:	b002      	add	sp, #8
 800af68:	4770      	bx	lr
 800af6a:	2002      	movs	r0, #2
 800af6c:	4240      	negs	r0, r0
 800af6e:	e7fa      	b.n	800af66 <__ascii_mbtowc+0x1a>

0800af70 <memmove>:
 800af70:	b510      	push	{r4, lr}
 800af72:	4288      	cmp	r0, r1
 800af74:	d902      	bls.n	800af7c <memmove+0xc>
 800af76:	188b      	adds	r3, r1, r2
 800af78:	4298      	cmp	r0, r3
 800af7a:	d303      	bcc.n	800af84 <memmove+0x14>
 800af7c:	2300      	movs	r3, #0
 800af7e:	e007      	b.n	800af90 <memmove+0x20>
 800af80:	5c8b      	ldrb	r3, [r1, r2]
 800af82:	5483      	strb	r3, [r0, r2]
 800af84:	3a01      	subs	r2, #1
 800af86:	d2fb      	bcs.n	800af80 <memmove+0x10>
 800af88:	bd10      	pop	{r4, pc}
 800af8a:	5ccc      	ldrb	r4, [r1, r3]
 800af8c:	54c4      	strb	r4, [r0, r3]
 800af8e:	3301      	adds	r3, #1
 800af90:	429a      	cmp	r2, r3
 800af92:	d1fa      	bne.n	800af8a <memmove+0x1a>
 800af94:	e7f8      	b.n	800af88 <memmove+0x18>

0800af96 <__malloc_lock>:
 800af96:	4770      	bx	lr

0800af98 <__malloc_unlock>:
 800af98:	4770      	bx	lr

0800af9a <_realloc_r>:
 800af9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9c:	0007      	movs	r7, r0
 800af9e:	000d      	movs	r5, r1
 800afa0:	0016      	movs	r6, r2
 800afa2:	2900      	cmp	r1, #0
 800afa4:	d105      	bne.n	800afb2 <_realloc_r+0x18>
 800afa6:	0011      	movs	r1, r2
 800afa8:	f7ff fe00 	bl	800abac <_malloc_r>
 800afac:	0004      	movs	r4, r0
 800afae:	0020      	movs	r0, r4
 800afb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb2:	2a00      	cmp	r2, #0
 800afb4:	d103      	bne.n	800afbe <_realloc_r+0x24>
 800afb6:	f7ff fdaf 	bl	800ab18 <_free_r>
 800afba:	0034      	movs	r4, r6
 800afbc:	e7f7      	b.n	800afae <_realloc_r+0x14>
 800afbe:	f000 f81e 	bl	800affe <_malloc_usable_size_r>
 800afc2:	002c      	movs	r4, r5
 800afc4:	42b0      	cmp	r0, r6
 800afc6:	d2f2      	bcs.n	800afae <_realloc_r+0x14>
 800afc8:	0031      	movs	r1, r6
 800afca:	0038      	movs	r0, r7
 800afcc:	f7ff fdee 	bl	800abac <_malloc_r>
 800afd0:	1e04      	subs	r4, r0, #0
 800afd2:	d0ec      	beq.n	800afae <_realloc_r+0x14>
 800afd4:	0029      	movs	r1, r5
 800afd6:	0032      	movs	r2, r6
 800afd8:	f7ff faa1 	bl	800a51e <memcpy>
 800afdc:	0029      	movs	r1, r5
 800afde:	0038      	movs	r0, r7
 800afe0:	f7ff fd9a 	bl	800ab18 <_free_r>
 800afe4:	e7e3      	b.n	800afae <_realloc_r+0x14>

0800afe6 <__ascii_wctomb>:
 800afe6:	1e0b      	subs	r3, r1, #0
 800afe8:	d004      	beq.n	800aff4 <__ascii_wctomb+0xe>
 800afea:	2aff      	cmp	r2, #255	; 0xff
 800afec:	d904      	bls.n	800aff8 <__ascii_wctomb+0x12>
 800afee:	238a      	movs	r3, #138	; 0x8a
 800aff0:	6003      	str	r3, [r0, #0]
 800aff2:	3b8b      	subs	r3, #139	; 0x8b
 800aff4:	0018      	movs	r0, r3
 800aff6:	4770      	bx	lr
 800aff8:	700a      	strb	r2, [r1, #0]
 800affa:	2301      	movs	r3, #1
 800affc:	e7fa      	b.n	800aff4 <__ascii_wctomb+0xe>

0800affe <_malloc_usable_size_r>:
 800affe:	1f0b      	subs	r3, r1, #4
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	1f18      	subs	r0, r3, #4
 800b004:	2b00      	cmp	r3, #0
 800b006:	da01      	bge.n	800b00c <_malloc_usable_size_r+0xe>
 800b008:	580b      	ldr	r3, [r1, r0]
 800b00a:	18c0      	adds	r0, r0, r3
 800b00c:	4770      	bx	lr
	...

0800b010 <_init>:
 800b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b012:	46c0      	nop			; (mov r8, r8)
 800b014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b016:	bc08      	pop	{r3}
 800b018:	469e      	mov	lr, r3
 800b01a:	4770      	bx	lr

0800b01c <_fini>:
 800b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01e:	46c0      	nop			; (mov r8, r8)
 800b020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b022:	bc08      	pop	{r3}
 800b024:	469e      	mov	lr, r3
 800b026:	4770      	bx	lr
