
NucleoTestPrj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004630  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800479c  0800479c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800479c  0800479c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800479c  0800479c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080047a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000074  08004818  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08004818  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf6a  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d6e  00000000  00000000  0002c006  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  0002dd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  0002ea28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000dcd1  00000000  00000000  0002f610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f29  00000000  00000000  0003d2e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005110b  00000000  00000000  0004720a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00098315  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003014  00000000  00000000  00098390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080046d8 	.word	0x080046d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080046d8 	.word	0x080046d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM14_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
static void initBluetoothHC06(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if (TIM6 == htim->Instance)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a06      	ldr	r2, [pc, #24]	; (8000258 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d106      	bne.n	8000250 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		timeCounter++;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	b29b      	uxth	r3, r3
 8000248:	3301      	adds	r3, #1
 800024a:	b29a      	uxth	r2, r3
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800024e:	801a      	strh	r2, [r3, #0]
	}
}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	b002      	add	sp, #8
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40001000 	.word	0x40001000
 800025c:	200000c8 	.word	0x200000c8

08000260 <setPWMPeriod>:

static inline void setPWMPeriod()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	static uint16_t period = 5U;
	static uint16_t servoPeriod = 5U;
	if (period >= (1000 - 1))
 8000264:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <setPWMPeriod+0x84>)
 8000266:	881b      	ldrh	r3, [r3, #0]
 8000268:	4a1f      	ldr	r2, [pc, #124]	; (80002e8 <setPWMPeriod+0x88>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d903      	bls.n	8000276 <setPWMPeriod+0x16>
	{
		period = 5U;
 800026e:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <setPWMPeriod+0x84>)
 8000270:	2205      	movs	r2, #5
 8000272:	801a      	strh	r2, [r3, #0]
 8000274:	e005      	b.n	8000282 <setPWMPeriod+0x22>
	}
	else
	{
		period += 100;
 8000276:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <setPWMPeriod+0x84>)
 8000278:	881b      	ldrh	r3, [r3, #0]
 800027a:	3364      	adds	r3, #100	; 0x64
 800027c:	b29a      	uxth	r2, r3
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <setPWMPeriod+0x84>)
 8000280:	801a      	strh	r2, [r3, #0]
	}
	if (servoPeriod > 25)
 8000282:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <setPWMPeriod+0x8c>)
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	2b19      	cmp	r3, #25
 8000288:	d903      	bls.n	8000292 <setPWMPeriod+0x32>
	{
		servoPeriod = 5U;
 800028a:	4b18      	ldr	r3, [pc, #96]	; (80002ec <setPWMPeriod+0x8c>)
 800028c:	2205      	movs	r2, #5
 800028e:	801a      	strh	r2, [r3, #0]
 8000290:	e005      	b.n	800029e <setPWMPeriod+0x3e>
	}
	else
	{
		servoPeriod += 5;
 8000292:	4b16      	ldr	r3, [pc, #88]	; (80002ec <setPWMPeriod+0x8c>)
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	3305      	adds	r3, #5
 8000298:	b29a      	uxth	r2, r3
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <setPWMPeriod+0x8c>)
 800029c:	801a      	strh	r2, [r3, #0]
	}
	sConfigOC.Pulse = period;
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <setPWMPeriod+0x84>)
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	001a      	movs	r2, r3
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <setPWMPeriod+0x90>)
 80002a6:	605a      	str	r2, [r3, #4]
	servoPwmConfigOC.Pulse = servoPeriod;
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <setPWMPeriod+0x8c>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	001a      	movs	r2, r3
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <setPWMPeriod+0x94>)
 80002b0:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_ConfigChannel(&htim3, &servoPwmConfigOC, TIM_CHANNEL_2);
 80002b2:	4910      	ldr	r1, [pc, #64]	; (80002f4 <setPWMPeriod+0x94>)
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <setPWMPeriod+0x98>)
 80002b6:	2204      	movs	r2, #4
 80002b8:	0018      	movs	r0, r3
 80002ba:	f002 fc79 	bl	8002bb0 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <setPWMPeriod+0x98>)
 80002c0:	2104      	movs	r1, #4
 80002c2:	0018      	movs	r0, r3
 80002c4:	f002 fb12 	bl	80028ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1);
 80002c8:	4909      	ldr	r1, [pc, #36]	; (80002f0 <setPWMPeriod+0x90>)
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <setPWMPeriod+0x9c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	0018      	movs	r0, r3
 80002d0:	f002 fc6e 	bl	8002bb0 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <setPWMPeriod+0x9c>)
 80002d6:	2100      	movs	r1, #0
 80002d8:	0018      	movs	r0, r3
 80002da:	f002 fb07 	bl	80028ec <HAL_TIM_PWM_Start>
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000000 	.word	0x20000000
 80002e8:	000003e6 	.word	0x000003e6
 80002ec:	20000002 	.word	0x20000002
 80002f0:	20000090 	.word	0x20000090
 80002f4:	200000ac 	.word	0x200000ac
 80002f8:	200000d8 	.word	0x200000d8
 80002fc:	200002b8 	.word	0x200002b8

08000300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	b0a5      	sub	sp, #148	; 0x94
 8000304:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000306:	f000 fe63 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030a:	f000 f8b1 	bl	8000470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030e:	f000 faa3 	bl	8000858 <MX_GPIO_Init>
  MX_RTC_Init();
 8000312:	f000 f917 	bl	8000544 <MX_RTC_Init>
  MX_TIM6_Init();
 8000316:	f000 f9d1 	bl	80006bc <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800031a:	f000 fa3d 	bl	8000798 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800031e:	f000 fa6b 	bl	80007f8 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000322:	f000 f9ef 	bl	8000704 <MX_TIM14_Init>
  MX_TIM3_Init();
 8000326:	f000 f96f 	bl	8000608 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef sTime = {0};
 800032a:	2358      	movs	r3, #88	; 0x58
 800032c:	2208      	movs	r2, #8
 800032e:	4694      	mov	ip, r2
 8000330:	44bc      	add	ip, r7
 8000332:	4463      	add	r3, ip
 8000334:	0018      	movs	r0, r3
 8000336:	2314      	movs	r3, #20
 8000338:	001a      	movs	r2, r3
 800033a:	2100      	movs	r1, #0
 800033c:	f003 fdbc 	bl	8003eb8 <memset>
  RTC_DateTypeDef sDate = {0};
 8000340:	2354      	movs	r3, #84	; 0x54
 8000342:	2208      	movs	r2, #8
 8000344:	4694      	mov	ip, r2
 8000346:	44bc      	add	ip, r7
 8000348:	4463      	add	r3, ip
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
  char currentTimeDateData[80];
  /* TIM14 PWM Init */
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800034e:	4b40      	ldr	r3, [pc, #256]	; (8000450 <main+0x150>)
 8000350:	2100      	movs	r1, #0
 8000352:	0018      	movs	r0, r3
 8000354:	f002 faca 	bl	80028ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000358:	4b3e      	ldr	r3, [pc, #248]	; (8000454 <main+0x154>)
 800035a:	2104      	movs	r1, #4
 800035c:	0018      	movs	r0, r3
 800035e:	f002 fac5 	bl	80028ec <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //light ext led
	  GPIO_PinState moveSensorState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8000362:	256f      	movs	r5, #111	; 0x6f
 8000364:	2608      	movs	r6, #8
 8000366:	19bb      	adds	r3, r7, r6
 8000368:	195c      	adds	r4, r3, r5
 800036a:	2380      	movs	r3, #128	; 0x80
 800036c:	015b      	lsls	r3, r3, #5
 800036e:	4a3a      	ldr	r2, [pc, #232]	; (8000458 <main+0x158>)
 8000370:	0019      	movs	r1, r3
 8000372:	0010      	movs	r0, r2
 8000374:	f001 f924 	bl	80015c0 <HAL_GPIO_ReadPin>
 8000378:	0003      	movs	r3, r0
 800037a:	7023      	strb	r3, [r4, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, moveSensorState);
 800037c:	19bb      	adds	r3, r7, r6
 800037e:	195b      	adds	r3, r3, r5
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	4835      	ldr	r0, [pc, #212]	; (8000458 <main+0x158>)
 8000384:	001a      	movs	r2, r3
 8000386:	2108      	movs	r1, #8
 8000388:	f001 f937 	bl	80015fa <HAL_GPIO_WritePin>
	  if (true == btnTrigger)
 800038c:	4b33      	ldr	r3, [pc, #204]	; (800045c <main+0x15c>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	b2db      	uxtb	r3, r3
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0e5      	beq.n	8000362 <main+0x62>
	  {
		  //light led
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000396:	2390      	movs	r3, #144	; 0x90
 8000398:	05db      	lsls	r3, r3, #23
 800039a:	2120      	movs	r1, #32
 800039c:	0018      	movs	r0, r3
 800039e:	f001 f949 	bl	8001634 <HAL_GPIO_TogglePin>
		  //change PWM period
		  setPWMPeriod();
 80003a2:	f7ff ff5d 	bl	8000260 <setPWMPeriod>
		  //get current rtc time and date
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80003a6:	2558      	movs	r5, #88	; 0x58
 80003a8:	2608      	movs	r6, #8
 80003aa:	19bb      	adds	r3, r7, r6
 80003ac:	1959      	adds	r1, r3, r5
 80003ae:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <main+0x160>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 f80c 	bl	80023d0 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80003b8:	2154      	movs	r1, #84	; 0x54
 80003ba:	000c      	movs	r4, r1
 80003bc:	2308      	movs	r3, #8
 80003be:	469c      	mov	ip, r3
 80003c0:	44bc      	add	ip, r7
 80003c2:	4461      	add	r1, ip
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <main+0x160>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	0018      	movs	r0, r3
 80003ca:	f002 f905 	bl	80025d8 <HAL_RTC_GetDate>
		  sprintf(currentTimeDateData,
			  "Date: %2d.%2d.202%d Time: %d:%d:%d\nMoveSensor : %d\nCounter : %d",
			  sDate.WeekDay, sDate.Month, sDate.Year,
 80003ce:	0021      	movs	r1, r4
 80003d0:	0032      	movs	r2, r6
 80003d2:	18bb      	adds	r3, r7, r2
 80003d4:	185b      	adds	r3, r3, r1
 80003d6:	781b      	ldrb	r3, [r3, #0]
		  sprintf(currentTimeDateData,
 80003d8:	607b      	str	r3, [r7, #4]
			  sDate.WeekDay, sDate.Month, sDate.Year,
 80003da:	18bb      	adds	r3, r7, r2
 80003dc:	185b      	adds	r3, r3, r1
 80003de:	785b      	ldrb	r3, [r3, #1]
		  sprintf(currentTimeDateData,
 80003e0:	603b      	str	r3, [r7, #0]
			  sDate.WeekDay, sDate.Month, sDate.Year,
 80003e2:	18bb      	adds	r3, r7, r2
 80003e4:	185b      	adds	r3, r3, r1
 80003e6:	78db      	ldrb	r3, [r3, #3]
		  sprintf(currentTimeDateData,
 80003e8:	001c      	movs	r4, r3
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 80003ea:	0029      	movs	r1, r5
 80003ec:	18bb      	adds	r3, r7, r2
 80003ee:	185b      	adds	r3, r3, r1
 80003f0:	781b      	ldrb	r3, [r3, #0]
		  sprintf(currentTimeDateData,
 80003f2:	001d      	movs	r5, r3
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 80003f4:	18bb      	adds	r3, r7, r2
 80003f6:	185b      	adds	r3, r3, r1
 80003f8:	785b      	ldrb	r3, [r3, #1]
		  sprintf(currentTimeDateData,
 80003fa:	001e      	movs	r6, r3
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 80003fc:	18bb      	adds	r3, r7, r2
 80003fe:	185b      	adds	r3, r3, r1
 8000400:	789b      	ldrb	r3, [r3, #2]
		  sprintf(currentTimeDateData,
 8000402:	469c      	mov	ip, r3
 8000404:	216f      	movs	r1, #111	; 0x6f
 8000406:	18bb      	adds	r3, r7, r2
 8000408:	185b      	adds	r3, r3, r1
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4a15      	ldr	r2, [pc, #84]	; (8000464 <main+0x164>)
 800040e:	8812      	ldrh	r2, [r2, #0]
 8000410:	b292      	uxth	r2, r2
 8000412:	4915      	ldr	r1, [pc, #84]	; (8000468 <main+0x168>)
 8000414:	200c      	movs	r0, #12
 8000416:	1838      	adds	r0, r7, r0
 8000418:	9205      	str	r2, [sp, #20]
 800041a:	9304      	str	r3, [sp, #16]
 800041c:	4662      	mov	r2, ip
 800041e:	9203      	str	r2, [sp, #12]
 8000420:	9602      	str	r6, [sp, #8]
 8000422:	9501      	str	r5, [sp, #4]
 8000424:	9400      	str	r4, [sp, #0]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	f003 fd4d 	bl	8003ec8 <siprintf>
		  	  (int) moveSensorState, timeCounter);
		  HAL_UART_Transmit(&huart1, (uint8_t*)currentTimeDateData, strlen(currentTimeDateData), 100);
 800042e:	240c      	movs	r4, #12
 8000430:	193b      	adds	r3, r7, r4
 8000432:	0018      	movs	r0, r3
 8000434:	f7ff fe68 	bl	8000108 <strlen>
 8000438:	0003      	movs	r3, r0
 800043a:	b29a      	uxth	r2, r3
 800043c:	1939      	adds	r1, r7, r4
 800043e:	480b      	ldr	r0, [pc, #44]	; (800046c <main+0x16c>)
 8000440:	2364      	movs	r3, #100	; 0x64
 8000442:	f002 ffdf 	bl	8003404 <HAL_UART_Transmit>
		  btnTrigger = false;
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <main+0x15c>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
  {
 800044c:	e789      	b.n	8000362 <main+0x62>
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	200002b8 	.word	0x200002b8
 8000454:	200000d8 	.word	0x200000d8
 8000458:	48000800 	.word	0x48000800
 800045c:	200000ca 	.word	0x200000ca
 8000460:	20000198 	.word	0x20000198
 8000464:	200000c8 	.word	0x200000c8
 8000468:	080046f0 	.word	0x080046f0
 800046c:	20000118 	.word	0x20000118

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b095      	sub	sp, #84	; 0x54
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	2420      	movs	r4, #32
 8000478:	193b      	adds	r3, r7, r4
 800047a:	0018      	movs	r0, r3
 800047c:	2330      	movs	r3, #48	; 0x30
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f003 fd19 	bl	8003eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000486:	2310      	movs	r3, #16
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	0018      	movs	r0, r3
 800048c:	2310      	movs	r3, #16
 800048e:	001a      	movs	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	f003 fd11 	bl	8003eb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000496:	003b      	movs	r3, r7
 8000498:	0018      	movs	r0, r3
 800049a:	2310      	movs	r3, #16
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f003 fd0a 	bl	8003eb8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004a4:	0021      	movs	r1, r4
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	220a      	movs	r2, #10
 80004aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2201      	movs	r2, #1
 80004b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2210      	movs	r2, #16
 80004b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2201      	movs	r2, #1
 80004bc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2202      	movs	r2, #2
 80004c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	22a0      	movs	r2, #160	; 0xa0
 80004ce:	0392      	lsls	r2, r2, #14
 80004d0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 f8ec 	bl	80016b8 <HAL_RCC_OscConfig>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80004e4:	f000 fa68 	bl	80009b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e8:	2110      	movs	r1, #16
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2207      	movs	r2, #7
 80004ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2202      	movs	r2, #2
 80004f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2101      	movs	r1, #1
 8000506:	0018      	movs	r0, r3
 8000508:	f001 fbf2 	bl	8001cf0 <HAL_RCC_ClockConfig>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000510:	f000 fa52 	bl	80009b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000514:	003b      	movs	r3, r7
 8000516:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <SystemClock_Config+0xd0>)
 8000518:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800051a:	003b      	movs	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000520:	003b      	movs	r3, r7
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000528:	003b      	movs	r3, r7
 800052a:	0018      	movs	r0, r3
 800052c:	f001 fd32 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000534:	f000 fa40 	bl	80009b8 <Error_Handler>
  }
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b015      	add	sp, #84	; 0x54
 800053e:	bd90      	pop	{r4, r7, pc}
 8000540:	00010001 	.word	0x00010001

08000544 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	0018      	movs	r0, r3
 800054e:	2314      	movs	r3, #20
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f003 fcb0 	bl	8003eb8 <memset>
  RTC_DateTypeDef sDate = {0};
 8000558:	003b      	movs	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800055e:	4b28      	ldr	r3, [pc, #160]	; (8000600 <MX_RTC_Init+0xbc>)
 8000560:	4a28      	ldr	r2, [pc, #160]	; (8000604 <MX_RTC_Init+0xc0>)
 8000562:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <MX_RTC_Init+0xbc>)
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800056a:	4b25      	ldr	r3, [pc, #148]	; (8000600 <MX_RTC_Init+0xbc>)
 800056c:	227f      	movs	r2, #127	; 0x7f
 800056e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MX_RTC_Init+0xbc>)
 8000572:	22ff      	movs	r2, #255	; 0xff
 8000574:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <MX_RTC_Init+0xbc>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MX_RTC_Init+0xbc>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000582:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <MX_RTC_Init+0xbc>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <MX_RTC_Init+0xbc>)
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fdd0 	bl	8002130 <HAL_RTC_Init>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000594:	f000 fa10 	bl	80009b8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80005b6:	1d39      	adds	r1, r7, #4
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_RTC_Init+0xbc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fe4b 	bl	8002258 <HAL_RTC_SetTime>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80005c6:	f000 f9f7 	bl	80009b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80005ca:	003b      	movs	r3, r7
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80005d0:	003b      	movs	r3, r7
 80005d2:	2201      	movs	r2, #1
 80005d4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80005d6:	003b      	movs	r3, r7
 80005d8:	2201      	movs	r2, #1
 80005da:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80005dc:	003b      	movs	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80005e2:	0039      	movs	r1, r7
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_RTC_Init+0xbc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 ff4f 	bl	800248c <HAL_RTC_SetDate>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 80005f2:	f000 f9e1 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b006      	add	sp, #24
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	20000198 	.word	0x20000198
 8000604:	40002800 	.word	0x40002800

08000608 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060e:	003b      	movs	r3, r7
 8000610:	0018      	movs	r0, r3
 8000612:	2308      	movs	r3, #8
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f003 fc4e 	bl	8003eb8 <memset>
  /* USER CODE BEGIN TIM3_Init 1 */
  // 50Hz - 48 000 000 / 48000(prescaler) = 1000Hz , 1000Hz/ 20(period) = 50Hz
  //default pulse - 0 degrees is 0,5ms - 1 tick is 0.1ms, so 0 = 5 pulse
  //1.5ms - 90 degrees, 2.5ms - 180 degrees
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_TIM3_Init+0xa4>)
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <MX_TIM3_Init+0xa8>)
 8000620:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800 - 1;
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <MX_TIM3_Init+0xa4>)
 8000624:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <MX_TIM3_Init+0xac>)
 8000626:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000628:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_TIM3_Init+0xa4>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200 - 1;
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_TIM3_Init+0xa4>)
 8000630:	22c7      	movs	r2, #199	; 0xc7
 8000632:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_TIM3_Init+0xa4>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_TIM3_Init+0xa4>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_TIM3_Init+0xa4>)
 8000642:	0018      	movs	r0, r3
 8000644:	f002 f926 	bl	8002894 <HAL_TIM_PWM_Init>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 800064c:	f000 f9b4 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000650:	003b      	movs	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000656:	003b      	movs	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800065c:	003a      	movs	r2, r7
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_TIM3_Init+0xa4>)
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f002 fe12 	bl	800328c <HAL_TIMEx_MasterConfigSynchronization>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800066c:	f000 f9a4 	bl	80009b8 <Error_Handler>
  }
  servoPwmConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_TIM3_Init+0xb0>)
 8000672:	2260      	movs	r2, #96	; 0x60
 8000674:	601a      	str	r2, [r3, #0]
  servoPwmConfigOC.Pulse = 5;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_TIM3_Init+0xb0>)
 8000678:	2205      	movs	r2, #5
 800067a:	605a      	str	r2, [r3, #4]
  servoPwmConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_TIM3_Init+0xb0>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  servoPwmConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_TIM3_Init+0xb0>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &servoPwmConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000688:	490b      	ldr	r1, [pc, #44]	; (80006b8 <MX_TIM3_Init+0xb0>)
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_TIM3_Init+0xa4>)
 800068c:	2204      	movs	r2, #4
 800068e:	0018      	movs	r0, r3
 8000690:	f002 fa8e 	bl	8002bb0 <HAL_TIM_PWM_ConfigChannel>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000698:	f000 f98e 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <MX_TIM3_Init+0xa4>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fa2e 	bl	8000b00 <HAL_TIM_MspPostInit>

}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000d8 	.word	0x200000d8
 80006b0:	40000400 	.word	0x40000400
 80006b4:	000012bf 	.word	0x000012bf
 80006b8:	200000ac 	.word	0x200000ac

080006bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 1 */
  //Timer6 configuration - uses sys clock of 48Mhz
  // with prescaler 48000 - 1
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <MX_TIM6_Init+0x3c>)
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <MX_TIM6_Init+0x40>)
 80006c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 480 - 1;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_TIM6_Init+0x3c>)
 80006c8:	22e0      	movs	r2, #224	; 0xe0
 80006ca:	32ff      	adds	r2, #255	; 0xff
 80006cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_TIM6_Init+0x3c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_TIM6_Init+0x3c>)
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <MX_TIM6_Init+0x44>)
 80006d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_TIM6_Init+0x3c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MX_TIM6_Init+0x3c>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f002 f85d 	bl	80027a2 <HAL_TIM_Base_Init>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM6_Init+0x34>
  {
    Error_Handler();
 80006ec:	f000 f964 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	200001f8 	.word	0x200001f8
 80006fc:	40001000 	.word	0x40001000
 8000700:	000003e7 	.word	0x000003e7

08000704 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_TIM14_Init+0x84>)
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <MX_TIM14_Init+0x88>)
 800070c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 480 - 1;
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_TIM14_Init+0x84>)
 8000710:	22e0      	movs	r2, #224	; 0xe0
 8000712:	32ff      	adds	r2, #255	; 0xff
 8000714:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_TIM14_Init+0x84>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000 - 1;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_TIM14_Init+0x84>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_TIM14_Init+0x8c>)
 8000720:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_TIM14_Init+0x84>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_TIM14_Init+0x84>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_TIM14_Init+0x84>)
 8000730:	0018      	movs	r0, r3
 8000732:	f002 f836 	bl	80027a2 <HAL_TIM_Base_Init>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800073a:	f000 f93d 	bl	80009b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_TIM14_Init+0x84>)
 8000740:	0018      	movs	r0, r3
 8000742:	f002 f8a7 	bl	8002894 <HAL_TIM_PWM_Init>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800074a:	f000 f935 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_TIM14_Init+0x90>)
 8000750:	2260      	movs	r2, #96	; 0x60
 8000752:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_TIM14_Init+0x90>)
 8000756:	220a      	movs	r2, #10
 8000758:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_TIM14_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_TIM14_Init+0x90>)
 8000762:	2204      	movs	r2, #4
 8000764:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000766:	490b      	ldr	r1, [pc, #44]	; (8000794 <MX_TIM14_Init+0x90>)
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_TIM14_Init+0x84>)
 800076a:	2200      	movs	r2, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f002 fa1f 	bl	8002bb0 <HAL_TIM_PWM_ConfigChannel>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_TIM14_Init+0x76>
  {
    Error_Handler();
 8000776:	f000 f91f 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800077a:	4b03      	ldr	r3, [pc, #12]	; (8000788 <MX_TIM14_Init+0x84>)
 800077c:	0018      	movs	r0, r3
 800077e:	f000 f9bf 	bl	8000b00 <HAL_TIM_MspPostInit>

}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200002b8 	.word	0x200002b8
 800078c:	40002000 	.word	0x40002000
 8000790:	000003e7 	.word	0x000003e7
 8000794:	20000090 	.word	0x20000090

08000798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <MX_USART1_UART_Init+0x5c>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007a4:	2296      	movs	r2, #150	; 0x96
 80007a6:	0192      	lsls	r2, r2, #6
 80007a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_USART1_UART_Init+0x58>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 fdbd 	bl	800335c <HAL_UART_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f8e7 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000118 	.word	0x20000118
 80007f4:	40013800 	.word	0x40013800

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USART2_UART_Init+0x58>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	; (8000854 <MX_USART2_UART_Init+0x5c>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000804:	2296      	movs	r2, #150	; 0x96
 8000806:	0212      	lsls	r2, r2, #8
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800083c:	0018      	movs	r0, r3
 800083e:	f002 fd8d 	bl	800335c <HAL_UART_Init>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f8b7 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000238 	.word	0x20000238
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	240c      	movs	r4, #12
 8000860:	193b      	adds	r3, r7, r4
 8000862:	0018      	movs	r0, r3
 8000864:	2314      	movs	r3, #20
 8000866:	001a      	movs	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	f003 fb25 	bl	8003eb8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b4f      	ldr	r3, [pc, #316]	; (80009ac <MX_GPIO_Init+0x154>)
 8000870:	695a      	ldr	r2, [r3, #20]
 8000872:	4b4e      	ldr	r3, [pc, #312]	; (80009ac <MX_GPIO_Init+0x154>)
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	0309      	lsls	r1, r1, #12
 8000878:	430a      	orrs	r2, r1
 800087a:	615a      	str	r2, [r3, #20]
 800087c:	4b4b      	ldr	r3, [pc, #300]	; (80009ac <MX_GPIO_Init+0x154>)
 800087e:	695a      	ldr	r2, [r3, #20]
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	031b      	lsls	r3, r3, #12
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088a:	4b48      	ldr	r3, [pc, #288]	; (80009ac <MX_GPIO_Init+0x154>)
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	4b47      	ldr	r3, [pc, #284]	; (80009ac <MX_GPIO_Init+0x154>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	03c9      	lsls	r1, r1, #15
 8000894:	430a      	orrs	r2, r1
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	4b44      	ldr	r3, [pc, #272]	; (80009ac <MX_GPIO_Init+0x154>)
 800089a:	695a      	ldr	r2, [r3, #20]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	03db      	lsls	r3, r3, #15
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b41      	ldr	r3, [pc, #260]	; (80009ac <MX_GPIO_Init+0x154>)
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	4b40      	ldr	r3, [pc, #256]	; (80009ac <MX_GPIO_Init+0x154>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0289      	lsls	r1, r1, #10
 80008b0:	430a      	orrs	r2, r1
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <MX_GPIO_Init+0x154>)
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	029b      	lsls	r3, r3, #10
 80008bc:	4013      	ands	r3, r2
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80008c2:	4b3b      	ldr	r3, [pc, #236]	; (80009b0 <MX_GPIO_Init+0x158>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	2108      	movs	r1, #8
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fe96 	bl	80015fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2390      	movs	r3, #144	; 0x90
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	2200      	movs	r2, #0
 80008d4:	2120      	movs	r1, #32
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fe8f 	bl	80015fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	22a0      	movs	r2, #160	; 0xa0
 80008e0:	0192      	lsls	r2, r2, #6
 80008e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	4a33      	ldr	r2, [pc, #204]	; (80009b4 <MX_GPIO_Init+0x15c>)
 80008e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	4a2f      	ldr	r2, [pc, #188]	; (80009b0 <MX_GPIO_Init+0x158>)
 80008f4:	0019      	movs	r1, r3
 80008f6:	0010      	movs	r0, r2
 80008f8:	f000 fcf2 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008fc:	0021      	movs	r1, r4
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2202      	movs	r2, #2
 8000902:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2203      	movs	r2, #3
 8000908:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000910:	000c      	movs	r4, r1
 8000912:	187b      	adds	r3, r7, r1
 8000914:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <MX_GPIO_Init+0x158>)
 8000916:	0019      	movs	r1, r3
 8000918:	0010      	movs	r0, r2
 800091a:	f000 fce1 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800091e:	0021      	movs	r1, r4
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2208      	movs	r2, #8
 8000924:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	000c      	movs	r4, r1
 800093a:	187b      	adds	r3, r7, r1
 800093c:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <MX_GPIO_Init+0x158>)
 800093e:	0019      	movs	r1, r3
 8000940:	0010      	movs	r0, r2
 8000942:	f000 fccd 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000946:	0021      	movs	r1, r4
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2220      	movs	r2, #32
 800094c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2201      	movs	r2, #1
 8000952:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000960:	000c      	movs	r4, r1
 8000962:	187a      	adds	r2, r7, r1
 8000964:	2390      	movs	r3, #144	; 0x90
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fcb8 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000970:	0021      	movs	r1, r4
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	0152      	lsls	r2, r2, #5
 8000978:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	187b      	adds	r3, r7, r1
 8000988:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <MX_GPIO_Init+0x158>)
 800098a:	0019      	movs	r1, r3
 800098c:	0010      	movs	r0, r2
 800098e:	f000 fca7 	bl	80012e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2007      	movs	r0, #7
 8000998:	f000 fc2a 	bl	80011f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800099c:	2007      	movs	r0, #7
 800099e:	f000 fc3c 	bl	800121a <HAL_NVIC_EnableIRQ>

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b009      	add	sp, #36	; 0x24
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000800 	.word	0x48000800
 80009b4:	10110000 	.word	0x10110000

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_MspInit+0x44>)
 80009cc:	699a      	ldr	r2, [r3, #24]
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_MspInit+0x44>)
 80009d0:	2101      	movs	r1, #1
 80009d2:	430a      	orrs	r2, r1
 80009d4:	619a      	str	r2, [r3, #24]
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_MspInit+0x44>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	2201      	movs	r2, #1
 80009dc:	4013      	ands	r3, r2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x44>)
 80009e4:	69da      	ldr	r2, [r3, #28]
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_MspInit+0x44>)
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	0549      	lsls	r1, r1, #21
 80009ec:	430a      	orrs	r2, r1
 80009ee:	61da      	str	r2, [r3, #28]
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_MspInit+0x44>)
 80009f2:	69da      	ldr	r2, [r3, #28]
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	055b      	lsls	r3, r3, #21
 80009f8:	4013      	ands	r3, r2
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HAL_RTC_MspInit+0x28>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d106      	bne.n	8000a2c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_RTC_MspInit+0x2c>)
 8000a20:	6a1a      	ldr	r2, [r3, #32]
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_RTC_MspInit+0x2c>)
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	0209      	lsls	r1, r1, #8
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40002800 	.word	0x40002800
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <HAL_TIM_PWM_MspInit+0x34>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d10b      	bne.n	8000a66 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_TIM_PWM_MspInit+0x38>)
 8000a50:	69da      	ldr	r2, [r3, #28]
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_TIM_PWM_MspInit+0x38>)
 8000a54:	2102      	movs	r1, #2
 8000a56:	430a      	orrs	r2, r1
 8000a58:	61da      	str	r2, [r3, #28]
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_TIM_PWM_MspInit+0x38>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	2202      	movs	r2, #2
 8000a60:	4013      	ands	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b004      	add	sp, #16
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	40000400 	.word	0x40000400
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d114      	bne.n	8000ab4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_TIM_Base_MspInit+0x80>)
 8000a8c:	69da      	ldr	r2, [r3, #28]
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <HAL_TIM_Base_MspInit+0x80>)
 8000a90:	2110      	movs	r1, #16
 8000a92:	430a      	orrs	r2, r1
 8000a94:	61da      	str	r2, [r3, #28]
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_TIM_Base_MspInit+0x80>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2011      	movs	r0, #17
 8000aa8:	f000 fba2 	bl	80011f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000aac:	2011      	movs	r0, #17
 8000aae:	f000 fbb4 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000ab2:	e01a      	b.n	8000aea <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_TIM_Base_MspInit+0x84>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d115      	bne.n	8000aea <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_TIM_Base_MspInit+0x80>)
 8000ac0:	69da      	ldr	r2, [r3, #28]
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_TIM_Base_MspInit+0x80>)
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	61da      	str	r2, [r3, #28]
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_TIM_Base_MspInit+0x80>)
 8000ace:	69da      	ldr	r2, [r3, #28]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2013      	movs	r0, #19
 8000ae0:	f000 fb86 	bl	80011f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000ae4:	2013      	movs	r0, #19
 8000ae6:	f000 fb98 	bl	800121a <HAL_NVIC_EnableIRQ>
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b004      	add	sp, #16
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40001000 	.word	0x40001000
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40002000 	.word	0x40002000

08000b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	2314      	movs	r3, #20
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2314      	movs	r3, #20
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f003 f9d0 	bl	8003eb8 <memset>
  if(htim->Instance==TIM3)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a2a      	ldr	r2, [pc, #168]	; (8000bc8 <HAL_TIM_MspPostInit+0xc8>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d124      	bne.n	8000b6c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <HAL_TIM_MspPostInit+0xcc>)
 8000b24:	695a      	ldr	r2, [r3, #20]
 8000b26:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <HAL_TIM_MspPostInit+0xcc>)
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	0309      	lsls	r1, r1, #12
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <HAL_TIM_MspPostInit+0xcc>)
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	031b      	lsls	r3, r3, #12
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b3e:	2114      	movs	r1, #20
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2202      	movs	r2, #2
 8000b4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <HAL_TIM_MspPostInit+0xd0>)
 8000b62:	0019      	movs	r1, r3
 8000b64:	0010      	movs	r0, r2
 8000b66:	f000 fbbb 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000b6a:	e029      	b.n	8000bc0 <HAL_TIM_MspPostInit+0xc0>
  else if(htim->Instance==TIM14)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <HAL_TIM_MspPostInit+0xd4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d124      	bne.n	8000bc0 <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_TIM_MspPostInit+0xcc>)
 8000b78:	695a      	ldr	r2, [r3, #20]
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_TIM_MspPostInit+0xcc>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0289      	lsls	r1, r1, #10
 8000b80:	430a      	orrs	r2, r1
 8000b82:	615a      	str	r2, [r3, #20]
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_TIM_MspPostInit+0xcc>)
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	029b      	lsls	r3, r3, #10
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b92:	2114      	movs	r1, #20
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2210      	movs	r2, #16
 8000b98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2204      	movs	r2, #4
 8000bb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	187a      	adds	r2, r7, r1
 8000bb4:	2390      	movs	r3, #144	; 0x90
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	0011      	movs	r1, r2
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 fb90 	bl	80012e0 <HAL_GPIO_Init>
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b00a      	add	sp, #40	; 0x28
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40000400 	.word	0x40000400
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	48000800 	.word	0x48000800
 8000bd4:	40002000 	.word	0x40002000

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	231c      	movs	r3, #28
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	0018      	movs	r0, r3
 8000be6:	2314      	movs	r3, #20
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f003 f964 	bl	8003eb8 <memset>
  if(huart->Instance==USART1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a41      	ldr	r2, [pc, #260]	; (8000cfc <HAL_UART_MspInit+0x124>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d13c      	bne.n	8000c74 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfa:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000bfc:	699a      	ldr	r2, [r3, #24]
 8000bfe:	4b40      	ldr	r3, [pc, #256]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	01c9      	lsls	r1, r1, #7
 8000c04:	430a      	orrs	r2, r1
 8000c06:	619a      	str	r2, [r3, #24]
 8000c08:	4b3d      	ldr	r3, [pc, #244]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000c0a:	699a      	ldr	r2, [r3, #24]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	01db      	lsls	r3, r3, #7
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b3a      	ldr	r3, [pc, #232]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	4b39      	ldr	r3, [pc, #228]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	0289      	lsls	r1, r1, #10
 8000c20:	430a      	orrs	r2, r1
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000c26:	695a      	ldr	r2, [r3, #20]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	029b      	lsls	r3, r3, #10
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c32:	211c      	movs	r1, #28
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	22c0      	movs	r2, #192	; 0xc0
 8000c38:	00d2      	lsls	r2, r2, #3
 8000c3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2202      	movs	r2, #2
 8000c40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2201      	movs	r2, #1
 8000c52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	187a      	adds	r2, r7, r1
 8000c56:	2390      	movs	r3, #144	; 0x90
 8000c58:	05db      	lsls	r3, r3, #23
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f000 fb3f 	bl	80012e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	201b      	movs	r0, #27
 8000c68:	f000 fac2 	bl	80011f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6c:	201b      	movs	r0, #27
 8000c6e:	f000 fad4 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c72:	e03f      	b.n	8000cf4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a22      	ldr	r2, [pc, #136]	; (8000d04 <HAL_UART_MspInit+0x12c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d13a      	bne.n	8000cf4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000c80:	69da      	ldr	r2, [r3, #28]
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	0289      	lsls	r1, r1, #10
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	61da      	str	r2, [r3, #28]
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000c8e:	69da      	ldr	r2, [r3, #28]
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	029b      	lsls	r3, r3, #10
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	0289      	lsls	r1, r1, #10
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	615a      	str	r2, [r3, #20]
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0x128>)
 8000caa:	695a      	ldr	r2, [r3, #20]
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	029b      	lsls	r3, r3, #10
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cb6:	211c      	movs	r1, #28
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	187a      	adds	r2, r7, r1
 8000cd8:	2390      	movs	r3, #144	; 0x90
 8000cda:	05db      	lsls	r3, r3, #23
 8000cdc:	0011      	movs	r1, r2
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 fafe 	bl	80012e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	201c      	movs	r0, #28
 8000cea:	f000 fa81 	bl	80011f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cee:	201c      	movs	r0, #28
 8000cf0:	f000 fa93 	bl	800121a <HAL_NVIC_EnableIRQ>
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b00c      	add	sp, #48	; 0x30
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40013800 	.word	0x40013800
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40004400 	.word	0x40004400

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f996 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11) ||
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <EXTI4_15_IRQHandler+0x40>)
 8000d42:	695a      	ldr	r2, [r3, #20]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d105      	bne.n	8000d58 <EXTI4_15_IRQHandler+0x1c>
		__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13))
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <EXTI4_15_IRQHandler+0x40>)
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	019b      	lsls	r3, r3, #6
 8000d54:	4013      	ands	r3, r2
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11) ||
 8000d56:	d003      	beq.n	8000d60 <EXTI4_15_IRQHandler+0x24>
	{
		handleGPIO_Pin11_Interrupt();
 8000d58:	f000 f842 	bl	8000de0 <handleGPIO_Pin11_Interrupt>
		handleGPIO_Pin13_Interrupt();
 8000d5c:	f000 f88e 	bl	8000e7c <handleGPIO_Pin13_Interrupt>
	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	0018      	movs	r0, r3
 8000d66:	f000 fc81 	bl	800166c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	019b      	lsls	r3, r3, #6
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 fc7c 	bl	800166c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40010400 	.word	0x40010400

08000d80 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <TIM6_IRQHandler+0x14>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f001 fdfc 	bl	8002984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	200001f8 	.word	0x200001f8

08000d98 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <TIM14_IRQHandler+0x14>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f001 fdf0 	bl	8002984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	200002b8 	.word	0x200002b8

08000db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <USART1_IRQHandler+0x14>)
 8000db6:	0018      	movs	r0, r3
 8000db8:	f002 fbcc 	bl	8003554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	20000118 	.word	0x20000118

08000dc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <USART2_IRQHandler+0x14>)
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f002 fbc0 	bl	8003554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	20000238 	.word	0x20000238

08000de0 <handleGPIO_Pin11_Interrupt>:

/* USER CODE BEGIN 1 */

inline void handleGPIO_Pin11_Interrupt()
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
	//Use timer to handle debouncing
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11))
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <handleGPIO_Pin11_Interrupt+0x84>)
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	4013      	ands	r3, r2
 8000df0:	d034      	beq.n	8000e5c <handleGPIO_Pin11_Interrupt+0x7c>
	{
		uint8_t pin11State = (uint8_t)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8000df2:	1dfc      	adds	r4, r7, #7
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <handleGPIO_Pin11_Interrupt+0x88>)
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	0010      	movs	r0, r2
 8000dfe:	f000 fbdf 	bl	80015c0 <HAL_GPIO_ReadPin>
 8000e02:	0003      	movs	r3, r0
 8000e04:	7023      	strb	r3, [r4, #0]
		if (GPIO_PIN_SET == pin11State)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d112      	bne.n	8000e34 <handleGPIO_Pin11_Interrupt+0x54>
		{
			//rising edge
			if (!btnPressed)
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <handleGPIO_Pin11_Interrupt+0x8c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2201      	movs	r2, #1
 8000e16:	4053      	eors	r3, r2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d01e      	beq.n	8000e5c <handleGPIO_Pin11_Interrupt+0x7c>
			{
				timeCounter = 0U;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <handleGPIO_Pin11_Interrupt+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	801a      	strh	r2, [r3, #0]
				btnPressed = true;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <handleGPIO_Pin11_Interrupt+0x8c>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim6);
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <handleGPIO_Pin11_Interrupt+0x94>)
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f001 fce4 	bl	80027fa <HAL_TIM_Base_Start_IT>
			}
			HAL_TIM_Base_Stop_IT(&htim6);
			btnPressed = false;
		}
	}
}
 8000e32:	e013      	b.n	8000e5c <handleGPIO_Pin11_Interrupt+0x7c>
		else if (GPIO_PIN_RESET == pin11State)
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10f      	bne.n	8000e5c <handleGPIO_Pin11_Interrupt+0x7c>
			if (timeCounter > btnPressTimeThreshold)
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <handleGPIO_Pin11_Interrupt+0x90>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	220f      	movs	r2, #15
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d902      	bls.n	8000e4e <handleGPIO_Pin11_Interrupt+0x6e>
				btnTrigger = true;
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <handleGPIO_Pin11_Interrupt+0x98>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <handleGPIO_Pin11_Interrupt+0x94>)
 8000e50:	0018      	movs	r0, r3
 8000e52:	f001 fcf5 	bl	8002840 <HAL_TIM_Base_Stop_IT>
			btnPressed = false;
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <handleGPIO_Pin11_Interrupt+0x8c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b003      	add	sp, #12
 8000e62:	bd90      	pop	{r4, r7, pc}
 8000e64:	40010400 	.word	0x40010400
 8000e68:	48000800 	.word	0x48000800
 8000e6c:	200000cb 	.word	0x200000cb
 8000e70:	200000c8 	.word	0x200000c8
 8000e74:	200001f8 	.word	0x200001f8
 8000e78:	200000ca 	.word	0x200000ca

08000e7c <handleGPIO_Pin13_Interrupt>:

inline void handleGPIO_Pin13_Interrupt()
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
	//Use timer to handle debouncing
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13))
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <handleGPIO_Pin13_Interrupt+0x84>)
 8000e84:	695a      	ldr	r2, [r3, #20]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	019b      	lsls	r3, r3, #6
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d034      	beq.n	8000ef8 <handleGPIO_Pin13_Interrupt+0x7c>
	{
		uint8_t pin13State = (uint8_t)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000e8e:	1dfc      	adds	r4, r7, #7
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	019b      	lsls	r3, r3, #6
 8000e94:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <handleGPIO_Pin13_Interrupt+0x88>)
 8000e96:	0019      	movs	r1, r3
 8000e98:	0010      	movs	r0, r2
 8000e9a:	f000 fb91 	bl	80015c0 <HAL_GPIO_ReadPin>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	7023      	strb	r3, [r4, #0]
		if (GPIO_PIN_RESET == pin13State)
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d112      	bne.n	8000ed0 <handleGPIO_Pin13_Interrupt+0x54>
		{
			//rising edge
			if (!btnPressed)
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <handleGPIO_Pin13_Interrupt+0x8c>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4053      	eors	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d01e      	beq.n	8000ef8 <handleGPIO_Pin13_Interrupt+0x7c>
			{
				timeCounter = 0U;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <handleGPIO_Pin13_Interrupt+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	801a      	strh	r2, [r3, #0]
				btnPressed = true;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <handleGPIO_Pin13_Interrupt+0x8c>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim6);
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <handleGPIO_Pin13_Interrupt+0x94>)
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f001 fc96 	bl	80027fa <HAL_TIM_Base_Start_IT>
			}
			HAL_TIM_Base_Stop_IT(&htim6);
			btnPressed = false;
		}
	}
}
 8000ece:	e013      	b.n	8000ef8 <handleGPIO_Pin13_Interrupt+0x7c>
		else if (GPIO_PIN_SET == pin13State)
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d10f      	bne.n	8000ef8 <handleGPIO_Pin13_Interrupt+0x7c>
			if (timeCounter > btnPressTimeThreshold)
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <handleGPIO_Pin13_Interrupt+0x90>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	220f      	movs	r2, #15
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d902      	bls.n	8000eea <handleGPIO_Pin13_Interrupt+0x6e>
				btnTrigger = true;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <handleGPIO_Pin13_Interrupt+0x98>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <handleGPIO_Pin13_Interrupt+0x94>)
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 fca7 	bl	8002840 <HAL_TIM_Base_Stop_IT>
			btnPressed = false;
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <handleGPIO_Pin13_Interrupt+0x8c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b003      	add	sp, #12
 8000efe:	bd90      	pop	{r4, r7, pc}
 8000f00:	40010400 	.word	0x40010400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	200000cb 	.word	0x200000cb
 8000f0c:	200000c8 	.word	0x200000c8
 8000f10:	200001f8 	.word	0x200001f8
 8000f14:	200000ca 	.word	0x200000ca

08000f18 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x50>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <_sbrk+0x16>
		heap_end = &end;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <_sbrk+0x50>)
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <_sbrk+0x54>)
 8000f2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <_sbrk+0x50>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <_sbrk+0x50>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	18d3      	adds	r3, r2, r3
 8000f3c:	466a      	mov	r2, sp
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d907      	bls.n	8000f52 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f42:	f002 ff8f 	bl	8003e64 <__errno>
 8000f46:	0003      	movs	r3, r0
 8000f48:	220c      	movs	r2, #12
 8000f4a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	425b      	negs	r3, r3
 8000f50:	e006      	b.n	8000f60 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <_sbrk+0x50>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	18d2      	adds	r2, r2, r3
 8000f5a:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <_sbrk+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000cc 	.word	0x200000cc
 8000f6c:	20000300 	.word	0x20000300

08000f70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f82:	490e      	ldr	r1, [pc, #56]	; (8000fbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <LoopForever+0xe>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f98:	4c0b      	ldr	r4, [pc, #44]	; (8000fc8 <LoopForever+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fa6:	f7ff ffe3 	bl	8000f70 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000faa:	f002 ff61 	bl	8003e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fae:	f7ff f9a7 	bl	8000300 <main>

08000fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   r0, =_estack
 8000fb4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fc0:	080047a4 	.word	0x080047a4
  ldr r2, =_sbss
 8000fc4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fc8:	20000300 	.word	0x20000300

08000fcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <HAL_Init+0x24>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_Init+0x24>)
 8000fda:	2110      	movs	r1, #16
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f809 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe6:	f7ff fced 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	40022000 	.word	0x40022000

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_InitTick+0x5c>)
 8001002:	681c      	ldr	r4, [r3, #0]
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_InitTick+0x60>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	0019      	movs	r1, r3
 800100a:	23fa      	movs	r3, #250	; 0xfa
 800100c:	0098      	lsls	r0, r3, #2
 800100e:	f7ff f883 	bl	8000118 <__udivsi3>
 8001012:	0003      	movs	r3, r0
 8001014:	0019      	movs	r1, r3
 8001016:	0020      	movs	r0, r4
 8001018:	f7ff f87e 	bl	8000118 <__udivsi3>
 800101c:	0003      	movs	r3, r0
 800101e:	0018      	movs	r0, r3
 8001020:	f000 f90b 	bl	800123a <HAL_SYSTICK_Config>
 8001024:	1e03      	subs	r3, r0, #0
 8001026:	d001      	beq.n	800102c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e00f      	b.n	800104c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b03      	cmp	r3, #3
 8001030:	d80b      	bhi.n	800104a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	2301      	movs	r3, #1
 8001036:	425b      	negs	r3, r3
 8001038:	2200      	movs	r2, #0
 800103a:	0018      	movs	r0, r3
 800103c:	f000 f8d8 	bl	80011f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_InitTick+0x64>)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b003      	add	sp, #12
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	20000004 	.word	0x20000004
 8001058:	2000000c 	.word	0x2000000c
 800105c:	20000008 	.word	0x20000008

08001060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_IncTick+0x1c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	001a      	movs	r2, r3
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x20>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	18d2      	adds	r2, r2, r3
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_IncTick+0x20>)
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	2000000c 	.word	0x2000000c
 8001080:	200002f8 	.word	0x200002f8

08001084 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <HAL_GetTick+0x10>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	200002f8 	.word	0x200002f8

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	0002      	movs	r2, r0
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b7f      	cmp	r3, #127	; 0x7f
 80010aa:	d809      	bhi.n	80010c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	001a      	movs	r2, r3
 80010b2:	231f      	movs	r3, #31
 80010b4:	401a      	ands	r2, r3
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_EnableIRQ+0x30>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	4091      	lsls	r1, r2
 80010bc:	000a      	movs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
  }
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	0002      	movs	r2, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b7f      	cmp	r3, #127	; 0x7f
 80010e0:	d828      	bhi.n	8001134 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e2:	4a2f      	ldr	r2, [pc, #188]	; (80011a0 <__NVIC_SetPriority+0xd4>)
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	33c0      	adds	r3, #192	; 0xc0
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	589b      	ldr	r3, [r3, r2]
 80010f2:	1dfa      	adds	r2, r7, #7
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	0011      	movs	r1, r2
 80010f8:	2203      	movs	r2, #3
 80010fa:	400a      	ands	r2, r1
 80010fc:	00d2      	lsls	r2, r2, #3
 80010fe:	21ff      	movs	r1, #255	; 0xff
 8001100:	4091      	lsls	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	43d2      	mvns	r2, r2
 8001106:	401a      	ands	r2, r3
 8001108:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	401a      	ands	r2, r3
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	0018      	movs	r0, r3
 8001118:	2303      	movs	r3, #3
 800111a:	4003      	ands	r3, r0
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001120:	481f      	ldr	r0, [pc, #124]	; (80011a0 <__NVIC_SetPriority+0xd4>)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b25b      	sxtb	r3, r3
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	430a      	orrs	r2, r1
 800112c:	33c0      	adds	r3, #192	; 0xc0
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001132:	e031      	b.n	8001198 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <__NVIC_SetPriority+0xd8>)
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	0019      	movs	r1, r3
 800113c:	230f      	movs	r3, #15
 800113e:	400b      	ands	r3, r1
 8001140:	3b08      	subs	r3, #8
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3306      	adds	r3, #6
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	18d3      	adds	r3, r2, r3
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	1dfa      	adds	r2, r7, #7
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	0011      	movs	r1, r2
 8001154:	2203      	movs	r2, #3
 8001156:	400a      	ands	r2, r1
 8001158:	00d2      	lsls	r2, r2, #3
 800115a:	21ff      	movs	r1, #255	; 0xff
 800115c:	4091      	lsls	r1, r2
 800115e:	000a      	movs	r2, r1
 8001160:	43d2      	mvns	r2, r2
 8001162:	401a      	ands	r2, r3
 8001164:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	22ff      	movs	r2, #255	; 0xff
 800116c:	401a      	ands	r2, r3
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	0018      	movs	r0, r3
 8001174:	2303      	movs	r3, #3
 8001176:	4003      	ands	r3, r0
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <__NVIC_SetPriority+0xd8>)
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	001c      	movs	r4, r3
 8001184:	230f      	movs	r3, #15
 8001186:	4023      	ands	r3, r4
 8001188:	3b08      	subs	r3, #8
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	430a      	orrs	r2, r1
 800118e:	3306      	adds	r3, #6
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	18c3      	adds	r3, r0, r3
 8001194:	3304      	adds	r3, #4
 8001196:	601a      	str	r2, [r3, #0]
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b003      	add	sp, #12
 800119e:	bd90      	pop	{r4, r7, pc}
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <SysTick_Config+0x40>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d901      	bls.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e010      	b.n	80011e0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <SysTick_Config+0x44>)
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	3a01      	subs	r2, #1
 80011c4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	2301      	movs	r3, #1
 80011c8:	425b      	negs	r3, r3
 80011ca:	2103      	movs	r1, #3
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff ff7d 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SysTick_Config+0x44>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x44>)
 80011da:	2207      	movs	r2, #7
 80011dc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011de:	2300      	movs	r3, #0
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	00ffffff 	.word	0x00ffffff
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	210f      	movs	r1, #15
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	1c02      	adds	r2, r0, #0
 8001200:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	187b      	adds	r3, r7, r1
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b25b      	sxtb	r3, r3
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b004      	add	sp, #16
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	0002      	movs	r2, r0
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b25b      	sxtb	r3, r3
 800122c:	0018      	movs	r0, r3
 800122e:	f7ff ff33 	bl	8001098 <__NVIC_EnableIRQ>
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff ffaf 	bl	80011a8 <SysTick_Config>
 800124a:	0003      	movs	r3, r0
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b002      	add	sp, #8
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800125c:	230f      	movs	r3, #15
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2221      	movs	r2, #33	; 0x21
 8001268:	5c9b      	ldrb	r3, [r3, r2]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d007      	beq.n	8001280 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2204      	movs	r2, #4
 8001274:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001276:	230f      	movs	r3, #15
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	e028      	b.n	80012d2 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	210e      	movs	r1, #14
 800128c:	438a      	bics	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2101      	movs	r1, #1
 800129c:	438a      	bics	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a8:	2101      	movs	r1, #1
 80012aa:	4091      	lsls	r1, r2
 80012ac:	000a      	movs	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2221      	movs	r2, #33	; 0x21
 80012b4:	2101      	movs	r1, #1
 80012b6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2220      	movs	r2, #32
 80012bc:	2100      	movs	r1, #0
 80012be:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d004      	beq.n	80012d2 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	0010      	movs	r0, r2
 80012d0:	4798      	blx	r3
    } 
  }
  return status;
 80012d2:	230f      	movs	r3, #15
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b004      	add	sp, #16
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e14f      	b.n	8001590 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4091      	lsls	r1, r2
 80012fa:	000a      	movs	r2, r1
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d100      	bne.n	8001308 <HAL_GPIO_Init+0x28>
 8001306:	e140      	b.n	800158a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d00b      	beq.n	8001328 <HAL_GPIO_Init+0x48>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d007      	beq.n	8001328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131c:	2b11      	cmp	r3, #17
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b12      	cmp	r3, #18
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	409a      	lsls	r2, r3
 8001336:	0013      	movs	r3, r2
 8001338:	43da      	mvns	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	409a      	lsls	r2, r3
 800134a:	0013      	movs	r3, r2
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	2201      	movs	r2, #1
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0xea>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d123      	bne.n	8001412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	58d3      	ldr	r3, [r2, r3]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2207      	movs	r2, #7
 80013dc:	4013      	ands	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2107      	movs	r1, #7
 80013f6:	400b      	ands	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	6939      	ldr	r1, [r7, #16]
 8001410:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	401a      	ands	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	055b      	lsls	r3, r3, #21
 800144e:	4013      	ands	r3, r2
 8001450:	d100      	bne.n	8001454 <HAL_GPIO_Init+0x174>
 8001452:	e09a      	b.n	800158a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001454:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 800145a:	2101      	movs	r1, #1
 800145c:	430a      	orrs	r2, r1
 800145e:	619a      	str	r2, [r3, #24]
 8001460:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	2201      	movs	r2, #1
 8001466:	4013      	ands	r3, r2
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_GPIO_Init+0x2cc>)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	589b      	ldr	r3, [r3, r2]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2203      	movs	r2, #3
 800147e:	4013      	ands	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	409a      	lsls	r2, r3
 8001486:	0013      	movs	r3, r2
 8001488:	43da      	mvns	r2, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	2390      	movs	r3, #144	; 0x90
 8001494:	05db      	lsls	r3, r3, #23
 8001496:	429a      	cmp	r2, r3
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x1e2>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a44      	ldr	r2, [pc, #272]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x1de>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a43      	ldr	r2, [pc, #268]	; (80015b4 <HAL_GPIO_Init+0x2d4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x1da>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <HAL_GPIO_Init+0x2d8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x1d6>
 80014b2:	2303      	movs	r3, #3
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x1e4>
 80014b6:	2305      	movs	r3, #5
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x1e4>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x1e4>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x1e4>
 80014c2:	2300      	movs	r3, #0
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	2103      	movs	r1, #3
 80014c8:	400a      	ands	r2, r1
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d4:	4935      	ldr	r1, [pc, #212]	; (80015ac <HAL_GPIO_Init+0x2cc>)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	025b      	lsls	r3, r3, #9
 80014fa:	4013      	ands	r3, r2
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43da      	mvns	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	029b      	lsls	r3, r3, #10
 8001524:	4013      	ands	r3, r2
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43da      	mvns	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	035b      	lsls	r3, r3, #13
 800154e:	4013      	ands	r3, r2
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43da      	mvns	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	039b      	lsls	r3, r3, #14
 8001578:	4013      	ands	r3, r2
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	40da      	lsrs	r2, r3
 8001598:	1e13      	subs	r3, r2, #0
 800159a:	d000      	beq.n	800159e <HAL_GPIO_Init+0x2be>
 800159c:	e6a8      	b.n	80012f0 <HAL_GPIO_Init+0x10>
  } 
}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b006      	add	sp, #24
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000
 80015b0:	48000400 	.word	0x48000400
 80015b4:	48000800 	.word	0x48000800
 80015b8:	48000c00 	.word	0x48000c00
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	000a      	movs	r2, r1
 80015ca:	1cbb      	adds	r3, r7, #2
 80015cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	1cba      	adds	r2, r7, #2
 80015d4:	8812      	ldrh	r2, [r2, #0]
 80015d6:	4013      	ands	r3, r2
 80015d8:	d004      	beq.n	80015e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015da:	230f      	movs	r3, #15
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e003      	b.n	80015ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e4:	230f      	movs	r3, #15
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015ec:	230f      	movs	r3, #15
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	781b      	ldrb	r3, [r3, #0]
  }
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b004      	add	sp, #16
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	0008      	movs	r0, r1
 8001604:	0011      	movs	r1, r2
 8001606:	1cbb      	adds	r3, r7, #2
 8001608:	1c02      	adds	r2, r0, #0
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	1c7b      	adds	r3, r7, #1
 800160e:	1c0a      	adds	r2, r1, #0
 8001610:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001612:	1c7b      	adds	r3, r7, #1
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800161a:	1cbb      	adds	r3, r7, #2
 800161c:	881a      	ldrh	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001622:	e003      	b.n	800162c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001624:	1cbb      	adds	r3, r7, #2
 8001626:	881a      	ldrh	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	000a      	movs	r2, r1
 800163e:	1cbb      	adds	r3, r7, #2
 8001640:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001648:	1cbb      	adds	r3, r7, #2
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	1cb9      	adds	r1, r7, #2
 8001658:	8809      	ldrh	r1, [r1, #0]
 800165a:	400b      	ands	r3, r1
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b004      	add	sp, #16
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	0002      	movs	r2, r0
 8001674:	1dbb      	adds	r3, r7, #6
 8001676:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	1dba      	adds	r2, r7, #6
 800167e:	8812      	ldrh	r2, [r2, #0]
 8001680:	4013      	ands	r3, r2
 8001682:	d008      	beq.n	8001696 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001686:	1dba      	adds	r2, r7, #6
 8001688:	8812      	ldrh	r2, [r2, #0]
 800168a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800168c:	1dbb      	adds	r3, r7, #6
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	0018      	movs	r0, r3
 8001692:	f000 f807 	bl	80016a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	40010400 	.word	0x40010400

080016a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	0002      	movs	r2, r0
 80016ac:	1dbb      	adds	r3, r7, #6
 80016ae:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e303      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2201      	movs	r2, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	d100      	bne.n	80016d6 <HAL_RCC_OscConfig+0x1e>
 80016d4:	e08d      	b.n	80017f2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016d6:	4bc4      	ldr	r3, [pc, #784]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	220c      	movs	r2, #12
 80016dc:	4013      	ands	r3, r2
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d00e      	beq.n	8001700 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e2:	4bc1      	ldr	r3, [pc, #772]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	220c      	movs	r2, #12
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d116      	bne.n	800171c <HAL_RCC_OscConfig+0x64>
 80016ee:	4bbe      	ldr	r3, [pc, #760]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	401a      	ands	r2, r3
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d10d      	bne.n	800171c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	4bb9      	ldr	r3, [pc, #740]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	029b      	lsls	r3, r3, #10
 8001708:	4013      	ands	r3, r2
 800170a:	d100      	bne.n	800170e <HAL_RCC_OscConfig+0x56>
 800170c:	e070      	b.n	80017f0 <HAL_RCC_OscConfig+0x138>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d000      	beq.n	8001718 <HAL_RCC_OscConfig+0x60>
 8001716:	e06b      	b.n	80017f0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e2da      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x7c>
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4baf      	ldr	r3, [pc, #700]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	0249      	lsls	r1, r1, #9
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e02f      	b.n	8001794 <HAL_RCC_OscConfig+0xdc>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10c      	bne.n	8001756 <HAL_RCC_OscConfig+0x9e>
 800173c:	4baa      	ldr	r3, [pc, #680]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4ba9      	ldr	r3, [pc, #676]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001742:	49aa      	ldr	r1, [pc, #680]	; (80019ec <HAL_RCC_OscConfig+0x334>)
 8001744:	400a      	ands	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	4ba7      	ldr	r3, [pc, #668]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4ba6      	ldr	r3, [pc, #664]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800174e:	49a8      	ldr	r1, [pc, #672]	; (80019f0 <HAL_RCC_OscConfig+0x338>)
 8001750:	400a      	ands	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e01e      	b.n	8001794 <HAL_RCC_OscConfig+0xdc>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b05      	cmp	r3, #5
 800175c:	d10e      	bne.n	800177c <HAL_RCC_OscConfig+0xc4>
 800175e:	4ba2      	ldr	r3, [pc, #648]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4ba1      	ldr	r3, [pc, #644]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	02c9      	lsls	r1, r1, #11
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	4b9e      	ldr	r3, [pc, #632]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b9d      	ldr	r3, [pc, #628]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	0249      	lsls	r1, r1, #9
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0xdc>
 800177c:	4b9a      	ldr	r3, [pc, #616]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b99      	ldr	r3, [pc, #612]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001782:	499a      	ldr	r1, [pc, #616]	; (80019ec <HAL_RCC_OscConfig+0x334>)
 8001784:	400a      	ands	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	4b97      	ldr	r3, [pc, #604]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b96      	ldr	r3, [pc, #600]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800178e:	4998      	ldr	r1, [pc, #608]	; (80019f0 <HAL_RCC_OscConfig+0x338>)
 8001790:	400a      	ands	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d014      	beq.n	80017c6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fc72 	bl	8001084 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a6:	f7ff fc6d 	bl	8001084 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b64      	cmp	r3, #100	; 0x64
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e28c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b8:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	029b      	lsls	r3, r3, #10
 80017c0:	4013      	ands	r3, r2
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0xee>
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fc5d 	bl	8001084 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fc58 	bl	8001084 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e277      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	029b      	lsls	r3, r3, #10
 80017ea:	4013      	ands	r3, r2
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x118>
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d100      	bne.n	80017fe <HAL_RCC_OscConfig+0x146>
 80017fc:	e069      	b.n	80018d2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017fe:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	220c      	movs	r2, #12
 8001804:	4013      	ands	r3, r2
 8001806:	d00b      	beq.n	8001820 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001808:	4b77      	ldr	r3, [pc, #476]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	220c      	movs	r2, #12
 800180e:	4013      	ands	r3, r2
 8001810:	2b08      	cmp	r3, #8
 8001812:	d11c      	bne.n	800184e <HAL_RCC_OscConfig+0x196>
 8001814:	4b74      	ldr	r3, [pc, #464]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	025b      	lsls	r3, r3, #9
 800181c:	4013      	ands	r3, r2
 800181e:	d116      	bne.n	800184e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001820:	4b71      	ldr	r3, [pc, #452]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d005      	beq.n	8001836 <HAL_RCC_OscConfig+0x17e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e24d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001836:	4b6c      	ldr	r3, [pc, #432]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	22f8      	movs	r2, #248	; 0xf8
 800183c:	4393      	bics	r3, r2
 800183e:	0019      	movs	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	00da      	lsls	r2, r3, #3
 8001846:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184c:	e041      	b.n	80018d2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d024      	beq.n	80018a0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001856:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800185c:	2101      	movs	r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fc0f 	bl	8001084 <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186c:	f7ff fc0a 	bl	8001084 <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e229      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d0f1      	beq.n	800186c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	22f8      	movs	r2, #248	; 0xf8
 800188e:	4393      	bics	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00da      	lsls	r2, r3, #3
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e018      	b.n	80018d2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a0:	4b51      	ldr	r3, [pc, #324]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	438a      	bics	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fbea 	bl	8001084 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b6:	f7ff fbe5 	bl	8001084 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e204      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c8:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2202      	movs	r2, #2
 80018ce:	4013      	ands	r3, r2
 80018d0:	d1f1      	bne.n	80018b6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2208      	movs	r2, #8
 80018d8:	4013      	ands	r3, r2
 80018da:	d036      	beq.n	800194a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d019      	beq.n	8001918 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e4:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80018e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e8:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	430a      	orrs	r2, r1
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff fbc8 	bl	8001084 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff fbc3 	bl	8001084 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e1e2      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190c:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	2202      	movs	r2, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d0f1      	beq.n	80018fa <HAL_RCC_OscConfig+0x242>
 8001916:	e018      	b.n	800194a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001918:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800191a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800191c:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800191e:	2101      	movs	r1, #1
 8001920:	438a      	bics	r2, r1
 8001922:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff fbae 	bl	8001084 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff fba9 	bl	8001084 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1c8      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001940:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d1f1      	bne.n	800192e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2204      	movs	r2, #4
 8001950:	4013      	ands	r3, r2
 8001952:	d100      	bne.n	8001956 <HAL_RCC_OscConfig+0x29e>
 8001954:	e0b6      	b.n	8001ac4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001956:	231f      	movs	r3, #31
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001960:	69da      	ldr	r2, [r3, #28]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	055b      	lsls	r3, r3, #21
 8001966:	4013      	ands	r3, r2
 8001968:	d111      	bne.n	800198e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	0549      	lsls	r1, r1, #21
 8001974:	430a      	orrs	r2, r1
 8001976:	61da      	str	r2, [r3, #28]
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 800197a:	69da      	ldr	r2, [r3, #28]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	055b      	lsls	r3, r3, #21
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001986:	231f      	movs	r3, #31
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_RCC_OscConfig+0x33c>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4013      	ands	r3, r2
 8001998:	d11a      	bne.n	80019d0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_RCC_OscConfig+0x33c>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_RCC_OscConfig+0x33c>)
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	0049      	lsls	r1, r1, #1
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a8:	f7ff fb6c 	bl	8001084 <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b2:	f7ff fb67 	bl	8001084 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e186      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_OscConfig+0x33c>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4013      	ands	r3, r2
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10f      	bne.n	80019f8 <HAL_RCC_OscConfig+0x340>
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80019da:	6a1a      	ldr	r2, [r3, #32]
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 80019de:	2101      	movs	r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	621a      	str	r2, [r3, #32]
 80019e4:	e036      	b.n	8001a54 <HAL_RCC_OscConfig+0x39c>
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40021000 	.word	0x40021000
 80019ec:	fffeffff 	.word	0xfffeffff
 80019f0:	fffbffff 	.word	0xfffbffff
 80019f4:	40007000 	.word	0x40007000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10c      	bne.n	8001a1a <HAL_RCC_OscConfig+0x362>
 8001a00:	4bb6      	ldr	r3, [pc, #728]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	4bb5      	ldr	r3, [pc, #724]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	438a      	bics	r2, r1
 8001a0a:	621a      	str	r2, [r3, #32]
 8001a0c:	4bb3      	ldr	r3, [pc, #716]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a0e:	6a1a      	ldr	r2, [r3, #32]
 8001a10:	4bb2      	ldr	r3, [pc, #712]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a12:	2104      	movs	r1, #4
 8001a14:	438a      	bics	r2, r1
 8001a16:	621a      	str	r2, [r3, #32]
 8001a18:	e01c      	b.n	8001a54 <HAL_RCC_OscConfig+0x39c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x384>
 8001a22:	4bae      	ldr	r3, [pc, #696]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a24:	6a1a      	ldr	r2, [r3, #32]
 8001a26:	4bad      	ldr	r3, [pc, #692]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a28:	2104      	movs	r1, #4
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	621a      	str	r2, [r3, #32]
 8001a2e:	4bab      	ldr	r3, [pc, #684]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a30:	6a1a      	ldr	r2, [r3, #32]
 8001a32:	4baa      	ldr	r3, [pc, #680]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	621a      	str	r2, [r3, #32]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0x39c>
 8001a3c:	4ba7      	ldr	r3, [pc, #668]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a3e:	6a1a      	ldr	r2, [r3, #32]
 8001a40:	4ba6      	ldr	r3, [pc, #664]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a42:	2101      	movs	r1, #1
 8001a44:	438a      	bics	r2, r1
 8001a46:	621a      	str	r2, [r3, #32]
 8001a48:	4ba4      	ldr	r3, [pc, #656]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a4a:	6a1a      	ldr	r2, [r3, #32]
 8001a4c:	4ba3      	ldr	r3, [pc, #652]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a4e:	2104      	movs	r1, #4
 8001a50:	438a      	bics	r2, r1
 8001a52:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d014      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fb12 	bl	8001084 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	e009      	b.n	8001a7a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7ff fb0d 	bl	8001084 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4a9b      	ldr	r2, [pc, #620]	; (8001ce0 <HAL_RCC_OscConfig+0x628>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e12b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7a:	4b98      	ldr	r3, [pc, #608]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x3ae>
 8001a84:	e013      	b.n	8001aae <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7ff fafd 	bl	8001084 <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8e:	e009      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a90:	f7ff faf8 	bl	8001084 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	4a91      	ldr	r2, [pc, #580]	; (8001ce0 <HAL_RCC_OscConfig+0x628>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e116      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	4b8d      	ldr	r3, [pc, #564]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aae:	231f      	movs	r3, #31
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab8:	4b88      	ldr	r3, [pc, #544]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001aba:	69da      	ldr	r2, [r3, #28]
 8001abc:	4b87      	ldr	r3, [pc, #540]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001abe:	4989      	ldr	r1, [pc, #548]	; (8001ce4 <HAL_RCC_OscConfig+0x62c>)
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2210      	movs	r2, #16
 8001aca:	4013      	ands	r3, r2
 8001acc:	d063      	beq.n	8001b96 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d12a      	bne.n	8001b2c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ad6:	4b81      	ldr	r3, [pc, #516]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ada:	4b80      	ldr	r3, [pc, #512]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001adc:	2104      	movs	r1, #4
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ae2:	4b7e      	ldr	r3, [pc, #504]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae6:	4b7d      	ldr	r3, [pc, #500]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	430a      	orrs	r2, r1
 8001aec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fac9 	bl	8001084 <HAL_GetTick>
 8001af2:	0003      	movs	r3, r0
 8001af4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001af8:	f7ff fac4 	bl	8001084 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0e3      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b0a:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f1      	beq.n	8001af8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b14:	4b71      	ldr	r3, [pc, #452]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b18:	22f8      	movs	r2, #248	; 0xf8
 8001b1a:	4393      	bics	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	00da      	lsls	r2, r3, #3
 8001b24:	4b6d      	ldr	r3, [pc, #436]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
 8001b2a:	e034      	b.n	8001b96 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	3305      	adds	r3, #5
 8001b32:	d111      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b34:	4b69      	ldr	r3, [pc, #420]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b38:	4b68      	ldr	r3, [pc, #416]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	438a      	bics	r2, r1
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b40:	4b66      	ldr	r3, [pc, #408]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b44:	22f8      	movs	r2, #248	; 0xf8
 8001b46:	4393      	bics	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	00da      	lsls	r2, r3, #3
 8001b50:	4b62      	ldr	r3, [pc, #392]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34
 8001b56:	e01e      	b.n	8001b96 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b58:	4b60      	ldr	r3, [pc, #384]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b5c:	4b5f      	ldr	r3, [pc, #380]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b5e:	2104      	movs	r1, #4
 8001b60:	430a      	orrs	r2, r1
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b64:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b68:	4b5c      	ldr	r3, [pc, #368]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	438a      	bics	r2, r1
 8001b6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b70:	f7ff fa88 	bl	8001084 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b7a:	f7ff fa83 	bl	8001084 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0a2      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b8c:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d1f1      	bne.n	8001b7a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d100      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4e8>
 8001b9e:	e097      	b.n	8001cd0 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba0:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	220c      	movs	r2, #12
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d100      	bne.n	8001bae <HAL_RCC_OscConfig+0x4f6>
 8001bac:	e06b      	b.n	8001c86 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d14c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb6:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b48      	ldr	r3, [pc, #288]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001bbc:	494a      	ldr	r1, [pc, #296]	; (8001ce8 <HAL_RCC_OscConfig+0x630>)
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fa5f 	bl	8001084 <HAL_GetTick>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff fa5a 	bl	8001084 <HAL_GetTick>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e079      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	049b      	lsls	r3, r3, #18
 8001be6:	4013      	ands	r3, r2
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bea:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	220f      	movs	r2, #15
 8001bf0:	4393      	bics	r3, r2
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf8:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bfe:	4b37      	ldr	r3, [pc, #220]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4a3a      	ldr	r2, [pc, #232]	; (8001cec <HAL_RCC_OscConfig+0x634>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	431a      	orrs	r2, r3
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001c1e:	2180      	movs	r1, #128	; 0x80
 8001c20:	0449      	lsls	r1, r1, #17
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7ff fa2d 	bl	8001084 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff fa28 	bl	8001084 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e047      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	049b      	lsls	r3, r3, #18
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x578>
 8001c4e:	e03f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001c56:	4924      	ldr	r1, [pc, #144]	; (8001ce8 <HAL_RCC_OscConfig+0x630>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fa12 	bl	8001084 <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff fa0d 	bl	8001084 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e02c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	049b      	lsls	r3, r3, #18
 8001c80:	4013      	ands	r3, r2
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5ae>
 8001c84:	e024      	b.n	8001cd0 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e01f      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	025b      	lsls	r3, r3, #9
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d10e      	bne.n	8001ccc <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	23f0      	movs	r3, #240	; 0xf0
 8001cc0:	039b      	lsls	r3, r3, #14
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b008      	add	sp, #32
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	00001388 	.word	0x00001388
 8001ce4:	efffffff 	.word	0xefffffff
 8001ce8:	feffffff 	.word	0xfeffffff
 8001cec:	ffc2ffff 	.word	0xffc2ffff

08001cf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0b3      	b.n	8001e6c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b5b      	ldr	r3, [pc, #364]	; (8001e74 <HAL_RCC_ClockConfig+0x184>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d911      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b58      	ldr	r3, [pc, #352]	; (8001e74 <HAL_RCC_ClockConfig+0x184>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2201      	movs	r2, #1
 8001d18:	4393      	bics	r3, r2
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	4b55      	ldr	r3, [pc, #340]	; (8001e74 <HAL_RCC_ClockConfig+0x184>)
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_ClockConfig+0x184>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e09a      	b.n	8001e6c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d015      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2204      	movs	r2, #4
 8001d46:	4013      	ands	r3, r2
 8001d48:	d006      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001d50:	21e0      	movs	r1, #224	; 0xe0
 8001d52:	00c9      	lsls	r1, r1, #3
 8001d54:	430a      	orrs	r2, r1
 8001d56:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	22f0      	movs	r2, #240	; 0xf0
 8001d5e:	4393      	bics	r3, r2
 8001d60:	0019      	movs	r1, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	4b44      	ldr	r3, [pc, #272]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	d040      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	029b      	lsls	r3, r3, #10
 8001d86:	4013      	ands	r3, r2
 8001d88:	d114      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e06e      	b.n	8001e6c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	049b      	lsls	r3, r3, #18
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d108      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e062      	b.n	8001e6c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da6:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e05b      	b.n	8001e6c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db4:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2203      	movs	r2, #3
 8001dba:	4393      	bics	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff f95c 	bl	8001084 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd0:	e009      	b.n	8001de6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd2:	f7ff f957 	bl	8001084 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_RCC_ClockConfig+0x18c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e042      	b.n	8001e6c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	220c      	movs	r2, #12
 8001dec:	401a      	ands	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1ec      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_RCC_ClockConfig+0x184>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4013      	ands	r3, r2
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d211      	bcs.n	8001e2a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_ClockConfig+0x184>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4393      	bics	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_RCC_ClockConfig+0x184>)
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <HAL_RCC_ClockConfig+0x184>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4013      	ands	r3, r2
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e020      	b.n	8001e6c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	4013      	ands	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_RCC_ClockConfig+0x190>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001e44:	430a      	orrs	r2, r1
 8001e46:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e48:	f000 f820 	bl	8001e8c <HAL_RCC_GetSysClockFreq>
 8001e4c:	0001      	movs	r1, r0
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_RCC_ClockConfig+0x188>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	220f      	movs	r2, #15
 8001e56:	4013      	ands	r3, r2
 8001e58:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_RCC_ClockConfig+0x194>)
 8001e5a:	5cd3      	ldrb	r3, [r2, r3]
 8001e5c:	000a      	movs	r2, r1
 8001e5e:	40da      	lsrs	r2, r3
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x198>)
 8001e62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff f8c7 	bl	8000ff8 <HAL_InitTick>
  
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b004      	add	sp, #16
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40022000 	.word	0x40022000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	00001388 	.word	0x00001388
 8001e80:	fffff8ff 	.word	0xfffff8ff
 8001e84:	08004750 	.word	0x08004750
 8001e88:	20000004 	.word	0x20000004

08001e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b08f      	sub	sp, #60	; 0x3c
 8001e90:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e92:	2314      	movs	r3, #20
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	4a2b      	ldr	r2, [pc, #172]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e9a:	c313      	stmia	r3!, {r0, r1, r4}
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ea4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ea6:	c313      	stmia	r3!, {r0, r1, r4}
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ec0:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	220c      	movs	r2, #12
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d002      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x4a>
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d003      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x50>
 8001ed4:	e02d      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ed8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eda:	e02d      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ede:	0c9b      	lsrs	r3, r3, #18
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2214      	movs	r2, #20
 8001ee6:	18ba      	adds	r2, r7, r2
 8001ee8:	5cd3      	ldrb	r3, [r2, r3]
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	1d3a      	adds	r2, r7, #4
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	025b      	lsls	r3, r3, #9
 8001f00:	4013      	ands	r3, r2
 8001f02:	d009      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f06:	4812      	ldr	r0, [pc, #72]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f08:	f7fe f906 	bl	8000118 <__udivsi3>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	001a      	movs	r2, r3
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	4353      	muls	r3, r2
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
 8001f16:	e009      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f1a:	000a      	movs	r2, r1
 8001f1c:	0152      	lsls	r2, r2, #5
 8001f1e:	1a52      	subs	r2, r2, r1
 8001f20:	0193      	lsls	r3, r2, #6
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	185b      	adds	r3, r3, r1
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f30:	e002      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f36:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b00f      	add	sp, #60	; 0x3c
 8001f40:	bd90      	pop	{r4, r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	08004730 	.word	0x08004730
 8001f48:	08004740 	.word	0x08004740
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	007a1200 	.word	0x007a1200

08001f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f6c:	f7ff fff2 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f70:	0001      	movs	r1, r0
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	2207      	movs	r2, #7
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	40d9      	lsrs	r1, r3
 8001f82:	000b      	movs	r3, r1
}    
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	08004760 	.word	0x08004760

08001f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	025b      	lsls	r3, r3, #9
 8001fac:	4013      	ands	r3, r2
 8001fae:	d100      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fb0:	e08f      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001fb2:	2317      	movs	r3, #23
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fba:	4b57      	ldr	r3, [pc, #348]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	055b      	lsls	r3, r3, #21
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d111      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	4b54      	ldr	r3, [pc, #336]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	4b53      	ldr	r3, [pc, #332]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	0549      	lsls	r1, r1, #21
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	61da      	str	r2, [r3, #28]
 8001fd4:	4b50      	ldr	r3, [pc, #320]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fd6:	69da      	ldr	r2, [r3, #28]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	055b      	lsls	r3, r3, #21
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe2:	2317      	movs	r3, #23
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fea:	4b4c      	ldr	r3, [pc, #304]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d11a      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff6:	4b49      	ldr	r3, [pc, #292]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4b48      	ldr	r3, [pc, #288]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0049      	lsls	r1, r1, #1
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002004:	f7ff f83e 	bl	8001084 <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	e008      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7ff f839 	bl	8001084 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b64      	cmp	r3, #100	; 0x64
 800201a:	d901      	bls.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e077      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b3e      	ldr	r3, [pc, #248]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d0f0      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800202c:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800202e:	6a1a      	ldr	r2, [r3, #32]
 8002030:	23c0      	movs	r3, #192	; 0xc0
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d034      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	23c0      	movs	r3, #192	; 0xc0
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4013      	ands	r3, r2
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	429a      	cmp	r2, r3
 800204c:	d02c      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800204e:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a33      	ldr	r2, [pc, #204]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800205a:	6a1a      	ldr	r2, [r3, #32]
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	0249      	lsls	r1, r1, #9
 8002062:	430a      	orrs	r2, r1
 8002064:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002068:	6a1a      	ldr	r2, [r3, #32]
 800206a:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800206c:	492d      	ldr	r1, [pc, #180]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800206e:	400a      	ands	r2, r1
 8002070:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	4013      	ands	r3, r2
 800207e:	d013      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff f800 	bl	8001084 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	e009      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe fffb 	bl	8001084 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	4a24      	ldr	r2, [pc, #144]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e038      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	2202      	movs	r2, #2
 80020a4:	4013      	ands	r3, r2
 80020a6:	d0f0      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a8:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020b8:	430a      	orrs	r2, r1
 80020ba:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020bc:	2317      	movs	r3, #23
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020c8:	69da      	ldr	r2, [r3, #28]
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020cc:	4917      	ldr	r1, [pc, #92]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80020ce:	400a      	ands	r2, r1
 80020d0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d009      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	2203      	movs	r2, #3
 80020e2:	4393      	bics	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020ec:	430a      	orrs	r2, r1
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2220      	movs	r2, #32
 80020f6:	4013      	ands	r3, r2
 80020f8:	d009      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	2210      	movs	r2, #16
 8002100:	4393      	bics	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800210a:	430a      	orrs	r2, r1
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b006      	add	sp, #24
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
 8002120:	fffffcff 	.word	0xfffffcff
 8002124:	fffeffff 	.word	0xfffeffff
 8002128:	00001388 	.word	0x00001388
 800212c:	efffffff 	.word	0xefffffff

08002130 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e081      	b.n	8002246 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7f5b      	ldrb	r3, [r3, #29]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d106      	bne.n	800215a <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0018      	movs	r0, r3
 8002156:	f7fe fc59 	bl	8000a0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	22ca      	movs	r2, #202	; 0xca
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2253      	movs	r2, #83	; 0x53
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	0018      	movs	r0, r3
 8002174:	f000 faa9 	bl	80026ca <RTC_EnterInitMode>
 8002178:	1e03      	subs	r3, r0, #0
 800217a:	d008      	beq.n	800218e <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	22ff      	movs	r2, #255	; 0xff
 8002182:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2204      	movs	r2, #4
 8002188:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e05b      	b.n	8002246 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	492d      	ldr	r1, [pc, #180]	; (8002250 <HAL_RTC_Init+0x120>)
 800219a:	400a      	ands	r2, r1
 800219c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68d2      	ldr	r2, [r2, #12]
 80021c4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6919      	ldr	r1, [r3, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	438a      	bics	r2, r1
 80021e8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2220      	movs	r2, #32
 80021f2:	4013      	ands	r3, r2
 80021f4:	d10e      	bne.n	8002214 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 fa3d 	bl	8002678 <HAL_RTC_WaitForSynchro>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d008      	beq.n	8002214 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	22ff      	movs	r2, #255	; 0xff
 8002208:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2204      	movs	r2, #4
 800220e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e018      	b.n	8002246 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	490d      	ldr	r1, [pc, #52]	; (8002254 <HAL_RTC_Init+0x124>)
 8002220:	400a      	ands	r2, r1
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	22ff      	movs	r2, #255	; 0xff
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002244:	2300      	movs	r3, #0
  }
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b002      	add	sp, #8
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	ff8fffbf 	.word	0xff8fffbf
 8002254:	fffbffff 	.word	0xfffbffff

08002258 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	7f1b      	ldrb	r3, [r3, #28]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_RTC_SetTime+0x1c>
 8002270:	2302      	movs	r3, #2
 8002272:	e0a5      	b.n	80023c0 <HAL_RTC_SetTime+0x168>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2202      	movs	r2, #2
 800227e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d125      	bne.n	80022d2 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	4013      	ands	r3, r2
 8002290:	d102      	bne.n	8002298 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	0018      	movs	r0, r3
 800229e:	f000 fa40 	bl	8002722 <RTC_ByteToBcd2>
 80022a2:	0003      	movs	r3, r0
 80022a4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 fa39 	bl	8002722 <RTC_ByteToBcd2>
 80022b0:	0003      	movs	r3, r0
 80022b2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80022b4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	789b      	ldrb	r3, [r3, #2]
 80022ba:	0018      	movs	r0, r3
 80022bc:	f000 fa31 	bl	8002722 <RTC_ByteToBcd2>
 80022c0:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80022c2:	0022      	movs	r2, r4
 80022c4:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	78db      	ldrb	r3, [r3, #3]
 80022ca:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e017      	b.n	8002302 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	4013      	ands	r3, r2
 80022dc:	d102      	bne.n	80022e4 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2200      	movs	r2, #0
 80022e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	785b      	ldrb	r3, [r3, #1]
 80022ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80022f0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80022f6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	78db      	ldrb	r3, [r3, #3]
 80022fc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	22ca      	movs	r2, #202	; 0xca
 8002308:	625a      	str	r2, [r3, #36]	; 0x24
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2253      	movs	r2, #83	; 0x53
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	0018      	movs	r0, r3
 8002316:	f000 f9d8 	bl	80026ca <RTC_EnterInitMode>
 800231a:	1e03      	subs	r3, r0, #0
 800231c:	d00b      	beq.n	8002336 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	22ff      	movs	r2, #255	; 0xff
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2204      	movs	r2, #4
 800232a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e044      	b.n	80023c0 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4922      	ldr	r1, [pc, #136]	; (80023c8 <HAL_RTC_SetTime+0x170>)
 800233e:	400a      	ands	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	491f      	ldr	r1, [pc, #124]	; (80023cc <HAL_RTC_SetTime+0x174>)
 800234e:	400a      	ands	r2, r1
 8002350:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6899      	ldr	r1, [r3, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	431a      	orrs	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	438a      	bics	r2, r1
 8002378:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2220      	movs	r2, #32
 8002382:	4013      	ands	r3, r2
 8002384:	d111      	bne.n	80023aa <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	0018      	movs	r0, r3
 800238a:	f000 f975 	bl	8002678 <HAL_RTC_WaitForSynchro>
 800238e:	1e03      	subs	r3, r0, #0
 8002390:	d00b      	beq.n	80023aa <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	22ff      	movs	r2, #255	; 0xff
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2204      	movs	r2, #4
 800239e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00a      	b.n	80023c0 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	22ff      	movs	r2, #255	; 0xff
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80023be:	2300      	movs	r3, #0
  }
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b007      	add	sp, #28
 80023c6:	bd90      	pop	{r4, r7, pc}
 80023c8:	007f7f7f 	.word	0x007f7f7f
 80023cc:	fffbffff 	.word	0xfffbffff

080023d0 <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	045b      	lsls	r3, r3, #17
 80023f2:	0c5a      	lsrs	r2, r3, #17
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a22      	ldr	r2, [pc, #136]	; (8002488 <HAL_RTC_GetTime+0xb8>)
 8002400:	4013      	ands	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	0c1b      	lsrs	r3, r3, #16
 8002408:	b2db      	uxtb	r3, r3
 800240a:	223f      	movs	r2, #63	; 0x3f
 800240c:	4013      	ands	r3, r2
 800240e:	b2da      	uxtb	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	b2db      	uxtb	r3, r3
 800241a:	227f      	movs	r2, #127	; 0x7f
 800241c:	4013      	ands	r3, r2
 800241e:	b2da      	uxtb	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	227f      	movs	r2, #127	; 0x7f
 800242a:	4013      	ands	r3, r2
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2240      	movs	r2, #64	; 0x40
 800243a:	4013      	ands	r3, r2
 800243c:	b2da      	uxtb	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d11a      	bne.n	800247e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	0018      	movs	r0, r3
 800244e:	f000 f989 	bl	8002764 <RTC_Bcd2ToByte>
 8002452:	0003      	movs	r3, r0
 8002454:	001a      	movs	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	785b      	ldrb	r3, [r3, #1]
 800245e:	0018      	movs	r0, r3
 8002460:	f000 f980 	bl	8002764 <RTC_Bcd2ToByte>
 8002464:	0003      	movs	r3, r0
 8002466:	001a      	movs	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	789b      	ldrb	r3, [r3, #2]
 8002470:	0018      	movs	r0, r3
 8002472:	f000 f977 	bl	8002764 <RTC_Bcd2ToByte>
 8002476:	0003      	movs	r3, r0
 8002478:	001a      	movs	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b006      	add	sp, #24
 8002486:	bd80      	pop	{r7, pc}
 8002488:	007f7f7f 	.word	0x007f7f7f

0800248c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	7f1b      	ldrb	r3, [r3, #28]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_RTC_SetDate+0x1c>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e091      	b.n	80025cc <HAL_RTC_SetDate+0x140>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2202      	movs	r2, #2
 80024b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10e      	bne.n	80024d8 <HAL_RTC_SetDate+0x4c>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	785b      	ldrb	r3, [r3, #1]
 80024be:	001a      	movs	r2, r3
 80024c0:	2310      	movs	r3, #16
 80024c2:	4013      	ands	r3, r2
 80024c4:	d008      	beq.n	80024d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	785b      	ldrb	r3, [r3, #1]
 80024ca:	2210      	movs	r2, #16
 80024cc:	4393      	bics	r3, r2
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	330a      	adds	r3, #10
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d11c      	bne.n	8002518 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	78db      	ldrb	r3, [r3, #3]
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 f91d 	bl	8002722 <RTC_ByteToBcd2>
 80024e8:	0003      	movs	r3, r0
 80024ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 f916 	bl	8002722 <RTC_ByteToBcd2>
 80024f6:	0003      	movs	r3, r0
 80024f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80024fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	789b      	ldrb	r3, [r3, #2]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f90e 	bl	8002722 <RTC_ByteToBcd2>
 8002506:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002508:	0022      	movs	r2, r4
 800250a:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e00e      	b.n	8002536 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	78db      	ldrb	r3, [r3, #3]
 800251c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	785b      	ldrb	r3, [r3, #1]
 8002522:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002524:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800252a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	22ca      	movs	r2, #202	; 0xca
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2253      	movs	r2, #83	; 0x53
 8002544:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	0018      	movs	r0, r3
 800254a:	f000 f8be 	bl	80026ca <RTC_EnterInitMode>
 800254e:	1e03      	subs	r3, r0, #0
 8002550:	d00b      	beq.n	800256a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	22ff      	movs	r2, #255	; 0xff
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2204      	movs	r2, #4
 800255e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e030      	b.n	80025cc <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4918      	ldr	r1, [pc, #96]	; (80025d4 <HAL_RTC_SetDate+0x148>)
 8002572:	400a      	ands	r2, r1
 8002574:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2180      	movs	r1, #128	; 0x80
 8002582:	438a      	bics	r2, r1
 8002584:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2220      	movs	r2, #32
 800258e:	4013      	ands	r3, r2
 8002590:	d111      	bne.n	80025b6 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	0018      	movs	r0, r3
 8002596:	f000 f86f 	bl	8002678 <HAL_RTC_WaitForSynchro>
 800259a:	1e03      	subs	r3, r0, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	22ff      	movs	r2, #255	; 0xff
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2204      	movs	r2, #4
 80025aa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e00a      	b.n	80025cc <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	22ff      	movs	r2, #255	; 0xff
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80025ca:	2300      	movs	r3, #0
  }
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b007      	add	sp, #28
 80025d2:	bd90      	pop	{r4, r7, pc}
 80025d4:	00ffff3f 	.word	0x00ffff3f

080025d8 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4a21      	ldr	r2, [pc, #132]	; (8002674 <HAL_RTC_GetDate+0x9c>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	0c1b      	lsrs	r3, r3, #16
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b2db      	uxtb	r3, r3
 8002604:	221f      	movs	r2, #31
 8002606:	4013      	ands	r3, r2
 8002608:	b2da      	uxtb	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	223f      	movs	r2, #63	; 0x3f
 8002614:	4013      	ands	r3, r2
 8002616:	b2da      	uxtb	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	0b5b      	lsrs	r3, r3, #13
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2207      	movs	r2, #7
 8002624:	4013      	ands	r3, r2
 8002626:	b2da      	uxtb	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11a      	bne.n	8002668 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	78db      	ldrb	r3, [r3, #3]
 8002636:	0018      	movs	r0, r3
 8002638:	f000 f894 	bl	8002764 <RTC_Bcd2ToByte>
 800263c:	0003      	movs	r3, r0
 800263e:	001a      	movs	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	785b      	ldrb	r3, [r3, #1]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f88b 	bl	8002764 <RTC_Bcd2ToByte>
 800264e:	0003      	movs	r3, r0
 8002650:	001a      	movs	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	789b      	ldrb	r3, [r3, #2]
 800265a:	0018      	movs	r0, r3
 800265c:	f000 f882 	bl	8002764 <RTC_Bcd2ToByte>
 8002660:	0003      	movs	r3, r0
 8002662:	001a      	movs	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b006      	add	sp, #24
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	00ffff3f 	.word	0x00ffff3f

08002678 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	21a0      	movs	r1, #160	; 0xa0
 8002690:	438a      	bics	r2, r1
 8002692:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002694:	f7fe fcf6 	bl	8001084 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800269e:	f7fe fcf1 	bl	8001084 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad2      	subs	r2, r2, r3
 80026a8:	23fa      	movs	r3, #250	; 0xfa
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d901      	bls.n	80026b4 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e006      	b.n	80026c2 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	4013      	ands	r3, r2
 80026be:	d0ee      	beq.n	800269e <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b004      	add	sp, #16
 80026c8:	bd80      	pop	{r7, pc}

080026ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2240      	movs	r2, #64	; 0x40
 80026de:	4013      	ands	r3, r2
 80026e0:	d11a      	bne.n	8002718 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	4252      	negs	r2, r2
 80026ea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80026ec:	f7fe fcca 	bl	8001084 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80026f4:	e00a      	b.n	800270c <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026f6:	f7fe fcc5 	bl	8001084 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad2      	subs	r2, r2, r3
 8002700:	23fa      	movs	r3, #250	; 0xfa
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d901      	bls.n	800270c <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e006      	b.n	800271a <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2240      	movs	r2, #64	; 0x40
 8002714:	4013      	ands	r3, r2
 8002716:	d0ee      	beq.n	80026f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b004      	add	sp, #16
 8002720:	bd80      	pop	{r7, pc}

08002722 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	0002      	movs	r2, r0
 800272a:	1dfb      	adds	r3, r7, #7
 800272c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002732:	e007      	b.n	8002744 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3301      	adds	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800273a:	1dfb      	adds	r3, r7, #7
 800273c:	1dfa      	adds	r2, r7, #7
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	3a0a      	subs	r2, #10
 8002742:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8002744:	1dfb      	adds	r3, r7, #7
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b09      	cmp	r3, #9
 800274a:	d8f3      	bhi.n	8002734 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	b2da      	uxtb	r2, r3
 8002754:	1dfb      	adds	r3, r7, #7
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4313      	orrs	r3, r2
 800275a:	b2db      	uxtb	r3, r3
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b004      	add	sp, #16
 8002762:	bd80      	pop	{r7, pc}

08002764 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	0002      	movs	r2, r0
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002774:	1dfb      	adds	r3, r7, #7
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	b2db      	uxtb	r3, r3
 800277c:	001a      	movs	r2, r3
 800277e:	0013      	movs	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	189b      	adds	r3, r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8002788:	1dfb      	adds	r3, r7, #7
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	220f      	movs	r2, #15
 800278e:	4013      	ands	r3, r2
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	18d3      	adds	r3, r2, r3
 8002798:	b2db      	uxtb	r3, r3
}
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b004      	add	sp, #16
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e01e      	b.n	80027f2 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	223d      	movs	r2, #61	; 0x3d
 80027b8:	5c9b      	ldrb	r3, [r3, r2]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d107      	bne.n	80027d0 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	223c      	movs	r2, #60	; 0x3c
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f7fe f954 	bl	8000a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	223d      	movs	r2, #61	; 0x3d
 80027d4:	2102      	movs	r1, #2
 80027d6:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	0019      	movs	r1, r3
 80027e2:	0010      	movs	r0, r2
 80027e4:	f000 fabc 	bl	8002d60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	223d      	movs	r2, #61	; 0x3d
 80027ec:	2101      	movs	r1, #1
 80027ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b002      	add	sp, #8
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	430a      	orrs	r2, r1
 8002810:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2207      	movs	r2, #7
 800281a:	4013      	ands	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d007      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b004      	add	sp, #16
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	438a      	bics	r2, r1
 8002856:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <HAL_TIM_Base_Stop_IT+0x4c>)
 8002860:	4013      	ands	r3, r2
 8002862:	d10d      	bne.n	8002880 <HAL_TIM_Base_Stop_IT+0x40>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_TIM_Base_Stop_IT+0x50>)
 800286c:	4013      	ands	r3, r2
 800286e:	d107      	bne.n	8002880 <HAL_TIM_Base_Stop_IT+0x40>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2101      	movs	r1, #1
 800287c:	438a      	bics	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b002      	add	sp, #8
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	00001111 	.word	0x00001111
 8002890:	00000444 	.word	0x00000444

08002894 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e01e      	b.n	80028e4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	223d      	movs	r2, #61	; 0x3d
 80028aa:	5c9b      	ldrb	r3, [r3, r2]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	223c      	movs	r2, #60	; 0x3c
 80028b6:	2100      	movs	r1, #0
 80028b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0018      	movs	r0, r3
 80028be:	f7fe f8bd 	bl	8000a3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	223d      	movs	r2, #61	; 0x3d
 80028c6:	2102      	movs	r1, #2
 80028c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3304      	adds	r3, #4
 80028d2:	0019      	movs	r1, r3
 80028d4:	0010      	movs	r0, r2
 80028d6:	f000 fa43 	bl	8002d60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	223d      	movs	r2, #61	; 0x3d
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6839      	ldr	r1, [r7, #0]
 80028fc:	2201      	movs	r2, #1
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 fca0 	bl	8003244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <HAL_TIM_PWM_Start+0x88>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00e      	beq.n	800292c <HAL_TIM_PWM_Start+0x40>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_TIM_PWM_Start+0x8c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_TIM_PWM_Start+0x40>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a17      	ldr	r2, [pc, #92]	; (800297c <HAL_TIM_PWM_Start+0x90>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d004      	beq.n	800292c <HAL_TIM_PWM_Start+0x40>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a16      	ldr	r2, [pc, #88]	; (8002980 <HAL_TIM_PWM_Start+0x94>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_TIM_PWM_Start+0x44>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <HAL_TIM_PWM_Start+0x46>
 8002930:	2300      	movs	r3, #0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2180      	movs	r1, #128	; 0x80
 8002942:	0209      	lsls	r1, r1, #8
 8002944:	430a      	orrs	r2, r1
 8002946:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2207      	movs	r2, #7
 8002950:	4013      	ands	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b06      	cmp	r3, #6
 8002958:	d007      	beq.n	800296a <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	b004      	add	sp, #16
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40014000 	.word	0x40014000
 800297c:	40014400 	.word	0x40014400
 8002980:	40014800 	.word	0x40014800

08002984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2202      	movs	r2, #2
 8002994:	4013      	ands	r3, r2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d124      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2202      	movs	r2, #2
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d11d      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2203      	movs	r2, #3
 80029ae:	4252      	negs	r2, r2
 80029b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2203      	movs	r2, #3
 80029c0:	4013      	ands	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 f9b2 	bl	8002d30 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e007      	b.n	80029de <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 f9a5 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 f9b1 	bl	8002d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2204      	movs	r2, #4
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d125      	bne.n	8002a3e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2204      	movs	r2, #4
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d11e      	bne.n	8002a3e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2205      	movs	r2, #5
 8002a06:	4252      	negs	r2, r2
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	23c0      	movs	r3, #192	; 0xc0
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f985 	bl	8002d30 <HAL_TIM_IC_CaptureCallback>
 8002a26:	e007      	b.n	8002a38 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 f978 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f984 	bl	8002d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2208      	movs	r2, #8
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d124      	bne.n	8002a96 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2208      	movs	r2, #8
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d11d      	bne.n	8002a96 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2209      	movs	r2, #9
 8002a60:	4252      	negs	r2, r2
 8002a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2204      	movs	r2, #4
 8002a68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2203      	movs	r2, #3
 8002a72:	4013      	ands	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f000 f959 	bl	8002d30 <HAL_TIM_IC_CaptureCallback>
 8002a7e:	e007      	b.n	8002a90 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f94c 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 f958 	bl	8002d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d125      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2210      	movs	r2, #16
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d11e      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2211      	movs	r2, #17
 8002ab8:	4252      	negs	r2, r2
 8002aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2208      	movs	r2, #8
 8002ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	23c0      	movs	r3, #192	; 0xc0
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4013      	ands	r3, r2
 8002ace:	d004      	beq.n	8002ada <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f000 f92c 	bl	8002d30 <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e007      	b.n	8002aea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 f91f 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 f92b 	bl	8002d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2201      	movs	r2, #1
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10f      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d108      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2202      	movs	r2, #2
 8002b12:	4252      	negs	r2, r2
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7fd fb89 	bl	8000230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d10f      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b80      	cmp	r3, #128	; 0x80
 8002b38:	d108      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2281      	movs	r2, #129	; 0x81
 8002b40:	4252      	negs	r2, r2
 8002b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 fc00 	bl	800334c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2240      	movs	r2, #64	; 0x40
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b40      	cmp	r3, #64	; 0x40
 8002b58:	d10f      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2240      	movs	r2, #64	; 0x40
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d108      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2241      	movs	r2, #65	; 0x41
 8002b6e:	4252      	negs	r2, r2
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f8eb 	bl	8002d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2220      	movs	r2, #32
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d10f      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	d108      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2221      	movs	r2, #33	; 0x21
 8002b9c:	4252      	negs	r2, r2
 8002b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 fbca 	bl	800333c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	223c      	movs	r2, #60	; 0x3c
 8002bc0:	5c9b      	ldrb	r3, [r3, r2]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e0a4      	b.n	8002d14 <HAL_TIM_PWM_ConfigChannel+0x164>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	223c      	movs	r2, #60	; 0x3c
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	223d      	movs	r2, #61	; 0x3d
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d029      	beq.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002be0:	d802      	bhi.n	8002be8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002be6:	e08c      	b.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d046      	beq.n	8002c7a <HAL_TIM_PWM_ConfigChannel+0xca>
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d065      	beq.n	8002cbc <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002bf0:	e087      	b.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	0011      	movs	r1, r2
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 f926 	bl	8002e4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2108      	movs	r1, #8
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2104      	movs	r1, #4
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6999      	ldr	r1, [r3, #24]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	619a      	str	r2, [r3, #24]
      break;
 8002c32:	e066      	b.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	0011      	movs	r1, r2
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 f98d 	bl	8002f5c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	0109      	lsls	r1, r1, #4
 8002c50:	430a      	orrs	r2, r1
 8002c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	492f      	ldr	r1, [pc, #188]	; (8002d1c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002c60:	400a      	ands	r2, r1
 8002c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6999      	ldr	r1, [r3, #24]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	021a      	lsls	r2, r3, #8
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	619a      	str	r2, [r3, #24]
      break;
 8002c78:	e043      	b.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	0011      	movs	r1, r2
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 f9ee 	bl	8003064 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2108      	movs	r1, #8
 8002c94:	430a      	orrs	r2, r1
 8002c96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69d9      	ldr	r1, [r3, #28]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	61da      	str	r2, [r3, #28]
      break;
 8002cba:	e022      	b.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 fa53 	bl	8003170 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2180      	movs	r1, #128	; 0x80
 8002cd6:	0109      	lsls	r1, r1, #4
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	490d      	ldr	r1, [pc, #52]	; (8002d1c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69d9      	ldr	r1, [r3, #28]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	021a      	lsls	r2, r3, #8
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	61da      	str	r2, [r3, #28]
      break;
 8002d00:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	223d      	movs	r2, #61	; 0x3d
 8002d06:	2101      	movs	r1, #1
 8002d08:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	223c      	movs	r2, #60	; 0x3c
 8002d0e:	2100      	movs	r1, #0
 8002d10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b004      	add	sp, #16
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	fffffbff 	.word	0xfffffbff

08002d20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a2f      	ldr	r2, [pc, #188]	; (8002e30 <TIM_Base_SetConfig+0xd0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0x20>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <TIM_Base_SetConfig+0xd4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d108      	bne.n	8002d92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2270      	movs	r2, #112	; 0x70
 8002d84:	4393      	bics	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a26      	ldr	r2, [pc, #152]	; (8002e30 <TIM_Base_SetConfig+0xd0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <TIM_Base_SetConfig+0x62>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a25      	ldr	r2, [pc, #148]	; (8002e34 <TIM_Base_SetConfig+0xd4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00f      	beq.n	8002dc2 <TIM_Base_SetConfig+0x62>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a24      	ldr	r2, [pc, #144]	; (8002e38 <TIM_Base_SetConfig+0xd8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00b      	beq.n	8002dc2 <TIM_Base_SetConfig+0x62>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a23      	ldr	r2, [pc, #140]	; (8002e3c <TIM_Base_SetConfig+0xdc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <TIM_Base_SetConfig+0x62>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <TIM_Base_SetConfig+0xe0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d003      	beq.n	8002dc2 <TIM_Base_SetConfig+0x62>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <TIM_Base_SetConfig+0xe4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d108      	bne.n	8002dd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <TIM_Base_SetConfig+0xe8>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	4393      	bics	r3, r2
 8002dda:	001a      	movs	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a0c      	ldr	r2, [pc, #48]	; (8002e30 <TIM_Base_SetConfig+0xd0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00b      	beq.n	8002e1a <TIM_Base_SetConfig+0xba>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a0d      	ldr	r2, [pc, #52]	; (8002e3c <TIM_Base_SetConfig+0xdc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <TIM_Base_SetConfig+0xba>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a0c      	ldr	r2, [pc, #48]	; (8002e40 <TIM_Base_SetConfig+0xe0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d003      	beq.n	8002e1a <TIM_Base_SetConfig+0xba>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <TIM_Base_SetConfig+0xe4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d103      	bne.n	8002e22 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	615a      	str	r2, [r3, #20]
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b004      	add	sp, #16
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40002000 	.word	0x40002000
 8002e3c:	40014000 	.word	0x40014000
 8002e40:	40014400 	.word	0x40014400
 8002e44:	40014800 	.word	0x40014800
 8002e48:	fffffcff 	.word	0xfffffcff

08002e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	001a      	movs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2270      	movs	r2, #112	; 0x70
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2203      	movs	r2, #3
 8002e82:	4393      	bics	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2202      	movs	r2, #2
 8002e94:	4393      	bics	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <TIM_OC1_SetConfig+0xf8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00b      	beq.n	8002ec2 <TIM_OC1_SetConfig+0x76>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <TIM_OC1_SetConfig+0xfc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d007      	beq.n	8002ec2 <TIM_OC1_SetConfig+0x76>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a25      	ldr	r2, [pc, #148]	; (8002f4c <TIM_OC1_SetConfig+0x100>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d003      	beq.n	8002ec2 <TIM_OC1_SetConfig+0x76>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a24      	ldr	r2, [pc, #144]	; (8002f50 <TIM_OC1_SetConfig+0x104>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10c      	bne.n	8002edc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	4393      	bics	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	4393      	bics	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <TIM_OC1_SetConfig+0xf8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <TIM_OC1_SetConfig+0xb0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <TIM_OC1_SetConfig+0xfc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <TIM_OC1_SetConfig+0xb0>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <TIM_OC1_SetConfig+0x100>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_OC1_SetConfig+0xb0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <TIM_OC1_SetConfig+0x104>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d111      	bne.n	8002f20 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4a15      	ldr	r2, [pc, #84]	; (8002f54 <TIM_OC1_SetConfig+0x108>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <TIM_OC1_SetConfig+0x10c>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b006      	add	sp, #24
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40014000 	.word	0x40014000
 8002f4c:	40014400 	.word	0x40014400
 8002f50:	40014800 	.word	0x40014800
 8002f54:	fffffeff 	.word	0xfffffeff
 8002f58:	fffffdff 	.word	0xfffffdff

08002f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	4393      	bics	r3, r2
 8002f6e:	001a      	movs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a2e      	ldr	r2, [pc, #184]	; (8003044 <TIM_OC2_SetConfig+0xe8>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4a2d      	ldr	r2, [pc, #180]	; (8003048 <TIM_OC2_SetConfig+0xec>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	4393      	bics	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a24      	ldr	r2, [pc, #144]	; (800304c <TIM_OC2_SetConfig+0xf0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10d      	bne.n	8002fda <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	4393      	bics	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	4393      	bics	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a1b      	ldr	r2, [pc, #108]	; (800304c <TIM_OC2_SetConfig+0xf0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00b      	beq.n	8002ffa <TIM_OC2_SetConfig+0x9e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <TIM_OC2_SetConfig+0xf4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d007      	beq.n	8002ffa <TIM_OC2_SetConfig+0x9e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a19      	ldr	r2, [pc, #100]	; (8003054 <TIM_OC2_SetConfig+0xf8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d003      	beq.n	8002ffa <TIM_OC2_SetConfig+0x9e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a18      	ldr	r2, [pc, #96]	; (8003058 <TIM_OC2_SetConfig+0xfc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d113      	bne.n	8003022 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4a17      	ldr	r2, [pc, #92]	; (800305c <TIM_OC2_SetConfig+0x100>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4a16      	ldr	r2, [pc, #88]	; (8003060 <TIM_OC2_SetConfig+0x104>)
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	621a      	str	r2, [r3, #32]
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b006      	add	sp, #24
 8003042:	bd80      	pop	{r7, pc}
 8003044:	ffff8fff 	.word	0xffff8fff
 8003048:	fffffcff 	.word	0xfffffcff
 800304c:	40012c00 	.word	0x40012c00
 8003050:	40014000 	.word	0x40014000
 8003054:	40014400 	.word	0x40014400
 8003058:	40014800 	.word	0x40014800
 800305c:	fffffbff 	.word	0xfffffbff
 8003060:	fffff7ff 	.word	0xfffff7ff

08003064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4a35      	ldr	r2, [pc, #212]	; (8003148 <TIM_OC3_SetConfig+0xe4>)
 8003074:	401a      	ands	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2270      	movs	r2, #112	; 0x70
 8003090:	4393      	bics	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2203      	movs	r2, #3
 8003098:	4393      	bics	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	4a28      	ldr	r2, [pc, #160]	; (800314c <TIM_OC3_SetConfig+0xe8>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a24      	ldr	r2, [pc, #144]	; (8003150 <TIM_OC3_SetConfig+0xec>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10d      	bne.n	80030de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	4a23      	ldr	r2, [pc, #140]	; (8003154 <TIM_OC3_SetConfig+0xf0>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	4a1f      	ldr	r2, [pc, #124]	; (8003158 <TIM_OC3_SetConfig+0xf4>)
 80030da:	4013      	ands	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <TIM_OC3_SetConfig+0xec>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00b      	beq.n	80030fe <TIM_OC3_SetConfig+0x9a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1c      	ldr	r2, [pc, #112]	; (800315c <TIM_OC3_SetConfig+0xf8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <TIM_OC3_SetConfig+0x9a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <TIM_OC3_SetConfig+0xfc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_OC3_SetConfig+0x9a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <TIM_OC3_SetConfig+0x100>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d113      	bne.n	8003126 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4a19      	ldr	r2, [pc, #100]	; (8003168 <TIM_OC3_SetConfig+0x104>)
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4a18      	ldr	r2, [pc, #96]	; (800316c <TIM_OC3_SetConfig+0x108>)
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b006      	add	sp, #24
 8003146:	bd80      	pop	{r7, pc}
 8003148:	fffffeff 	.word	0xfffffeff
 800314c:	fffffdff 	.word	0xfffffdff
 8003150:	40012c00 	.word	0x40012c00
 8003154:	fffff7ff 	.word	0xfffff7ff
 8003158:	fffffbff 	.word	0xfffffbff
 800315c:	40014000 	.word	0x40014000
 8003160:	40014400 	.word	0x40014400
 8003164:	40014800 	.word	0x40014800
 8003168:	ffffefff 	.word	0xffffefff
 800316c:	ffffdfff 	.word	0xffffdfff

08003170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4a28      	ldr	r2, [pc, #160]	; (8003220 <TIM_OC4_SetConfig+0xb0>)
 8003180:	401a      	ands	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4a22      	ldr	r2, [pc, #136]	; (8003224 <TIM_OC4_SetConfig+0xb4>)
 800319c:	4013      	ands	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4a21      	ldr	r2, [pc, #132]	; (8003228 <TIM_OC4_SetConfig+0xb8>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4a1d      	ldr	r2, [pc, #116]	; (800322c <TIM_OC4_SetConfig+0xbc>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	031b      	lsls	r3, r3, #12
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a19      	ldr	r2, [pc, #100]	; (8003230 <TIM_OC4_SetConfig+0xc0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <TIM_OC4_SetConfig+0x78>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a18      	ldr	r2, [pc, #96]	; (8003234 <TIM_OC4_SetConfig+0xc4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <TIM_OC4_SetConfig+0x78>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a17      	ldr	r2, [pc, #92]	; (8003238 <TIM_OC4_SetConfig+0xc8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_OC4_SetConfig+0x78>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a16      	ldr	r2, [pc, #88]	; (800323c <TIM_OC4_SetConfig+0xcc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d109      	bne.n	80031fc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	4a15      	ldr	r2, [pc, #84]	; (8003240 <TIM_OC4_SetConfig+0xd0>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	019b      	lsls	r3, r3, #6
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b006      	add	sp, #24
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	ffffefff 	.word	0xffffefff
 8003224:	ffff8fff 	.word	0xffff8fff
 8003228:	fffffcff 	.word	0xfffffcff
 800322c:	ffffdfff 	.word	0xffffdfff
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40014000 	.word	0x40014000
 8003238:	40014400 	.word	0x40014400
 800323c:	40014800 	.word	0x40014800
 8003240:	ffffbfff 	.word	0xffffbfff

08003244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	221f      	movs	r2, #31
 8003254:	4013      	ands	r3, r2
 8003256:	2201      	movs	r2, #1
 8003258:	409a      	lsls	r2, r3
 800325a:	0013      	movs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	43d2      	mvns	r2, r2
 8003266:	401a      	ands	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1a      	ldr	r2, [r3, #32]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	211f      	movs	r1, #31
 8003274:	400b      	ands	r3, r1
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4099      	lsls	r1, r3
 800327a:	000b      	movs	r3, r1
 800327c:	431a      	orrs	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	b006      	add	sp, #24
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	223c      	movs	r2, #60	; 0x3c
 800329a:	5c9b      	ldrb	r3, [r3, r2]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e041      	b.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	223c      	movs	r2, #60	; 0x3c
 80032a8:	2101      	movs	r1, #1
 80032aa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	223d      	movs	r2, #61	; 0x3d
 80032b0:	2102      	movs	r1, #2
 80032b2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2270      	movs	r2, #112	; 0x70
 80032c8:	4393      	bics	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a13      	ldr	r2, [pc, #76]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d009      	beq.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a11      	ldr	r2, [pc, #68]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d004      	beq.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a10      	ldr	r2, [pc, #64]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10c      	bne.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2280      	movs	r2, #128	; 0x80
 8003300:	4393      	bics	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	4313      	orrs	r3, r2
 800330c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	223d      	movs	r2, #61	; 0x3d
 800331a:	2101      	movs	r1, #1
 800331c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	223c      	movs	r2, #60	; 0x3c
 8003322:	2100      	movs	r1, #0
 8003324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b004      	add	sp, #16
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40000400 	.word	0x40000400
 8003338:	40014000 	.word	0x40014000

0800333c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e044      	b.n	80033f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003372:	2b00      	cmp	r3, #0
 8003374:	d107      	bne.n	8003386 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2270      	movs	r2, #112	; 0x70
 800337a:	2100      	movs	r1, #0
 800337c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	0018      	movs	r0, r3
 8003382:	f7fd fc29 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2224      	movs	r2, #36	; 0x24
 800338a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2101      	movs	r1, #1
 8003398:	438a      	bics	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 fa10 	bl	80037c4 <UART_SetConfig>
 80033a4:	0003      	movs	r3, r0
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e024      	b.n	80033f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 fb89 	bl	8003ad0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	490d      	ldr	r1, [pc, #52]	; (8003400 <HAL_UART_Init+0xa4>)
 80033ca:	400a      	ands	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2108      	movs	r1, #8
 80033da:	438a      	bics	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 fc21 	bl	8003c38 <UART_CheckIdleState>
 80033f6:	0003      	movs	r3, r0
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	fffff7ff 	.word	0xfffff7ff

08003404 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	1dbb      	adds	r3, r7, #6
 8003412:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003418:	2b20      	cmp	r3, #32
 800341a:	d000      	beq.n	800341e <HAL_UART_Transmit+0x1a>
 800341c:	e095      	b.n	800354a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_UART_Transmit+0x28>
 8003424:	1dbb      	adds	r3, r7, #6
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e08d      	b.n	800354c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	015b      	lsls	r3, r3, #5
 8003438:	429a      	cmp	r2, r3
 800343a:	d109      	bne.n	8003450 <HAL_UART_Transmit+0x4c>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2201      	movs	r2, #1
 8003448:	4013      	ands	r3, r2
 800344a:	d001      	beq.n	8003450 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e07d      	b.n	800354c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2270      	movs	r2, #112	; 0x70
 8003454:	5c9b      	ldrb	r3, [r3, r2]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_UART_Transmit+0x5a>
 800345a:	2302      	movs	r3, #2
 800345c:	e076      	b.n	800354c <HAL_UART_Transmit+0x148>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2270      	movs	r2, #112	; 0x70
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2221      	movs	r2, #33	; 0x21
 8003470:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003472:	f7fd fe07 	bl	8001084 <HAL_GetTick>
 8003476:	0003      	movs	r3, r0
 8003478:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1dba      	adds	r2, r7, #6
 800347e:	2150      	movs	r1, #80	; 0x50
 8003480:	8812      	ldrh	r2, [r2, #0]
 8003482:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1dba      	adds	r2, r7, #6
 8003488:	2152      	movs	r1, #82	; 0x52
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	015b      	lsls	r3, r3, #5
 8003496:	429a      	cmp	r2, r3
 8003498:	d108      	bne.n	80034ac <HAL_UART_Transmit+0xa8>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	e003      	b.n	80034b4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034b4:	e02d      	b.n	8003512 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	0013      	movs	r3, r2
 80034c0:	2200      	movs	r2, #0
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	f000 fbfe 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 80034c8:	1e03      	subs	r3, r0, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e03d      	b.n	800354c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	881a      	ldrh	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	05d2      	lsls	r2, r2, #23
 80034e0:	0dd2      	lsrs	r2, r2, #23
 80034e2:	b292      	uxth	r2, r2
 80034e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	3302      	adds	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
 80034ec:	e008      	b.n	8003500 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	b292      	uxth	r2, r2
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3301      	adds	r3, #1
 80034fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2252      	movs	r2, #82	; 0x52
 8003504:	5a9b      	ldrh	r3, [r3, r2]
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b299      	uxth	r1, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2252      	movs	r2, #82	; 0x52
 8003510:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2252      	movs	r2, #82	; 0x52
 8003516:	5a9b      	ldrh	r3, [r3, r2]
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1cb      	bne.n	80034b6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	0013      	movs	r3, r2
 8003528:	2200      	movs	r2, #0
 800352a:	2140      	movs	r1, #64	; 0x40
 800352c:	f000 fbca 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 8003530:	1e03      	subs	r3, r0, #0
 8003532:	d001      	beq.n	8003538 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e009      	b.n	800354c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2270      	movs	r2, #112	; 0x70
 8003542:	2100      	movs	r1, #0
 8003544:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e000      	b.n	800354c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800354a:	2302      	movs	r3, #2
  }
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b008      	add	sp, #32
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4a89      	ldr	r2, [pc, #548]	; (800379c <HAL_UART_IRQHandler+0x248>)
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d112      	bne.n	80035a8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	2220      	movs	r2, #32
 8003586:	4013      	ands	r3, r2
 8003588:	d00e      	beq.n	80035a8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2220      	movs	r2, #32
 800358e:	4013      	ands	r3, r2
 8003590:	d00a      	beq.n	80035a8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003596:	2b00      	cmp	r3, #0
 8003598:	d100      	bne.n	800359c <HAL_UART_IRQHandler+0x48>
 800359a:	e0f7      	b.n	800378c <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	0010      	movs	r0, r2
 80035a4:	4798      	blx	r3
      }
      return;
 80035a6:	e0f1      	b.n	800378c <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d100      	bne.n	80035b0 <HAL_UART_IRQHandler+0x5c>
 80035ae:	e0cd      	b.n	800374c <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2201      	movs	r2, #1
 80035b4:	4013      	ands	r3, r2
 80035b6:	d105      	bne.n	80035c4 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	2390      	movs	r3, #144	; 0x90
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4013      	ands	r3, r2
 80035c0:	d100      	bne.n	80035c4 <HAL_UART_IRQHandler+0x70>
 80035c2:	e0c3      	b.n	800374c <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2201      	movs	r2, #1
 80035c8:	4013      	ands	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_UART_IRQHandler+0x96>
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4013      	ands	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2201      	movs	r2, #1
 80035dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e2:	2201      	movs	r2, #1
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2202      	movs	r2, #2
 80035ee:	4013      	ands	r3, r2
 80035f0:	d00d      	beq.n	800360e <HAL_UART_IRQHandler+0xba>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4013      	ands	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2202      	movs	r2, #2
 8003600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003606:	2204      	movs	r2, #4
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	2204      	movs	r2, #4
 8003612:	4013      	ands	r3, r2
 8003614:	d00d      	beq.n	8003632 <HAL_UART_IRQHandler+0xde>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2201      	movs	r2, #1
 800361a:	4013      	ands	r3, r2
 800361c:	d009      	beq.n	8003632 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2204      	movs	r2, #4
 8003624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362a:	2202      	movs	r2, #2
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	2208      	movs	r2, #8
 8003636:	4013      	ands	r3, r2
 8003638:	d011      	beq.n	800365e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2220      	movs	r2, #32
 800363e:	4013      	ands	r3, r2
 8003640:	d103      	bne.n	800364a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2201      	movs	r2, #1
 8003646:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003648:	d009      	beq.n	800365e <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2208      	movs	r2, #8
 8003650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003656:	2208      	movs	r2, #8
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	4013      	ands	r3, r2
 8003666:	d00f      	beq.n	8003688 <HAL_UART_IRQHandler+0x134>
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	04db      	lsls	r3, r3, #19
 800366e:	4013      	ands	r3, r2
 8003670:	d00a      	beq.n	8003688 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003680:	2220      	movs	r2, #32
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d100      	bne.n	8003692 <HAL_UART_IRQHandler+0x13e>
 8003690:	e07e      	b.n	8003790 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2220      	movs	r2, #32
 8003696:	4013      	ands	r3, r2
 8003698:	d00c      	beq.n	80036b4 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2220      	movs	r2, #32
 800369e:	4013      	ands	r3, r2
 80036a0:	d008      	beq.n	80036b4 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d004      	beq.n	80036b4 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	0010      	movs	r0, r2
 80036b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2240      	movs	r2, #64	; 0x40
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d003      	beq.n	80036d0 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2228      	movs	r2, #40	; 0x28
 80036cc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ce:	d033      	beq.n	8003738 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	0018      	movs	r0, r3
 80036d4:	f000 fb74 	bl	8003dc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d123      	bne.n	800372e <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2140      	movs	r1, #64	; 0x40
 80036f2:	438a      	bics	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d012      	beq.n	8003724 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003702:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <HAL_UART_IRQHandler+0x24c>)
 8003704:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370a:	0018      	movs	r0, r3
 800370c:	f7fd fda2 	bl	8001254 <HAL_DMA_Abort_IT>
 8003710:	1e03      	subs	r3, r0, #0
 8003712:	d019      	beq.n	8003748 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371e:	0018      	movs	r0, r3
 8003720:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003722:	e011      	b.n	8003748 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	0018      	movs	r0, r3
 8003728:	f000 f844 	bl	80037b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372c:	e00c      	b.n	8003748 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	0018      	movs	r0, r3
 8003732:	f000 f83f 	bl	80037b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003736:	e007      	b.n	8003748 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	0018      	movs	r0, r3
 800373c:	f000 f83a 	bl	80037b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003746:	e023      	b.n	8003790 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003748:	46c0      	nop			; (mov r8, r8)
    return;
 800374a:	e021      	b.n	8003790 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	4013      	ands	r3, r2
 8003752:	d00d      	beq.n	8003770 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2280      	movs	r2, #128	; 0x80
 8003758:	4013      	ands	r3, r2
 800375a:	d009      	beq.n	8003770 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003760:	2b00      	cmp	r3, #0
 8003762:	d017      	beq.n	8003794 <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	0010      	movs	r0, r2
 800376c:	4798      	blx	r3
    }
    return;
 800376e:	e011      	b.n	8003794 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	4013      	ands	r3, r2
 8003776:	d00e      	beq.n	8003796 <HAL_UART_IRQHandler+0x242>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2240      	movs	r2, #64	; 0x40
 800377c:	4013      	ands	r3, r2
 800377e:	d00a      	beq.n	8003796 <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	0018      	movs	r0, r3
 8003784:	f000 fb53 	bl	8003e2e <UART_EndTransmit_IT>
    return;
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	e004      	b.n	8003796 <HAL_UART_IRQHandler+0x242>
      return;
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	e002      	b.n	8003796 <HAL_UART_IRQHandler+0x242>
    return;
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	e000      	b.n	8003796 <HAL_UART_IRQHandler+0x242>
    return;
 8003794:	46c0      	nop			; (mov r8, r8)
  }

}
 8003796:	46bd      	mov	sp, r7
 8003798:	b008      	add	sp, #32
 800379a:	bd80      	pop	{r7, pc}
 800379c:	0000080f 	.word	0x0000080f
 80037a0:	08003e01 	.word	0x08003e01

080037a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d0:	2317      	movs	r3, #23
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4aad      	ldr	r2, [pc, #692]	; (8003aac <UART_SetConfig+0x2e8>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	430a      	orrs	r2, r1
 8003804:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4aa8      	ldr	r2, [pc, #672]	; (8003ab0 <UART_SetConfig+0x2ec>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4a9f      	ldr	r2, [pc, #636]	; (8003ab4 <UART_SetConfig+0x2f0>)
 8003836:	4013      	ands	r3, r2
 8003838:	0019      	movs	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a9b      	ldr	r2, [pc, #620]	; (8003ab8 <UART_SetConfig+0x2f4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d125      	bne.n	800389a <UART_SetConfig+0xd6>
 800384e:	4b9b      	ldr	r3, [pc, #620]	; (8003abc <UART_SetConfig+0x2f8>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	2203      	movs	r2, #3
 8003854:	4013      	ands	r3, r2
 8003856:	2b01      	cmp	r3, #1
 8003858:	d00f      	beq.n	800387a <UART_SetConfig+0xb6>
 800385a:	d304      	bcc.n	8003866 <UART_SetConfig+0xa2>
 800385c:	2b02      	cmp	r3, #2
 800385e:	d011      	beq.n	8003884 <UART_SetConfig+0xc0>
 8003860:	2b03      	cmp	r3, #3
 8003862:	d005      	beq.n	8003870 <UART_SetConfig+0xac>
 8003864:	e013      	b.n	800388e <UART_SetConfig+0xca>
 8003866:	231f      	movs	r3, #31
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	e022      	b.n	80038b6 <UART_SetConfig+0xf2>
 8003870:	231f      	movs	r3, #31
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2202      	movs	r2, #2
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	e01d      	b.n	80038b6 <UART_SetConfig+0xf2>
 800387a:	231f      	movs	r3, #31
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2204      	movs	r2, #4
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	e018      	b.n	80038b6 <UART_SetConfig+0xf2>
 8003884:	231f      	movs	r3, #31
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2208      	movs	r2, #8
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e013      	b.n	80038b6 <UART_SetConfig+0xf2>
 800388e:	231f      	movs	r3, #31
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2210      	movs	r2, #16
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	e00d      	b.n	80038b6 <UART_SetConfig+0xf2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a88      	ldr	r2, [pc, #544]	; (8003ac0 <UART_SetConfig+0x2fc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d104      	bne.n	80038ae <UART_SetConfig+0xea>
 80038a4:	231f      	movs	r3, #31
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e003      	b.n	80038b6 <UART_SetConfig+0xf2>
 80038ae:	231f      	movs	r3, #31
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2210      	movs	r2, #16
 80038b4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	429a      	cmp	r2, r3
 80038c0:	d000      	beq.n	80038c4 <UART_SetConfig+0x100>
 80038c2:	e07d      	b.n	80039c0 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 80038c4:	231f      	movs	r3, #31
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d01c      	beq.n	8003908 <UART_SetConfig+0x144>
 80038ce:	dc02      	bgt.n	80038d6 <UART_SetConfig+0x112>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <UART_SetConfig+0x11c>
 80038d4:	e04b      	b.n	800396e <UART_SetConfig+0x1aa>
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d025      	beq.n	8003926 <UART_SetConfig+0x162>
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d037      	beq.n	800394e <UART_SetConfig+0x18a>
 80038de:	e046      	b.n	800396e <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e0:	f7fe fb42 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80038e4:	0003      	movs	r3, r0
 80038e6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	005a      	lsls	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	18d2      	adds	r2, r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	0019      	movs	r1, r3
 80038fa:	0010      	movs	r0, r2
 80038fc:	f7fc fc0c 	bl	8000118 <__udivsi3>
 8003900:	0003      	movs	r3, r0
 8003902:	b29b      	uxth	r3, r3
 8003904:	61bb      	str	r3, [r7, #24]
        break;
 8003906:	e037      	b.n	8003978 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	4a6d      	ldr	r2, [pc, #436]	; (8003ac4 <UART_SetConfig+0x300>)
 8003910:	189a      	adds	r2, r3, r2
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	0019      	movs	r1, r3
 8003918:	0010      	movs	r0, r2
 800391a:	f7fc fbfd 	bl	8000118 <__udivsi3>
 800391e:	0003      	movs	r3, r0
 8003920:	b29b      	uxth	r3, r3
 8003922:	61bb      	str	r3, [r7, #24]
        break;
 8003924:	e028      	b.n	8003978 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003926:	f7fe fab1 	bl	8001e8c <HAL_RCC_GetSysClockFreq>
 800392a:	0003      	movs	r3, r0
 800392c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	005a      	lsls	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	18d2      	adds	r2, r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	0019      	movs	r1, r3
 8003940:	0010      	movs	r0, r2
 8003942:	f7fc fbe9 	bl	8000118 <__udivsi3>
 8003946:	0003      	movs	r3, r0
 8003948:	b29b      	uxth	r3, r3
 800394a:	61bb      	str	r3, [r7, #24]
        break;
 800394c:	e014      	b.n	8003978 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	0252      	lsls	r2, r2, #9
 8003958:	189a      	adds	r2, r3, r2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	0019      	movs	r1, r3
 8003960:	0010      	movs	r0, r2
 8003962:	f7fc fbd9 	bl	8000118 <__udivsi3>
 8003966:	0003      	movs	r3, r0
 8003968:	b29b      	uxth	r3, r3
 800396a:	61bb      	str	r3, [r7, #24]
        break;
 800396c:	e004      	b.n	8003978 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 800396e:	2317      	movs	r3, #23
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
        break;
 8003976:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	d91b      	bls.n	80039b6 <UART_SetConfig+0x1f2>
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	4a51      	ldr	r2, [pc, #324]	; (8003ac8 <UART_SetConfig+0x304>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d817      	bhi.n	80039b6 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	b29a      	uxth	r2, r3
 800398a:	200a      	movs	r0, #10
 800398c:	183b      	adds	r3, r7, r0
 800398e:	210f      	movs	r1, #15
 8003990:	438a      	bics	r2, r1
 8003992:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	b29b      	uxth	r3, r3
 800399a:	2207      	movs	r2, #7
 800399c:	4013      	ands	r3, r2
 800399e:	b299      	uxth	r1, r3
 80039a0:	183b      	adds	r3, r7, r0
 80039a2:	183a      	adds	r2, r7, r0
 80039a4:	8812      	ldrh	r2, [r2, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	183a      	adds	r2, r7, r0
 80039b0:	8812      	ldrh	r2, [r2, #0]
 80039b2:	60da      	str	r2, [r3, #12]
 80039b4:	e06c      	b.n	8003a90 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80039b6:	2317      	movs	r3, #23
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	2201      	movs	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	e067      	b.n	8003a90 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 80039c0:	231f      	movs	r3, #31
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d01b      	beq.n	8003a02 <UART_SetConfig+0x23e>
 80039ca:	dc02      	bgt.n	80039d2 <UART_SetConfig+0x20e>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <UART_SetConfig+0x218>
 80039d0:	e049      	b.n	8003a66 <UART_SetConfig+0x2a2>
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d024      	beq.n	8003a20 <UART_SetConfig+0x25c>
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d035      	beq.n	8003a46 <UART_SetConfig+0x282>
 80039da:	e044      	b.n	8003a66 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7fe fac4 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80039e0:	0003      	movs	r3, r0
 80039e2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	085a      	lsrs	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	18d2      	adds	r2, r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	0019      	movs	r1, r3
 80039f4:	0010      	movs	r0, r2
 80039f6:	f7fc fb8f 	bl	8000118 <__udivsi3>
 80039fa:	0003      	movs	r3, r0
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	61bb      	str	r3, [r7, #24]
        break;
 8003a00:	e036      	b.n	8003a70 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	4a30      	ldr	r2, [pc, #192]	; (8003acc <UART_SetConfig+0x308>)
 8003a0a:	189a      	adds	r2, r3, r2
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	0019      	movs	r1, r3
 8003a12:	0010      	movs	r0, r2
 8003a14:	f7fc fb80 	bl	8000118 <__udivsi3>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	61bb      	str	r3, [r7, #24]
        break;
 8003a1e:	e027      	b.n	8003a70 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a20:	f7fe fa34 	bl	8001e8c <HAL_RCC_GetSysClockFreq>
 8003a24:	0003      	movs	r3, r0
 8003a26:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	085a      	lsrs	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	18d2      	adds	r2, r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	0019      	movs	r1, r3
 8003a38:	0010      	movs	r0, r2
 8003a3a:	f7fc fb6d 	bl	8000118 <__udivsi3>
 8003a3e:	0003      	movs	r3, r0
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	61bb      	str	r3, [r7, #24]
        break;
 8003a44:	e014      	b.n	8003a70 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	085b      	lsrs	r3, r3, #1
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	0212      	lsls	r2, r2, #8
 8003a50:	189a      	adds	r2, r3, r2
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	0019      	movs	r1, r3
 8003a58:	0010      	movs	r0, r2
 8003a5a:	f7fc fb5d 	bl	8000118 <__udivsi3>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	61bb      	str	r3, [r7, #24]
        break;
 8003a64:	e004      	b.n	8003a70 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003a66:	2317      	movs	r3, #23
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
        break;
 8003a6e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b0f      	cmp	r3, #15
 8003a74:	d908      	bls.n	8003a88 <UART_SetConfig+0x2c4>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <UART_SetConfig+0x304>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d804      	bhi.n	8003a88 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	e003      	b.n	8003a90 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003a88:	2317      	movs	r3, #23
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003a9c:	2317      	movs	r3, #23
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	781b      	ldrb	r3, [r3, #0]
}
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	b008      	add	sp, #32
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	ffff69f3 	.word	0xffff69f3
 8003ab0:	ffffcfff 	.word	0xffffcfff
 8003ab4:	fffff4ff 	.word	0xfffff4ff
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40004400 	.word	0x40004400
 8003ac4:	00f42400 	.word	0x00f42400
 8003ac8:	0000ffff 	.word	0x0000ffff
 8003acc:	007a1200 	.word	0x007a1200

08003ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	2201      	movs	r2, #1
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4a4a      	ldr	r2, [pc, #296]	; (8003c14 <UART_AdvFeatureConfig+0x144>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	0019      	movs	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	2202      	movs	r2, #2
 8003b00:	4013      	ands	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4a43      	ldr	r2, [pc, #268]	; (8003c18 <UART_AdvFeatureConfig+0x148>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	0019      	movs	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2204      	movs	r2, #4
 8003b22:	4013      	ands	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a3b      	ldr	r2, [pc, #236]	; (8003c1c <UART_AdvFeatureConfig+0x14c>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2208      	movs	r2, #8
 8003b44:	4013      	ands	r3, r2
 8003b46:	d00b      	beq.n	8003b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4a34      	ldr	r2, [pc, #208]	; (8003c20 <UART_AdvFeatureConfig+0x150>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	0019      	movs	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2210      	movs	r2, #16
 8003b66:	4013      	ands	r3, r2
 8003b68:	d00b      	beq.n	8003b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <UART_AdvFeatureConfig+0x154>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	0019      	movs	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	2220      	movs	r2, #32
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	4a25      	ldr	r2, [pc, #148]	; (8003c28 <UART_AdvFeatureConfig+0x158>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	0019      	movs	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	2240      	movs	r2, #64	; 0x40
 8003baa:	4013      	ands	r3, r2
 8003bac:	d01d      	beq.n	8003bea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <UART_AdvFeatureConfig+0x15c>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	035b      	lsls	r3, r3, #13
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d10b      	bne.n	8003bea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <UART_AdvFeatureConfig+0x160>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	0019      	movs	r1, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d00b      	beq.n	8003c0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <UART_AdvFeatureConfig+0x164>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b002      	add	sp, #8
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	fffdffff 	.word	0xfffdffff
 8003c18:	fffeffff 	.word	0xfffeffff
 8003c1c:	fffbffff 	.word	0xfffbffff
 8003c20:	ffff7fff 	.word	0xffff7fff
 8003c24:	ffffefff 	.word	0xffffefff
 8003c28:	ffffdfff 	.word	0xffffdfff
 8003c2c:	ffefffff 	.word	0xffefffff
 8003c30:	ff9fffff 	.word	0xff9fffff
 8003c34:	fff7ffff 	.word	0xfff7ffff

08003c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c46:	f7fd fa1d 	bl	8001084 <HAL_GetTick>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2208      	movs	r2, #8
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d10d      	bne.n	8003c78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	0399      	lsls	r1, r3, #14
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <UART_CheckIdleState+0x88>)
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	0013      	movs	r3, r2
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f000 f82a 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 8003c70:	1e03      	subs	r3, r0, #0
 8003c72:	d001      	beq.n	8003c78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e01f      	b.n	8003cb8 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2204      	movs	r2, #4
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d10d      	bne.n	8003ca2 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	03d9      	lsls	r1, r3, #15
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <UART_CheckIdleState+0x88>)
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	0013      	movs	r3, r2
 8003c94:	2200      	movs	r2, #0
 8003c96:	f000 f815 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 8003c9a:	1e03      	subs	r3, r0, #0
 8003c9c:	d001      	beq.n	8003ca2 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e00a      	b.n	8003cb8 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2270      	movs	r2, #112	; 0x70
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b004      	add	sp, #16
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	01ffffff 	.word	0x01ffffff

08003cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	1dfb      	adds	r3, r7, #7
 8003cd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd4:	e05d      	b.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	d05a      	beq.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cdc:	f7fd f9d2 	bl	8001084 <HAL_GetTick>
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11b      	bne.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	492f      	ldr	r1, [pc, #188]	; (8003dbc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003cfe:	400a      	ands	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	438a      	bics	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2270      	movs	r2, #112	; 0x70
 8003d22:	2100      	movs	r1, #0
 8003d24:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e043      	b.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2204      	movs	r2, #4
 8003d32:	4013      	ands	r3, r2
 8003d34:	d02d      	beq.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	401a      	ands	r2, r3
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d123      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	0112      	lsls	r2, r2, #4
 8003d52:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4917      	ldr	r1, [pc, #92]	; (8003dbc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003d60:	400a      	ands	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2101      	movs	r1, #1
 8003d70:	438a      	bics	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2270      	movs	r2, #112	; 0x70
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e00f      	b.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	425a      	negs	r2, r3
 8003da2:	4153      	adcs	r3, r2
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	001a      	movs	r2, r3
 8003da8:	1dfb      	adds	r3, r7, #7
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d092      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	0018      	movs	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b004      	add	sp, #16
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	fffffe5f 	.word	0xfffffe5f

08003dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	490a      	ldr	r1, [pc, #40]	; (8003dfc <UART_EndRxTransfer+0x3c>)
 8003dd4:	400a      	ands	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2101      	movs	r1, #1
 8003de4:	438a      	bics	r2, r1
 8003de6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b002      	add	sp, #8
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	fffffedf 	.word	0xfffffedf

08003e00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	225a      	movs	r2, #90	; 0x5a
 8003e12:	2100      	movs	r1, #0
 8003e14:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2252      	movs	r2, #82	; 0x52
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7ff fcc7 	bl	80037b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b004      	add	sp, #16
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2140      	movs	r1, #64	; 0x40
 8003e42:	438a      	bics	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7ff fca5 	bl	80037a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b002      	add	sp, #8
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <__errno>:
 8003e64:	4b01      	ldr	r3, [pc, #4]	; (8003e6c <__errno+0x8>)
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	4770      	bx	lr
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	20000010 	.word	0x20000010

08003e70 <__libc_init_array>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	2600      	movs	r6, #0
 8003e74:	4d0c      	ldr	r5, [pc, #48]	; (8003ea8 <__libc_init_array+0x38>)
 8003e76:	4c0d      	ldr	r4, [pc, #52]	; (8003eac <__libc_init_array+0x3c>)
 8003e78:	1b64      	subs	r4, r4, r5
 8003e7a:	10a4      	asrs	r4, r4, #2
 8003e7c:	42a6      	cmp	r6, r4
 8003e7e:	d109      	bne.n	8003e94 <__libc_init_array+0x24>
 8003e80:	2600      	movs	r6, #0
 8003e82:	f000 fc29 	bl	80046d8 <_init>
 8003e86:	4d0a      	ldr	r5, [pc, #40]	; (8003eb0 <__libc_init_array+0x40>)
 8003e88:	4c0a      	ldr	r4, [pc, #40]	; (8003eb4 <__libc_init_array+0x44>)
 8003e8a:	1b64      	subs	r4, r4, r5
 8003e8c:	10a4      	asrs	r4, r4, #2
 8003e8e:	42a6      	cmp	r6, r4
 8003e90:	d105      	bne.n	8003e9e <__libc_init_array+0x2e>
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
 8003e94:	00b3      	lsls	r3, r6, #2
 8003e96:	58eb      	ldr	r3, [r5, r3]
 8003e98:	4798      	blx	r3
 8003e9a:	3601      	adds	r6, #1
 8003e9c:	e7ee      	b.n	8003e7c <__libc_init_array+0xc>
 8003e9e:	00b3      	lsls	r3, r6, #2
 8003ea0:	58eb      	ldr	r3, [r5, r3]
 8003ea2:	4798      	blx	r3
 8003ea4:	3601      	adds	r6, #1
 8003ea6:	e7f2      	b.n	8003e8e <__libc_init_array+0x1e>
 8003ea8:	0800479c 	.word	0x0800479c
 8003eac:	0800479c 	.word	0x0800479c
 8003eb0:	0800479c 	.word	0x0800479c
 8003eb4:	080047a0 	.word	0x080047a0

08003eb8 <memset>:
 8003eb8:	0003      	movs	r3, r0
 8003eba:	1812      	adds	r2, r2, r0
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d100      	bne.n	8003ec2 <memset+0xa>
 8003ec0:	4770      	bx	lr
 8003ec2:	7019      	strb	r1, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	e7f9      	b.n	8003ebc <memset+0x4>

08003ec8 <siprintf>:
 8003ec8:	b40e      	push	{r1, r2, r3}
 8003eca:	b500      	push	{lr}
 8003ecc:	490b      	ldr	r1, [pc, #44]	; (8003efc <siprintf+0x34>)
 8003ece:	b09c      	sub	sp, #112	; 0x70
 8003ed0:	ab1d      	add	r3, sp, #116	; 0x74
 8003ed2:	9002      	str	r0, [sp, #8]
 8003ed4:	9006      	str	r0, [sp, #24]
 8003ed6:	9107      	str	r1, [sp, #28]
 8003ed8:	9104      	str	r1, [sp, #16]
 8003eda:	4809      	ldr	r0, [pc, #36]	; (8003f00 <siprintf+0x38>)
 8003edc:	4909      	ldr	r1, [pc, #36]	; (8003f04 <siprintf+0x3c>)
 8003ede:	cb04      	ldmia	r3!, {r2}
 8003ee0:	9105      	str	r1, [sp, #20]
 8003ee2:	6800      	ldr	r0, [r0, #0]
 8003ee4:	a902      	add	r1, sp, #8
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	f000 f870 	bl	8003fcc <_svfiprintf_r>
 8003eec:	2300      	movs	r3, #0
 8003eee:	9a02      	ldr	r2, [sp, #8]
 8003ef0:	7013      	strb	r3, [r2, #0]
 8003ef2:	b01c      	add	sp, #112	; 0x70
 8003ef4:	bc08      	pop	{r3}
 8003ef6:	b003      	add	sp, #12
 8003ef8:	4718      	bx	r3
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	7fffffff 	.word	0x7fffffff
 8003f00:	20000010 	.word	0x20000010
 8003f04:	ffff0208 	.word	0xffff0208

08003f08 <__ssputs_r>:
 8003f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0a:	688e      	ldr	r6, [r1, #8]
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	0007      	movs	r7, r0
 8003f10:	000c      	movs	r4, r1
 8003f12:	9203      	str	r2, [sp, #12]
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	429e      	cmp	r6, r3
 8003f18:	d83c      	bhi.n	8003f94 <__ssputs_r+0x8c>
 8003f1a:	2390      	movs	r3, #144	; 0x90
 8003f1c:	898a      	ldrh	r2, [r1, #12]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	421a      	tst	r2, r3
 8003f22:	d034      	beq.n	8003f8e <__ssputs_r+0x86>
 8003f24:	2503      	movs	r5, #3
 8003f26:	6909      	ldr	r1, [r1, #16]
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	1a5b      	subs	r3, r3, r1
 8003f2c:	9302      	str	r3, [sp, #8]
 8003f2e:	6963      	ldr	r3, [r4, #20]
 8003f30:	9802      	ldr	r0, [sp, #8]
 8003f32:	435d      	muls	r5, r3
 8003f34:	0feb      	lsrs	r3, r5, #31
 8003f36:	195d      	adds	r5, r3, r5
 8003f38:	9b01      	ldr	r3, [sp, #4]
 8003f3a:	106d      	asrs	r5, r5, #1
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	181b      	adds	r3, r3, r0
 8003f40:	42ab      	cmp	r3, r5
 8003f42:	d900      	bls.n	8003f46 <__ssputs_r+0x3e>
 8003f44:	001d      	movs	r5, r3
 8003f46:	0553      	lsls	r3, r2, #21
 8003f48:	d532      	bpl.n	8003fb0 <__ssputs_r+0xa8>
 8003f4a:	0029      	movs	r1, r5
 8003f4c:	0038      	movs	r0, r7
 8003f4e:	f000 fb23 	bl	8004598 <_malloc_r>
 8003f52:	1e06      	subs	r6, r0, #0
 8003f54:	d109      	bne.n	8003f6a <__ssputs_r+0x62>
 8003f56:	230c      	movs	r3, #12
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	2340      	movs	r3, #64	; 0x40
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	89a2      	ldrh	r2, [r4, #12]
 8003f60:	4240      	negs	r0, r0
 8003f62:	4313      	orrs	r3, r2
 8003f64:	81a3      	strh	r3, [r4, #12]
 8003f66:	b005      	add	sp, #20
 8003f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f6a:	9a02      	ldr	r2, [sp, #8]
 8003f6c:	6921      	ldr	r1, [r4, #16]
 8003f6e:	f000 faac 	bl	80044ca <memcpy>
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <__ssputs_r+0xc0>)
 8003f76:	401a      	ands	r2, r3
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	9b02      	ldr	r3, [sp, #8]
 8003f80:	6126      	str	r6, [r4, #16]
 8003f82:	18f6      	adds	r6, r6, r3
 8003f84:	6026      	str	r6, [r4, #0]
 8003f86:	6165      	str	r5, [r4, #20]
 8003f88:	9e01      	ldr	r6, [sp, #4]
 8003f8a:	1aed      	subs	r5, r5, r3
 8003f8c:	60a5      	str	r5, [r4, #8]
 8003f8e:	9b01      	ldr	r3, [sp, #4]
 8003f90:	429e      	cmp	r6, r3
 8003f92:	d900      	bls.n	8003f96 <__ssputs_r+0x8e>
 8003f94:	9e01      	ldr	r6, [sp, #4]
 8003f96:	0032      	movs	r2, r6
 8003f98:	9903      	ldr	r1, [sp, #12]
 8003f9a:	6820      	ldr	r0, [r4, #0]
 8003f9c:	f000 fa9e 	bl	80044dc <memmove>
 8003fa0:	68a3      	ldr	r3, [r4, #8]
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	1b9b      	subs	r3, r3, r6
 8003fa6:	60a3      	str	r3, [r4, #8]
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	199e      	adds	r6, r3, r6
 8003fac:	6026      	str	r6, [r4, #0]
 8003fae:	e7da      	b.n	8003f66 <__ssputs_r+0x5e>
 8003fb0:	002a      	movs	r2, r5
 8003fb2:	0038      	movs	r0, r7
 8003fb4:	f000 fb4e 	bl	8004654 <_realloc_r>
 8003fb8:	1e06      	subs	r6, r0, #0
 8003fba:	d1e0      	bne.n	8003f7e <__ssputs_r+0x76>
 8003fbc:	6921      	ldr	r1, [r4, #16]
 8003fbe:	0038      	movs	r0, r7
 8003fc0:	f000 faa0 	bl	8004504 <_free_r>
 8003fc4:	e7c7      	b.n	8003f56 <__ssputs_r+0x4e>
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	fffffb7f 	.word	0xfffffb7f

08003fcc <_svfiprintf_r>:
 8003fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fce:	b0a1      	sub	sp, #132	; 0x84
 8003fd0:	9003      	str	r0, [sp, #12]
 8003fd2:	001d      	movs	r5, r3
 8003fd4:	898b      	ldrh	r3, [r1, #12]
 8003fd6:	000f      	movs	r7, r1
 8003fd8:	0016      	movs	r6, r2
 8003fda:	061b      	lsls	r3, r3, #24
 8003fdc:	d511      	bpl.n	8004002 <_svfiprintf_r+0x36>
 8003fde:	690b      	ldr	r3, [r1, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10e      	bne.n	8004002 <_svfiprintf_r+0x36>
 8003fe4:	2140      	movs	r1, #64	; 0x40
 8003fe6:	f000 fad7 	bl	8004598 <_malloc_r>
 8003fea:	6038      	str	r0, [r7, #0]
 8003fec:	6138      	str	r0, [r7, #16]
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d105      	bne.n	8003ffe <_svfiprintf_r+0x32>
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	9a03      	ldr	r2, [sp, #12]
 8003ff6:	3801      	subs	r0, #1
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	b021      	add	sp, #132	; 0x84
 8003ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffe:	2340      	movs	r3, #64	; 0x40
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	2300      	movs	r3, #0
 8004004:	ac08      	add	r4, sp, #32
 8004006:	6163      	str	r3, [r4, #20]
 8004008:	3320      	adds	r3, #32
 800400a:	7663      	strb	r3, [r4, #25]
 800400c:	3310      	adds	r3, #16
 800400e:	76a3      	strb	r3, [r4, #26]
 8004010:	9507      	str	r5, [sp, #28]
 8004012:	0035      	movs	r5, r6
 8004014:	782b      	ldrb	r3, [r5, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <_svfiprintf_r+0x52>
 800401a:	2b25      	cmp	r3, #37	; 0x25
 800401c:	d146      	bne.n	80040ac <_svfiprintf_r+0xe0>
 800401e:	1bab      	subs	r3, r5, r6
 8004020:	9305      	str	r3, [sp, #20]
 8004022:	d00c      	beq.n	800403e <_svfiprintf_r+0x72>
 8004024:	0032      	movs	r2, r6
 8004026:	0039      	movs	r1, r7
 8004028:	9803      	ldr	r0, [sp, #12]
 800402a:	f7ff ff6d 	bl	8003f08 <__ssputs_r>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	d100      	bne.n	8004034 <_svfiprintf_r+0x68>
 8004032:	e0ae      	b.n	8004192 <_svfiprintf_r+0x1c6>
 8004034:	6962      	ldr	r2, [r4, #20]
 8004036:	9b05      	ldr	r3, [sp, #20]
 8004038:	4694      	mov	ip, r2
 800403a:	4463      	add	r3, ip
 800403c:	6163      	str	r3, [r4, #20]
 800403e:	782b      	ldrb	r3, [r5, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d100      	bne.n	8004046 <_svfiprintf_r+0x7a>
 8004044:	e0a5      	b.n	8004192 <_svfiprintf_r+0x1c6>
 8004046:	2201      	movs	r2, #1
 8004048:	2300      	movs	r3, #0
 800404a:	4252      	negs	r2, r2
 800404c:	6062      	str	r2, [r4, #4]
 800404e:	a904      	add	r1, sp, #16
 8004050:	3254      	adds	r2, #84	; 0x54
 8004052:	1852      	adds	r2, r2, r1
 8004054:	1c6e      	adds	r6, r5, #1
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	60e3      	str	r3, [r4, #12]
 800405a:	60a3      	str	r3, [r4, #8]
 800405c:	7013      	strb	r3, [r2, #0]
 800405e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004060:	7831      	ldrb	r1, [r6, #0]
 8004062:	2205      	movs	r2, #5
 8004064:	4853      	ldr	r0, [pc, #332]	; (80041b4 <_svfiprintf_r+0x1e8>)
 8004066:	f000 fa25 	bl	80044b4 <memchr>
 800406a:	1c75      	adds	r5, r6, #1
 800406c:	2800      	cmp	r0, #0
 800406e:	d11f      	bne.n	80040b0 <_svfiprintf_r+0xe4>
 8004070:	6822      	ldr	r2, [r4, #0]
 8004072:	06d3      	lsls	r3, r2, #27
 8004074:	d504      	bpl.n	8004080 <_svfiprintf_r+0xb4>
 8004076:	2353      	movs	r3, #83	; 0x53
 8004078:	a904      	add	r1, sp, #16
 800407a:	185b      	adds	r3, r3, r1
 800407c:	2120      	movs	r1, #32
 800407e:	7019      	strb	r1, [r3, #0]
 8004080:	0713      	lsls	r3, r2, #28
 8004082:	d504      	bpl.n	800408e <_svfiprintf_r+0xc2>
 8004084:	2353      	movs	r3, #83	; 0x53
 8004086:	a904      	add	r1, sp, #16
 8004088:	185b      	adds	r3, r3, r1
 800408a:	212b      	movs	r1, #43	; 0x2b
 800408c:	7019      	strb	r1, [r3, #0]
 800408e:	7833      	ldrb	r3, [r6, #0]
 8004090:	2b2a      	cmp	r3, #42	; 0x2a
 8004092:	d016      	beq.n	80040c2 <_svfiprintf_r+0xf6>
 8004094:	0035      	movs	r5, r6
 8004096:	2100      	movs	r1, #0
 8004098:	200a      	movs	r0, #10
 800409a:	68e3      	ldr	r3, [r4, #12]
 800409c:	782a      	ldrb	r2, [r5, #0]
 800409e:	1c6e      	adds	r6, r5, #1
 80040a0:	3a30      	subs	r2, #48	; 0x30
 80040a2:	2a09      	cmp	r2, #9
 80040a4:	d94e      	bls.n	8004144 <_svfiprintf_r+0x178>
 80040a6:	2900      	cmp	r1, #0
 80040a8:	d018      	beq.n	80040dc <_svfiprintf_r+0x110>
 80040aa:	e010      	b.n	80040ce <_svfiprintf_r+0x102>
 80040ac:	3501      	adds	r5, #1
 80040ae:	e7b1      	b.n	8004014 <_svfiprintf_r+0x48>
 80040b0:	4b40      	ldr	r3, [pc, #256]	; (80041b4 <_svfiprintf_r+0x1e8>)
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	1ac0      	subs	r0, r0, r3
 80040b6:	2301      	movs	r3, #1
 80040b8:	4083      	lsls	r3, r0
 80040ba:	4313      	orrs	r3, r2
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	002e      	movs	r6, r5
 80040c0:	e7ce      	b.n	8004060 <_svfiprintf_r+0x94>
 80040c2:	9b07      	ldr	r3, [sp, #28]
 80040c4:	1d19      	adds	r1, r3, #4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	9107      	str	r1, [sp, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	db01      	blt.n	80040d2 <_svfiprintf_r+0x106>
 80040ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80040d0:	e004      	b.n	80040dc <_svfiprintf_r+0x110>
 80040d2:	425b      	negs	r3, r3
 80040d4:	60e3      	str	r3, [r4, #12]
 80040d6:	2302      	movs	r3, #2
 80040d8:	4313      	orrs	r3, r2
 80040da:	6023      	str	r3, [r4, #0]
 80040dc:	782b      	ldrb	r3, [r5, #0]
 80040de:	2b2e      	cmp	r3, #46	; 0x2e
 80040e0:	d10a      	bne.n	80040f8 <_svfiprintf_r+0x12c>
 80040e2:	786b      	ldrb	r3, [r5, #1]
 80040e4:	2b2a      	cmp	r3, #42	; 0x2a
 80040e6:	d135      	bne.n	8004154 <_svfiprintf_r+0x188>
 80040e8:	9b07      	ldr	r3, [sp, #28]
 80040ea:	3502      	adds	r5, #2
 80040ec:	1d1a      	adds	r2, r3, #4
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	9207      	str	r2, [sp, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	db2b      	blt.n	800414e <_svfiprintf_r+0x182>
 80040f6:	9309      	str	r3, [sp, #36]	; 0x24
 80040f8:	4e2f      	ldr	r6, [pc, #188]	; (80041b8 <_svfiprintf_r+0x1ec>)
 80040fa:	7829      	ldrb	r1, [r5, #0]
 80040fc:	2203      	movs	r2, #3
 80040fe:	0030      	movs	r0, r6
 8004100:	f000 f9d8 	bl	80044b4 <memchr>
 8004104:	2800      	cmp	r0, #0
 8004106:	d006      	beq.n	8004116 <_svfiprintf_r+0x14a>
 8004108:	2340      	movs	r3, #64	; 0x40
 800410a:	1b80      	subs	r0, r0, r6
 800410c:	4083      	lsls	r3, r0
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	3501      	adds	r5, #1
 8004112:	4313      	orrs	r3, r2
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	7829      	ldrb	r1, [r5, #0]
 8004118:	2206      	movs	r2, #6
 800411a:	4828      	ldr	r0, [pc, #160]	; (80041bc <_svfiprintf_r+0x1f0>)
 800411c:	1c6e      	adds	r6, r5, #1
 800411e:	7621      	strb	r1, [r4, #24]
 8004120:	f000 f9c8 	bl	80044b4 <memchr>
 8004124:	2800      	cmp	r0, #0
 8004126:	d03c      	beq.n	80041a2 <_svfiprintf_r+0x1d6>
 8004128:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <_svfiprintf_r+0x1f4>)
 800412a:	2b00      	cmp	r3, #0
 800412c:	d125      	bne.n	800417a <_svfiprintf_r+0x1ae>
 800412e:	2207      	movs	r2, #7
 8004130:	9b07      	ldr	r3, [sp, #28]
 8004132:	3307      	adds	r3, #7
 8004134:	4393      	bics	r3, r2
 8004136:	3308      	adds	r3, #8
 8004138:	9307      	str	r3, [sp, #28]
 800413a:	6963      	ldr	r3, [r4, #20]
 800413c:	9a04      	ldr	r2, [sp, #16]
 800413e:	189b      	adds	r3, r3, r2
 8004140:	6163      	str	r3, [r4, #20]
 8004142:	e766      	b.n	8004012 <_svfiprintf_r+0x46>
 8004144:	4343      	muls	r3, r0
 8004146:	2101      	movs	r1, #1
 8004148:	189b      	adds	r3, r3, r2
 800414a:	0035      	movs	r5, r6
 800414c:	e7a6      	b.n	800409c <_svfiprintf_r+0xd0>
 800414e:	2301      	movs	r3, #1
 8004150:	425b      	negs	r3, r3
 8004152:	e7d0      	b.n	80040f6 <_svfiprintf_r+0x12a>
 8004154:	2300      	movs	r3, #0
 8004156:	200a      	movs	r0, #10
 8004158:	001a      	movs	r2, r3
 800415a:	3501      	adds	r5, #1
 800415c:	6063      	str	r3, [r4, #4]
 800415e:	7829      	ldrb	r1, [r5, #0]
 8004160:	1c6e      	adds	r6, r5, #1
 8004162:	3930      	subs	r1, #48	; 0x30
 8004164:	2909      	cmp	r1, #9
 8004166:	d903      	bls.n	8004170 <_svfiprintf_r+0x1a4>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0c5      	beq.n	80040f8 <_svfiprintf_r+0x12c>
 800416c:	9209      	str	r2, [sp, #36]	; 0x24
 800416e:	e7c3      	b.n	80040f8 <_svfiprintf_r+0x12c>
 8004170:	4342      	muls	r2, r0
 8004172:	2301      	movs	r3, #1
 8004174:	1852      	adds	r2, r2, r1
 8004176:	0035      	movs	r5, r6
 8004178:	e7f1      	b.n	800415e <_svfiprintf_r+0x192>
 800417a:	ab07      	add	r3, sp, #28
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	003a      	movs	r2, r7
 8004180:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <_svfiprintf_r+0x1f8>)
 8004182:	0021      	movs	r1, r4
 8004184:	9803      	ldr	r0, [sp, #12]
 8004186:	e000      	b.n	800418a <_svfiprintf_r+0x1be>
 8004188:	bf00      	nop
 800418a:	9004      	str	r0, [sp, #16]
 800418c:	9b04      	ldr	r3, [sp, #16]
 800418e:	3301      	adds	r3, #1
 8004190:	d1d3      	bne.n	800413a <_svfiprintf_r+0x16e>
 8004192:	89bb      	ldrh	r3, [r7, #12]
 8004194:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004196:	065b      	lsls	r3, r3, #25
 8004198:	d400      	bmi.n	800419c <_svfiprintf_r+0x1d0>
 800419a:	e72e      	b.n	8003ffa <_svfiprintf_r+0x2e>
 800419c:	2001      	movs	r0, #1
 800419e:	4240      	negs	r0, r0
 80041a0:	e72b      	b.n	8003ffa <_svfiprintf_r+0x2e>
 80041a2:	ab07      	add	r3, sp, #28
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	003a      	movs	r2, r7
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <_svfiprintf_r+0x1f8>)
 80041aa:	0021      	movs	r1, r4
 80041ac:	9803      	ldr	r0, [sp, #12]
 80041ae:	f000 f879 	bl	80042a4 <_printf_i>
 80041b2:	e7ea      	b.n	800418a <_svfiprintf_r+0x1be>
 80041b4:	08004768 	.word	0x08004768
 80041b8:	0800476e 	.word	0x0800476e
 80041bc:	08004772 	.word	0x08004772
 80041c0:	00000000 	.word	0x00000000
 80041c4:	08003f09 	.word	0x08003f09

080041c8 <_printf_common>:
 80041c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ca:	0015      	movs	r5, r2
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	688a      	ldr	r2, [r1, #8]
 80041d0:	690b      	ldr	r3, [r1, #16]
 80041d2:	9000      	str	r0, [sp, #0]
 80041d4:	000c      	movs	r4, r1
 80041d6:	4293      	cmp	r3, r2
 80041d8:	da00      	bge.n	80041dc <_printf_common+0x14>
 80041da:	0013      	movs	r3, r2
 80041dc:	0022      	movs	r2, r4
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	3243      	adds	r2, #67	; 0x43
 80041e2:	7812      	ldrb	r2, [r2, #0]
 80041e4:	2a00      	cmp	r2, #0
 80041e6:	d001      	beq.n	80041ec <_printf_common+0x24>
 80041e8:	3301      	adds	r3, #1
 80041ea:	602b      	str	r3, [r5, #0]
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	d502      	bpl.n	80041f8 <_printf_common+0x30>
 80041f2:	682b      	ldr	r3, [r5, #0]
 80041f4:	3302      	adds	r3, #2
 80041f6:	602b      	str	r3, [r5, #0]
 80041f8:	2706      	movs	r7, #6
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	401f      	ands	r7, r3
 80041fe:	d027      	beq.n	8004250 <_printf_common+0x88>
 8004200:	0023      	movs	r3, r4
 8004202:	3343      	adds	r3, #67	; 0x43
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	1e5a      	subs	r2, r3, #1
 8004208:	4193      	sbcs	r3, r2
 800420a:	6822      	ldr	r2, [r4, #0]
 800420c:	0692      	lsls	r2, r2, #26
 800420e:	d430      	bmi.n	8004272 <_printf_common+0xaa>
 8004210:	0022      	movs	r2, r4
 8004212:	9901      	ldr	r1, [sp, #4]
 8004214:	3243      	adds	r2, #67	; 0x43
 8004216:	9800      	ldr	r0, [sp, #0]
 8004218:	9e08      	ldr	r6, [sp, #32]
 800421a:	47b0      	blx	r6
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d025      	beq.n	800426c <_printf_common+0xa4>
 8004220:	2306      	movs	r3, #6
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	682a      	ldr	r2, [r5, #0]
 8004226:	68e1      	ldr	r1, [r4, #12]
 8004228:	4003      	ands	r3, r0
 800422a:	2500      	movs	r5, #0
 800422c:	2b04      	cmp	r3, #4
 800422e:	d103      	bne.n	8004238 <_printf_common+0x70>
 8004230:	1a8d      	subs	r5, r1, r2
 8004232:	43eb      	mvns	r3, r5
 8004234:	17db      	asrs	r3, r3, #31
 8004236:	401d      	ands	r5, r3
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	6922      	ldr	r2, [r4, #16]
 800423c:	4293      	cmp	r3, r2
 800423e:	dd01      	ble.n	8004244 <_printf_common+0x7c>
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	18ed      	adds	r5, r5, r3
 8004244:	2700      	movs	r7, #0
 8004246:	42bd      	cmp	r5, r7
 8004248:	d120      	bne.n	800428c <_printf_common+0xc4>
 800424a:	2000      	movs	r0, #0
 800424c:	e010      	b.n	8004270 <_printf_common+0xa8>
 800424e:	3701      	adds	r7, #1
 8004250:	68e3      	ldr	r3, [r4, #12]
 8004252:	682a      	ldr	r2, [r5, #0]
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	42bb      	cmp	r3, r7
 8004258:	ddd2      	ble.n	8004200 <_printf_common+0x38>
 800425a:	0022      	movs	r2, r4
 800425c:	2301      	movs	r3, #1
 800425e:	3219      	adds	r2, #25
 8004260:	9901      	ldr	r1, [sp, #4]
 8004262:	9800      	ldr	r0, [sp, #0]
 8004264:	9e08      	ldr	r6, [sp, #32]
 8004266:	47b0      	blx	r6
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d1f0      	bne.n	800424e <_printf_common+0x86>
 800426c:	2001      	movs	r0, #1
 800426e:	4240      	negs	r0, r0
 8004270:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004272:	2030      	movs	r0, #48	; 0x30
 8004274:	18e1      	adds	r1, r4, r3
 8004276:	3143      	adds	r1, #67	; 0x43
 8004278:	7008      	strb	r0, [r1, #0]
 800427a:	0021      	movs	r1, r4
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	3145      	adds	r1, #69	; 0x45
 8004280:	7809      	ldrb	r1, [r1, #0]
 8004282:	18a2      	adds	r2, r4, r2
 8004284:	3243      	adds	r2, #67	; 0x43
 8004286:	3302      	adds	r3, #2
 8004288:	7011      	strb	r1, [r2, #0]
 800428a:	e7c1      	b.n	8004210 <_printf_common+0x48>
 800428c:	0022      	movs	r2, r4
 800428e:	2301      	movs	r3, #1
 8004290:	321a      	adds	r2, #26
 8004292:	9901      	ldr	r1, [sp, #4]
 8004294:	9800      	ldr	r0, [sp, #0]
 8004296:	9e08      	ldr	r6, [sp, #32]
 8004298:	47b0      	blx	r6
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	d0e6      	beq.n	800426c <_printf_common+0xa4>
 800429e:	3701      	adds	r7, #1
 80042a0:	e7d1      	b.n	8004246 <_printf_common+0x7e>
	...

080042a4 <_printf_i>:
 80042a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a6:	b089      	sub	sp, #36	; 0x24
 80042a8:	9204      	str	r2, [sp, #16]
 80042aa:	000a      	movs	r2, r1
 80042ac:	3243      	adds	r2, #67	; 0x43
 80042ae:	9305      	str	r3, [sp, #20]
 80042b0:	9003      	str	r0, [sp, #12]
 80042b2:	9202      	str	r2, [sp, #8]
 80042b4:	7e0a      	ldrb	r2, [r1, #24]
 80042b6:	000c      	movs	r4, r1
 80042b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042ba:	2a6e      	cmp	r2, #110	; 0x6e
 80042bc:	d100      	bne.n	80042c0 <_printf_i+0x1c>
 80042be:	e086      	b.n	80043ce <_printf_i+0x12a>
 80042c0:	d81f      	bhi.n	8004302 <_printf_i+0x5e>
 80042c2:	2a63      	cmp	r2, #99	; 0x63
 80042c4:	d033      	beq.n	800432e <_printf_i+0x8a>
 80042c6:	d808      	bhi.n	80042da <_printf_i+0x36>
 80042c8:	2a00      	cmp	r2, #0
 80042ca:	d100      	bne.n	80042ce <_printf_i+0x2a>
 80042cc:	e08c      	b.n	80043e8 <_printf_i+0x144>
 80042ce:	2a58      	cmp	r2, #88	; 0x58
 80042d0:	d04d      	beq.n	800436e <_printf_i+0xca>
 80042d2:	0025      	movs	r5, r4
 80042d4:	3542      	adds	r5, #66	; 0x42
 80042d6:	702a      	strb	r2, [r5, #0]
 80042d8:	e030      	b.n	800433c <_printf_i+0x98>
 80042da:	2a64      	cmp	r2, #100	; 0x64
 80042dc:	d001      	beq.n	80042e2 <_printf_i+0x3e>
 80042de:	2a69      	cmp	r2, #105	; 0x69
 80042e0:	d1f7      	bne.n	80042d2 <_printf_i+0x2e>
 80042e2:	6819      	ldr	r1, [r3, #0]
 80042e4:	6825      	ldr	r5, [r4, #0]
 80042e6:	1d0a      	adds	r2, r1, #4
 80042e8:	0628      	lsls	r0, r5, #24
 80042ea:	d529      	bpl.n	8004340 <_printf_i+0x9c>
 80042ec:	6808      	ldr	r0, [r1, #0]
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	2800      	cmp	r0, #0
 80042f2:	da03      	bge.n	80042fc <_printf_i+0x58>
 80042f4:	232d      	movs	r3, #45	; 0x2d
 80042f6:	9a02      	ldr	r2, [sp, #8]
 80042f8:	4240      	negs	r0, r0
 80042fa:	7013      	strb	r3, [r2, #0]
 80042fc:	4e6b      	ldr	r6, [pc, #428]	; (80044ac <_printf_i+0x208>)
 80042fe:	270a      	movs	r7, #10
 8004300:	e04f      	b.n	80043a2 <_printf_i+0xfe>
 8004302:	2a73      	cmp	r2, #115	; 0x73
 8004304:	d074      	beq.n	80043f0 <_printf_i+0x14c>
 8004306:	d808      	bhi.n	800431a <_printf_i+0x76>
 8004308:	2a6f      	cmp	r2, #111	; 0x6f
 800430a:	d01f      	beq.n	800434c <_printf_i+0xa8>
 800430c:	2a70      	cmp	r2, #112	; 0x70
 800430e:	d1e0      	bne.n	80042d2 <_printf_i+0x2e>
 8004310:	2220      	movs	r2, #32
 8004312:	6809      	ldr	r1, [r1, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	6022      	str	r2, [r4, #0]
 8004318:	e003      	b.n	8004322 <_printf_i+0x7e>
 800431a:	2a75      	cmp	r2, #117	; 0x75
 800431c:	d016      	beq.n	800434c <_printf_i+0xa8>
 800431e:	2a78      	cmp	r2, #120	; 0x78
 8004320:	d1d7      	bne.n	80042d2 <_printf_i+0x2e>
 8004322:	0022      	movs	r2, r4
 8004324:	2178      	movs	r1, #120	; 0x78
 8004326:	3245      	adds	r2, #69	; 0x45
 8004328:	7011      	strb	r1, [r2, #0]
 800432a:	4e61      	ldr	r6, [pc, #388]	; (80044b0 <_printf_i+0x20c>)
 800432c:	e022      	b.n	8004374 <_printf_i+0xd0>
 800432e:	0025      	movs	r5, r4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	3542      	adds	r5, #66	; 0x42
 8004334:	1d11      	adds	r1, r2, #4
 8004336:	6019      	str	r1, [r3, #0]
 8004338:	6813      	ldr	r3, [r2, #0]
 800433a:	702b      	strb	r3, [r5, #0]
 800433c:	2301      	movs	r3, #1
 800433e:	e065      	b.n	800440c <_printf_i+0x168>
 8004340:	6808      	ldr	r0, [r1, #0]
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	0669      	lsls	r1, r5, #25
 8004346:	d5d3      	bpl.n	80042f0 <_printf_i+0x4c>
 8004348:	b200      	sxth	r0, r0
 800434a:	e7d1      	b.n	80042f0 <_printf_i+0x4c>
 800434c:	6819      	ldr	r1, [r3, #0]
 800434e:	6825      	ldr	r5, [r4, #0]
 8004350:	1d08      	adds	r0, r1, #4
 8004352:	6018      	str	r0, [r3, #0]
 8004354:	6808      	ldr	r0, [r1, #0]
 8004356:	062e      	lsls	r6, r5, #24
 8004358:	d505      	bpl.n	8004366 <_printf_i+0xc2>
 800435a:	4e54      	ldr	r6, [pc, #336]	; (80044ac <_printf_i+0x208>)
 800435c:	2708      	movs	r7, #8
 800435e:	2a6f      	cmp	r2, #111	; 0x6f
 8004360:	d01b      	beq.n	800439a <_printf_i+0xf6>
 8004362:	270a      	movs	r7, #10
 8004364:	e019      	b.n	800439a <_printf_i+0xf6>
 8004366:	066d      	lsls	r5, r5, #25
 8004368:	d5f7      	bpl.n	800435a <_printf_i+0xb6>
 800436a:	b280      	uxth	r0, r0
 800436c:	e7f5      	b.n	800435a <_printf_i+0xb6>
 800436e:	3145      	adds	r1, #69	; 0x45
 8004370:	4e4e      	ldr	r6, [pc, #312]	; (80044ac <_printf_i+0x208>)
 8004372:	700a      	strb	r2, [r1, #0]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	6822      	ldr	r2, [r4, #0]
 8004378:	1d01      	adds	r1, r0, #4
 800437a:	6800      	ldr	r0, [r0, #0]
 800437c:	6019      	str	r1, [r3, #0]
 800437e:	0615      	lsls	r5, r2, #24
 8004380:	d521      	bpl.n	80043c6 <_printf_i+0x122>
 8004382:	07d3      	lsls	r3, r2, #31
 8004384:	d502      	bpl.n	800438c <_printf_i+0xe8>
 8004386:	2320      	movs	r3, #32
 8004388:	431a      	orrs	r2, r3
 800438a:	6022      	str	r2, [r4, #0]
 800438c:	2710      	movs	r7, #16
 800438e:	2800      	cmp	r0, #0
 8004390:	d103      	bne.n	800439a <_printf_i+0xf6>
 8004392:	2320      	movs	r3, #32
 8004394:	6822      	ldr	r2, [r4, #0]
 8004396:	439a      	bics	r2, r3
 8004398:	6022      	str	r2, [r4, #0]
 800439a:	0023      	movs	r3, r4
 800439c:	2200      	movs	r2, #0
 800439e:	3343      	adds	r3, #67	; 0x43
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	60a3      	str	r3, [r4, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db58      	blt.n	800445c <_printf_i+0x1b8>
 80043aa:	2204      	movs	r2, #4
 80043ac:	6821      	ldr	r1, [r4, #0]
 80043ae:	4391      	bics	r1, r2
 80043b0:	6021      	str	r1, [r4, #0]
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d154      	bne.n	8004460 <_printf_i+0x1bc>
 80043b6:	9d02      	ldr	r5, [sp, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05a      	beq.n	8004472 <_printf_i+0x1ce>
 80043bc:	0025      	movs	r5, r4
 80043be:	7833      	ldrb	r3, [r6, #0]
 80043c0:	3542      	adds	r5, #66	; 0x42
 80043c2:	702b      	strb	r3, [r5, #0]
 80043c4:	e055      	b.n	8004472 <_printf_i+0x1ce>
 80043c6:	0655      	lsls	r5, r2, #25
 80043c8:	d5db      	bpl.n	8004382 <_printf_i+0xde>
 80043ca:	b280      	uxth	r0, r0
 80043cc:	e7d9      	b.n	8004382 <_printf_i+0xde>
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	680d      	ldr	r5, [r1, #0]
 80043d2:	1d10      	adds	r0, r2, #4
 80043d4:	6949      	ldr	r1, [r1, #20]
 80043d6:	6018      	str	r0, [r3, #0]
 80043d8:	6813      	ldr	r3, [r2, #0]
 80043da:	062e      	lsls	r6, r5, #24
 80043dc:	d501      	bpl.n	80043e2 <_printf_i+0x13e>
 80043de:	6019      	str	r1, [r3, #0]
 80043e0:	e002      	b.n	80043e8 <_printf_i+0x144>
 80043e2:	066d      	lsls	r5, r5, #25
 80043e4:	d5fb      	bpl.n	80043de <_printf_i+0x13a>
 80043e6:	8019      	strh	r1, [r3, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	9d02      	ldr	r5, [sp, #8]
 80043ec:	6123      	str	r3, [r4, #16]
 80043ee:	e04f      	b.n	8004490 <_printf_i+0x1ec>
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	1d11      	adds	r1, r2, #4
 80043f4:	6019      	str	r1, [r3, #0]
 80043f6:	6815      	ldr	r5, [r2, #0]
 80043f8:	2100      	movs	r1, #0
 80043fa:	6862      	ldr	r2, [r4, #4]
 80043fc:	0028      	movs	r0, r5
 80043fe:	f000 f859 	bl	80044b4 <memchr>
 8004402:	2800      	cmp	r0, #0
 8004404:	d001      	beq.n	800440a <_printf_i+0x166>
 8004406:	1b40      	subs	r0, r0, r5
 8004408:	6060      	str	r0, [r4, #4]
 800440a:	6863      	ldr	r3, [r4, #4]
 800440c:	6123      	str	r3, [r4, #16]
 800440e:	2300      	movs	r3, #0
 8004410:	9a02      	ldr	r2, [sp, #8]
 8004412:	7013      	strb	r3, [r2, #0]
 8004414:	e03c      	b.n	8004490 <_printf_i+0x1ec>
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	002a      	movs	r2, r5
 800441a:	9904      	ldr	r1, [sp, #16]
 800441c:	9803      	ldr	r0, [sp, #12]
 800441e:	9d05      	ldr	r5, [sp, #20]
 8004420:	47a8      	blx	r5
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	d03e      	beq.n	80044a4 <_printf_i+0x200>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	079b      	lsls	r3, r3, #30
 800442a:	d415      	bmi.n	8004458 <_printf_i+0x1b4>
 800442c:	9b07      	ldr	r3, [sp, #28]
 800442e:	68e0      	ldr	r0, [r4, #12]
 8004430:	4298      	cmp	r0, r3
 8004432:	da39      	bge.n	80044a8 <_printf_i+0x204>
 8004434:	0018      	movs	r0, r3
 8004436:	e037      	b.n	80044a8 <_printf_i+0x204>
 8004438:	0022      	movs	r2, r4
 800443a:	2301      	movs	r3, #1
 800443c:	3219      	adds	r2, #25
 800443e:	9904      	ldr	r1, [sp, #16]
 8004440:	9803      	ldr	r0, [sp, #12]
 8004442:	9e05      	ldr	r6, [sp, #20]
 8004444:	47b0      	blx	r6
 8004446:	1c43      	adds	r3, r0, #1
 8004448:	d02c      	beq.n	80044a4 <_printf_i+0x200>
 800444a:	3501      	adds	r5, #1
 800444c:	68e3      	ldr	r3, [r4, #12]
 800444e:	9a07      	ldr	r2, [sp, #28]
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	42ab      	cmp	r3, r5
 8004454:	dcf0      	bgt.n	8004438 <_printf_i+0x194>
 8004456:	e7e9      	b.n	800442c <_printf_i+0x188>
 8004458:	2500      	movs	r5, #0
 800445a:	e7f7      	b.n	800444c <_printf_i+0x1a8>
 800445c:	2800      	cmp	r0, #0
 800445e:	d0ad      	beq.n	80043bc <_printf_i+0x118>
 8004460:	9d02      	ldr	r5, [sp, #8]
 8004462:	0039      	movs	r1, r7
 8004464:	f7fb fede 	bl	8000224 <__aeabi_uidivmod>
 8004468:	5c73      	ldrb	r3, [r6, r1]
 800446a:	3d01      	subs	r5, #1
 800446c:	702b      	strb	r3, [r5, #0]
 800446e:	2800      	cmp	r0, #0
 8004470:	d1f7      	bne.n	8004462 <_printf_i+0x1be>
 8004472:	2f08      	cmp	r7, #8
 8004474:	d109      	bne.n	800448a <_printf_i+0x1e6>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	07db      	lsls	r3, r3, #31
 800447a:	d506      	bpl.n	800448a <_printf_i+0x1e6>
 800447c:	6863      	ldr	r3, [r4, #4]
 800447e:	6922      	ldr	r2, [r4, #16]
 8004480:	4293      	cmp	r3, r2
 8004482:	dc02      	bgt.n	800448a <_printf_i+0x1e6>
 8004484:	2330      	movs	r3, #48	; 0x30
 8004486:	3d01      	subs	r5, #1
 8004488:	702b      	strb	r3, [r5, #0]
 800448a:	9b02      	ldr	r3, [sp, #8]
 800448c:	1b5b      	subs	r3, r3, r5
 800448e:	6123      	str	r3, [r4, #16]
 8004490:	9b05      	ldr	r3, [sp, #20]
 8004492:	aa07      	add	r2, sp, #28
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	0021      	movs	r1, r4
 8004498:	9b04      	ldr	r3, [sp, #16]
 800449a:	9803      	ldr	r0, [sp, #12]
 800449c:	f7ff fe94 	bl	80041c8 <_printf_common>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d1b8      	bne.n	8004416 <_printf_i+0x172>
 80044a4:	2001      	movs	r0, #1
 80044a6:	4240      	negs	r0, r0
 80044a8:	b009      	add	sp, #36	; 0x24
 80044aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ac:	08004779 	.word	0x08004779
 80044b0:	0800478a 	.word	0x0800478a

080044b4 <memchr>:
 80044b4:	b2c9      	uxtb	r1, r1
 80044b6:	1882      	adds	r2, r0, r2
 80044b8:	4290      	cmp	r0, r2
 80044ba:	d101      	bne.n	80044c0 <memchr+0xc>
 80044bc:	2000      	movs	r0, #0
 80044be:	4770      	bx	lr
 80044c0:	7803      	ldrb	r3, [r0, #0]
 80044c2:	428b      	cmp	r3, r1
 80044c4:	d0fb      	beq.n	80044be <memchr+0xa>
 80044c6:	3001      	adds	r0, #1
 80044c8:	e7f6      	b.n	80044b8 <memchr+0x4>

080044ca <memcpy>:
 80044ca:	2300      	movs	r3, #0
 80044cc:	b510      	push	{r4, lr}
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d100      	bne.n	80044d4 <memcpy+0xa>
 80044d2:	bd10      	pop	{r4, pc}
 80044d4:	5ccc      	ldrb	r4, [r1, r3]
 80044d6:	54c4      	strb	r4, [r0, r3]
 80044d8:	3301      	adds	r3, #1
 80044da:	e7f8      	b.n	80044ce <memcpy+0x4>

080044dc <memmove>:
 80044dc:	b510      	push	{r4, lr}
 80044de:	4288      	cmp	r0, r1
 80044e0:	d902      	bls.n	80044e8 <memmove+0xc>
 80044e2:	188b      	adds	r3, r1, r2
 80044e4:	4298      	cmp	r0, r3
 80044e6:	d303      	bcc.n	80044f0 <memmove+0x14>
 80044e8:	2300      	movs	r3, #0
 80044ea:	e007      	b.n	80044fc <memmove+0x20>
 80044ec:	5c8b      	ldrb	r3, [r1, r2]
 80044ee:	5483      	strb	r3, [r0, r2]
 80044f0:	3a01      	subs	r2, #1
 80044f2:	d2fb      	bcs.n	80044ec <memmove+0x10>
 80044f4:	bd10      	pop	{r4, pc}
 80044f6:	5ccc      	ldrb	r4, [r1, r3]
 80044f8:	54c4      	strb	r4, [r0, r3]
 80044fa:	3301      	adds	r3, #1
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1fa      	bne.n	80044f6 <memmove+0x1a>
 8004500:	e7f8      	b.n	80044f4 <memmove+0x18>
	...

08004504 <_free_r>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	0005      	movs	r5, r0
 8004508:	2900      	cmp	r1, #0
 800450a:	d010      	beq.n	800452e <_free_r+0x2a>
 800450c:	1f0c      	subs	r4, r1, #4
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	da00      	bge.n	8004516 <_free_r+0x12>
 8004514:	18e4      	adds	r4, r4, r3
 8004516:	0028      	movs	r0, r5
 8004518:	f000 f8d4 	bl	80046c4 <__malloc_lock>
 800451c:	4a1d      	ldr	r2, [pc, #116]	; (8004594 <_free_r+0x90>)
 800451e:	6813      	ldr	r3, [r2, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <_free_r+0x2c>
 8004524:	6063      	str	r3, [r4, #4]
 8004526:	6014      	str	r4, [r2, #0]
 8004528:	0028      	movs	r0, r5
 800452a:	f000 f8cc 	bl	80046c6 <__malloc_unlock>
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	42a3      	cmp	r3, r4
 8004532:	d909      	bls.n	8004548 <_free_r+0x44>
 8004534:	6821      	ldr	r1, [r4, #0]
 8004536:	1860      	adds	r0, r4, r1
 8004538:	4283      	cmp	r3, r0
 800453a:	d1f3      	bne.n	8004524 <_free_r+0x20>
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	1841      	adds	r1, r0, r1
 8004542:	6021      	str	r1, [r4, #0]
 8004544:	e7ee      	b.n	8004524 <_free_r+0x20>
 8004546:	0013      	movs	r3, r2
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	2a00      	cmp	r2, #0
 800454c:	d001      	beq.n	8004552 <_free_r+0x4e>
 800454e:	42a2      	cmp	r2, r4
 8004550:	d9f9      	bls.n	8004546 <_free_r+0x42>
 8004552:	6819      	ldr	r1, [r3, #0]
 8004554:	1858      	adds	r0, r3, r1
 8004556:	42a0      	cmp	r0, r4
 8004558:	d10b      	bne.n	8004572 <_free_r+0x6e>
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	1809      	adds	r1, r1, r0
 800455e:	1858      	adds	r0, r3, r1
 8004560:	6019      	str	r1, [r3, #0]
 8004562:	4282      	cmp	r2, r0
 8004564:	d1e0      	bne.n	8004528 <_free_r+0x24>
 8004566:	6810      	ldr	r0, [r2, #0]
 8004568:	6852      	ldr	r2, [r2, #4]
 800456a:	1841      	adds	r1, r0, r1
 800456c:	6019      	str	r1, [r3, #0]
 800456e:	605a      	str	r2, [r3, #4]
 8004570:	e7da      	b.n	8004528 <_free_r+0x24>
 8004572:	42a0      	cmp	r0, r4
 8004574:	d902      	bls.n	800457c <_free_r+0x78>
 8004576:	230c      	movs	r3, #12
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	e7d5      	b.n	8004528 <_free_r+0x24>
 800457c:	6821      	ldr	r1, [r4, #0]
 800457e:	1860      	adds	r0, r4, r1
 8004580:	4282      	cmp	r2, r0
 8004582:	d103      	bne.n	800458c <_free_r+0x88>
 8004584:	6810      	ldr	r0, [r2, #0]
 8004586:	6852      	ldr	r2, [r2, #4]
 8004588:	1841      	adds	r1, r0, r1
 800458a:	6021      	str	r1, [r4, #0]
 800458c:	6062      	str	r2, [r4, #4]
 800458e:	605c      	str	r4, [r3, #4]
 8004590:	e7ca      	b.n	8004528 <_free_r+0x24>
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	200000d0 	.word	0x200000d0

08004598 <_malloc_r>:
 8004598:	2303      	movs	r3, #3
 800459a:	b570      	push	{r4, r5, r6, lr}
 800459c:	1ccd      	adds	r5, r1, #3
 800459e:	439d      	bics	r5, r3
 80045a0:	3508      	adds	r5, #8
 80045a2:	0006      	movs	r6, r0
 80045a4:	2d0c      	cmp	r5, #12
 80045a6:	d21e      	bcs.n	80045e6 <_malloc_r+0x4e>
 80045a8:	250c      	movs	r5, #12
 80045aa:	42a9      	cmp	r1, r5
 80045ac:	d81d      	bhi.n	80045ea <_malloc_r+0x52>
 80045ae:	0030      	movs	r0, r6
 80045b0:	f000 f888 	bl	80046c4 <__malloc_lock>
 80045b4:	4a25      	ldr	r2, [pc, #148]	; (800464c <_malloc_r+0xb4>)
 80045b6:	6814      	ldr	r4, [r2, #0]
 80045b8:	0021      	movs	r1, r4
 80045ba:	2900      	cmp	r1, #0
 80045bc:	d119      	bne.n	80045f2 <_malloc_r+0x5a>
 80045be:	4c24      	ldr	r4, [pc, #144]	; (8004650 <_malloc_r+0xb8>)
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <_malloc_r+0x36>
 80045c6:	0030      	movs	r0, r6
 80045c8:	f000 f86a 	bl	80046a0 <_sbrk_r>
 80045cc:	6020      	str	r0, [r4, #0]
 80045ce:	0029      	movs	r1, r5
 80045d0:	0030      	movs	r0, r6
 80045d2:	f000 f865 	bl	80046a0 <_sbrk_r>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	d12b      	bne.n	8004632 <_malloc_r+0x9a>
 80045da:	230c      	movs	r3, #12
 80045dc:	0030      	movs	r0, r6
 80045de:	6033      	str	r3, [r6, #0]
 80045e0:	f000 f871 	bl	80046c6 <__malloc_unlock>
 80045e4:	e003      	b.n	80045ee <_malloc_r+0x56>
 80045e6:	2d00      	cmp	r5, #0
 80045e8:	dadf      	bge.n	80045aa <_malloc_r+0x12>
 80045ea:	230c      	movs	r3, #12
 80045ec:	6033      	str	r3, [r6, #0]
 80045ee:	2000      	movs	r0, #0
 80045f0:	bd70      	pop	{r4, r5, r6, pc}
 80045f2:	680b      	ldr	r3, [r1, #0]
 80045f4:	1b5b      	subs	r3, r3, r5
 80045f6:	d419      	bmi.n	800462c <_malloc_r+0x94>
 80045f8:	2b0b      	cmp	r3, #11
 80045fa:	d903      	bls.n	8004604 <_malloc_r+0x6c>
 80045fc:	600b      	str	r3, [r1, #0]
 80045fe:	18cc      	adds	r4, r1, r3
 8004600:	6025      	str	r5, [r4, #0]
 8004602:	e003      	b.n	800460c <_malloc_r+0x74>
 8004604:	684b      	ldr	r3, [r1, #4]
 8004606:	428c      	cmp	r4, r1
 8004608:	d10d      	bne.n	8004626 <_malloc_r+0x8e>
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	0030      	movs	r0, r6
 800460e:	f000 f85a 	bl	80046c6 <__malloc_unlock>
 8004612:	0020      	movs	r0, r4
 8004614:	2207      	movs	r2, #7
 8004616:	300b      	adds	r0, #11
 8004618:	1d23      	adds	r3, r4, #4
 800461a:	4390      	bics	r0, r2
 800461c:	1ac3      	subs	r3, r0, r3
 800461e:	d0e7      	beq.n	80045f0 <_malloc_r+0x58>
 8004620:	425a      	negs	r2, r3
 8004622:	50e2      	str	r2, [r4, r3]
 8004624:	e7e4      	b.n	80045f0 <_malloc_r+0x58>
 8004626:	6063      	str	r3, [r4, #4]
 8004628:	000c      	movs	r4, r1
 800462a:	e7ef      	b.n	800460c <_malloc_r+0x74>
 800462c:	000c      	movs	r4, r1
 800462e:	6849      	ldr	r1, [r1, #4]
 8004630:	e7c3      	b.n	80045ba <_malloc_r+0x22>
 8004632:	2303      	movs	r3, #3
 8004634:	1cc4      	adds	r4, r0, #3
 8004636:	439c      	bics	r4, r3
 8004638:	42a0      	cmp	r0, r4
 800463a:	d0e1      	beq.n	8004600 <_malloc_r+0x68>
 800463c:	1a21      	subs	r1, r4, r0
 800463e:	0030      	movs	r0, r6
 8004640:	f000 f82e 	bl	80046a0 <_sbrk_r>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d1db      	bne.n	8004600 <_malloc_r+0x68>
 8004648:	e7c7      	b.n	80045da <_malloc_r+0x42>
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	200000d0 	.word	0x200000d0
 8004650:	200000d4 	.word	0x200000d4

08004654 <_realloc_r>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	0007      	movs	r7, r0
 8004658:	000d      	movs	r5, r1
 800465a:	0016      	movs	r6, r2
 800465c:	2900      	cmp	r1, #0
 800465e:	d105      	bne.n	800466c <_realloc_r+0x18>
 8004660:	0011      	movs	r1, r2
 8004662:	f7ff ff99 	bl	8004598 <_malloc_r>
 8004666:	0004      	movs	r4, r0
 8004668:	0020      	movs	r0, r4
 800466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466c:	2a00      	cmp	r2, #0
 800466e:	d103      	bne.n	8004678 <_realloc_r+0x24>
 8004670:	f7ff ff48 	bl	8004504 <_free_r>
 8004674:	0034      	movs	r4, r6
 8004676:	e7f7      	b.n	8004668 <_realloc_r+0x14>
 8004678:	f000 f826 	bl	80046c8 <_malloc_usable_size_r>
 800467c:	002c      	movs	r4, r5
 800467e:	42b0      	cmp	r0, r6
 8004680:	d2f2      	bcs.n	8004668 <_realloc_r+0x14>
 8004682:	0031      	movs	r1, r6
 8004684:	0038      	movs	r0, r7
 8004686:	f7ff ff87 	bl	8004598 <_malloc_r>
 800468a:	1e04      	subs	r4, r0, #0
 800468c:	d0ec      	beq.n	8004668 <_realloc_r+0x14>
 800468e:	0029      	movs	r1, r5
 8004690:	0032      	movs	r2, r6
 8004692:	f7ff ff1a 	bl	80044ca <memcpy>
 8004696:	0029      	movs	r1, r5
 8004698:	0038      	movs	r0, r7
 800469a:	f7ff ff33 	bl	8004504 <_free_r>
 800469e:	e7e3      	b.n	8004668 <_realloc_r+0x14>

080046a0 <_sbrk_r>:
 80046a0:	2300      	movs	r3, #0
 80046a2:	b570      	push	{r4, r5, r6, lr}
 80046a4:	4c06      	ldr	r4, [pc, #24]	; (80046c0 <_sbrk_r+0x20>)
 80046a6:	0005      	movs	r5, r0
 80046a8:	0008      	movs	r0, r1
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	f7fc fc34 	bl	8000f18 <_sbrk>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d103      	bne.n	80046bc <_sbrk_r+0x1c>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d000      	beq.n	80046bc <_sbrk_r+0x1c>
 80046ba:	602b      	str	r3, [r5, #0]
 80046bc:	bd70      	pop	{r4, r5, r6, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	200002fc 	.word	0x200002fc

080046c4 <__malloc_lock>:
 80046c4:	4770      	bx	lr

080046c6 <__malloc_unlock>:
 80046c6:	4770      	bx	lr

080046c8 <_malloc_usable_size_r>:
 80046c8:	1f0b      	subs	r3, r1, #4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	1f18      	subs	r0, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	da01      	bge.n	80046d6 <_malloc_usable_size_r+0xe>
 80046d2:	580b      	ldr	r3, [r1, r0]
 80046d4:	18c0      	adds	r0, r0, r3
 80046d6:	4770      	bx	lr

080046d8 <_init>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr

080046e4 <_fini>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr
