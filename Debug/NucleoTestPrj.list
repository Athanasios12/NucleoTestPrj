
NucleoTestPrj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004654  08004654  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004654  08004654  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004654  08004654  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800465c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000070  080046cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080046cc  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000befb  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d28  00000000  00000000  0002bf93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  0002dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  0002e968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000dcd1  00000000  00000000  0002f548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ef1  00000000  00000000  0003d219  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000510d6  00000000  00000000  0004710a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000981e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff8  00000000  00000000  0009825c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004590 	.word	0x08004590

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004590 	.word	0x08004590

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM14_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
static void initBluetoothHC06(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if (TIM6 == htim->Instance)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0c      	ldr	r2, [pc, #48]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d107      	bne.n	8000252 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		timeCounter++;
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	b29b      	uxth	r3, r3
 8000248:	3301      	adds	r3, #1
 800024a:	b29a      	uxth	r2, r3
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800024e:	801a      	strh	r2, [r3, #0]
	}
	else if(TIM14 == htim->Instance)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
	}
}
 8000250:	e009      	b.n	8000266 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if(TIM14 == htim->Instance)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a08      	ldr	r2, [pc, #32]	; (8000278 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d104      	bne.n	8000266 <HAL_TIM_PeriodElapsedCallback+0x36>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800025e:	2104      	movs	r1, #4
 8000260:	0018      	movs	r0, r3
 8000262:	f001 f943 	bl	80014ec <HAL_GPIO_TogglePin>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	40001000 	.word	0x40001000
 8000274:	2000008c 	.word	0x2000008c
 8000278:	40002000 	.word	0x40002000
 800027c:	48000800 	.word	0x48000800

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	b0a5      	sub	sp, #148	; 0x94
 8000284:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fdff 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f8b1 	bl	80003f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 fa93 	bl	80007b8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000292:	f000 f917 	bl	80004c4 <MX_RTC_Init>
  MX_TIM6_Init();
 8000296:	f000 f9e3 	bl	8000660 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800029a:	f000 fa2d 	bl	80006f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800029e:	f000 fa5b 	bl	8000758 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 80002a2:	f000 fa01 	bl	80006a8 <MX_TIM14_Init>
  MX_TIM3_Init();
 80002a6:	f000 f96f 	bl	8000588 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef sTime = {0};
 80002aa:	2358      	movs	r3, #88	; 0x58
 80002ac:	2208      	movs	r2, #8
 80002ae:	4694      	mov	ip, r2
 80002b0:	44bc      	add	ip, r7
 80002b2:	4463      	add	r3, ip
 80002b4:	0018      	movs	r0, r3
 80002b6:	2314      	movs	r3, #20
 80002b8:	001a      	movs	r2, r3
 80002ba:	2100      	movs	r1, #0
 80002bc:	f003 fd58 	bl	8003d70 <memset>
  RTC_DateTypeDef sDate = {0};
 80002c0:	2354      	movs	r3, #84	; 0x54
 80002c2:	2208      	movs	r2, #8
 80002c4:	4694      	mov	ip, r2
 80002c6:	44bc      	add	ip, r7
 80002c8:	4463      	add	r3, ip
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* TIM14 interrupt Init */
  HAL_TIM_Base_Start_IT(&htim14);
 80002ce:	4b40      	ldr	r3, [pc, #256]	; (80003d0 <main+0x150>)
 80002d0:	0018      	movs	r0, r3
 80002d2:	f002 f9ee 	bl	80026b2 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002d6:	4b3f      	ldr	r3, [pc, #252]	; (80003d4 <main+0x154>)
 80002d8:	2100      	movs	r1, #0
 80002da:	0018      	movs	r0, r3
 80002dc:	f002 fa62 	bl	80027a4 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //light ext led
	  GPIO_PinState moveSensorState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 80002e0:	256f      	movs	r5, #111	; 0x6f
 80002e2:	2608      	movs	r6, #8
 80002e4:	19bb      	adds	r3, r7, r6
 80002e6:	195c      	adds	r4, r3, r5
 80002e8:	2380      	movs	r3, #128	; 0x80
 80002ea:	015b      	lsls	r3, r3, #5
 80002ec:	4a3a      	ldr	r2, [pc, #232]	; (80003d8 <main+0x158>)
 80002ee:	0019      	movs	r1, r3
 80002f0:	0010      	movs	r0, r2
 80002f2:	f001 f8c1 	bl	8001478 <HAL_GPIO_ReadPin>
 80002f6:	0003      	movs	r3, r0
 80002f8:	7023      	strb	r3, [r4, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, moveSensorState);
 80002fa:	19bb      	adds	r3, r7, r6
 80002fc:	195b      	adds	r3, r3, r5
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	4835      	ldr	r0, [pc, #212]	; (80003d8 <main+0x158>)
 8000302:	001a      	movs	r2, r3
 8000304:	2108      	movs	r1, #8
 8000306:	f001 f8d4 	bl	80014b2 <HAL_GPIO_WritePin>

	  if (true == btnTrigger)
 800030a:	4b34      	ldr	r3, [pc, #208]	; (80003dc <main+0x15c>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	b2db      	uxtb	r3, r3
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0e5      	beq.n	80002e0 <main+0x60>
	  {
		  //light led
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000314:	2390      	movs	r3, #144	; 0x90
 8000316:	05db      	lsls	r3, r3, #23
 8000318:	2120      	movs	r1, #32
 800031a:	0018      	movs	r0, r3
 800031c:	f001 f8e6 	bl	80014ec <HAL_GPIO_TogglePin>
		  //get current rtc time and date
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000320:	2558      	movs	r5, #88	; 0x58
 8000322:	2608      	movs	r6, #8
 8000324:	19bb      	adds	r3, r7, r6
 8000326:	1959      	adds	r1, r3, r5
 8000328:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <main+0x160>)
 800032a:	2200      	movs	r2, #0
 800032c:	0018      	movs	r0, r3
 800032e:	f001 ffab 	bl	8002288 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000332:	2154      	movs	r1, #84	; 0x54
 8000334:	000c      	movs	r4, r1
 8000336:	2308      	movs	r3, #8
 8000338:	469c      	mov	ip, r3
 800033a:	44bc      	add	ip, r7
 800033c:	4461      	add	r1, ip
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <main+0x160>)
 8000340:	2200      	movs	r2, #0
 8000342:	0018      	movs	r0, r3
 8000344:	f002 f8a4 	bl	8002490 <HAL_RTC_GetDate>
		  sprintf(currentTimeDateData,
			  "Date: %2d.%2d.202%d Time: %d:%d:%d\nMoveSensor : %d\nCounter : %d",
			  sDate.WeekDay, sDate.Month, sDate.Year,
 8000348:	0021      	movs	r1, r4
 800034a:	0032      	movs	r2, r6
 800034c:	18bb      	adds	r3, r7, r2
 800034e:	185b      	adds	r3, r3, r1
 8000350:	781b      	ldrb	r3, [r3, #0]
		  sprintf(currentTimeDateData,
 8000352:	607b      	str	r3, [r7, #4]
			  sDate.WeekDay, sDate.Month, sDate.Year,
 8000354:	18bb      	adds	r3, r7, r2
 8000356:	185b      	adds	r3, r3, r1
 8000358:	785b      	ldrb	r3, [r3, #1]
		  sprintf(currentTimeDateData,
 800035a:	603b      	str	r3, [r7, #0]
			  sDate.WeekDay, sDate.Month, sDate.Year,
 800035c:	18bb      	adds	r3, r7, r2
 800035e:	185b      	adds	r3, r3, r1
 8000360:	78db      	ldrb	r3, [r3, #3]
		  sprintf(currentTimeDateData,
 8000362:	001c      	movs	r4, r3
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000364:	0029      	movs	r1, r5
 8000366:	18bb      	adds	r3, r7, r2
 8000368:	185b      	adds	r3, r3, r1
 800036a:	781b      	ldrb	r3, [r3, #0]
		  sprintf(currentTimeDateData,
 800036c:	001d      	movs	r5, r3
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 800036e:	18bb      	adds	r3, r7, r2
 8000370:	185b      	adds	r3, r3, r1
 8000372:	785b      	ldrb	r3, [r3, #1]
		  sprintf(currentTimeDateData,
 8000374:	001e      	movs	r6, r3
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000376:	18bb      	adds	r3, r7, r2
 8000378:	185b      	adds	r3, r3, r1
 800037a:	789b      	ldrb	r3, [r3, #2]
		  sprintf(currentTimeDateData,
 800037c:	469c      	mov	ip, r3
 800037e:	216f      	movs	r1, #111	; 0x6f
 8000380:	18bb      	adds	r3, r7, r2
 8000382:	185b      	adds	r3, r3, r1
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <main+0x164>)
 8000388:	8812      	ldrh	r2, [r2, #0]
 800038a:	b292      	uxth	r2, r2
 800038c:	4916      	ldr	r1, [pc, #88]	; (80003e8 <main+0x168>)
 800038e:	200c      	movs	r0, #12
 8000390:	1838      	adds	r0, r7, r0
 8000392:	9205      	str	r2, [sp, #20]
 8000394:	9304      	str	r3, [sp, #16]
 8000396:	4662      	mov	r2, ip
 8000398:	9203      	str	r2, [sp, #12]
 800039a:	9602      	str	r6, [sp, #8]
 800039c:	9501      	str	r5, [sp, #4]
 800039e:	9400      	str	r4, [sp, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	f003 fcec 	bl	8003d80 <siprintf>
		  	  (int) moveSensorState, timeCounter);
		  HAL_UART_Transmit(&huart1, (uint8_t*)currentTimeDateData, strlen(currentTimeDateData), 100);
 80003a8:	240c      	movs	r4, #12
 80003aa:	193b      	adds	r3, r7, r4
 80003ac:	0018      	movs	r0, r3
 80003ae:	f7ff feab 	bl	8000108 <strlen>
 80003b2:	0003      	movs	r3, r0
 80003b4:	b29a      	uxth	r2, r3
 80003b6:	1939      	adds	r1, r7, r4
 80003b8:	480c      	ldr	r0, [pc, #48]	; (80003ec <main+0x16c>)
 80003ba:	2364      	movs	r3, #100	; 0x64
 80003bc:	f002 ff7e 	bl	80032bc <HAL_UART_Transmit>
		  btnTrigger = false;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <main+0x15c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
		  timeCounter = 0U;
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <main+0x164>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	801a      	strh	r2, [r3, #0]
  {
 80003cc:	e788      	b.n	80002e0 <main+0x60>
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	2000023c 	.word	0x2000023c
 80003d4:	2000009c 	.word	0x2000009c
 80003d8:	48000800 	.word	0x48000800
 80003dc:	2000008e 	.word	0x2000008e
 80003e0:	2000015c 	.word	0x2000015c
 80003e4:	2000008c 	.word	0x2000008c
 80003e8:	080045a8 	.word	0x080045a8
 80003ec:	200000dc 	.word	0x200000dc

080003f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b095      	sub	sp, #84	; 0x54
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	2420      	movs	r4, #32
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	0018      	movs	r0, r3
 80003fc:	2330      	movs	r3, #48	; 0x30
 80003fe:	001a      	movs	r2, r3
 8000400:	2100      	movs	r1, #0
 8000402:	f003 fcb5 	bl	8003d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000406:	2310      	movs	r3, #16
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	0018      	movs	r0, r3
 800040c:	2310      	movs	r3, #16
 800040e:	001a      	movs	r2, r3
 8000410:	2100      	movs	r1, #0
 8000412:	f003 fcad 	bl	8003d70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000416:	003b      	movs	r3, r7
 8000418:	0018      	movs	r0, r3
 800041a:	2310      	movs	r3, #16
 800041c:	001a      	movs	r2, r3
 800041e:	2100      	movs	r1, #0
 8000420:	f003 fca6 	bl	8003d70 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000424:	0021      	movs	r1, r4
 8000426:	187b      	adds	r3, r7, r1
 8000428:	220a      	movs	r2, #10
 800042a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2201      	movs	r2, #1
 8000430:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2210      	movs	r2, #16
 8000436:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2202      	movs	r2, #2
 8000442:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800044a:	187b      	adds	r3, r7, r1
 800044c:	22a0      	movs	r2, #160	; 0xa0
 800044e:	0392      	lsls	r2, r2, #14
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2200      	movs	r2, #0
 8000456:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000458:	187b      	adds	r3, r7, r1
 800045a:	0018      	movs	r0, r3
 800045c:	f001 f888 	bl	8001570 <HAL_RCC_OscConfig>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000464:	f000 fa54 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	2110      	movs	r1, #16
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2207      	movs	r2, #7
 800046e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2202      	movs	r2, #2
 8000474:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2101      	movs	r1, #1
 8000486:	0018      	movs	r0, r3
 8000488:	f001 fb8e 	bl	8001ba8 <HAL_RCC_ClockConfig>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000490:	f000 fa3e 	bl	8000910 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000494:	003b      	movs	r3, r7
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <SystemClock_Config+0xd0>)
 8000498:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800049a:	003b      	movs	r3, r7
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004a0:	003b      	movs	r3, r7
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	0092      	lsls	r2, r2, #2
 80004a6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a8:	003b      	movs	r3, r7
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fcce 	bl	8001e4c <HAL_RCCEx_PeriphCLKConfig>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80004b4:	f000 fa2c 	bl	8000910 <Error_Handler>
  }
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b015      	add	sp, #84	; 0x54
 80004be:	bd90      	pop	{r4, r7, pc}
 80004c0:	00010001 	.word	0x00010001

080004c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	0018      	movs	r0, r3
 80004ce:	2314      	movs	r3, #20
 80004d0:	001a      	movs	r2, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	f003 fc4c 	bl	8003d70 <memset>
  RTC_DateTypeDef sDate = {0};
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80004de:	4b28      	ldr	r3, [pc, #160]	; (8000580 <MX_RTC_Init+0xbc>)
 80004e0:	4a28      	ldr	r2, [pc, #160]	; (8000584 <MX_RTC_Init+0xc0>)
 80004e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80004e4:	4b26      	ldr	r3, [pc, #152]	; (8000580 <MX_RTC_Init+0xbc>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80004ea:	4b25      	ldr	r3, [pc, #148]	; (8000580 <MX_RTC_Init+0xbc>)
 80004ec:	227f      	movs	r2, #127	; 0x7f
 80004ee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <MX_RTC_Init+0xbc>)
 80004f2:	22ff      	movs	r2, #255	; 0xff
 80004f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80004f6:	4b22      	ldr	r3, [pc, #136]	; (8000580 <MX_RTC_Init+0xbc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_RTC_Init+0xbc>)
 80004fe:	2200      	movs	r2, #0
 8000500:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000502:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <MX_RTC_Init+0xbc>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <MX_RTC_Init+0xbc>)
 800050a:	0018      	movs	r0, r3
 800050c:	f001 fd6c 	bl	8001fe8 <HAL_RTC_Init>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000514:	f000 f9fc 	bl	8000910 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2200      	movs	r2, #0
 8000522:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000536:	1d39      	adds	r1, r7, #4
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_RTC_Init+0xbc>)
 800053a:	2200      	movs	r2, #0
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fde7 	bl	8002110 <HAL_RTC_SetTime>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000546:	f000 f9e3 	bl	8000910 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800054a:	003b      	movs	r3, r7
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000550:	003b      	movs	r3, r7
 8000552:	2201      	movs	r2, #1
 8000554:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000556:	003b      	movs	r3, r7
 8000558:	2201      	movs	r2, #1
 800055a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800055c:	003b      	movs	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000562:	0039      	movs	r1, r7
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_RTC_Init+0xbc>)
 8000566:	2200      	movs	r2, #0
 8000568:	0018      	movs	r0, r3
 800056a:	f001 feeb 	bl	8002344 <HAL_RTC_SetDate>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8000572:	f000 f9cd 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b006      	add	sp, #24
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	2000015c 	.word	0x2000015c
 8000584:	40002800 	.word	0x40002800

08000588 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058e:	2320      	movs	r3, #32
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	0018      	movs	r0, r3
 8000594:	2308      	movs	r3, #8
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f003 fbe9 	bl	8003d70 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	0018      	movs	r0, r3
 80005a2:	231c      	movs	r3, #28
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f003 fbe2 	bl	8003d70 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_TIM3_Init+0xc8>)
 80005ae:	4a29      	ldr	r2, [pc, #164]	; (8000654 <MX_TIM3_Init+0xcc>)
 80005b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800 - 1;
 80005b2:	4b27      	ldr	r3, [pc, #156]	; (8000650 <MX_TIM3_Init+0xc8>)
 80005b4:	4a28      	ldr	r2, [pc, #160]	; (8000658 <MX_TIM3_Init+0xd0>)
 80005b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <MX_TIM3_Init+0xc8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 -1;
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_TIM3_Init+0xc8>)
 80005c0:	4a26      	ldr	r2, [pc, #152]	; (800065c <MX_TIM3_Init+0xd4>)
 80005c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_TIM3_Init+0xc8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ca:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_TIM3_Init+0xc8>)
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_TIM3_Init+0xc8>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 f8ba 	bl	800274c <HAL_TIM_PWM_Init>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80005dc:	f000 f998 	bl	8000910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e0:	2120      	movs	r1, #32
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005ee:	187a      	adds	r2, r7, r1
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_TIM3_Init+0xc8>)
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f002 fda5 	bl	8003144 <HAL_TIMEx_MasterConfigSynchronization>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80005fe:	f000 f987 	bl	8000910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2260      	movs	r2, #96	; 0x60
 8000606:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	22fa      	movs	r2, #250	; 0xfa
 800060c:	0092      	lsls	r2, r2, #2
 800060e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2204      	movs	r2, #4
 800061a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	0052      	lsls	r2, r2, #1
 8000622:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800062a:	1d39      	adds	r1, r7, #4
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_TIM3_Init+0xc8>)
 800062e:	2200      	movs	r2, #0
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fa19 	bl	8002a68 <HAL_TIM_PWM_ConfigChannel>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800063a:	f000 f969 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <MX_TIM3_Init+0xc8>)
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fa09 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b00a      	add	sp, #40	; 0x28
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	2000009c 	.word	0x2000009c
 8000654:	40000400 	.word	0x40000400
 8000658:	000012bf 	.word	0x000012bf
 800065c:	000003e7 	.word	0x000003e7

08000660 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 1 */
  //Timer6 configuration - uses sys clock of 48Mhz
  // with prescaler 48000 - 1
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000664:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_TIM6_Init+0x3c>)
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <MX_TIM6_Init+0x40>)
 8000668:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000;
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_TIM6_Init+0x3c>)
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <MX_TIM6_Init+0x44>)
 800066e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_TIM6_Init+0x3c>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_TIM6_Init+0x3c>)
 8000678:	22fa      	movs	r2, #250	; 0xfa
 800067a:	0092      	lsls	r2, r2, #2
 800067c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_TIM6_Init+0x3c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <MX_TIM6_Init+0x3c>)
 8000686:	0018      	movs	r0, r3
 8000688:	f001 ffe7 	bl	800265a <HAL_TIM_Base_Init>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM6_Init+0x34>
  {
    Error_Handler();
 8000690:	f000 f93e 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	2000017c 	.word	0x2000017c
 80006a0:	40001000 	.word	0x40001000
 80006a4:	0000bb80 	.word	0x0000bb80

080006a8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_TIM14_Init+0x40>)
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <MX_TIM14_Init+0x44>)
 80006b0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48000 - 1;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_TIM14_Init+0x40>)
 80006b4:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <MX_TIM14_Init+0x48>)
 80006b6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_TIM14_Init+0x40>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000 - 1;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_TIM14_Init+0x40>)
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <MX_TIM14_Init+0x4c>)
 80006c2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_TIM14_Init+0x40>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_TIM14_Init+0x40>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MX_TIM14_Init+0x40>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 ffc1 	bl	800265a <HAL_TIM_Base_Init>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80006dc:	f000 f918 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	2000023c 	.word	0x2000023c
 80006ec:	40002000 	.word	0x40002000
 80006f0:	0000bb7f 	.word	0x0000bb7f
 80006f4:	000003e7 	.word	0x000003e7

080006f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART1_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART1_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000704:	2296      	movs	r2, #150	; 0x96
 8000706:	0192      	lsls	r2, r2, #6
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800073c:	0018      	movs	r0, r3
 800073e:	f002 fd69 	bl	8003214 <HAL_UART_Init>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f8e3 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000dc 	.word	0x200000dc
 8000754:	40013800 	.word	0x40013800

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_USART2_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000764:	2296      	movs	r2, #150	; 0x96
 8000766:	0212      	lsls	r2, r2, #8
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800079c:	0018      	movs	r0, r3
 800079e:	f002 fd39 	bl	8003214 <HAL_UART_Init>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f8b3 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200001bc 	.word	0x200001bc
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b08b      	sub	sp, #44	; 0x2c
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	2414      	movs	r4, #20
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	0018      	movs	r0, r3
 80007c4:	2314      	movs	r3, #20
 80007c6:	001a      	movs	r2, r3
 80007c8:	2100      	movs	r1, #0
 80007ca:	f003 fad1 	bl	8003d70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b4d      	ldr	r3, [pc, #308]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	4b4c      	ldr	r3, [pc, #304]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0309      	lsls	r1, r1, #12
 80007d8:	430a      	orrs	r2, r1
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	4b49      	ldr	r3, [pc, #292]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	031b      	lsls	r3, r3, #12
 80007e4:	4013      	ands	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ea:	4b46      	ldr	r3, [pc, #280]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	4b45      	ldr	r3, [pc, #276]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	03c9      	lsls	r1, r1, #15
 80007f4:	430a      	orrs	r2, r1
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	4b42      	ldr	r3, [pc, #264]	; (8000904 <MX_GPIO_Init+0x14c>)
 80007fa:	695a      	ldr	r2, [r3, #20]
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	03db      	lsls	r3, r3, #15
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b3f      	ldr	r3, [pc, #252]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <MX_GPIO_Init+0x14c>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	0289      	lsls	r1, r1, #10
 8000810:	430a      	orrs	r2, r1
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	029b      	lsls	r3, r3, #10
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b38      	ldr	r3, [pc, #224]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4b37      	ldr	r3, [pc, #220]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	02c9      	lsls	r1, r1, #11
 800082c:	430a      	orrs	r2, r1
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	4b34      	ldr	r3, [pc, #208]	; (8000904 <MX_GPIO_Init+0x14c>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	02db      	lsls	r3, r3, #11
 8000838:	4013      	ands	r3, r2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_GPIO_Init+0x150>)
 8000840:	2200      	movs	r2, #0
 8000842:	210c      	movs	r1, #12
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fe34 	bl	80014b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084a:	2390      	movs	r3, #144	; 0x90
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fe2d 	bl	80014b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	22a0      	movs	r2, #160	; 0xa0
 800085c:	0192      	lsls	r2, r2, #6
 800085e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	4a2a      	ldr	r2, [pc, #168]	; (800090c <MX_GPIO_Init+0x154>)
 8000864:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	193b      	adds	r3, r7, r4
 800086e:	4a26      	ldr	r2, [pc, #152]	; (8000908 <MX_GPIO_Init+0x150>)
 8000870:	0019      	movs	r1, r3
 8000872:	0010      	movs	r0, r2
 8000874:	f000 fc90 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000878:	0021      	movs	r1, r4
 800087a:	187b      	adds	r3, r7, r1
 800087c:	220c      	movs	r2, #12
 800087e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2201      	movs	r2, #1
 8000884:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	000c      	movs	r4, r1
 8000894:	187b      	adds	r3, r7, r1
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_GPIO_Init+0x150>)
 8000898:	0019      	movs	r1, r3
 800089a:	0010      	movs	r0, r2
 800089c:	f000 fc7c 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a0:	0021      	movs	r1, r4
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2220      	movs	r2, #32
 80008a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2201      	movs	r2, #1
 80008ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ba:	000c      	movs	r4, r1
 80008bc:	187a      	adds	r2, r7, r1
 80008be:	2390      	movs	r3, #144	; 0x90
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fc67 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008ca:	0021      	movs	r1, r4
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	0152      	lsls	r2, r2, #5
 80008d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	4a09      	ldr	r2, [pc, #36]	; (8000908 <MX_GPIO_Init+0x150>)
 80008e4:	0019      	movs	r1, r3
 80008e6:	0010      	movs	r0, r2
 80008e8:	f000 fc56 	bl	8001198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	2007      	movs	r0, #7
 80008f2:	f000 fbd9 	bl	80010a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008f6:	2007      	movs	r0, #7
 80008f8:	f000 fbeb 	bl	80010d2 <HAL_NVIC_EnableIRQ>

}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b00b      	add	sp, #44	; 0x2c
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	48000800 	.word	0x48000800
 800090c:	10110000 	.word	0x10110000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x44>)
 8000924:	699a      	ldr	r2, [r3, #24]
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_MspInit+0x44>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	619a      	str	r2, [r3, #24]
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_MspInit+0x44>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x44>)
 800093c:	69da      	ldr	r2, [r3, #28]
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_MspInit+0x44>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	0549      	lsls	r1, r1, #21
 8000944:	430a      	orrs	r2, r1
 8000946:	61da      	str	r2, [r3, #28]
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_MspInit+0x44>)
 800094a:	69da      	ldr	r2, [r3, #28]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	055b      	lsls	r3, r3, #21
 8000950:	4013      	ands	r3, r2
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <HAL_RTC_MspInit+0x28>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d106      	bne.n	8000984 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_RTC_MspInit+0x2c>)
 8000978:	6a1a      	ldr	r2, [r3, #32]
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_RTC_MspInit+0x2c>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0209      	lsls	r1, r1, #8
 8000980:	430a      	orrs	r2, r1
 8000982:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40002800 	.word	0x40002800
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <HAL_TIM_PWM_MspInit+0x34>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d10b      	bne.n	80009be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_TIM_PWM_MspInit+0x38>)
 80009a8:	69da      	ldr	r2, [r3, #28]
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_TIM_PWM_MspInit+0x38>)
 80009ac:	2102      	movs	r1, #2
 80009ae:	430a      	orrs	r2, r1
 80009b0:	61da      	str	r2, [r3, #28]
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_TIM_PWM_MspInit+0x38>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	2202      	movs	r2, #2
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b004      	add	sp, #16
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40000400 	.word	0x40000400
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <HAL_TIM_Base_MspInit+0x7c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d114      	bne.n	8000a0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_TIM_Base_MspInit+0x80>)
 80009e4:	69da      	ldr	r2, [r3, #28]
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <HAL_TIM_Base_MspInit+0x80>)
 80009e8:	2110      	movs	r1, #16
 80009ea:	430a      	orrs	r2, r1
 80009ec:	61da      	str	r2, [r3, #28]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_TIM_Base_MspInit+0x80>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	2210      	movs	r2, #16
 80009f4:	4013      	ands	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2011      	movs	r0, #17
 8000a00:	f000 fb52 	bl	80010a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000a04:	2011      	movs	r0, #17
 8000a06:	f000 fb64 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000a0a:	e01a      	b.n	8000a42 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_TIM_Base_MspInit+0x84>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d115      	bne.n	8000a42 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_TIM_Base_MspInit+0x80>)
 8000a18:	69da      	ldr	r2, [r3, #28]
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_TIM_Base_MspInit+0x80>)
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	0049      	lsls	r1, r1, #1
 8000a20:	430a      	orrs	r2, r1
 8000a22:	61da      	str	r2, [r3, #28]
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_TIM_Base_MspInit+0x80>)
 8000a26:	69da      	ldr	r2, [r3, #28]
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2013      	movs	r0, #19
 8000a38:	f000 fb36 	bl	80010a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000a3c:	2013      	movs	r0, #19
 8000a3e:	f000 fb48 	bl	80010d2 <HAL_NVIC_EnableIRQ>
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b004      	add	sp, #16
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	40001000 	.word	0x40001000
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40002000 	.word	0x40002000

08000a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	230c      	movs	r3, #12
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f003 f980 	bl	8003d70 <memset>
  if(htim->Instance==TIM3)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <HAL_TIM_MspPostInit+0x6c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d120      	bne.n	8000abc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <HAL_TIM_MspPostInit+0x70>)
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_TIM_MspPostInit+0x70>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	02c9      	lsls	r1, r1, #11
 8000a84:	430a      	orrs	r2, r1
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_TIM_MspPostInit+0x70>)
 8000a8a:	695a      	ldr	r2, [r3, #20]
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	02db      	lsls	r3, r3, #11
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a96:	210c      	movs	r1, #12
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2203      	movs	r2, #3
 8000aae:	60da      	str	r2, [r3, #12]
    //GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_TIM_MspPostInit+0x74>)
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	0010      	movs	r0, r2
 8000ab8:	f000 fb6e 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b008      	add	sp, #32
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40000400 	.word	0x40000400
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000400 	.word	0x48000400

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	231c      	movs	r3, #28
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	0018      	movs	r0, r3
 8000ade:	2314      	movs	r3, #20
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f003 f944 	bl	8003d70 <memset>
  if(huart->Instance==USART1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a41      	ldr	r2, [pc, #260]	; (8000bf4 <HAL_UART_MspInit+0x124>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d13c      	bne.n	8000b6c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af2:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000af4:	699a      	ldr	r2, [r3, #24]
 8000af6:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	01c9      	lsls	r1, r1, #7
 8000afc:	430a      	orrs	r2, r1
 8000afe:	619a      	str	r2, [r3, #24]
 8000b00:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000b02:	699a      	ldr	r2, [r3, #24]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	01db      	lsls	r3, r3, #7
 8000b08:	4013      	ands	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000b10:	695a      	ldr	r2, [r3, #20]
 8000b12:	4b39      	ldr	r3, [pc, #228]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	0289      	lsls	r1, r1, #10
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	615a      	str	r2, [r3, #20]
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000b1e:	695a      	ldr	r2, [r3, #20]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	029b      	lsls	r3, r3, #10
 8000b24:	4013      	ands	r3, r2
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b2a:	211c      	movs	r1, #28
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	22c0      	movs	r2, #192	; 0xc0
 8000b30:	00d2      	lsls	r2, r2, #3
 8000b32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2202      	movs	r2, #2
 8000b38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2203      	movs	r2, #3
 8000b44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2201      	movs	r2, #1
 8000b4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	187a      	adds	r2, r7, r1
 8000b4e:	2390      	movs	r3, #144	; 0x90
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f000 fb1f 	bl	8001198 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	201b      	movs	r0, #27
 8000b60:	f000 faa2 	bl	80010a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b64:	201b      	movs	r0, #27
 8000b66:	f000 fab4 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6a:	e03f      	b.n	8000bec <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <HAL_UART_MspInit+0x12c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d13a      	bne.n	8000bec <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000b78:	69da      	ldr	r2, [r3, #28]
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0289      	lsls	r1, r1, #10
 8000b80:	430a      	orrs	r2, r1
 8000b82:	61da      	str	r2, [r3, #28]
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000b86:	69da      	ldr	r2, [r3, #28]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	029b      	lsls	r3, r3, #10
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000b94:	695a      	ldr	r2, [r3, #20]
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	0289      	lsls	r1, r1, #10
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	615a      	str	r2, [r3, #20]
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_UART_MspInit+0x128>)
 8000ba2:	695a      	ldr	r2, [r3, #20]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	029b      	lsls	r3, r3, #10
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bae:	211c      	movs	r1, #28
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2202      	movs	r2, #2
 8000bba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2201      	movs	r2, #1
 8000bcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	187a      	adds	r2, r7, r1
 8000bd0:	2390      	movs	r3, #144	; 0x90
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fade 	bl	8001198 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	201c      	movs	r0, #28
 8000be2:	f000 fa61 	bl	80010a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000be6:	201c      	movs	r0, #28
 8000be8:	f000 fa73 	bl	80010d2 <HAL_NVIC_EnableIRQ>
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b00c      	add	sp, #48	; 0x30
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40013800 	.word	0x40013800
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40004400 	.word	0x40004400

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f976 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11) ||
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <EXTI4_15_IRQHandler+0x40>)
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	4013      	ands	r3, r2
 8000c42:	d105      	bne.n	8000c50 <EXTI4_15_IRQHandler+0x1c>
		__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13))
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <EXTI4_15_IRQHandler+0x40>)
 8000c46:	695a      	ldr	r2, [r3, #20]
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	019b      	lsls	r3, r3, #6
 8000c4c:	4013      	ands	r3, r2
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11) ||
 8000c4e:	d003      	beq.n	8000c58 <EXTI4_15_IRQHandler+0x24>
	{
		handleGPIO_Pin11_Interrupt();
 8000c50:	f000 f842 	bl	8000cd8 <handleGPIO_Pin11_Interrupt>
		handleGPIO_Pin13_Interrupt();
 8000c54:	f000 f87e 	bl	8000d54 <handleGPIO_Pin13_Interrupt>
	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f000 fc61 	bl	8001524 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	019b      	lsls	r3, r3, #6
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fc5c 	bl	8001524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	40010400 	.word	0x40010400

08000c78 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <TIM6_IRQHandler+0x14>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f001 fddc 	bl	800283c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	2000017c 	.word	0x2000017c

08000c90 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <TIM14_IRQHandler+0x14>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f001 fdd0 	bl	800283c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	2000023c 	.word	0x2000023c

08000ca8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <USART1_IRQHandler+0x14>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f002 fbac 	bl	800340c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	200000dc 	.word	0x200000dc

08000cc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <USART2_IRQHandler+0x14>)
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f002 fba0 	bl	800340c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	200001bc 	.word	0x200001bc

08000cd8 <handleGPIO_Pin11_Interrupt>:

/* USER CODE BEGIN 1 */

inline void handleGPIO_Pin11_Interrupt()
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
	//Use timer to handle debouncing
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11))
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <handleGPIO_Pin11_Interrupt+0x68>)
 8000ce0:	695a      	ldr	r2, [r3, #20]
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	d026      	beq.n	8000d38 <handleGPIO_Pin11_Interrupt+0x60>
	{
		uint8_t pin11State = (uint8_t)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8000cea:	1dfc      	adds	r4, r7, #7
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <handleGPIO_Pin11_Interrupt+0x6c>)
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	f000 fbbf 	bl	8001478 <HAL_GPIO_ReadPin>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	7023      	strb	r3, [r4, #0]
		if (GPIO_PIN_SET == pin11State)
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d107      	bne.n	8000d16 <handleGPIO_Pin11_Interrupt+0x3e>
		{
			//rising edge
			timeCounter = 0U;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <handleGPIO_Pin11_Interrupt+0x70>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	801a      	strh	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <handleGPIO_Pin11_Interrupt+0x74>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f001 fccf 	bl	80026b2 <HAL_TIM_Base_Start_IT>
				btnTrigger = true;
			}
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}
}
 8000d14:	e010      	b.n	8000d38 <handleGPIO_Pin11_Interrupt+0x60>
		else if (GPIO_PIN_RESET == pin11State)
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10c      	bne.n	8000d38 <handleGPIO_Pin11_Interrupt+0x60>
			if (timeCounter > btnPressTimeThreshold)
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <handleGPIO_Pin11_Interrupt+0x70>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	220f      	movs	r2, #15
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d902      	bls.n	8000d30 <handleGPIO_Pin11_Interrupt+0x58>
				btnTrigger = true;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <handleGPIO_Pin11_Interrupt+0x78>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <handleGPIO_Pin11_Interrupt+0x74>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 fce0 	bl	80026f8 <HAL_TIM_Base_Stop_IT>
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	40010400 	.word	0x40010400
 8000d44:	48000800 	.word	0x48000800
 8000d48:	2000008c 	.word	0x2000008c
 8000d4c:	2000017c 	.word	0x2000017c
 8000d50:	2000008e 	.word	0x2000008e

08000d54 <handleGPIO_Pin13_Interrupt>:

inline void handleGPIO_Pin13_Interrupt()
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
	//Use timer to handle debouncing
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13))
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <handleGPIO_Pin13_Interrupt+0x68>)
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	019b      	lsls	r3, r3, #6
 8000d62:	4013      	ands	r3, r2
 8000d64:	d026      	beq.n	8000db4 <handleGPIO_Pin13_Interrupt+0x60>
	{
		uint8_t pin13State = (uint8_t)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000d66:	1dfc      	adds	r4, r7, #7
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	019b      	lsls	r3, r3, #6
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <handleGPIO_Pin13_Interrupt+0x6c>)
 8000d6e:	0019      	movs	r1, r3
 8000d70:	0010      	movs	r0, r2
 8000d72:	f000 fb81 	bl	8001478 <HAL_GPIO_ReadPin>
 8000d76:	0003      	movs	r3, r0
 8000d78:	7023      	strb	r3, [r4, #0]
		if (GPIO_PIN_RESET == pin13State)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d107      	bne.n	8000d92 <handleGPIO_Pin13_Interrupt+0x3e>
		{
			//rising edge
			timeCounter = 0U;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <handleGPIO_Pin13_Interrupt+0x70>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	801a      	strh	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <handleGPIO_Pin13_Interrupt+0x74>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f001 fc91 	bl	80026b2 <HAL_TIM_Base_Start_IT>
				btnTrigger = true;
			}
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}
}
 8000d90:	e010      	b.n	8000db4 <handleGPIO_Pin13_Interrupt+0x60>
		else if (GPIO_PIN_SET == pin13State)
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d10c      	bne.n	8000db4 <handleGPIO_Pin13_Interrupt+0x60>
			if (timeCounter > btnPressTimeThreshold)
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <handleGPIO_Pin13_Interrupt+0x70>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	220f      	movs	r2, #15
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d902      	bls.n	8000dac <handleGPIO_Pin13_Interrupt+0x58>
				btnTrigger = true;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <handleGPIO_Pin13_Interrupt+0x78>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <handleGPIO_Pin13_Interrupt+0x74>)
 8000dae:	0018      	movs	r0, r3
 8000db0:	f001 fca2 	bl	80026f8 <HAL_TIM_Base_Stop_IT>
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b003      	add	sp, #12
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	40010400 	.word	0x40010400
 8000dc0:	48000800 	.word	0x48000800
 8000dc4:	2000008c 	.word	0x2000008c
 8000dc8:	2000017c 	.word	0x2000017c
 8000dcc:	2000008e 	.word	0x2000008e

08000dd0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x50>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x16>
		heap_end = &end;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <_sbrk+0x50>)
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <_sbrk+0x54>)
 8000de4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <_sbrk+0x50>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <_sbrk+0x50>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	18d3      	adds	r3, r2, r3
 8000df4:	466a      	mov	r2, sp
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d907      	bls.n	8000e0a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000dfa:	f002 ff8f 	bl	8003d1c <__errno>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	220c      	movs	r2, #12
 8000e02:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	425b      	negs	r3, r3
 8000e08:	e006      	b.n	8000e18 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <_sbrk+0x50>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	18d2      	adds	r2, r2, r3
 8000e12:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <_sbrk+0x50>)
 8000e14:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b004      	add	sp, #16
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000090 	.word	0x20000090
 8000e24:	20000288 	.word	0x20000288

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0b      	ldr	r4, [pc, #44]	; (8000e80 <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e5e:	f7ff ffe3 	bl	8000e28 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e62:	f002 ff61 	bl	8003d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff fa0b 	bl	8000280 <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   r0, =_estack
 8000e6c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e78:	0800465c 	.word	0x0800465c
  ldr r2, =_sbss
 8000e7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e80:	20000284 	.word	0x20000284

08000e84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_IRQHandler>
	...

08000e88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <HAL_Init+0x24>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_Init+0x24>)
 8000e92:	2110      	movs	r1, #16
 8000e94:	430a      	orrs	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 f809 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9e:	f7ff fd3d 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_InitTick+0x5c>)
 8000eba:	681c      	ldr	r4, [r3, #0]
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_InitTick+0x60>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	23fa      	movs	r3, #250	; 0xfa
 8000ec4:	0098      	lsls	r0, r3, #2
 8000ec6:	f7ff f927 	bl	8000118 <__udivsi3>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	0019      	movs	r1, r3
 8000ece:	0020      	movs	r0, r4
 8000ed0:	f7ff f922 	bl	8000118 <__udivsi3>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 f90b 	bl	80010f2 <HAL_SYSTICK_Config>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e00f      	b.n	8000f04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d80b      	bhi.n	8000f02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	2301      	movs	r3, #1
 8000eee:	425b      	negs	r3, r3
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 f8d8 	bl	80010a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_InitTick+0x64>)
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b003      	add	sp, #12
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x1c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	001a      	movs	r2, r3
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_IncTick+0x20>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	18d2      	adds	r2, r2, r3
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_IncTick+0x20>)
 8000f2a:	601a      	str	r2, [r3, #0]
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	20000008 	.word	0x20000008
 8000f38:	2000027c 	.word	0x2000027c

08000f3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <HAL_GetTick+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	2000027c 	.word	0x2000027c

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	0002      	movs	r2, r0
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	d809      	bhi.n	8000f78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	001a      	movs	r2, r3
 8000f6a:	231f      	movs	r3, #31
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_EnableIRQ+0x30>)
 8000f70:	2101      	movs	r1, #1
 8000f72:	4091      	lsls	r1, r2
 8000f74:	000a      	movs	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
  }
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b7f      	cmp	r3, #127	; 0x7f
 8000f98:	d828      	bhi.n	8000fec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9a:	4a2f      	ldr	r2, [pc, #188]	; (8001058 <__NVIC_SetPriority+0xd4>)
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	33c0      	adds	r3, #192	; 0xc0
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	589b      	ldr	r3, [r3, r2]
 8000faa:	1dfa      	adds	r2, r7, #7
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	0011      	movs	r1, r2
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	00d2      	lsls	r2, r2, #3
 8000fb6:	21ff      	movs	r1, #255	; 0xff
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	43d2      	mvns	r2, r2
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	22ff      	movs	r2, #255	; 0xff
 8000fc8:	401a      	ands	r2, r3
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	0018      	movs	r0, r3
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	4003      	ands	r3, r0
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd8:	481f      	ldr	r0, [pc, #124]	; (8001058 <__NVIC_SetPriority+0xd4>)
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	33c0      	adds	r3, #192	; 0xc0
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fea:	e031      	b.n	8001050 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <__NVIC_SetPriority+0xd8>)
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	0019      	movs	r1, r3
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	400b      	ands	r3, r1
 8000ff8:	3b08      	subs	r3, #8
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3306      	adds	r3, #6
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	18d3      	adds	r3, r2, r3
 8001002:	3304      	adds	r3, #4
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	1dfa      	adds	r2, r7, #7
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	0011      	movs	r1, r2
 800100c:	2203      	movs	r2, #3
 800100e:	400a      	ands	r2, r1
 8001010:	00d2      	lsls	r2, r2, #3
 8001012:	21ff      	movs	r1, #255	; 0xff
 8001014:	4091      	lsls	r1, r2
 8001016:	000a      	movs	r2, r1
 8001018:	43d2      	mvns	r2, r2
 800101a:	401a      	ands	r2, r3
 800101c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	019b      	lsls	r3, r3, #6
 8001022:	22ff      	movs	r2, #255	; 0xff
 8001024:	401a      	ands	r2, r3
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	0018      	movs	r0, r3
 800102c:	2303      	movs	r3, #3
 800102e:	4003      	ands	r3, r0
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <__NVIC_SetPriority+0xd8>)
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	001c      	movs	r4, r3
 800103c:	230f      	movs	r3, #15
 800103e:	4023      	ands	r3, r4
 8001040:	3b08      	subs	r3, #8
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	430a      	orrs	r2, r1
 8001046:	3306      	adds	r3, #6
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	18c3      	adds	r3, r0, r3
 800104c:	3304      	adds	r3, #4
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b003      	add	sp, #12
 8001056:	bd90      	pop	{r4, r7, pc}
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <SysTick_Config+0x40>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d901      	bls.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e010      	b.n	8001098 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <SysTick_Config+0x44>)
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	3a01      	subs	r2, #1
 800107c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	2301      	movs	r3, #1
 8001080:	425b      	negs	r3, r3
 8001082:	2103      	movs	r1, #3
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ff7d 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SysTick_Config+0x44>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x44>)
 8001092:	2207      	movs	r2, #7
 8001094:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001096:	2300      	movs	r3, #0
}
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	00ffffff 	.word	0x00ffffff
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	210f      	movs	r1, #15
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	1c02      	adds	r2, r0, #0
 80010b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	0011      	movs	r1, r2
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	0002      	movs	r2, r0
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ff33 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff ffaf 	bl	8001060 <SysTick_Config>
 8001102:	0003      	movs	r3, r0
}
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001114:	230f      	movs	r3, #15
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2221      	movs	r2, #33	; 0x21
 8001120:	5c9b      	ldrb	r3, [r3, r2]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d007      	beq.n	8001138 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2204      	movs	r2, #4
 800112c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800112e:	230f      	movs	r3, #15
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	e028      	b.n	800118a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	210e      	movs	r1, #14
 8001144:	438a      	bics	r2, r1
 8001146:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2101      	movs	r1, #1
 8001154:	438a      	bics	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	2101      	movs	r1, #1
 8001162:	4091      	lsls	r1, r2
 8001164:	000a      	movs	r2, r1
 8001166:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2221      	movs	r2, #33	; 0x21
 800116c:	2101      	movs	r1, #1
 800116e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2220      	movs	r2, #32
 8001174:	2100      	movs	r1, #0
 8001176:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	0010      	movs	r0, r2
 8001188:	4798      	blx	r3
    } 
  }
  return status;
 800118a:	230f      	movs	r3, #15
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	781b      	ldrb	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b004      	add	sp, #16
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a6:	e14f      	b.n	8001448 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4091      	lsls	r1, r2
 80011b2:	000a      	movs	r2, r1
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d100      	bne.n	80011c0 <HAL_GPIO_Init+0x28>
 80011be:	e140      	b.n	8001442 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d00b      	beq.n	80011e0 <HAL_GPIO_Init+0x48>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d4:	2b11      	cmp	r3, #17
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b12      	cmp	r3, #18
 80011de:	d130      	bne.n	8001242 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	409a      	lsls	r2, r3
 80011ee:	0013      	movs	r3, r2
 80011f0:	43da      	mvns	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	409a      	lsls	r2, r3
 8001202:	0013      	movs	r3, r2
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001216:	2201      	movs	r2, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
 800121c:	0013      	movs	r3, r2
 800121e:	43da      	mvns	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	2201      	movs	r2, #1
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0xea>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b12      	cmp	r3, #18
 8001280:	d123      	bne.n	80012ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	58d3      	ldr	r3, [r2, r3]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2207      	movs	r2, #7
 8001294:	4013      	ands	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	43da      	mvns	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2107      	movs	r1, #7
 80012ae:	400b      	ands	r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	6939      	ldr	r1, [r7, #16]
 80012c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2203      	movs	r2, #3
 80012e8:	401a      	ands	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	055b      	lsls	r3, r3, #21
 8001306:	4013      	ands	r3, r2
 8001308:	d100      	bne.n	800130c <HAL_GPIO_Init+0x174>
 800130a:	e09a      	b.n	8001442 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130c:	4b54      	ldr	r3, [pc, #336]	; (8001460 <HAL_GPIO_Init+0x2c8>)
 800130e:	699a      	ldr	r2, [r3, #24]
 8001310:	4b53      	ldr	r3, [pc, #332]	; (8001460 <HAL_GPIO_Init+0x2c8>)
 8001312:	2101      	movs	r1, #1
 8001314:	430a      	orrs	r2, r1
 8001316:	619a      	str	r2, [r3, #24]
 8001318:	4b51      	ldr	r3, [pc, #324]	; (8001460 <HAL_GPIO_Init+0x2c8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	2201      	movs	r2, #1
 800131e:	4013      	ands	r3, r2
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001324:	4a4f      	ldr	r2, [pc, #316]	; (8001464 <HAL_GPIO_Init+0x2cc>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	589b      	ldr	r3, [r3, r2]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2203      	movs	r2, #3
 8001336:	4013      	ands	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	409a      	lsls	r2, r3
 800133e:	0013      	movs	r3, r2
 8001340:	43da      	mvns	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	2390      	movs	r3, #144	; 0x90
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	429a      	cmp	r2, r3
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x1e2>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a44      	ldr	r2, [pc, #272]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x1de>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a43      	ldr	r2, [pc, #268]	; (800146c <HAL_GPIO_Init+0x2d4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x1da>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a42      	ldr	r2, [pc, #264]	; (8001470 <HAL_GPIO_Init+0x2d8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x1d6>
 800136a:	2303      	movs	r3, #3
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x1e4>
 800136e:	2305      	movs	r3, #5
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x1e4>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x1e4>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x1e4>
 800137a:	2300      	movs	r3, #0
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	2103      	movs	r1, #3
 8001380:	400a      	ands	r2, r1
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800138c:	4935      	ldr	r1, [pc, #212]	; (8001464 <HAL_GPIO_Init+0x2cc>)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <HAL_GPIO_Init+0x2dc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43da      	mvns	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	025b      	lsls	r3, r3, #9
 80013b2:	4013      	ands	r3, r2
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <HAL_GPIO_Init+0x2dc>)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_GPIO_Init+0x2dc>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43da      	mvns	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_GPIO_Init+0x2dc>)
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_GPIO_Init+0x2dc>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43da      	mvns	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	035b      	lsls	r3, r3, #13
 8001406:	4013      	ands	r3, r2
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_GPIO_Init+0x2dc>)
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_GPIO_Init+0x2dc>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43da      	mvns	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	039b      	lsls	r3, r3, #14
 8001430:	4013      	ands	r3, r2
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_GPIO_Init+0x2dc>)
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	40da      	lsrs	r2, r3
 8001450:	1e13      	subs	r3, r2, #0
 8001452:	d000      	beq.n	8001456 <HAL_GPIO_Init+0x2be>
 8001454:	e6a8      	b.n	80011a8 <HAL_GPIO_Init+0x10>
  } 
}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b006      	add	sp, #24
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000
 8001468:	48000400 	.word	0x48000400
 800146c:	48000800 	.word	0x48000800
 8001470:	48000c00 	.word	0x48000c00
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	000a      	movs	r2, r1
 8001482:	1cbb      	adds	r3, r7, #2
 8001484:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	1cba      	adds	r2, r7, #2
 800148c:	8812      	ldrh	r2, [r2, #0]
 800148e:	4013      	ands	r3, r2
 8001490:	d004      	beq.n	800149c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001492:	230f      	movs	r3, #15
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e003      	b.n	80014a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800149c:	230f      	movs	r3, #15
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014a4:	230f      	movs	r3, #15
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	781b      	ldrb	r3, [r3, #0]
  }
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	0008      	movs	r0, r1
 80014bc:	0011      	movs	r1, r2
 80014be:	1cbb      	adds	r3, r7, #2
 80014c0:	1c02      	adds	r2, r0, #0
 80014c2:	801a      	strh	r2, [r3, #0]
 80014c4:	1c7b      	adds	r3, r7, #1
 80014c6:	1c0a      	adds	r2, r1, #0
 80014c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ca:	1c7b      	adds	r3, r7, #1
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d2:	1cbb      	adds	r3, r7, #2
 80014d4:	881a      	ldrh	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014da:	e003      	b.n	80014e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014dc:	1cbb      	adds	r3, r7, #2
 80014de:	881a      	ldrh	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	000a      	movs	r2, r1
 80014f6:	1cbb      	adds	r3, r7, #2
 80014f8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001500:	1cbb      	adds	r3, r7, #2
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4013      	ands	r3, r2
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	1cb9      	adds	r1, r7, #2
 8001510:	8809      	ldrh	r1, [r1, #0]
 8001512:	400b      	ands	r3, r1
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b004      	add	sp, #16
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	0002      	movs	r2, r0
 800152c:	1dbb      	adds	r3, r7, #6
 800152e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	1dba      	adds	r2, r7, #6
 8001536:	8812      	ldrh	r2, [r2, #0]
 8001538:	4013      	ands	r3, r2
 800153a:	d008      	beq.n	800154e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800153e:	1dba      	adds	r2, r7, #6
 8001540:	8812      	ldrh	r2, [r2, #0]
 8001542:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001544:	1dbb      	adds	r3, r7, #6
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	0018      	movs	r0, r3
 800154a:	f000 f807 	bl	800155c <HAL_GPIO_EXTI_Callback>
  }
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	0002      	movs	r2, r0
 8001564:	1dbb      	adds	r3, r7, #6
 8001566:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e303      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x1e>
 800158c:	e08d      	b.n	80016aa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800158e:	4bc4      	ldr	r3, [pc, #784]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	220c      	movs	r2, #12
 8001594:	4013      	ands	r3, r2
 8001596:	2b04      	cmp	r3, #4
 8001598:	d00e      	beq.n	80015b8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800159a:	4bc1      	ldr	r3, [pc, #772]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	220c      	movs	r2, #12
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d116      	bne.n	80015d4 <HAL_RCC_OscConfig+0x64>
 80015a6:	4bbe      	ldr	r3, [pc, #760]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	401a      	ands	r2, r3
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d10d      	bne.n	80015d4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	4bb9      	ldr	r3, [pc, #740]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	029b      	lsls	r3, r3, #10
 80015c0:	4013      	ands	r3, r2
 80015c2:	d100      	bne.n	80015c6 <HAL_RCC_OscConfig+0x56>
 80015c4:	e070      	b.n	80016a8 <HAL_RCC_OscConfig+0x138>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d000      	beq.n	80015d0 <HAL_RCC_OscConfig+0x60>
 80015ce:	e06b      	b.n	80016a8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e2da      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <HAL_RCC_OscConfig+0x7c>
 80015dc:	4bb0      	ldr	r3, [pc, #704]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4baf      	ldr	r3, [pc, #700]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	0249      	lsls	r1, r1, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e02f      	b.n	800164c <HAL_RCC_OscConfig+0xdc>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10c      	bne.n	800160e <HAL_RCC_OscConfig+0x9e>
 80015f4:	4baa      	ldr	r3, [pc, #680]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4ba9      	ldr	r3, [pc, #676]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80015fa:	49aa      	ldr	r1, [pc, #680]	; (80018a4 <HAL_RCC_OscConfig+0x334>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	4ba7      	ldr	r3, [pc, #668]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4ba6      	ldr	r3, [pc, #664]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001606:	49a8      	ldr	r1, [pc, #672]	; (80018a8 <HAL_RCC_OscConfig+0x338>)
 8001608:	400a      	ands	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e01e      	b.n	800164c <HAL_RCC_OscConfig+0xdc>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d10e      	bne.n	8001634 <HAL_RCC_OscConfig+0xc4>
 8001616:	4ba2      	ldr	r3, [pc, #648]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4ba1      	ldr	r3, [pc, #644]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	02c9      	lsls	r1, r1, #11
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	4b9e      	ldr	r3, [pc, #632]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b9d      	ldr	r3, [pc, #628]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	0249      	lsls	r1, r1, #9
 800162e:	430a      	orrs	r2, r1
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0xdc>
 8001634:	4b9a      	ldr	r3, [pc, #616]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b99      	ldr	r3, [pc, #612]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 800163a:	499a      	ldr	r1, [pc, #616]	; (80018a4 <HAL_RCC_OscConfig+0x334>)
 800163c:	400a      	ands	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	4b97      	ldr	r3, [pc, #604]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b96      	ldr	r3, [pc, #600]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001646:	4998      	ldr	r1, [pc, #608]	; (80018a8 <HAL_RCC_OscConfig+0x338>)
 8001648:	400a      	ands	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d014      	beq.n	800167e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fc72 	bl	8000f3c <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165e:	f7ff fc6d 	bl	8000f3c <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b64      	cmp	r3, #100	; 0x64
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e28c      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001670:	4b8b      	ldr	r3, [pc, #556]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	029b      	lsls	r3, r3, #10
 8001678:	4013      	ands	r3, r2
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0xee>
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fc5d 	bl	8000f3c <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fc58 	bl	8000f3c <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e277      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	4b81      	ldr	r3, [pc, #516]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	029b      	lsls	r3, r3, #10
 80016a2:	4013      	ands	r3, r2
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x118>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2202      	movs	r2, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	d100      	bne.n	80016b6 <HAL_RCC_OscConfig+0x146>
 80016b4:	e069      	b.n	800178a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016b6:	4b7a      	ldr	r3, [pc, #488]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	220c      	movs	r2, #12
 80016bc:	4013      	ands	r3, r2
 80016be:	d00b      	beq.n	80016d8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016c0:	4b77      	ldr	r3, [pc, #476]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	220c      	movs	r2, #12
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d11c      	bne.n	8001706 <HAL_RCC_OscConfig+0x196>
 80016cc:	4b74      	ldr	r3, [pc, #464]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	4013      	ands	r3, r2
 80016d6:	d116      	bne.n	8001706 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d8:	4b71      	ldr	r3, [pc, #452]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2202      	movs	r2, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x17e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e24d      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ee:	4b6c      	ldr	r3, [pc, #432]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	22f8      	movs	r2, #248	; 0xf8
 80016f4:	4393      	bics	r3, r2
 80016f6:	0019      	movs	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	00da      	lsls	r2, r3, #3
 80016fe:	4b68      	ldr	r3, [pc, #416]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001704:	e041      	b.n	800178a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d024      	beq.n	8001758 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170e:	4b64      	ldr	r3, [pc, #400]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001714:	2101      	movs	r1, #1
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fc0f 	bl	8000f3c <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fc0a 	bl	8000f3c <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e229      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	4b5a      	ldr	r3, [pc, #360]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d0f1      	beq.n	8001724 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	22f8      	movs	r2, #248	; 0xf8
 8001746:	4393      	bics	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00da      	lsls	r2, r3, #3
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e018      	b.n	800178a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001758:	4b51      	ldr	r3, [pc, #324]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 800175e:	2101      	movs	r1, #1
 8001760:	438a      	bics	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fbea 	bl	8000f3c <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fbe5 	bl	8000f3c <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e204      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001780:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2202      	movs	r2, #2
 8001786:	4013      	ands	r3, r2
 8001788:	d1f1      	bne.n	800176e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2208      	movs	r2, #8
 8001790:	4013      	ands	r3, r2
 8001792:	d036      	beq.n	8001802 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d019      	beq.n	80017d0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179c:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 800179e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a0:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	430a      	orrs	r2, r1
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a8:	f7ff fbc8 	bl	8000f3c <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b2:	f7ff fbc3 	bl	8000f3c <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e1e2      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c4:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	2202      	movs	r2, #2
 80017ca:	4013      	ands	r3, r2
 80017cc:	d0f1      	beq.n	80017b2 <HAL_RCC_OscConfig+0x242>
 80017ce:	e018      	b.n	8001802 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d0:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80017d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d4:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	438a      	bics	r2, r1
 80017da:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fbae 	bl	8000f3c <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff fba9 	bl	8000f3c <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e1c8      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	2202      	movs	r2, #2
 80017fe:	4013      	ands	r3, r2
 8001800:	d1f1      	bne.n	80017e6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2204      	movs	r2, #4
 8001808:	4013      	ands	r3, r2
 800180a:	d100      	bne.n	800180e <HAL_RCC_OscConfig+0x29e>
 800180c:	e0b6      	b.n	800197c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180e:	231f      	movs	r3, #31
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	055b      	lsls	r3, r3, #21
 800181e:	4013      	ands	r3, r2
 8001820:	d111      	bne.n	8001846 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001824:	69da      	ldr	r2, [r3, #28]
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	0549      	lsls	r1, r1, #21
 800182c:	430a      	orrs	r2, r1
 800182e:	61da      	str	r2, [r3, #28]
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	055b      	lsls	r3, r3, #21
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800183e:	231f      	movs	r3, #31
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_OscConfig+0x33c>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4013      	ands	r3, r2
 8001850:	d11a      	bne.n	8001888 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_RCC_OscConfig+0x33c>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_RCC_OscConfig+0x33c>)
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	0049      	lsls	r1, r1, #1
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001860:	f7ff fb6c 	bl	8000f3c <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186a:	f7ff fb67 	bl	8000f3c <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b64      	cmp	r3, #100	; 0x64
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e186      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_OscConfig+0x33c>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4013      	ands	r3, r2
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d10f      	bne.n	80018b0 <HAL_RCC_OscConfig+0x340>
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001892:	6a1a      	ldr	r2, [r3, #32]
 8001894:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	621a      	str	r2, [r3, #32]
 800189c:	e036      	b.n	800190c <HAL_RCC_OscConfig+0x39c>
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	40021000 	.word	0x40021000
 80018a4:	fffeffff 	.word	0xfffeffff
 80018a8:	fffbffff 	.word	0xfffbffff
 80018ac:	40007000 	.word	0x40007000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x362>
 80018b8:	4bb6      	ldr	r3, [pc, #728]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	4bb5      	ldr	r3, [pc, #724]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80018be:	2101      	movs	r1, #1
 80018c0:	438a      	bics	r2, r1
 80018c2:	621a      	str	r2, [r3, #32]
 80018c4:	4bb3      	ldr	r3, [pc, #716]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	4bb2      	ldr	r3, [pc, #712]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80018ca:	2104      	movs	r1, #4
 80018cc:	438a      	bics	r2, r1
 80018ce:	621a      	str	r2, [r3, #32]
 80018d0:	e01c      	b.n	800190c <HAL_RCC_OscConfig+0x39c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x384>
 80018da:	4bae      	ldr	r3, [pc, #696]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80018dc:	6a1a      	ldr	r2, [r3, #32]
 80018de:	4bad      	ldr	r3, [pc, #692]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80018e0:	2104      	movs	r1, #4
 80018e2:	430a      	orrs	r2, r1
 80018e4:	621a      	str	r2, [r3, #32]
 80018e6:	4bab      	ldr	r3, [pc, #684]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80018e8:	6a1a      	ldr	r2, [r3, #32]
 80018ea:	4baa      	ldr	r3, [pc, #680]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80018ec:	2101      	movs	r1, #1
 80018ee:	430a      	orrs	r2, r1
 80018f0:	621a      	str	r2, [r3, #32]
 80018f2:	e00b      	b.n	800190c <HAL_RCC_OscConfig+0x39c>
 80018f4:	4ba7      	ldr	r3, [pc, #668]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	4ba6      	ldr	r3, [pc, #664]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	438a      	bics	r2, r1
 80018fe:	621a      	str	r2, [r3, #32]
 8001900:	4ba4      	ldr	r3, [pc, #656]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	4ba3      	ldr	r3, [pc, #652]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001906:	2104      	movs	r1, #4
 8001908:	438a      	bics	r2, r1
 800190a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d014      	beq.n	800193e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001914:	f7ff fb12 	bl	8000f3c <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	e009      	b.n	8001932 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fb0d 	bl	8000f3c <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	4a9b      	ldr	r2, [pc, #620]	; (8001b98 <HAL_RCC_OscConfig+0x628>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e12b      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001932:	4b98      	ldr	r3, [pc, #608]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	2202      	movs	r2, #2
 8001938:	4013      	ands	r3, r2
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x3ae>
 800193c:	e013      	b.n	8001966 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff fafd 	bl	8000f3c <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001946:	e009      	b.n	800195c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff faf8 	bl	8000f3c <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	4a91      	ldr	r2, [pc, #580]	; (8001b98 <HAL_RCC_OscConfig+0x628>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e116      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195c:	4b8d      	ldr	r3, [pc, #564]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	2202      	movs	r2, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001966:	231f      	movs	r3, #31
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001972:	69da      	ldr	r2, [r3, #28]
 8001974:	4b87      	ldr	r3, [pc, #540]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001976:	4989      	ldr	r1, [pc, #548]	; (8001b9c <HAL_RCC_OscConfig+0x62c>)
 8001978:	400a      	ands	r2, r1
 800197a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2210      	movs	r2, #16
 8001982:	4013      	ands	r3, r2
 8001984:	d063      	beq.n	8001a4e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d12a      	bne.n	80019e4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800198e:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001992:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001994:	2104      	movs	r1, #4
 8001996:	430a      	orrs	r2, r1
 8001998:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800199a:	4b7e      	ldr	r3, [pc, #504]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 800199c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199e:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fac9 	bl	8000f3c <HAL_GetTick>
 80019aa:	0003      	movs	r3, r0
 80019ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019b0:	f7ff fac4 	bl	8000f3c <HAL_GetTick>
 80019b4:	0002      	movs	r2, r0
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0e3      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019c2:	4b74      	ldr	r3, [pc, #464]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80019c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c6:	2202      	movs	r2, #2
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0f1      	beq.n	80019b0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019cc:	4b71      	ldr	r3, [pc, #452]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d0:	22f8      	movs	r2, #248	; 0xf8
 80019d2:	4393      	bics	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	00da      	lsls	r2, r3, #3
 80019dc:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80019de:	430a      	orrs	r2, r1
 80019e0:	635a      	str	r2, [r3, #52]	; 0x34
 80019e2:	e034      	b.n	8001a4e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	3305      	adds	r3, #5
 80019ea:	d111      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019ec:	4b69      	ldr	r3, [pc, #420]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80019ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f0:	4b68      	ldr	r3, [pc, #416]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80019f2:	2104      	movs	r1, #4
 80019f4:	438a      	bics	r2, r1
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019f8:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80019fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fc:	22f8      	movs	r2, #248	; 0xf8
 80019fe:	4393      	bics	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	00da      	lsls	r2, r3, #3
 8001a08:	4b62      	ldr	r3, [pc, #392]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a0e:	e01e      	b.n	8001a4e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a10:	4b60      	ldr	r3, [pc, #384]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a14:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001a16:	2104      	movs	r1, #4
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a1c:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a20:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	438a      	bics	r2, r1
 8001a26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7ff fa88 	bl	8000f3c <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a32:	f7ff fa83 	bl	8000f3c <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0a2      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a44:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d1f1      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d100      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4e8>
 8001a56:	e097      	b.n	8001b88 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a58:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	220c      	movs	r2, #12
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d100      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4f6>
 8001a64:	e06b      	b.n	8001b3e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d14c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001a74:	494a      	ldr	r1, [pc, #296]	; (8001ba0 <HAL_RCC_OscConfig+0x630>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fa5f 	bl	8000f3c <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff fa5a 	bl	8000f3c <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e079      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a96:	4b3f      	ldr	r3, [pc, #252]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	049b      	lsls	r3, r3, #18
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab0:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ab6:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a3a      	ldr	r2, [pc, #232]	; (8001ba4 <HAL_RCC_OscConfig+0x634>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	0449      	lsls	r1, r1, #17
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff fa2d 	bl	8000f3c <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff fa28 	bl	8000f3c <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e047      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	049b      	lsls	r3, r3, #18
 8001b02:	4013      	ands	r3, r2
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x578>
 8001b06:	e03f      	b.n	8001b88 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001b0e:	4924      	ldr	r1, [pc, #144]	; (8001ba0 <HAL_RCC_OscConfig+0x630>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fa12 	bl	8000f3c <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff fa0d 	bl	8000f3c <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e02c      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	049b      	lsls	r3, r3, #18
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x5ae>
 8001b3c:	e024      	b.n	8001b88 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e01f      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	025b      	lsls	r3, r3, #9
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d10e      	bne.n	8001b84 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	220f      	movs	r2, #15
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	23f0      	movs	r3, #240	; 0xf0
 8001b78:	039b      	lsls	r3, r3, #14
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b008      	add	sp, #32
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	40021000 	.word	0x40021000
 8001b98:	00001388 	.word	0x00001388
 8001b9c:	efffffff 	.word	0xefffffff
 8001ba0:	feffffff 	.word	0xfeffffff
 8001ba4:	ffc2ffff 	.word	0xffc2ffff

08001ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b3      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d911      	bls.n	8001bee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b58      	ldr	r3, [pc, #352]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	4b55      	ldr	r3, [pc, #340]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e09a      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d015      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d006      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c02:	4b4b      	ldr	r3, [pc, #300]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c08:	21e0      	movs	r1, #224	; 0xe0
 8001c0a:	00c9      	lsls	r1, r1, #3
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	22f0      	movs	r2, #240	; 0xf0
 8001c16:	4393      	bics	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d040      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	029b      	lsls	r3, r3, #10
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d114      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e06e      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	049b      	lsls	r3, r3, #18
 8001c56:	4013      	ands	r3, r2
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e062      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e05b      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6c:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	4393      	bics	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c80:	f7ff f95c 	bl	8000f3c <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c88:	e009      	b.n	8001c9e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8a:	f7ff f957 	bl	8000f3c <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_RCC_ClockConfig+0x18c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e042      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1ec      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d211      	bcs.n	8001ce2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4393      	bics	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd0:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e020      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_RCC_ClockConfig+0x190>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d00:	f000 f820 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8001d04:	0001      	movs	r1, r0
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	4013      	ands	r3, r2
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_RCC_ClockConfig+0x194>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	000a      	movs	r2, r1
 8001d16:	40da      	lsrs	r2, r3
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_ClockConfig+0x198>)
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7ff f8c7 	bl	8000eb0 <HAL_InitTick>
  
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b004      	add	sp, #16
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	00001388 	.word	0x00001388
 8001d38:	fffff8ff 	.word	0xfffff8ff
 8001d3c:	08004608 	.word	0x08004608
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b08f      	sub	sp, #60	; 0x3c
 8001d48:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d4a:	2314      	movs	r3, #20
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d52:	c313      	stmia	r3!, {r0, r1, r4}
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4a29      	ldr	r2, [pc, #164]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d5e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d80:	220c      	movs	r2, #12
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d002      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x4a>
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d003      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x50>
 8001d8c:	e02d      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d92:	e02d      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	0c9b      	lsrs	r3, r3, #18
 8001d98:	220f      	movs	r2, #15
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2214      	movs	r2, #20
 8001d9e:	18ba      	adds	r2, r7, r2
 8001da0:	5cd3      	ldrb	r3, [r2, r3]
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	220f      	movs	r2, #15
 8001daa:	4013      	ands	r3, r2
 8001dac:	1d3a      	adds	r2, r7, #4
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	025b      	lsls	r3, r3, #9
 8001db8:	4013      	ands	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dbe:	4812      	ldr	r0, [pc, #72]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dc0:	f7fe f9aa 	bl	8000118 <__udivsi3>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	4353      	muls	r3, r2
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8001dce:	e009      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd2:	000a      	movs	r2, r1
 8001dd4:	0152      	lsls	r2, r2, #5
 8001dd6:	1a52      	subs	r2, r2, r1
 8001dd8:	0193      	lsls	r3, r2, #6
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	185b      	adds	r3, r3, r1
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001de8:	e002      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b00f      	add	sp, #60	; 0x3c
 8001df8:	bd90      	pop	{r4, r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	080045e8 	.word	0x080045e8
 8001e00:	080045f8 	.word	0x080045f8
 8001e04:	40021000 	.word	0x40021000
 8001e08:	007a1200 	.word	0x007a1200

08001e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	20000000 	.word	0x20000000

08001e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e24:	f7ff fff2 	bl	8001e0c <HAL_RCC_GetHCLKFreq>
 8001e28:	0001      	movs	r1, r0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	2207      	movs	r2, #7
 8001e32:	4013      	ands	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e36:	5cd3      	ldrb	r3, [r2, r3]
 8001e38:	40d9      	lsrs	r1, r3
 8001e3a:	000b      	movs	r3, r1
}    
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08004618 	.word	0x08004618

08001e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	025b      	lsls	r3, r3, #9
 8001e64:	4013      	ands	r3, r2
 8001e66:	d100      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e68:	e08f      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e6a:	2317      	movs	r3, #23
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b57      	ldr	r3, [pc, #348]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e74:	69da      	ldr	r2, [r3, #28]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	055b      	lsls	r3, r3, #21
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d111      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b54      	ldr	r3, [pc, #336]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	0549      	lsls	r1, r1, #21
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	61da      	str	r2, [r3, #28]
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	055b      	lsls	r3, r3, #21
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	2317      	movs	r3, #23
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d11a      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eae:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	0049      	lsls	r1, r1, #1
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f83e 	bl	8000f3c <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7ff f839 	bl	8000f3c <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	; 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e077      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	23c0      	movs	r3, #192	; 0xc0
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d034      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	23c0      	movs	r3, #192	; 0xc0
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4013      	ands	r3, r2
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d02c      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f06:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f10:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f12:	6a1a      	ldr	r2, [r3, #32]
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	0249      	lsls	r1, r1, #9
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f20:	6a1a      	ldr	r2, [r3, #32]
 8001f22:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f24:	492d      	ldr	r1, [pc, #180]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	d013      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff f800 	bl	8000f3c <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	e009      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe fffb 	bl	8000f3c <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e038      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	0019      	movs	r1, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f74:	2317      	movs	r3, #23
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f84:	4917      	ldr	r1, [pc, #92]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001f86:	400a      	ands	r2, r1
 8001f88:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	2203      	movs	r2, #3
 8001f9a:	4393      	bics	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2220      	movs	r2, #32
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	4393      	bics	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b006      	add	sp, #24
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	fffffcff 	.word	0xfffffcff
 8001fdc:	fffeffff 	.word	0xfffeffff
 8001fe0:	00001388 	.word	0x00001388
 8001fe4:	efffffff 	.word	0xefffffff

08001fe8 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e081      	b.n	80020fe <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7f5b      	ldrb	r3, [r3, #29]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d106      	bne.n	8002012 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f7fe fca9 	bl	8000964 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	22ca      	movs	r2, #202	; 0xca
 800201e:	625a      	str	r2, [r3, #36]	; 0x24
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2253      	movs	r2, #83	; 0x53
 8002026:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	0018      	movs	r0, r3
 800202c:	f000 faa9 	bl	8002582 <RTC_EnterInitMode>
 8002030:	1e03      	subs	r3, r0, #0
 8002032:	d008      	beq.n	8002046 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	22ff      	movs	r2, #255	; 0xff
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2204      	movs	r2, #4
 8002040:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e05b      	b.n	80020fe <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	492d      	ldr	r1, [pc, #180]	; (8002108 <HAL_RTC_Init+0x120>)
 8002052:	400a      	ands	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6899      	ldr	r1, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68d2      	ldr	r2, [r2, #12]
 800207c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6919      	ldr	r1, [r3, #16]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	041a      	lsls	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	438a      	bics	r2, r1
 80020a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2220      	movs	r2, #32
 80020aa:	4013      	ands	r3, r2
 80020ac:	d10e      	bne.n	80020cc <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 fa3d 	bl	8002530 <HAL_RTC_WaitForSynchro>
 80020b6:	1e03      	subs	r3, r0, #0
 80020b8:	d008      	beq.n	80020cc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	22ff      	movs	r2, #255	; 0xff
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2204      	movs	r2, #4
 80020c6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e018      	b.n	80020fe <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	490d      	ldr	r1, [pc, #52]	; (800210c <HAL_RTC_Init+0x124>)
 80020d8:	400a      	ands	r2, r1
 80020da:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	22ff      	movs	r2, #255	; 0xff
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80020fc:	2300      	movs	r3, #0
  }
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b002      	add	sp, #8
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	ff8fffbf 	.word	0xff8fffbf
 800210c:	fffbffff 	.word	0xfffbffff

08002110 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	7f1b      	ldrb	r3, [r3, #28]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_RTC_SetTime+0x1c>
 8002128:	2302      	movs	r3, #2
 800212a:	e0a5      	b.n	8002278 <HAL_RTC_SetTime+0x168>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2202      	movs	r2, #2
 8002136:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d125      	bne.n	800218a <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2240      	movs	r2, #64	; 0x40
 8002146:	4013      	ands	r3, r2
 8002148:	d102      	bne.n	8002150 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	0018      	movs	r0, r3
 8002156:	f000 fa40 	bl	80025da <RTC_ByteToBcd2>
 800215a:	0003      	movs	r3, r0
 800215c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	785b      	ldrb	r3, [r3, #1]
 8002162:	0018      	movs	r0, r3
 8002164:	f000 fa39 	bl	80025da <RTC_ByteToBcd2>
 8002168:	0003      	movs	r3, r0
 800216a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800216c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	789b      	ldrb	r3, [r3, #2]
 8002172:	0018      	movs	r0, r3
 8002174:	f000 fa31 	bl	80025da <RTC_ByteToBcd2>
 8002178:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800217a:	0022      	movs	r2, r4
 800217c:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	78db      	ldrb	r3, [r3, #3]
 8002182:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e017      	b.n	80021ba <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2240      	movs	r2, #64	; 0x40
 8002192:	4013      	ands	r3, r2
 8002194:	d102      	bne.n	800219c <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2200      	movs	r2, #0
 800219a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80021a8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80021ae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	78db      	ldrb	r3, [r3, #3]
 80021b4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	22ca      	movs	r2, #202	; 0xca
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2253      	movs	r2, #83	; 0x53
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 f9d8 	bl	8002582 <RTC_EnterInitMode>
 80021d2:	1e03      	subs	r3, r0, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	22ff      	movs	r2, #255	; 0xff
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2204      	movs	r2, #4
 80021e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e044      	b.n	8002278 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4922      	ldr	r1, [pc, #136]	; (8002280 <HAL_RTC_SetTime+0x170>)
 80021f6:	400a      	ands	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	491f      	ldr	r1, [pc, #124]	; (8002284 <HAL_RTC_SetTime+0x174>)
 8002206:	400a      	ands	r2, r1
 8002208:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6899      	ldr	r1, [r3, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	431a      	orrs	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	438a      	bics	r2, r1
 8002230:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2220      	movs	r2, #32
 800223a:	4013      	ands	r3, r2
 800223c:	d111      	bne.n	8002262 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 f975 	bl	8002530 <HAL_RTC_WaitForSynchro>
 8002246:	1e03      	subs	r3, r0, #0
 8002248:	d00b      	beq.n	8002262 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	22ff      	movs	r2, #255	; 0xff
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2204      	movs	r2, #4
 8002256:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e00a      	b.n	8002278 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	22ff      	movs	r2, #255	; 0xff
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002276:	2300      	movs	r3, #0
  }
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b007      	add	sp, #28
 800227e:	bd90      	pop	{r4, r7, pc}
 8002280:	007f7f7f 	.word	0x007f7f7f
 8002284:	fffbffff 	.word	0xfffbffff

08002288 <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	045b      	lsls	r3, r3, #17
 80022aa:	0c5a      	lsrs	r2, r3, #17
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a22      	ldr	r2, [pc, #136]	; (8002340 <HAL_RTC_GetTime+0xb8>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	0c1b      	lsrs	r3, r3, #16
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	223f      	movs	r2, #63	; 0x3f
 80022c4:	4013      	ands	r3, r2
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	227f      	movs	r2, #127	; 0x7f
 80022d4:	4013      	ands	r3, r2
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	227f      	movs	r2, #127	; 0x7f
 80022e2:	4013      	ands	r3, r2
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2240      	movs	r2, #64	; 0x40
 80022f2:	4013      	ands	r3, r2
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11a      	bne.n	8002336 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	0018      	movs	r0, r3
 8002306:	f000 f989 	bl	800261c <RTC_Bcd2ToByte>
 800230a:	0003      	movs	r3, r0
 800230c:	001a      	movs	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	785b      	ldrb	r3, [r3, #1]
 8002316:	0018      	movs	r0, r3
 8002318:	f000 f980 	bl	800261c <RTC_Bcd2ToByte>
 800231c:	0003      	movs	r3, r0
 800231e:	001a      	movs	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	789b      	ldrb	r3, [r3, #2]
 8002328:	0018      	movs	r0, r3
 800232a:	f000 f977 	bl	800261c <RTC_Bcd2ToByte>
 800232e:	0003      	movs	r3, r0
 8002330:	001a      	movs	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b006      	add	sp, #24
 800233e:	bd80      	pop	{r7, pc}
 8002340:	007f7f7f 	.word	0x007f7f7f

08002344 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	7f1b      	ldrb	r3, [r3, #28]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_RTC_SetDate+0x1c>
 800235c:	2302      	movs	r3, #2
 800235e:	e091      	b.n	8002484 <HAL_RTC_SetDate+0x140>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2202      	movs	r2, #2
 800236a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10e      	bne.n	8002390 <HAL_RTC_SetDate+0x4c>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	785b      	ldrb	r3, [r3, #1]
 8002376:	001a      	movs	r2, r3
 8002378:	2310      	movs	r3, #16
 800237a:	4013      	ands	r3, r2
 800237c:	d008      	beq.n	8002390 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	785b      	ldrb	r3, [r3, #1]
 8002382:	2210      	movs	r2, #16
 8002384:	4393      	bics	r3, r2
 8002386:	b2db      	uxtb	r3, r3
 8002388:	330a      	adds	r3, #10
 800238a:	b2da      	uxtb	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d11c      	bne.n	80023d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	78db      	ldrb	r3, [r3, #3]
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f91d 	bl	80025da <RTC_ByteToBcd2>
 80023a0:	0003      	movs	r3, r0
 80023a2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	785b      	ldrb	r3, [r3, #1]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 f916 	bl	80025da <RTC_ByteToBcd2>
 80023ae:	0003      	movs	r3, r0
 80023b0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80023b2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	789b      	ldrb	r3, [r3, #2]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 f90e 	bl	80025da <RTC_ByteToBcd2>
 80023be:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80023c0:	0022      	movs	r2, r4
 80023c2:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	e00e      	b.n	80023ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	78db      	ldrb	r3, [r3, #3]
 80023d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80023dc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80023e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	22ca      	movs	r2, #202	; 0xca
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2253      	movs	r2, #83	; 0x53
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	0018      	movs	r0, r3
 8002402:	f000 f8be 	bl	8002582 <RTC_EnterInitMode>
 8002406:	1e03      	subs	r3, r0, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	22ff      	movs	r2, #255	; 0xff
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2204      	movs	r2, #4
 8002416:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e030      	b.n	8002484 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4918      	ldr	r1, [pc, #96]	; (800248c <HAL_RTC_SetDate+0x148>)
 800242a:	400a      	ands	r2, r1
 800242c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	438a      	bics	r2, r1
 800243c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2220      	movs	r2, #32
 8002446:	4013      	ands	r3, r2
 8002448:	d111      	bne.n	800246e <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	0018      	movs	r0, r3
 800244e:	f000 f86f 	bl	8002530 <HAL_RTC_WaitForSynchro>
 8002452:	1e03      	subs	r3, r0, #0
 8002454:	d00b      	beq.n	800246e <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	22ff      	movs	r2, #255	; 0xff
 800245c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2204      	movs	r2, #4
 8002462:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00a      	b.n	8002484 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	22ff      	movs	r2, #255	; 0xff
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002482:	2300      	movs	r3, #0
  }
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b007      	add	sp, #28
 800248a:	bd90      	pop	{r4, r7, pc}
 800248c:	00ffff3f 	.word	0x00ffff3f

08002490 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a21      	ldr	r2, [pc, #132]	; (800252c <HAL_RTC_GetDate+0x9c>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	221f      	movs	r2, #31
 80024be:	4013      	ands	r3, r2
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	223f      	movs	r2, #63	; 0x3f
 80024cc:	4013      	ands	r3, r2
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	0b5b      	lsrs	r3, r3, #13
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2207      	movs	r2, #7
 80024dc:	4013      	ands	r3, r2
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11a      	bne.n	8002520 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	78db      	ldrb	r3, [r3, #3]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 f894 	bl	800261c <RTC_Bcd2ToByte>
 80024f4:	0003      	movs	r3, r0
 80024f6:	001a      	movs	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	785b      	ldrb	r3, [r3, #1]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f88b 	bl	800261c <RTC_Bcd2ToByte>
 8002506:	0003      	movs	r3, r0
 8002508:	001a      	movs	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	789b      	ldrb	r3, [r3, #2]
 8002512:	0018      	movs	r0, r3
 8002514:	f000 f882 	bl	800261c <RTC_Bcd2ToByte>
 8002518:	0003      	movs	r3, r0
 800251a:	001a      	movs	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b006      	add	sp, #24
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	00ffff3f 	.word	0x00ffff3f

08002530 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	21a0      	movs	r1, #160	; 0xa0
 8002548:	438a      	bics	r2, r1
 800254a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800254c:	f7fe fcf6 	bl	8000f3c <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002554:	e00a      	b.n	800256c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002556:	f7fe fcf1 	bl	8000f3c <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad2      	subs	r2, r2, r3
 8002560:	23fa      	movs	r3, #250	; 0xfa
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	429a      	cmp	r2, r3
 8002566:	d901      	bls.n	800256c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e006      	b.n	800257a <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	4013      	ands	r3, r2
 8002576:	d0ee      	beq.n	8002556 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b004      	add	sp, #16
 8002580:	bd80      	pop	{r7, pc}

08002582 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2240      	movs	r2, #64	; 0x40
 8002596:	4013      	ands	r3, r2
 8002598:	d11a      	bne.n	80025d0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2201      	movs	r2, #1
 80025a0:	4252      	negs	r2, r2
 80025a2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80025a4:	f7fe fcca 	bl	8000f3c <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025ac:	e00a      	b.n	80025c4 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025ae:	f7fe fcc5 	bl	8000f3c <HAL_GetTick>
 80025b2:	0002      	movs	r2, r0
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1ad2      	subs	r2, r2, r3
 80025b8:	23fa      	movs	r3, #250	; 0xfa
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	429a      	cmp	r2, r3
 80025be:	d901      	bls.n	80025c4 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e006      	b.n	80025d2 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2240      	movs	r2, #64	; 0x40
 80025cc:	4013      	ands	r3, r2
 80025ce:	d0ee      	beq.n	80025ae <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}

080025da <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	0002      	movs	r2, r0
 80025e2:	1dfb      	adds	r3, r7, #7
 80025e4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80025ea:	e007      	b.n	80025fc <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	1dfa      	adds	r2, r7, #7
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	3a0a      	subs	r2, #10
 80025fa:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 80025fc:	1dfb      	adds	r3, r7, #7
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b09      	cmp	r3, #9
 8002602:	d8f3      	bhi.n	80025ec <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	b2da      	uxtb	r2, r3
 800260c:	1dfb      	adds	r3, r7, #7
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4313      	orrs	r3, r2
 8002612:	b2db      	uxtb	r3, r3
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b004      	add	sp, #16
 800261a:	bd80      	pop	{r7, pc}

0800261c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	0002      	movs	r2, r0
 8002624:	1dfb      	adds	r3, r7, #7
 8002626:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800262c:	1dfb      	adds	r3, r7, #7
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	b2db      	uxtb	r3, r3
 8002634:	001a      	movs	r2, r3
 8002636:	0013      	movs	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	189b      	adds	r3, r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8002640:	1dfb      	adds	r3, r7, #7
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	220f      	movs	r2, #15
 8002646:	4013      	ands	r3, r2
 8002648:	b2da      	uxtb	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	18d3      	adds	r3, r2, r3
 8002650:	b2db      	uxtb	r3, r3
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b004      	add	sp, #16
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e01e      	b.n	80026aa <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	223d      	movs	r2, #61	; 0x3d
 8002670:	5c9b      	ldrb	r3, [r3, r2]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	223c      	movs	r2, #60	; 0x3c
 800267c:	2100      	movs	r1, #0
 800267e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0018      	movs	r0, r3
 8002684:	f7fe f9a4 	bl	80009d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	223d      	movs	r2, #61	; 0x3d
 800268c:	2102      	movs	r1, #2
 800268e:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3304      	adds	r3, #4
 8002698:	0019      	movs	r1, r3
 800269a:	0010      	movs	r0, r2
 800269c:	f000 fabc 	bl	8002c18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	223d      	movs	r2, #61	; 0x3d
 80026a4:	2101      	movs	r1, #1
 80026a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	0018      	movs	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b002      	add	sp, #8
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	430a      	orrs	r2, r1
 80026c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2207      	movs	r2, #7
 80026d2:	4013      	ands	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d007      	beq.n	80026ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2101      	movs	r1, #1
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b004      	add	sp, #16
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2101      	movs	r1, #1
 800270c:	438a      	bics	r2, r1
 800270e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <HAL_TIM_Base_Stop_IT+0x4c>)
 8002718:	4013      	ands	r3, r2
 800271a:	d10d      	bne.n	8002738 <HAL_TIM_Base_Stop_IT+0x40>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <HAL_TIM_Base_Stop_IT+0x50>)
 8002724:	4013      	ands	r3, r2
 8002726:	d107      	bne.n	8002738 <HAL_TIM_Base_Stop_IT+0x40>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2101      	movs	r1, #1
 8002734:	438a      	bics	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b002      	add	sp, #8
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	00001111 	.word	0x00001111
 8002748:	00000444 	.word	0x00000444

0800274c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e01e      	b.n	800279c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223d      	movs	r2, #61	; 0x3d
 8002762:	5c9b      	ldrb	r3, [r3, r2]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d107      	bne.n	800277a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	223c      	movs	r2, #60	; 0x3c
 800276e:	2100      	movs	r1, #0
 8002770:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	0018      	movs	r0, r3
 8002776:	f7fe f90d 	bl	8000994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	223d      	movs	r2, #61	; 0x3d
 800277e:	2102      	movs	r1, #2
 8002780:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	0019      	movs	r1, r3
 800278c:	0010      	movs	r0, r2
 800278e:	f000 fa43 	bl	8002c18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	223d      	movs	r2, #61	; 0x3d
 8002796:	2101      	movs	r1, #1
 8002798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b002      	add	sp, #8
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6839      	ldr	r1, [r7, #0]
 80027b4:	2201      	movs	r2, #1
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 fca0 	bl	80030fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1a      	ldr	r2, [pc, #104]	; (800282c <HAL_TIM_PWM_Start+0x88>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00e      	beq.n	80027e4 <HAL_TIM_PWM_Start+0x40>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a19      	ldr	r2, [pc, #100]	; (8002830 <HAL_TIM_PWM_Start+0x8c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d009      	beq.n	80027e4 <HAL_TIM_PWM_Start+0x40>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a17      	ldr	r2, [pc, #92]	; (8002834 <HAL_TIM_PWM_Start+0x90>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_TIM_PWM_Start+0x40>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a16      	ldr	r2, [pc, #88]	; (8002838 <HAL_TIM_PWM_Start+0x94>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_TIM_PWM_Start+0x44>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <HAL_TIM_PWM_Start+0x46>
 80027e8:	2300      	movs	r3, #0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	0209      	lsls	r1, r1, #8
 80027fc:	430a      	orrs	r2, r1
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2207      	movs	r2, #7
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b06      	cmp	r3, #6
 8002810:	d007      	beq.n	8002822 <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40014000 	.word	0x40014000
 8002834:	40014400 	.word	0x40014400
 8002838:	40014800 	.word	0x40014800

0800283c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2202      	movs	r2, #2
 800284c:	4013      	ands	r3, r2
 800284e:	2b02      	cmp	r3, #2
 8002850:	d124      	bne.n	800289c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2202      	movs	r2, #2
 800285a:	4013      	ands	r3, r2
 800285c:	2b02      	cmp	r3, #2
 800285e:	d11d      	bne.n	800289c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2203      	movs	r2, #3
 8002866:	4252      	negs	r2, r2
 8002868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2203      	movs	r2, #3
 8002878:	4013      	ands	r3, r2
 800287a:	d004      	beq.n	8002886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0018      	movs	r0, r3
 8002880:	f000 f9b2 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002884:	e007      	b.n	8002896 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	0018      	movs	r0, r3
 800288a:	f000 f9a5 	bl	8002bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	0018      	movs	r0, r3
 8002892:	f000 f9b1 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2204      	movs	r2, #4
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d125      	bne.n	80028f6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2204      	movs	r2, #4
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d11e      	bne.n	80028f6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2205      	movs	r2, #5
 80028be:	4252      	negs	r2, r2
 80028c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2202      	movs	r2, #2
 80028c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	23c0      	movs	r3, #192	; 0xc0
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4013      	ands	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 f985 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 80028de:	e007      	b.n	80028f0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 f978 	bl	8002bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 f984 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2208      	movs	r2, #8
 80028fe:	4013      	ands	r3, r2
 8002900:	2b08      	cmp	r3, #8
 8002902:	d124      	bne.n	800294e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2208      	movs	r2, #8
 800290c:	4013      	ands	r3, r2
 800290e:	2b08      	cmp	r3, #8
 8002910:	d11d      	bne.n	800294e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2209      	movs	r2, #9
 8002918:	4252      	negs	r2, r2
 800291a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2204      	movs	r2, #4
 8002920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2203      	movs	r2, #3
 800292a:	4013      	ands	r3, r2
 800292c:	d004      	beq.n	8002938 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f000 f959 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002936:	e007      	b.n	8002948 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	0018      	movs	r0, r3
 800293c:	f000 f94c 	bl	8002bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0018      	movs	r0, r3
 8002944:	f000 f958 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2210      	movs	r2, #16
 8002956:	4013      	ands	r3, r2
 8002958:	2b10      	cmp	r3, #16
 800295a:	d125      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2210      	movs	r2, #16
 8002964:	4013      	ands	r3, r2
 8002966:	2b10      	cmp	r3, #16
 8002968:	d11e      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2211      	movs	r2, #17
 8002970:	4252      	negs	r2, r2
 8002972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2208      	movs	r2, #8
 8002978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	23c0      	movs	r3, #192	; 0xc0
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4013      	ands	r3, r2
 8002986:	d004      	beq.n	8002992 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	0018      	movs	r0, r3
 800298c:	f000 f92c 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002990:	e007      	b.n	80029a2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f000 f91f 	bl	8002bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	0018      	movs	r0, r3
 800299e:	f000 f92b 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2201      	movs	r2, #1
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d10f      	bne.n	80029d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	4013      	ands	r3, r2
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d108      	bne.n	80029d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2202      	movs	r2, #2
 80029ca:	4252      	negs	r2, r2
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fd fc2d 	bl	8000230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	4013      	ands	r3, r2
 80029e0:	2b80      	cmp	r3, #128	; 0x80
 80029e2:	d10f      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b80      	cmp	r3, #128	; 0x80
 80029f0:	d108      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2281      	movs	r2, #129	; 0x81
 80029f8:	4252      	negs	r2, r2
 80029fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 fc00 	bl	8003204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2240      	movs	r2, #64	; 0x40
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b40      	cmp	r3, #64	; 0x40
 8002a10:	d10f      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2240      	movs	r2, #64	; 0x40
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	d108      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2241      	movs	r2, #65	; 0x41
 8002a26:	4252      	negs	r2, r2
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 f8eb 	bl	8002c08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d10f      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d108      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2221      	movs	r2, #33	; 0x21
 8002a54:	4252      	negs	r2, r2
 8002a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 fbca 	bl	80031f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	223c      	movs	r2, #60	; 0x3c
 8002a78:	5c9b      	ldrb	r3, [r3, r2]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e0a4      	b.n	8002bcc <HAL_TIM_PWM_ConfigChannel+0x164>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	223c      	movs	r2, #60	; 0x3c
 8002a86:	2101      	movs	r1, #1
 8002a88:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	223d      	movs	r2, #61	; 0x3d
 8002a8e:	2102      	movs	r1, #2
 8002a90:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d029      	beq.n	8002aec <HAL_TIM_PWM_ConfigChannel+0x84>
 8002a98:	d802      	bhi.n	8002aa0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002a9e:	e08c      	b.n	8002bba <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d046      	beq.n	8002b32 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	d065      	beq.n	8002b74 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002aa8:	e087      	b.n	8002bba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	0011      	movs	r1, r2
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f000 f926 	bl	8002d04 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2108      	movs	r1, #8
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2104      	movs	r1, #4
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6999      	ldr	r1, [r3, #24]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	619a      	str	r2, [r3, #24]
      break;
 8002aea:	e066      	b.n	8002bba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	0011      	movs	r1, r2
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 f98d 	bl	8002e14 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699a      	ldr	r2, [r3, #24]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	0109      	lsls	r1, r1, #4
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	492f      	ldr	r1, [pc, #188]	; (8002bd4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6999      	ldr	r1, [r3, #24]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	021a      	lsls	r2, r3, #8
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	619a      	str	r2, [r3, #24]
      break;
 8002b30:	e043      	b.n	8002bba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	0011      	movs	r1, r2
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 f9ee 	bl	8002f1c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2108      	movs	r1, #8
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69d9      	ldr	r1, [r3, #28]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	61da      	str	r2, [r3, #28]
      break;
 8002b72:	e022      	b.n	8002bba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	0011      	movs	r1, r2
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 fa53 	bl	8003028 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69da      	ldr	r2, [r3, #28]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	0109      	lsls	r1, r1, #4
 8002b90:	430a      	orrs	r2, r1
 8002b92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	490d      	ldr	r1, [pc, #52]	; (8002bd4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69d9      	ldr	r1, [r3, #28]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	021a      	lsls	r2, r3, #8
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	61da      	str	r2, [r3, #28]
      break;
 8002bb8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	223d      	movs	r2, #61	; 0x3d
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	223c      	movs	r2, #60	; 0x3c
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b004      	add	sp, #16
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	fffffbff 	.word	0xfffffbff

08002bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b002      	add	sp, #8
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a2f      	ldr	r2, [pc, #188]	; (8002ce8 <TIM_Base_SetConfig+0xd0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d003      	beq.n	8002c38 <TIM_Base_SetConfig+0x20>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a2e      	ldr	r2, [pc, #184]	; (8002cec <TIM_Base_SetConfig+0xd4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d108      	bne.n	8002c4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2270      	movs	r2, #112	; 0x70
 8002c3c:	4393      	bics	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a26      	ldr	r2, [pc, #152]	; (8002ce8 <TIM_Base_SetConfig+0xd0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <TIM_Base_SetConfig+0x62>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a25      	ldr	r2, [pc, #148]	; (8002cec <TIM_Base_SetConfig+0xd4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00f      	beq.n	8002c7a <TIM_Base_SetConfig+0x62>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a24      	ldr	r2, [pc, #144]	; (8002cf0 <TIM_Base_SetConfig+0xd8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_Base_SetConfig+0x62>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <TIM_Base_SetConfig+0xdc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0x62>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <TIM_Base_SetConfig+0xe0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0x62>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <TIM_Base_SetConfig+0xe4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <TIM_Base_SetConfig+0xe8>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	4393      	bics	r3, r2
 8002c92:	001a      	movs	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <TIM_Base_SetConfig+0xd0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <TIM_Base_SetConfig+0xba>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <TIM_Base_SetConfig+0xdc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <TIM_Base_SetConfig+0xba>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <TIM_Base_SetConfig+0xe0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d003      	beq.n	8002cd2 <TIM_Base_SetConfig+0xba>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <TIM_Base_SetConfig+0xe4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d103      	bne.n	8002cda <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	615a      	str	r2, [r3, #20]
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b004      	add	sp, #16
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	40002000 	.word	0x40002000
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800
 8002d00:	fffffcff 	.word	0xfffffcff

08002d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	2201      	movs	r2, #1
 8002d14:	4393      	bics	r3, r2
 8002d16:	001a      	movs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2270      	movs	r2, #112	; 0x70
 8002d32:	4393      	bics	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2203      	movs	r2, #3
 8002d3a:	4393      	bics	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <TIM_OC1_SetConfig+0xf8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <TIM_OC1_SetConfig+0x76>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <TIM_OC1_SetConfig+0xfc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <TIM_OC1_SetConfig+0x76>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <TIM_OC1_SetConfig+0x100>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <TIM_OC1_SetConfig+0x76>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <TIM_OC1_SetConfig+0x104>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d10c      	bne.n	8002d94 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	4393      	bics	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2204      	movs	r2, #4
 8002d90:	4393      	bics	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <TIM_OC1_SetConfig+0xf8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00b      	beq.n	8002db4 <TIM_OC1_SetConfig+0xb0>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <TIM_OC1_SetConfig+0xfc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d007      	beq.n	8002db4 <TIM_OC1_SetConfig+0xb0>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a17      	ldr	r2, [pc, #92]	; (8002e04 <TIM_OC1_SetConfig+0x100>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_OC1_SetConfig+0xb0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a16      	ldr	r2, [pc, #88]	; (8002e08 <TIM_OC1_SetConfig+0x104>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d111      	bne.n	8002dd8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <TIM_OC1_SetConfig+0x108>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <TIM_OC1_SetConfig+0x10c>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	621a      	str	r2, [r3, #32]
}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b006      	add	sp, #24
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40014000 	.word	0x40014000
 8002e04:	40014400 	.word	0x40014400
 8002e08:	40014800 	.word	0x40014800
 8002e0c:	fffffeff 	.word	0xfffffeff
 8002e10:	fffffdff 	.word	0xfffffdff

08002e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	2210      	movs	r2, #16
 8002e24:	4393      	bics	r3, r2
 8002e26:	001a      	movs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a2e      	ldr	r2, [pc, #184]	; (8002efc <TIM_OC2_SetConfig+0xe8>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4a2d      	ldr	r2, [pc, #180]	; (8002f00 <TIM_OC2_SetConfig+0xec>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	4393      	bics	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <TIM_OC2_SetConfig+0xf0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10d      	bne.n	8002e92 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	4393      	bics	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <TIM_OC2_SetConfig+0xf0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00b      	beq.n	8002eb2 <TIM_OC2_SetConfig+0x9e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <TIM_OC2_SetConfig+0xf4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d007      	beq.n	8002eb2 <TIM_OC2_SetConfig+0x9e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a19      	ldr	r2, [pc, #100]	; (8002f0c <TIM_OC2_SetConfig+0xf8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d003      	beq.n	8002eb2 <TIM_OC2_SetConfig+0x9e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <TIM_OC2_SetConfig+0xfc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d113      	bne.n	8002eda <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <TIM_OC2_SetConfig+0x100>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <TIM_OC2_SetConfig+0x104>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	621a      	str	r2, [r3, #32]
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b006      	add	sp, #24
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	ffff8fff 	.word	0xffff8fff
 8002f00:	fffffcff 	.word	0xfffffcff
 8002f04:	40012c00 	.word	0x40012c00
 8002f08:	40014000 	.word	0x40014000
 8002f0c:	40014400 	.word	0x40014400
 8002f10:	40014800 	.word	0x40014800
 8002f14:	fffffbff 	.word	0xfffffbff
 8002f18:	fffff7ff 	.word	0xfffff7ff

08002f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a35      	ldr	r2, [pc, #212]	; (8003000 <TIM_OC3_SetConfig+0xe4>)
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2270      	movs	r2, #112	; 0x70
 8002f48:	4393      	bics	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	4393      	bics	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	4a28      	ldr	r2, [pc, #160]	; (8003004 <TIM_OC3_SetConfig+0xe8>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a24      	ldr	r2, [pc, #144]	; (8003008 <TIM_OC3_SetConfig+0xec>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10d      	bne.n	8002f96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	4a23      	ldr	r2, [pc, #140]	; (800300c <TIM_OC3_SetConfig+0xf0>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <TIM_OC3_SetConfig+0xf4>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <TIM_OC3_SetConfig+0xec>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00b      	beq.n	8002fb6 <TIM_OC3_SetConfig+0x9a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <TIM_OC3_SetConfig+0xf8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <TIM_OC3_SetConfig+0x9a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <TIM_OC3_SetConfig+0xfc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <TIM_OC3_SetConfig+0x9a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1a      	ldr	r2, [pc, #104]	; (800301c <TIM_OC3_SetConfig+0x100>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d113      	bne.n	8002fde <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4a19      	ldr	r2, [pc, #100]	; (8003020 <TIM_OC3_SetConfig+0x104>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4a18      	ldr	r2, [pc, #96]	; (8003024 <TIM_OC3_SetConfig+0x108>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	621a      	str	r2, [r3, #32]
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b006      	add	sp, #24
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	fffffeff 	.word	0xfffffeff
 8003004:	fffffdff 	.word	0xfffffdff
 8003008:	40012c00 	.word	0x40012c00
 800300c:	fffff7ff 	.word	0xfffff7ff
 8003010:	fffffbff 	.word	0xfffffbff
 8003014:	40014000 	.word	0x40014000
 8003018:	40014400 	.word	0x40014400
 800301c:	40014800 	.word	0x40014800
 8003020:	ffffefff 	.word	0xffffefff
 8003024:	ffffdfff 	.word	0xffffdfff

08003028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <TIM_OC4_SetConfig+0xb0>)
 8003038:	401a      	ands	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a22      	ldr	r2, [pc, #136]	; (80030dc <TIM_OC4_SetConfig+0xb4>)
 8003054:	4013      	ands	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a21      	ldr	r2, [pc, #132]	; (80030e0 <TIM_OC4_SetConfig+0xb8>)
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <TIM_OC4_SetConfig+0xbc>)
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	031b      	lsls	r3, r3, #12
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <TIM_OC4_SetConfig+0xc0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00b      	beq.n	80030a0 <TIM_OC4_SetConfig+0x78>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a18      	ldr	r2, [pc, #96]	; (80030ec <TIM_OC4_SetConfig+0xc4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <TIM_OC4_SetConfig+0x78>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <TIM_OC4_SetConfig+0xc8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <TIM_OC4_SetConfig+0x78>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <TIM_OC4_SetConfig+0xcc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d109      	bne.n	80030b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <TIM_OC4_SetConfig+0xd0>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	019b      	lsls	r3, r3, #6
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	621a      	str	r2, [r3, #32]
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b006      	add	sp, #24
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	ffffefff 	.word	0xffffefff
 80030dc:	ffff8fff 	.word	0xffff8fff
 80030e0:	fffffcff 	.word	0xfffffcff
 80030e4:	ffffdfff 	.word	0xffffdfff
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40014000 	.word	0x40014000
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800
 80030f8:	ffffbfff 	.word	0xffffbfff

080030fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	221f      	movs	r2, #31
 800310c:	4013      	ands	r3, r2
 800310e:	2201      	movs	r2, #1
 8003110:	409a      	lsls	r2, r3
 8003112:	0013      	movs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	43d2      	mvns	r2, r2
 800311e:	401a      	ands	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	211f      	movs	r1, #31
 800312c:	400b      	ands	r3, r1
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4099      	lsls	r1, r3
 8003132:	000b      	movs	r3, r1
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	b006      	add	sp, #24
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	223c      	movs	r2, #60	; 0x3c
 8003152:	5c9b      	ldrb	r3, [r3, r2]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003158:	2302      	movs	r3, #2
 800315a:	e041      	b.n	80031e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	223c      	movs	r2, #60	; 0x3c
 8003160:	2101      	movs	r1, #1
 8003162:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	223d      	movs	r2, #61	; 0x3d
 8003168:	2102      	movs	r1, #2
 800316a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2270      	movs	r2, #112	; 0x70
 8003180:	4393      	bics	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d009      	beq.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a10      	ldr	r2, [pc, #64]	; (80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d10c      	bne.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	4393      	bics	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	223d      	movs	r2, #61	; 0x3d
 80031d2:	2101      	movs	r1, #1
 80031d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	223c      	movs	r2, #60	; 0x3c
 80031da:	2100      	movs	r1, #0
 80031dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b004      	add	sp, #16
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40014000 	.word	0x40014000

080031f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b002      	add	sp, #8
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e044      	b.n	80032b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2270      	movs	r2, #112	; 0x70
 8003232:	2100      	movs	r1, #0
 8003234:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0018      	movs	r0, r3
 800323a:	f7fd fc49 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2224      	movs	r2, #36	; 0x24
 8003242:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2101      	movs	r1, #1
 8003250:	438a      	bics	r2, r1
 8003252:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	0018      	movs	r0, r3
 8003258:	f000 fa10 	bl	800367c <UART_SetConfig>
 800325c:	0003      	movs	r3, r0
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e024      	b.n	80032b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 fb89 	bl	8003988 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	490d      	ldr	r1, [pc, #52]	; (80032b8 <HAL_UART_Init+0xa4>)
 8003282:	400a      	ands	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2108      	movs	r1, #8
 8003292:	438a      	bics	r2, r1
 8003294:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	430a      	orrs	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 fc21 	bl	8003af0 <UART_CheckIdleState>
 80032ae:	0003      	movs	r3, r0
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b002      	add	sp, #8
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	fffff7ff 	.word	0xfffff7ff

080032bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	1dbb      	adds	r3, r7, #6
 80032ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d000      	beq.n	80032d6 <HAL_UART_Transmit+0x1a>
 80032d4:	e095      	b.n	8003402 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_UART_Transmit+0x28>
 80032dc:	1dbb      	adds	r3, r7, #6
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e08d      	b.n	8003404 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	015b      	lsls	r3, r3, #5
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d109      	bne.n	8003308 <HAL_UART_Transmit+0x4c>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2201      	movs	r2, #1
 8003300:	4013      	ands	r3, r2
 8003302:	d001      	beq.n	8003308 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e07d      	b.n	8003404 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2270      	movs	r2, #112	; 0x70
 800330c:	5c9b      	ldrb	r3, [r3, r2]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_UART_Transmit+0x5a>
 8003312:	2302      	movs	r3, #2
 8003314:	e076      	b.n	8003404 <HAL_UART_Transmit+0x148>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2270      	movs	r2, #112	; 0x70
 800331a:	2101      	movs	r1, #1
 800331c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2221      	movs	r2, #33	; 0x21
 8003328:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800332a:	f7fd fe07 	bl	8000f3c <HAL_GetTick>
 800332e:	0003      	movs	r3, r0
 8003330:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1dba      	adds	r2, r7, #6
 8003336:	2150      	movs	r1, #80	; 0x50
 8003338:	8812      	ldrh	r2, [r2, #0]
 800333a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1dba      	adds	r2, r7, #6
 8003340:	2152      	movs	r1, #82	; 0x52
 8003342:	8812      	ldrh	r2, [r2, #0]
 8003344:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	015b      	lsls	r3, r3, #5
 800334e:	429a      	cmp	r2, r3
 8003350:	d108      	bne.n	8003364 <HAL_UART_Transmit+0xa8>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	e003      	b.n	800336c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800336c:	e02d      	b.n	80033ca <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	0013      	movs	r3, r2
 8003378:	2200      	movs	r2, #0
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	f000 fbfe 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d001      	beq.n	8003388 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e03d      	b.n	8003404 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	05d2      	lsls	r2, r2, #23
 8003398:	0dd2      	lsrs	r2, r2, #23
 800339a:	b292      	uxth	r2, r2
 800339c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	3302      	adds	r3, #2
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e008      	b.n	80033b8 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	b292      	uxth	r2, r2
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2252      	movs	r2, #82	; 0x52
 80033bc:	5a9b      	ldrh	r3, [r3, r2]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b299      	uxth	r1, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2252      	movs	r2, #82	; 0x52
 80033c8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2252      	movs	r2, #82	; 0x52
 80033ce:	5a9b      	ldrh	r3, [r3, r2]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1cb      	bne.n	800336e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	0013      	movs	r3, r2
 80033e0:	2200      	movs	r2, #0
 80033e2:	2140      	movs	r1, #64	; 0x40
 80033e4:	f000 fbca 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e009      	b.n	8003404 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2270      	movs	r2, #112	; 0x70
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e000      	b.n	8003404 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003402:	2302      	movs	r3, #2
  }
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b008      	add	sp, #32
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4a89      	ldr	r2, [pc, #548]	; (8003654 <HAL_UART_IRQHandler+0x248>)
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d112      	bne.n	8003460 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2220      	movs	r2, #32
 800343e:	4013      	ands	r3, r2
 8003440:	d00e      	beq.n	8003460 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2220      	movs	r2, #32
 8003446:	4013      	ands	r3, r2
 8003448:	d00a      	beq.n	8003460 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344e:	2b00      	cmp	r3, #0
 8003450:	d100      	bne.n	8003454 <HAL_UART_IRQHandler+0x48>
 8003452:	e0f7      	b.n	8003644 <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	0010      	movs	r0, r2
 800345c:	4798      	blx	r3
      }
      return;
 800345e:	e0f1      	b.n	8003644 <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d100      	bne.n	8003468 <HAL_UART_IRQHandler+0x5c>
 8003466:	e0cd      	b.n	8003604 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2201      	movs	r2, #1
 800346c:	4013      	ands	r3, r2
 800346e:	d105      	bne.n	800347c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	2390      	movs	r3, #144	; 0x90
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4013      	ands	r3, r2
 8003478:	d100      	bne.n	800347c <HAL_UART_IRQHandler+0x70>
 800347a:	e0c3      	b.n	8003604 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2201      	movs	r2, #1
 8003480:	4013      	ands	r3, r2
 8003482:	d00e      	beq.n	80034a2 <HAL_UART_IRQHandler+0x96>
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4013      	ands	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2201      	movs	r2, #1
 8003494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800349a:	2201      	movs	r2, #1
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2202      	movs	r2, #2
 80034a6:	4013      	ands	r3, r2
 80034a8:	d00d      	beq.n	80034c6 <HAL_UART_IRQHandler+0xba>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2201      	movs	r2, #1
 80034ae:	4013      	ands	r3, r2
 80034b0:	d009      	beq.n	80034c6 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2202      	movs	r2, #2
 80034b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034be:	2204      	movs	r2, #4
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	2204      	movs	r2, #4
 80034ca:	4013      	ands	r3, r2
 80034cc:	d00d      	beq.n	80034ea <HAL_UART_IRQHandler+0xde>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2201      	movs	r2, #1
 80034d2:	4013      	ands	r3, r2
 80034d4:	d009      	beq.n	80034ea <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2204      	movs	r2, #4
 80034dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034e2:	2202      	movs	r2, #2
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	2208      	movs	r2, #8
 80034ee:	4013      	ands	r3, r2
 80034f0:	d011      	beq.n	8003516 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2220      	movs	r2, #32
 80034f6:	4013      	ands	r3, r2
 80034f8:	d103      	bne.n	8003502 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2201      	movs	r2, #1
 80034fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003500:	d009      	beq.n	8003516 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2208      	movs	r2, #8
 8003508:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800350e:	2208      	movs	r2, #8
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	4013      	ands	r3, r2
 800351e:	d00f      	beq.n	8003540 <HAL_UART_IRQHandler+0x134>
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	04db      	lsls	r3, r3, #19
 8003526:	4013      	ands	r3, r2
 8003528:	d00a      	beq.n	8003540 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2280      	movs	r2, #128	; 0x80
 8003530:	0112      	lsls	r2, r2, #4
 8003532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003538:	2220      	movs	r2, #32
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d100      	bne.n	800354a <HAL_UART_IRQHandler+0x13e>
 8003548:	e07e      	b.n	8003648 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	2220      	movs	r2, #32
 800354e:	4013      	ands	r3, r2
 8003550:	d00c      	beq.n	800356c <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2220      	movs	r2, #32
 8003556:	4013      	ands	r3, r2
 8003558:	d008      	beq.n	800356c <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	0010      	movs	r0, r2
 800356a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003570:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	4013      	ands	r3, r2
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d003      	beq.n	8003588 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2228      	movs	r2, #40	; 0x28
 8003584:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003586:	d033      	beq.n	80035f0 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 fb74 	bl	8003c78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2240      	movs	r2, #64	; 0x40
 8003598:	4013      	ands	r3, r2
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d123      	bne.n	80035e6 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2140      	movs	r1, #64	; 0x40
 80035aa:	438a      	bics	r2, r1
 80035ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d012      	beq.n	80035dc <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ba:	4a27      	ldr	r2, [pc, #156]	; (8003658 <HAL_UART_IRQHandler+0x24c>)
 80035bc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c2:	0018      	movs	r0, r3
 80035c4:	f7fd fda2 	bl	800110c <HAL_DMA_Abort_IT>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d019      	beq.n	8003600 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d6:	0018      	movs	r0, r3
 80035d8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035da:	e011      	b.n	8003600 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 f844 	bl	800366c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e4:	e00c      	b.n	8003600 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 f83f 	bl	800366c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ee:	e007      	b.n	8003600 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 f83a 	bl	800366c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80035fe:	e023      	b.n	8003648 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	46c0      	nop			; (mov r8, r8)
    return;
 8003602:	e021      	b.n	8003648 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	4013      	ands	r3, r2
 800360a:	d00d      	beq.n	8003628 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2280      	movs	r2, #128	; 0x80
 8003610:	4013      	ands	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003618:	2b00      	cmp	r3, #0
 800361a:	d017      	beq.n	800364c <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	0010      	movs	r0, r2
 8003624:	4798      	blx	r3
    }
    return;
 8003626:	e011      	b.n	800364c <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2240      	movs	r2, #64	; 0x40
 800362c:	4013      	ands	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_UART_IRQHandler+0x242>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	4013      	ands	r3, r2
 8003636:	d00a      	beq.n	800364e <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0018      	movs	r0, r3
 800363c:	f000 fb53 	bl	8003ce6 <UART_EndTransmit_IT>
    return;
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	e004      	b.n	800364e <HAL_UART_IRQHandler+0x242>
      return;
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	e002      	b.n	800364e <HAL_UART_IRQHandler+0x242>
    return;
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	e000      	b.n	800364e <HAL_UART_IRQHandler+0x242>
    return;
 800364c:	46c0      	nop			; (mov r8, r8)
  }

}
 800364e:	46bd      	mov	sp, r7
 8003650:	b008      	add	sp, #32
 8003652:	bd80      	pop	{r7, pc}
 8003654:	0000080f 	.word	0x0000080f
 8003658:	08003cb9 	.word	0x08003cb9

0800365c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	b002      	add	sp, #8
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b002      	add	sp, #8
 800367a:	bd80      	pop	{r7, pc}

0800367c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003688:	2317      	movs	r3, #23
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4aad      	ldr	r2, [pc, #692]	; (8003964 <UART_SetConfig+0x2e8>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4aa8      	ldr	r2, [pc, #672]	; (8003968 <UART_SetConfig+0x2ec>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a9f      	ldr	r2, [pc, #636]	; (800396c <UART_SetConfig+0x2f0>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	0019      	movs	r1, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a9b      	ldr	r2, [pc, #620]	; (8003970 <UART_SetConfig+0x2f4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d125      	bne.n	8003752 <UART_SetConfig+0xd6>
 8003706:	4b9b      	ldr	r3, [pc, #620]	; (8003974 <UART_SetConfig+0x2f8>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	2203      	movs	r2, #3
 800370c:	4013      	ands	r3, r2
 800370e:	2b01      	cmp	r3, #1
 8003710:	d00f      	beq.n	8003732 <UART_SetConfig+0xb6>
 8003712:	d304      	bcc.n	800371e <UART_SetConfig+0xa2>
 8003714:	2b02      	cmp	r3, #2
 8003716:	d011      	beq.n	800373c <UART_SetConfig+0xc0>
 8003718:	2b03      	cmp	r3, #3
 800371a:	d005      	beq.n	8003728 <UART_SetConfig+0xac>
 800371c:	e013      	b.n	8003746 <UART_SetConfig+0xca>
 800371e:	231f      	movs	r3, #31
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	e022      	b.n	800376e <UART_SetConfig+0xf2>
 8003728:	231f      	movs	r3, #31
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	2202      	movs	r2, #2
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e01d      	b.n	800376e <UART_SetConfig+0xf2>
 8003732:	231f      	movs	r3, #31
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	2204      	movs	r2, #4
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e018      	b.n	800376e <UART_SetConfig+0xf2>
 800373c:	231f      	movs	r3, #31
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	2208      	movs	r2, #8
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e013      	b.n	800376e <UART_SetConfig+0xf2>
 8003746:	231f      	movs	r3, #31
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	2210      	movs	r2, #16
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	e00d      	b.n	800376e <UART_SetConfig+0xf2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a88      	ldr	r2, [pc, #544]	; (8003978 <UART_SetConfig+0x2fc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d104      	bne.n	8003766 <UART_SetConfig+0xea>
 800375c:	231f      	movs	r3, #31
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	e003      	b.n	800376e <UART_SetConfig+0xf2>
 8003766:	231f      	movs	r3, #31
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	2210      	movs	r2, #16
 800376c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	429a      	cmp	r2, r3
 8003778:	d000      	beq.n	800377c <UART_SetConfig+0x100>
 800377a:	e07d      	b.n	8003878 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 800377c:	231f      	movs	r3, #31
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d01c      	beq.n	80037c0 <UART_SetConfig+0x144>
 8003786:	dc02      	bgt.n	800378e <UART_SetConfig+0x112>
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <UART_SetConfig+0x11c>
 800378c:	e04b      	b.n	8003826 <UART_SetConfig+0x1aa>
 800378e:	2b04      	cmp	r3, #4
 8003790:	d025      	beq.n	80037de <UART_SetConfig+0x162>
 8003792:	2b08      	cmp	r3, #8
 8003794:	d037      	beq.n	8003806 <UART_SetConfig+0x18a>
 8003796:	e046      	b.n	8003826 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003798:	f7fe fb42 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 800379c:	0003      	movs	r3, r0
 800379e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	005a      	lsls	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	18d2      	adds	r2, r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	0019      	movs	r1, r3
 80037b2:	0010      	movs	r0, r2
 80037b4:	f7fc fcb0 	bl	8000118 <__udivsi3>
 80037b8:	0003      	movs	r3, r0
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	61bb      	str	r3, [r7, #24]
        break;
 80037be:	e037      	b.n	8003830 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	4a6d      	ldr	r2, [pc, #436]	; (800397c <UART_SetConfig+0x300>)
 80037c8:	189a      	adds	r2, r3, r2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	0019      	movs	r1, r3
 80037d0:	0010      	movs	r0, r2
 80037d2:	f7fc fca1 	bl	8000118 <__udivsi3>
 80037d6:	0003      	movs	r3, r0
 80037d8:	b29b      	uxth	r3, r3
 80037da:	61bb      	str	r3, [r7, #24]
        break;
 80037dc:	e028      	b.n	8003830 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037de:	f7fe fab1 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 80037e2:	0003      	movs	r3, r0
 80037e4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	005a      	lsls	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	18d2      	adds	r2, r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	0019      	movs	r1, r3
 80037f8:	0010      	movs	r0, r2
 80037fa:	f7fc fc8d 	bl	8000118 <__udivsi3>
 80037fe:	0003      	movs	r3, r0
 8003800:	b29b      	uxth	r3, r3
 8003802:	61bb      	str	r3, [r7, #24]
        break;
 8003804:	e014      	b.n	8003830 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	2280      	movs	r2, #128	; 0x80
 800380e:	0252      	lsls	r2, r2, #9
 8003810:	189a      	adds	r2, r3, r2
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	0019      	movs	r1, r3
 8003818:	0010      	movs	r0, r2
 800381a:	f7fc fc7d 	bl	8000118 <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	b29b      	uxth	r3, r3
 8003822:	61bb      	str	r3, [r7, #24]
        break;
 8003824:	e004      	b.n	8003830 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003826:	2317      	movs	r3, #23
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
        break;
 800382e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b0f      	cmp	r3, #15
 8003834:	d91b      	bls.n	800386e <UART_SetConfig+0x1f2>
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4a51      	ldr	r2, [pc, #324]	; (8003980 <UART_SetConfig+0x304>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d817      	bhi.n	800386e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	b29a      	uxth	r2, r3
 8003842:	200a      	movs	r0, #10
 8003844:	183b      	adds	r3, r7, r0
 8003846:	210f      	movs	r1, #15
 8003848:	438a      	bics	r2, r1
 800384a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	b29b      	uxth	r3, r3
 8003852:	2207      	movs	r2, #7
 8003854:	4013      	ands	r3, r2
 8003856:	b299      	uxth	r1, r3
 8003858:	183b      	adds	r3, r7, r0
 800385a:	183a      	adds	r2, r7, r0
 800385c:	8812      	ldrh	r2, [r2, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	183a      	adds	r2, r7, r0
 8003868:	8812      	ldrh	r2, [r2, #0]
 800386a:	60da      	str	r2, [r3, #12]
 800386c:	e06c      	b.n	8003948 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800386e:	2317      	movs	r3, #23
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e067      	b.n	8003948 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003878:	231f      	movs	r3, #31
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d01b      	beq.n	80038ba <UART_SetConfig+0x23e>
 8003882:	dc02      	bgt.n	800388a <UART_SetConfig+0x20e>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <UART_SetConfig+0x218>
 8003888:	e049      	b.n	800391e <UART_SetConfig+0x2a2>
 800388a:	2b04      	cmp	r3, #4
 800388c:	d024      	beq.n	80038d8 <UART_SetConfig+0x25c>
 800388e:	2b08      	cmp	r3, #8
 8003890:	d035      	beq.n	80038fe <UART_SetConfig+0x282>
 8003892:	e044      	b.n	800391e <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003894:	f7fe fac4 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8003898:	0003      	movs	r3, r0
 800389a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	085a      	lsrs	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	18d2      	adds	r2, r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	0019      	movs	r1, r3
 80038ac:	0010      	movs	r0, r2
 80038ae:	f7fc fc33 	bl	8000118 <__udivsi3>
 80038b2:	0003      	movs	r3, r0
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	61bb      	str	r3, [r7, #24]
        break;
 80038b8:	e036      	b.n	8003928 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	4a30      	ldr	r2, [pc, #192]	; (8003984 <UART_SetConfig+0x308>)
 80038c2:	189a      	adds	r2, r3, r2
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	0019      	movs	r1, r3
 80038ca:	0010      	movs	r0, r2
 80038cc:	f7fc fc24 	bl	8000118 <__udivsi3>
 80038d0:	0003      	movs	r3, r0
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	61bb      	str	r3, [r7, #24]
        break;
 80038d6:	e027      	b.n	8003928 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038d8:	f7fe fa34 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 80038dc:	0003      	movs	r3, r0
 80038de:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	085a      	lsrs	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	18d2      	adds	r2, r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	0019      	movs	r1, r3
 80038f0:	0010      	movs	r0, r2
 80038f2:	f7fc fc11 	bl	8000118 <__udivsi3>
 80038f6:	0003      	movs	r3, r0
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	61bb      	str	r3, [r7, #24]
        break;
 80038fc:	e014      	b.n	8003928 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	2280      	movs	r2, #128	; 0x80
 8003906:	0212      	lsls	r2, r2, #8
 8003908:	189a      	adds	r2, r3, r2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0019      	movs	r1, r3
 8003910:	0010      	movs	r0, r2
 8003912:	f7fc fc01 	bl	8000118 <__udivsi3>
 8003916:	0003      	movs	r3, r0
 8003918:	b29b      	uxth	r3, r3
 800391a:	61bb      	str	r3, [r7, #24]
        break;
 800391c:	e004      	b.n	8003928 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 800391e:	2317      	movs	r3, #23
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	2201      	movs	r2, #1
 8003924:	701a      	strb	r2, [r3, #0]
        break;
 8003926:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b0f      	cmp	r3, #15
 800392c:	d908      	bls.n	8003940 <UART_SetConfig+0x2c4>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	4a13      	ldr	r2, [pc, #76]	; (8003980 <UART_SetConfig+0x304>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d804      	bhi.n	8003940 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	e003      	b.n	8003948 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003940:	2317      	movs	r3, #23
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003954:	2317      	movs	r3, #23
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	781b      	ldrb	r3, [r3, #0]
}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b008      	add	sp, #32
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	ffff69f3 	.word	0xffff69f3
 8003968:	ffffcfff 	.word	0xffffcfff
 800396c:	fffff4ff 	.word	0xfffff4ff
 8003970:	40013800 	.word	0x40013800
 8003974:	40021000 	.word	0x40021000
 8003978:	40004400 	.word	0x40004400
 800397c:	00f42400 	.word	0x00f42400
 8003980:	0000ffff 	.word	0x0000ffff
 8003984:	007a1200 	.word	0x007a1200

08003988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	2201      	movs	r2, #1
 8003996:	4013      	ands	r3, r2
 8003998:	d00b      	beq.n	80039b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a4a      	ldr	r2, [pc, #296]	; (8003acc <UART_AdvFeatureConfig+0x144>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	2202      	movs	r2, #2
 80039b8:	4013      	ands	r3, r2
 80039ba:	d00b      	beq.n	80039d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4a43      	ldr	r2, [pc, #268]	; (8003ad0 <UART_AdvFeatureConfig+0x148>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2204      	movs	r2, #4
 80039da:	4013      	ands	r3, r2
 80039dc:	d00b      	beq.n	80039f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4a3b      	ldr	r2, [pc, #236]	; (8003ad4 <UART_AdvFeatureConfig+0x14c>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	2208      	movs	r2, #8
 80039fc:	4013      	ands	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4a34      	ldr	r2, [pc, #208]	; (8003ad8 <UART_AdvFeatureConfig+0x150>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d00b      	beq.n	8003a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a2c      	ldr	r2, [pc, #176]	; (8003adc <UART_AdvFeatureConfig+0x154>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2220      	movs	r2, #32
 8003a40:	4013      	ands	r3, r2
 8003a42:	d00b      	beq.n	8003a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	4a25      	ldr	r2, [pc, #148]	; (8003ae0 <UART_AdvFeatureConfig+0x158>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	0019      	movs	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	2240      	movs	r2, #64	; 0x40
 8003a62:	4013      	ands	r3, r2
 8003a64:	d01d      	beq.n	8003aa2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <UART_AdvFeatureConfig+0x15c>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	035b      	lsls	r3, r3, #13
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d10b      	bne.n	8003aa2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <UART_AdvFeatureConfig+0x160>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4a0e      	ldr	r2, [pc, #56]	; (8003aec <UART_AdvFeatureConfig+0x164>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b002      	add	sp, #8
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	fffdffff 	.word	0xfffdffff
 8003ad0:	fffeffff 	.word	0xfffeffff
 8003ad4:	fffbffff 	.word	0xfffbffff
 8003ad8:	ffff7fff 	.word	0xffff7fff
 8003adc:	ffffefff 	.word	0xffffefff
 8003ae0:	ffffdfff 	.word	0xffffdfff
 8003ae4:	ffefffff 	.word	0xffefffff
 8003ae8:	ff9fffff 	.word	0xff9fffff
 8003aec:	fff7ffff 	.word	0xfff7ffff

08003af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003afe:	f7fd fa1d 	bl	8000f3c <HAL_GetTick>
 8003b02:	0003      	movs	r3, r0
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d10d      	bne.n	8003b30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	0399      	lsls	r1, r3, #14
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <UART_CheckIdleState+0x88>)
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	0013      	movs	r3, r2
 8003b22:	2200      	movs	r2, #0
 8003b24:	f000 f82a 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003b28:	1e03      	subs	r3, r0, #0
 8003b2a:	d001      	beq.n	8003b30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e01f      	b.n	8003b70 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2204      	movs	r2, #4
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d10d      	bne.n	8003b5a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	03d9      	lsls	r1, r3, #15
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <UART_CheckIdleState+0x88>)
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f000 f815 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d001      	beq.n	8003b5a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e00a      	b.n	8003b70 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2270      	movs	r2, #112	; 0x70
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b004      	add	sp, #16
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	01ffffff 	.word	0x01ffffff

08003b7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8c:	e05d      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	3301      	adds	r3, #1
 8003b92:	d05a      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b94:	f7fd f9d2 	bl	8000f3c <HAL_GetTick>
 8003b98:	0002      	movs	r2, r0
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d11b      	bne.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	492f      	ldr	r1, [pc, #188]	; (8003c74 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	438a      	bics	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2270      	movs	r2, #112	; 0x70
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e043      	b.n	8003c6a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2204      	movs	r2, #4
 8003bea:	4013      	ands	r3, r2
 8003bec:	d02d      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d123      	bne.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	0112      	lsls	r2, r2, #4
 8003c0a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4917      	ldr	r1, [pc, #92]	; (8003c74 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2101      	movs	r1, #1
 8003c28:	438a      	bics	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2270      	movs	r2, #112	; 0x70
 8003c42:	2100      	movs	r1, #0
 8003c44:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e00f      	b.n	8003c6a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	4013      	ands	r3, r2
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	425a      	negs	r2, r3
 8003c5a:	4153      	adcs	r3, r2
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	001a      	movs	r2, r3
 8003c60:	1dfb      	adds	r3, r7, #7
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d092      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	fffffe5f 	.word	0xfffffe5f

08003c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	490a      	ldr	r1, [pc, #40]	; (8003cb4 <UART_EndRxTransfer+0x3c>)
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b002      	add	sp, #8
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	fffffedf 	.word	0xfffffedf

08003cb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	225a      	movs	r2, #90	; 0x5a
 8003cca:	2100      	movs	r1, #0
 8003ccc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2252      	movs	r2, #82	; 0x52
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f7ff fcc7 	bl	800366c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b004      	add	sp, #16
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2140      	movs	r1, #64	; 0x40
 8003cfa:	438a      	bics	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f7ff fca5 	bl	800365c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b002      	add	sp, #8
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <__errno>:
 8003d1c:	4b01      	ldr	r3, [pc, #4]	; (8003d24 <__errno+0x8>)
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	4770      	bx	lr
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	2000000c 	.word	0x2000000c

08003d28 <__libc_init_array>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	2600      	movs	r6, #0
 8003d2c:	4d0c      	ldr	r5, [pc, #48]	; (8003d60 <__libc_init_array+0x38>)
 8003d2e:	4c0d      	ldr	r4, [pc, #52]	; (8003d64 <__libc_init_array+0x3c>)
 8003d30:	1b64      	subs	r4, r4, r5
 8003d32:	10a4      	asrs	r4, r4, #2
 8003d34:	42a6      	cmp	r6, r4
 8003d36:	d109      	bne.n	8003d4c <__libc_init_array+0x24>
 8003d38:	2600      	movs	r6, #0
 8003d3a:	f000 fc29 	bl	8004590 <_init>
 8003d3e:	4d0a      	ldr	r5, [pc, #40]	; (8003d68 <__libc_init_array+0x40>)
 8003d40:	4c0a      	ldr	r4, [pc, #40]	; (8003d6c <__libc_init_array+0x44>)
 8003d42:	1b64      	subs	r4, r4, r5
 8003d44:	10a4      	asrs	r4, r4, #2
 8003d46:	42a6      	cmp	r6, r4
 8003d48:	d105      	bne.n	8003d56 <__libc_init_array+0x2e>
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	00b3      	lsls	r3, r6, #2
 8003d4e:	58eb      	ldr	r3, [r5, r3]
 8003d50:	4798      	blx	r3
 8003d52:	3601      	adds	r6, #1
 8003d54:	e7ee      	b.n	8003d34 <__libc_init_array+0xc>
 8003d56:	00b3      	lsls	r3, r6, #2
 8003d58:	58eb      	ldr	r3, [r5, r3]
 8003d5a:	4798      	blx	r3
 8003d5c:	3601      	adds	r6, #1
 8003d5e:	e7f2      	b.n	8003d46 <__libc_init_array+0x1e>
 8003d60:	08004654 	.word	0x08004654
 8003d64:	08004654 	.word	0x08004654
 8003d68:	08004654 	.word	0x08004654
 8003d6c:	08004658 	.word	0x08004658

08003d70 <memset>:
 8003d70:	0003      	movs	r3, r0
 8003d72:	1812      	adds	r2, r2, r0
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d100      	bne.n	8003d7a <memset+0xa>
 8003d78:	4770      	bx	lr
 8003d7a:	7019      	strb	r1, [r3, #0]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	e7f9      	b.n	8003d74 <memset+0x4>

08003d80 <siprintf>:
 8003d80:	b40e      	push	{r1, r2, r3}
 8003d82:	b500      	push	{lr}
 8003d84:	490b      	ldr	r1, [pc, #44]	; (8003db4 <siprintf+0x34>)
 8003d86:	b09c      	sub	sp, #112	; 0x70
 8003d88:	ab1d      	add	r3, sp, #116	; 0x74
 8003d8a:	9002      	str	r0, [sp, #8]
 8003d8c:	9006      	str	r0, [sp, #24]
 8003d8e:	9107      	str	r1, [sp, #28]
 8003d90:	9104      	str	r1, [sp, #16]
 8003d92:	4809      	ldr	r0, [pc, #36]	; (8003db8 <siprintf+0x38>)
 8003d94:	4909      	ldr	r1, [pc, #36]	; (8003dbc <siprintf+0x3c>)
 8003d96:	cb04      	ldmia	r3!, {r2}
 8003d98:	9105      	str	r1, [sp, #20]
 8003d9a:	6800      	ldr	r0, [r0, #0]
 8003d9c:	a902      	add	r1, sp, #8
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	f000 f870 	bl	8003e84 <_svfiprintf_r>
 8003da4:	2300      	movs	r3, #0
 8003da6:	9a02      	ldr	r2, [sp, #8]
 8003da8:	7013      	strb	r3, [r2, #0]
 8003daa:	b01c      	add	sp, #112	; 0x70
 8003dac:	bc08      	pop	{r3}
 8003dae:	b003      	add	sp, #12
 8003db0:	4718      	bx	r3
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	7fffffff 	.word	0x7fffffff
 8003db8:	2000000c 	.word	0x2000000c
 8003dbc:	ffff0208 	.word	0xffff0208

08003dc0 <__ssputs_r>:
 8003dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc2:	688e      	ldr	r6, [r1, #8]
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	0007      	movs	r7, r0
 8003dc8:	000c      	movs	r4, r1
 8003dca:	9203      	str	r2, [sp, #12]
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	429e      	cmp	r6, r3
 8003dd0:	d83c      	bhi.n	8003e4c <__ssputs_r+0x8c>
 8003dd2:	2390      	movs	r3, #144	; 0x90
 8003dd4:	898a      	ldrh	r2, [r1, #12]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	421a      	tst	r2, r3
 8003dda:	d034      	beq.n	8003e46 <__ssputs_r+0x86>
 8003ddc:	2503      	movs	r5, #3
 8003dde:	6909      	ldr	r1, [r1, #16]
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	1a5b      	subs	r3, r3, r1
 8003de4:	9302      	str	r3, [sp, #8]
 8003de6:	6963      	ldr	r3, [r4, #20]
 8003de8:	9802      	ldr	r0, [sp, #8]
 8003dea:	435d      	muls	r5, r3
 8003dec:	0feb      	lsrs	r3, r5, #31
 8003dee:	195d      	adds	r5, r3, r5
 8003df0:	9b01      	ldr	r3, [sp, #4]
 8003df2:	106d      	asrs	r5, r5, #1
 8003df4:	3301      	adds	r3, #1
 8003df6:	181b      	adds	r3, r3, r0
 8003df8:	42ab      	cmp	r3, r5
 8003dfa:	d900      	bls.n	8003dfe <__ssputs_r+0x3e>
 8003dfc:	001d      	movs	r5, r3
 8003dfe:	0553      	lsls	r3, r2, #21
 8003e00:	d532      	bpl.n	8003e68 <__ssputs_r+0xa8>
 8003e02:	0029      	movs	r1, r5
 8003e04:	0038      	movs	r0, r7
 8003e06:	f000 fb23 	bl	8004450 <_malloc_r>
 8003e0a:	1e06      	subs	r6, r0, #0
 8003e0c:	d109      	bne.n	8003e22 <__ssputs_r+0x62>
 8003e0e:	230c      	movs	r3, #12
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	2340      	movs	r3, #64	; 0x40
 8003e14:	2001      	movs	r0, #1
 8003e16:	89a2      	ldrh	r2, [r4, #12]
 8003e18:	4240      	negs	r0, r0
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	81a3      	strh	r3, [r4, #12]
 8003e1e:	b005      	add	sp, #20
 8003e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e22:	9a02      	ldr	r2, [sp, #8]
 8003e24:	6921      	ldr	r1, [r4, #16]
 8003e26:	f000 faac 	bl	8004382 <memcpy>
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <__ssputs_r+0xc0>)
 8003e2e:	401a      	ands	r2, r3
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	4313      	orrs	r3, r2
 8003e34:	81a3      	strh	r3, [r4, #12]
 8003e36:	9b02      	ldr	r3, [sp, #8]
 8003e38:	6126      	str	r6, [r4, #16]
 8003e3a:	18f6      	adds	r6, r6, r3
 8003e3c:	6026      	str	r6, [r4, #0]
 8003e3e:	6165      	str	r5, [r4, #20]
 8003e40:	9e01      	ldr	r6, [sp, #4]
 8003e42:	1aed      	subs	r5, r5, r3
 8003e44:	60a5      	str	r5, [r4, #8]
 8003e46:	9b01      	ldr	r3, [sp, #4]
 8003e48:	429e      	cmp	r6, r3
 8003e4a:	d900      	bls.n	8003e4e <__ssputs_r+0x8e>
 8003e4c:	9e01      	ldr	r6, [sp, #4]
 8003e4e:	0032      	movs	r2, r6
 8003e50:	9903      	ldr	r1, [sp, #12]
 8003e52:	6820      	ldr	r0, [r4, #0]
 8003e54:	f000 fa9e 	bl	8004394 <memmove>
 8003e58:	68a3      	ldr	r3, [r4, #8]
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	1b9b      	subs	r3, r3, r6
 8003e5e:	60a3      	str	r3, [r4, #8]
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	199e      	adds	r6, r3, r6
 8003e64:	6026      	str	r6, [r4, #0]
 8003e66:	e7da      	b.n	8003e1e <__ssputs_r+0x5e>
 8003e68:	002a      	movs	r2, r5
 8003e6a:	0038      	movs	r0, r7
 8003e6c:	f000 fb4e 	bl	800450c <_realloc_r>
 8003e70:	1e06      	subs	r6, r0, #0
 8003e72:	d1e0      	bne.n	8003e36 <__ssputs_r+0x76>
 8003e74:	6921      	ldr	r1, [r4, #16]
 8003e76:	0038      	movs	r0, r7
 8003e78:	f000 faa0 	bl	80043bc <_free_r>
 8003e7c:	e7c7      	b.n	8003e0e <__ssputs_r+0x4e>
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	fffffb7f 	.word	0xfffffb7f

08003e84 <_svfiprintf_r>:
 8003e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e86:	b0a1      	sub	sp, #132	; 0x84
 8003e88:	9003      	str	r0, [sp, #12]
 8003e8a:	001d      	movs	r5, r3
 8003e8c:	898b      	ldrh	r3, [r1, #12]
 8003e8e:	000f      	movs	r7, r1
 8003e90:	0016      	movs	r6, r2
 8003e92:	061b      	lsls	r3, r3, #24
 8003e94:	d511      	bpl.n	8003eba <_svfiprintf_r+0x36>
 8003e96:	690b      	ldr	r3, [r1, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10e      	bne.n	8003eba <_svfiprintf_r+0x36>
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	f000 fad7 	bl	8004450 <_malloc_r>
 8003ea2:	6038      	str	r0, [r7, #0]
 8003ea4:	6138      	str	r0, [r7, #16]
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	d105      	bne.n	8003eb6 <_svfiprintf_r+0x32>
 8003eaa:	230c      	movs	r3, #12
 8003eac:	9a03      	ldr	r2, [sp, #12]
 8003eae:	3801      	subs	r0, #1
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	b021      	add	sp, #132	; 0x84
 8003eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb6:	2340      	movs	r3, #64	; 0x40
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	ac08      	add	r4, sp, #32
 8003ebe:	6163      	str	r3, [r4, #20]
 8003ec0:	3320      	adds	r3, #32
 8003ec2:	7663      	strb	r3, [r4, #25]
 8003ec4:	3310      	adds	r3, #16
 8003ec6:	76a3      	strb	r3, [r4, #26]
 8003ec8:	9507      	str	r5, [sp, #28]
 8003eca:	0035      	movs	r5, r6
 8003ecc:	782b      	ldrb	r3, [r5, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <_svfiprintf_r+0x52>
 8003ed2:	2b25      	cmp	r3, #37	; 0x25
 8003ed4:	d146      	bne.n	8003f64 <_svfiprintf_r+0xe0>
 8003ed6:	1bab      	subs	r3, r5, r6
 8003ed8:	9305      	str	r3, [sp, #20]
 8003eda:	d00c      	beq.n	8003ef6 <_svfiprintf_r+0x72>
 8003edc:	0032      	movs	r2, r6
 8003ede:	0039      	movs	r1, r7
 8003ee0:	9803      	ldr	r0, [sp, #12]
 8003ee2:	f7ff ff6d 	bl	8003dc0 <__ssputs_r>
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	d100      	bne.n	8003eec <_svfiprintf_r+0x68>
 8003eea:	e0ae      	b.n	800404a <_svfiprintf_r+0x1c6>
 8003eec:	6962      	ldr	r2, [r4, #20]
 8003eee:	9b05      	ldr	r3, [sp, #20]
 8003ef0:	4694      	mov	ip, r2
 8003ef2:	4463      	add	r3, ip
 8003ef4:	6163      	str	r3, [r4, #20]
 8003ef6:	782b      	ldrb	r3, [r5, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d100      	bne.n	8003efe <_svfiprintf_r+0x7a>
 8003efc:	e0a5      	b.n	800404a <_svfiprintf_r+0x1c6>
 8003efe:	2201      	movs	r2, #1
 8003f00:	2300      	movs	r3, #0
 8003f02:	4252      	negs	r2, r2
 8003f04:	6062      	str	r2, [r4, #4]
 8003f06:	a904      	add	r1, sp, #16
 8003f08:	3254      	adds	r2, #84	; 0x54
 8003f0a:	1852      	adds	r2, r2, r1
 8003f0c:	1c6e      	adds	r6, r5, #1
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	60e3      	str	r3, [r4, #12]
 8003f12:	60a3      	str	r3, [r4, #8]
 8003f14:	7013      	strb	r3, [r2, #0]
 8003f16:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f18:	7831      	ldrb	r1, [r6, #0]
 8003f1a:	2205      	movs	r2, #5
 8003f1c:	4853      	ldr	r0, [pc, #332]	; (800406c <_svfiprintf_r+0x1e8>)
 8003f1e:	f000 fa25 	bl	800436c <memchr>
 8003f22:	1c75      	adds	r5, r6, #1
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d11f      	bne.n	8003f68 <_svfiprintf_r+0xe4>
 8003f28:	6822      	ldr	r2, [r4, #0]
 8003f2a:	06d3      	lsls	r3, r2, #27
 8003f2c:	d504      	bpl.n	8003f38 <_svfiprintf_r+0xb4>
 8003f2e:	2353      	movs	r3, #83	; 0x53
 8003f30:	a904      	add	r1, sp, #16
 8003f32:	185b      	adds	r3, r3, r1
 8003f34:	2120      	movs	r1, #32
 8003f36:	7019      	strb	r1, [r3, #0]
 8003f38:	0713      	lsls	r3, r2, #28
 8003f3a:	d504      	bpl.n	8003f46 <_svfiprintf_r+0xc2>
 8003f3c:	2353      	movs	r3, #83	; 0x53
 8003f3e:	a904      	add	r1, sp, #16
 8003f40:	185b      	adds	r3, r3, r1
 8003f42:	212b      	movs	r1, #43	; 0x2b
 8003f44:	7019      	strb	r1, [r3, #0]
 8003f46:	7833      	ldrb	r3, [r6, #0]
 8003f48:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4a:	d016      	beq.n	8003f7a <_svfiprintf_r+0xf6>
 8003f4c:	0035      	movs	r5, r6
 8003f4e:	2100      	movs	r1, #0
 8003f50:	200a      	movs	r0, #10
 8003f52:	68e3      	ldr	r3, [r4, #12]
 8003f54:	782a      	ldrb	r2, [r5, #0]
 8003f56:	1c6e      	adds	r6, r5, #1
 8003f58:	3a30      	subs	r2, #48	; 0x30
 8003f5a:	2a09      	cmp	r2, #9
 8003f5c:	d94e      	bls.n	8003ffc <_svfiprintf_r+0x178>
 8003f5e:	2900      	cmp	r1, #0
 8003f60:	d018      	beq.n	8003f94 <_svfiprintf_r+0x110>
 8003f62:	e010      	b.n	8003f86 <_svfiprintf_r+0x102>
 8003f64:	3501      	adds	r5, #1
 8003f66:	e7b1      	b.n	8003ecc <_svfiprintf_r+0x48>
 8003f68:	4b40      	ldr	r3, [pc, #256]	; (800406c <_svfiprintf_r+0x1e8>)
 8003f6a:	6822      	ldr	r2, [r4, #0]
 8003f6c:	1ac0      	subs	r0, r0, r3
 8003f6e:	2301      	movs	r3, #1
 8003f70:	4083      	lsls	r3, r0
 8003f72:	4313      	orrs	r3, r2
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	002e      	movs	r6, r5
 8003f78:	e7ce      	b.n	8003f18 <_svfiprintf_r+0x94>
 8003f7a:	9b07      	ldr	r3, [sp, #28]
 8003f7c:	1d19      	adds	r1, r3, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	9107      	str	r1, [sp, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	db01      	blt.n	8003f8a <_svfiprintf_r+0x106>
 8003f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f88:	e004      	b.n	8003f94 <_svfiprintf_r+0x110>
 8003f8a:	425b      	negs	r3, r3
 8003f8c:	60e3      	str	r3, [r4, #12]
 8003f8e:	2302      	movs	r3, #2
 8003f90:	4313      	orrs	r3, r2
 8003f92:	6023      	str	r3, [r4, #0]
 8003f94:	782b      	ldrb	r3, [r5, #0]
 8003f96:	2b2e      	cmp	r3, #46	; 0x2e
 8003f98:	d10a      	bne.n	8003fb0 <_svfiprintf_r+0x12c>
 8003f9a:	786b      	ldrb	r3, [r5, #1]
 8003f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9e:	d135      	bne.n	800400c <_svfiprintf_r+0x188>
 8003fa0:	9b07      	ldr	r3, [sp, #28]
 8003fa2:	3502      	adds	r5, #2
 8003fa4:	1d1a      	adds	r2, r3, #4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	9207      	str	r2, [sp, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	db2b      	blt.n	8004006 <_svfiprintf_r+0x182>
 8003fae:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb0:	4e2f      	ldr	r6, [pc, #188]	; (8004070 <_svfiprintf_r+0x1ec>)
 8003fb2:	7829      	ldrb	r1, [r5, #0]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	0030      	movs	r0, r6
 8003fb8:	f000 f9d8 	bl	800436c <memchr>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d006      	beq.n	8003fce <_svfiprintf_r+0x14a>
 8003fc0:	2340      	movs	r3, #64	; 0x40
 8003fc2:	1b80      	subs	r0, r0, r6
 8003fc4:	4083      	lsls	r3, r0
 8003fc6:	6822      	ldr	r2, [r4, #0]
 8003fc8:	3501      	adds	r5, #1
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	7829      	ldrb	r1, [r5, #0]
 8003fd0:	2206      	movs	r2, #6
 8003fd2:	4828      	ldr	r0, [pc, #160]	; (8004074 <_svfiprintf_r+0x1f0>)
 8003fd4:	1c6e      	adds	r6, r5, #1
 8003fd6:	7621      	strb	r1, [r4, #24]
 8003fd8:	f000 f9c8 	bl	800436c <memchr>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d03c      	beq.n	800405a <_svfiprintf_r+0x1d6>
 8003fe0:	4b25      	ldr	r3, [pc, #148]	; (8004078 <_svfiprintf_r+0x1f4>)
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d125      	bne.n	8004032 <_svfiprintf_r+0x1ae>
 8003fe6:	2207      	movs	r2, #7
 8003fe8:	9b07      	ldr	r3, [sp, #28]
 8003fea:	3307      	adds	r3, #7
 8003fec:	4393      	bics	r3, r2
 8003fee:	3308      	adds	r3, #8
 8003ff0:	9307      	str	r3, [sp, #28]
 8003ff2:	6963      	ldr	r3, [r4, #20]
 8003ff4:	9a04      	ldr	r2, [sp, #16]
 8003ff6:	189b      	adds	r3, r3, r2
 8003ff8:	6163      	str	r3, [r4, #20]
 8003ffa:	e766      	b.n	8003eca <_svfiprintf_r+0x46>
 8003ffc:	4343      	muls	r3, r0
 8003ffe:	2101      	movs	r1, #1
 8004000:	189b      	adds	r3, r3, r2
 8004002:	0035      	movs	r5, r6
 8004004:	e7a6      	b.n	8003f54 <_svfiprintf_r+0xd0>
 8004006:	2301      	movs	r3, #1
 8004008:	425b      	negs	r3, r3
 800400a:	e7d0      	b.n	8003fae <_svfiprintf_r+0x12a>
 800400c:	2300      	movs	r3, #0
 800400e:	200a      	movs	r0, #10
 8004010:	001a      	movs	r2, r3
 8004012:	3501      	adds	r5, #1
 8004014:	6063      	str	r3, [r4, #4]
 8004016:	7829      	ldrb	r1, [r5, #0]
 8004018:	1c6e      	adds	r6, r5, #1
 800401a:	3930      	subs	r1, #48	; 0x30
 800401c:	2909      	cmp	r1, #9
 800401e:	d903      	bls.n	8004028 <_svfiprintf_r+0x1a4>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0c5      	beq.n	8003fb0 <_svfiprintf_r+0x12c>
 8004024:	9209      	str	r2, [sp, #36]	; 0x24
 8004026:	e7c3      	b.n	8003fb0 <_svfiprintf_r+0x12c>
 8004028:	4342      	muls	r2, r0
 800402a:	2301      	movs	r3, #1
 800402c:	1852      	adds	r2, r2, r1
 800402e:	0035      	movs	r5, r6
 8004030:	e7f1      	b.n	8004016 <_svfiprintf_r+0x192>
 8004032:	ab07      	add	r3, sp, #28
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	003a      	movs	r2, r7
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <_svfiprintf_r+0x1f8>)
 800403a:	0021      	movs	r1, r4
 800403c:	9803      	ldr	r0, [sp, #12]
 800403e:	e000      	b.n	8004042 <_svfiprintf_r+0x1be>
 8004040:	bf00      	nop
 8004042:	9004      	str	r0, [sp, #16]
 8004044:	9b04      	ldr	r3, [sp, #16]
 8004046:	3301      	adds	r3, #1
 8004048:	d1d3      	bne.n	8003ff2 <_svfiprintf_r+0x16e>
 800404a:	89bb      	ldrh	r3, [r7, #12]
 800404c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800404e:	065b      	lsls	r3, r3, #25
 8004050:	d400      	bmi.n	8004054 <_svfiprintf_r+0x1d0>
 8004052:	e72e      	b.n	8003eb2 <_svfiprintf_r+0x2e>
 8004054:	2001      	movs	r0, #1
 8004056:	4240      	negs	r0, r0
 8004058:	e72b      	b.n	8003eb2 <_svfiprintf_r+0x2e>
 800405a:	ab07      	add	r3, sp, #28
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	003a      	movs	r2, r7
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <_svfiprintf_r+0x1f8>)
 8004062:	0021      	movs	r1, r4
 8004064:	9803      	ldr	r0, [sp, #12]
 8004066:	f000 f879 	bl	800415c <_printf_i>
 800406a:	e7ea      	b.n	8004042 <_svfiprintf_r+0x1be>
 800406c:	08004620 	.word	0x08004620
 8004070:	08004626 	.word	0x08004626
 8004074:	0800462a 	.word	0x0800462a
 8004078:	00000000 	.word	0x00000000
 800407c:	08003dc1 	.word	0x08003dc1

08004080 <_printf_common>:
 8004080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004082:	0015      	movs	r5, r2
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	688a      	ldr	r2, [r1, #8]
 8004088:	690b      	ldr	r3, [r1, #16]
 800408a:	9000      	str	r0, [sp, #0]
 800408c:	000c      	movs	r4, r1
 800408e:	4293      	cmp	r3, r2
 8004090:	da00      	bge.n	8004094 <_printf_common+0x14>
 8004092:	0013      	movs	r3, r2
 8004094:	0022      	movs	r2, r4
 8004096:	602b      	str	r3, [r5, #0]
 8004098:	3243      	adds	r2, #67	; 0x43
 800409a:	7812      	ldrb	r2, [r2, #0]
 800409c:	2a00      	cmp	r2, #0
 800409e:	d001      	beq.n	80040a4 <_printf_common+0x24>
 80040a0:	3301      	adds	r3, #1
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	069b      	lsls	r3, r3, #26
 80040a8:	d502      	bpl.n	80040b0 <_printf_common+0x30>
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	3302      	adds	r3, #2
 80040ae:	602b      	str	r3, [r5, #0]
 80040b0:	2706      	movs	r7, #6
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	401f      	ands	r7, r3
 80040b6:	d027      	beq.n	8004108 <_printf_common+0x88>
 80040b8:	0023      	movs	r3, r4
 80040ba:	3343      	adds	r3, #67	; 0x43
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	1e5a      	subs	r2, r3, #1
 80040c0:	4193      	sbcs	r3, r2
 80040c2:	6822      	ldr	r2, [r4, #0]
 80040c4:	0692      	lsls	r2, r2, #26
 80040c6:	d430      	bmi.n	800412a <_printf_common+0xaa>
 80040c8:	0022      	movs	r2, r4
 80040ca:	9901      	ldr	r1, [sp, #4]
 80040cc:	3243      	adds	r2, #67	; 0x43
 80040ce:	9800      	ldr	r0, [sp, #0]
 80040d0:	9e08      	ldr	r6, [sp, #32]
 80040d2:	47b0      	blx	r6
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d025      	beq.n	8004124 <_printf_common+0xa4>
 80040d8:	2306      	movs	r3, #6
 80040da:	6820      	ldr	r0, [r4, #0]
 80040dc:	682a      	ldr	r2, [r5, #0]
 80040de:	68e1      	ldr	r1, [r4, #12]
 80040e0:	4003      	ands	r3, r0
 80040e2:	2500      	movs	r5, #0
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d103      	bne.n	80040f0 <_printf_common+0x70>
 80040e8:	1a8d      	subs	r5, r1, r2
 80040ea:	43eb      	mvns	r3, r5
 80040ec:	17db      	asrs	r3, r3, #31
 80040ee:	401d      	ands	r5, r3
 80040f0:	68a3      	ldr	r3, [r4, #8]
 80040f2:	6922      	ldr	r2, [r4, #16]
 80040f4:	4293      	cmp	r3, r2
 80040f6:	dd01      	ble.n	80040fc <_printf_common+0x7c>
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	18ed      	adds	r5, r5, r3
 80040fc:	2700      	movs	r7, #0
 80040fe:	42bd      	cmp	r5, r7
 8004100:	d120      	bne.n	8004144 <_printf_common+0xc4>
 8004102:	2000      	movs	r0, #0
 8004104:	e010      	b.n	8004128 <_printf_common+0xa8>
 8004106:	3701      	adds	r7, #1
 8004108:	68e3      	ldr	r3, [r4, #12]
 800410a:	682a      	ldr	r2, [r5, #0]
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	42bb      	cmp	r3, r7
 8004110:	ddd2      	ble.n	80040b8 <_printf_common+0x38>
 8004112:	0022      	movs	r2, r4
 8004114:	2301      	movs	r3, #1
 8004116:	3219      	adds	r2, #25
 8004118:	9901      	ldr	r1, [sp, #4]
 800411a:	9800      	ldr	r0, [sp, #0]
 800411c:	9e08      	ldr	r6, [sp, #32]
 800411e:	47b0      	blx	r6
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	d1f0      	bne.n	8004106 <_printf_common+0x86>
 8004124:	2001      	movs	r0, #1
 8004126:	4240      	negs	r0, r0
 8004128:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800412a:	2030      	movs	r0, #48	; 0x30
 800412c:	18e1      	adds	r1, r4, r3
 800412e:	3143      	adds	r1, #67	; 0x43
 8004130:	7008      	strb	r0, [r1, #0]
 8004132:	0021      	movs	r1, r4
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	3145      	adds	r1, #69	; 0x45
 8004138:	7809      	ldrb	r1, [r1, #0]
 800413a:	18a2      	adds	r2, r4, r2
 800413c:	3243      	adds	r2, #67	; 0x43
 800413e:	3302      	adds	r3, #2
 8004140:	7011      	strb	r1, [r2, #0]
 8004142:	e7c1      	b.n	80040c8 <_printf_common+0x48>
 8004144:	0022      	movs	r2, r4
 8004146:	2301      	movs	r3, #1
 8004148:	321a      	adds	r2, #26
 800414a:	9901      	ldr	r1, [sp, #4]
 800414c:	9800      	ldr	r0, [sp, #0]
 800414e:	9e08      	ldr	r6, [sp, #32]
 8004150:	47b0      	blx	r6
 8004152:	1c43      	adds	r3, r0, #1
 8004154:	d0e6      	beq.n	8004124 <_printf_common+0xa4>
 8004156:	3701      	adds	r7, #1
 8004158:	e7d1      	b.n	80040fe <_printf_common+0x7e>
	...

0800415c <_printf_i>:
 800415c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	9204      	str	r2, [sp, #16]
 8004162:	000a      	movs	r2, r1
 8004164:	3243      	adds	r2, #67	; 0x43
 8004166:	9305      	str	r3, [sp, #20]
 8004168:	9003      	str	r0, [sp, #12]
 800416a:	9202      	str	r2, [sp, #8]
 800416c:	7e0a      	ldrb	r2, [r1, #24]
 800416e:	000c      	movs	r4, r1
 8004170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004172:	2a6e      	cmp	r2, #110	; 0x6e
 8004174:	d100      	bne.n	8004178 <_printf_i+0x1c>
 8004176:	e086      	b.n	8004286 <_printf_i+0x12a>
 8004178:	d81f      	bhi.n	80041ba <_printf_i+0x5e>
 800417a:	2a63      	cmp	r2, #99	; 0x63
 800417c:	d033      	beq.n	80041e6 <_printf_i+0x8a>
 800417e:	d808      	bhi.n	8004192 <_printf_i+0x36>
 8004180:	2a00      	cmp	r2, #0
 8004182:	d100      	bne.n	8004186 <_printf_i+0x2a>
 8004184:	e08c      	b.n	80042a0 <_printf_i+0x144>
 8004186:	2a58      	cmp	r2, #88	; 0x58
 8004188:	d04d      	beq.n	8004226 <_printf_i+0xca>
 800418a:	0025      	movs	r5, r4
 800418c:	3542      	adds	r5, #66	; 0x42
 800418e:	702a      	strb	r2, [r5, #0]
 8004190:	e030      	b.n	80041f4 <_printf_i+0x98>
 8004192:	2a64      	cmp	r2, #100	; 0x64
 8004194:	d001      	beq.n	800419a <_printf_i+0x3e>
 8004196:	2a69      	cmp	r2, #105	; 0x69
 8004198:	d1f7      	bne.n	800418a <_printf_i+0x2e>
 800419a:	6819      	ldr	r1, [r3, #0]
 800419c:	6825      	ldr	r5, [r4, #0]
 800419e:	1d0a      	adds	r2, r1, #4
 80041a0:	0628      	lsls	r0, r5, #24
 80041a2:	d529      	bpl.n	80041f8 <_printf_i+0x9c>
 80041a4:	6808      	ldr	r0, [r1, #0]
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	2800      	cmp	r0, #0
 80041aa:	da03      	bge.n	80041b4 <_printf_i+0x58>
 80041ac:	232d      	movs	r3, #45	; 0x2d
 80041ae:	9a02      	ldr	r2, [sp, #8]
 80041b0:	4240      	negs	r0, r0
 80041b2:	7013      	strb	r3, [r2, #0]
 80041b4:	4e6b      	ldr	r6, [pc, #428]	; (8004364 <_printf_i+0x208>)
 80041b6:	270a      	movs	r7, #10
 80041b8:	e04f      	b.n	800425a <_printf_i+0xfe>
 80041ba:	2a73      	cmp	r2, #115	; 0x73
 80041bc:	d074      	beq.n	80042a8 <_printf_i+0x14c>
 80041be:	d808      	bhi.n	80041d2 <_printf_i+0x76>
 80041c0:	2a6f      	cmp	r2, #111	; 0x6f
 80041c2:	d01f      	beq.n	8004204 <_printf_i+0xa8>
 80041c4:	2a70      	cmp	r2, #112	; 0x70
 80041c6:	d1e0      	bne.n	800418a <_printf_i+0x2e>
 80041c8:	2220      	movs	r2, #32
 80041ca:	6809      	ldr	r1, [r1, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	6022      	str	r2, [r4, #0]
 80041d0:	e003      	b.n	80041da <_printf_i+0x7e>
 80041d2:	2a75      	cmp	r2, #117	; 0x75
 80041d4:	d016      	beq.n	8004204 <_printf_i+0xa8>
 80041d6:	2a78      	cmp	r2, #120	; 0x78
 80041d8:	d1d7      	bne.n	800418a <_printf_i+0x2e>
 80041da:	0022      	movs	r2, r4
 80041dc:	2178      	movs	r1, #120	; 0x78
 80041de:	3245      	adds	r2, #69	; 0x45
 80041e0:	7011      	strb	r1, [r2, #0]
 80041e2:	4e61      	ldr	r6, [pc, #388]	; (8004368 <_printf_i+0x20c>)
 80041e4:	e022      	b.n	800422c <_printf_i+0xd0>
 80041e6:	0025      	movs	r5, r4
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	3542      	adds	r5, #66	; 0x42
 80041ec:	1d11      	adds	r1, r2, #4
 80041ee:	6019      	str	r1, [r3, #0]
 80041f0:	6813      	ldr	r3, [r2, #0]
 80041f2:	702b      	strb	r3, [r5, #0]
 80041f4:	2301      	movs	r3, #1
 80041f6:	e065      	b.n	80042c4 <_printf_i+0x168>
 80041f8:	6808      	ldr	r0, [r1, #0]
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	0669      	lsls	r1, r5, #25
 80041fe:	d5d3      	bpl.n	80041a8 <_printf_i+0x4c>
 8004200:	b200      	sxth	r0, r0
 8004202:	e7d1      	b.n	80041a8 <_printf_i+0x4c>
 8004204:	6819      	ldr	r1, [r3, #0]
 8004206:	6825      	ldr	r5, [r4, #0]
 8004208:	1d08      	adds	r0, r1, #4
 800420a:	6018      	str	r0, [r3, #0]
 800420c:	6808      	ldr	r0, [r1, #0]
 800420e:	062e      	lsls	r6, r5, #24
 8004210:	d505      	bpl.n	800421e <_printf_i+0xc2>
 8004212:	4e54      	ldr	r6, [pc, #336]	; (8004364 <_printf_i+0x208>)
 8004214:	2708      	movs	r7, #8
 8004216:	2a6f      	cmp	r2, #111	; 0x6f
 8004218:	d01b      	beq.n	8004252 <_printf_i+0xf6>
 800421a:	270a      	movs	r7, #10
 800421c:	e019      	b.n	8004252 <_printf_i+0xf6>
 800421e:	066d      	lsls	r5, r5, #25
 8004220:	d5f7      	bpl.n	8004212 <_printf_i+0xb6>
 8004222:	b280      	uxth	r0, r0
 8004224:	e7f5      	b.n	8004212 <_printf_i+0xb6>
 8004226:	3145      	adds	r1, #69	; 0x45
 8004228:	4e4e      	ldr	r6, [pc, #312]	; (8004364 <_printf_i+0x208>)
 800422a:	700a      	strb	r2, [r1, #0]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	6822      	ldr	r2, [r4, #0]
 8004230:	1d01      	adds	r1, r0, #4
 8004232:	6800      	ldr	r0, [r0, #0]
 8004234:	6019      	str	r1, [r3, #0]
 8004236:	0615      	lsls	r5, r2, #24
 8004238:	d521      	bpl.n	800427e <_printf_i+0x122>
 800423a:	07d3      	lsls	r3, r2, #31
 800423c:	d502      	bpl.n	8004244 <_printf_i+0xe8>
 800423e:	2320      	movs	r3, #32
 8004240:	431a      	orrs	r2, r3
 8004242:	6022      	str	r2, [r4, #0]
 8004244:	2710      	movs	r7, #16
 8004246:	2800      	cmp	r0, #0
 8004248:	d103      	bne.n	8004252 <_printf_i+0xf6>
 800424a:	2320      	movs	r3, #32
 800424c:	6822      	ldr	r2, [r4, #0]
 800424e:	439a      	bics	r2, r3
 8004250:	6022      	str	r2, [r4, #0]
 8004252:	0023      	movs	r3, r4
 8004254:	2200      	movs	r2, #0
 8004256:	3343      	adds	r3, #67	; 0x43
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	6863      	ldr	r3, [r4, #4]
 800425c:	60a3      	str	r3, [r4, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	db58      	blt.n	8004314 <_printf_i+0x1b8>
 8004262:	2204      	movs	r2, #4
 8004264:	6821      	ldr	r1, [r4, #0]
 8004266:	4391      	bics	r1, r2
 8004268:	6021      	str	r1, [r4, #0]
 800426a:	2800      	cmp	r0, #0
 800426c:	d154      	bne.n	8004318 <_printf_i+0x1bc>
 800426e:	9d02      	ldr	r5, [sp, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d05a      	beq.n	800432a <_printf_i+0x1ce>
 8004274:	0025      	movs	r5, r4
 8004276:	7833      	ldrb	r3, [r6, #0]
 8004278:	3542      	adds	r5, #66	; 0x42
 800427a:	702b      	strb	r3, [r5, #0]
 800427c:	e055      	b.n	800432a <_printf_i+0x1ce>
 800427e:	0655      	lsls	r5, r2, #25
 8004280:	d5db      	bpl.n	800423a <_printf_i+0xde>
 8004282:	b280      	uxth	r0, r0
 8004284:	e7d9      	b.n	800423a <_printf_i+0xde>
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	680d      	ldr	r5, [r1, #0]
 800428a:	1d10      	adds	r0, r2, #4
 800428c:	6949      	ldr	r1, [r1, #20]
 800428e:	6018      	str	r0, [r3, #0]
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	062e      	lsls	r6, r5, #24
 8004294:	d501      	bpl.n	800429a <_printf_i+0x13e>
 8004296:	6019      	str	r1, [r3, #0]
 8004298:	e002      	b.n	80042a0 <_printf_i+0x144>
 800429a:	066d      	lsls	r5, r5, #25
 800429c:	d5fb      	bpl.n	8004296 <_printf_i+0x13a>
 800429e:	8019      	strh	r1, [r3, #0]
 80042a0:	2300      	movs	r3, #0
 80042a2:	9d02      	ldr	r5, [sp, #8]
 80042a4:	6123      	str	r3, [r4, #16]
 80042a6:	e04f      	b.n	8004348 <_printf_i+0x1ec>
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	1d11      	adds	r1, r2, #4
 80042ac:	6019      	str	r1, [r3, #0]
 80042ae:	6815      	ldr	r5, [r2, #0]
 80042b0:	2100      	movs	r1, #0
 80042b2:	6862      	ldr	r2, [r4, #4]
 80042b4:	0028      	movs	r0, r5
 80042b6:	f000 f859 	bl	800436c <memchr>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d001      	beq.n	80042c2 <_printf_i+0x166>
 80042be:	1b40      	subs	r0, r0, r5
 80042c0:	6060      	str	r0, [r4, #4]
 80042c2:	6863      	ldr	r3, [r4, #4]
 80042c4:	6123      	str	r3, [r4, #16]
 80042c6:	2300      	movs	r3, #0
 80042c8:	9a02      	ldr	r2, [sp, #8]
 80042ca:	7013      	strb	r3, [r2, #0]
 80042cc:	e03c      	b.n	8004348 <_printf_i+0x1ec>
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	002a      	movs	r2, r5
 80042d2:	9904      	ldr	r1, [sp, #16]
 80042d4:	9803      	ldr	r0, [sp, #12]
 80042d6:	9d05      	ldr	r5, [sp, #20]
 80042d8:	47a8      	blx	r5
 80042da:	1c43      	adds	r3, r0, #1
 80042dc:	d03e      	beq.n	800435c <_printf_i+0x200>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	079b      	lsls	r3, r3, #30
 80042e2:	d415      	bmi.n	8004310 <_printf_i+0x1b4>
 80042e4:	9b07      	ldr	r3, [sp, #28]
 80042e6:	68e0      	ldr	r0, [r4, #12]
 80042e8:	4298      	cmp	r0, r3
 80042ea:	da39      	bge.n	8004360 <_printf_i+0x204>
 80042ec:	0018      	movs	r0, r3
 80042ee:	e037      	b.n	8004360 <_printf_i+0x204>
 80042f0:	0022      	movs	r2, r4
 80042f2:	2301      	movs	r3, #1
 80042f4:	3219      	adds	r2, #25
 80042f6:	9904      	ldr	r1, [sp, #16]
 80042f8:	9803      	ldr	r0, [sp, #12]
 80042fa:	9e05      	ldr	r6, [sp, #20]
 80042fc:	47b0      	blx	r6
 80042fe:	1c43      	adds	r3, r0, #1
 8004300:	d02c      	beq.n	800435c <_printf_i+0x200>
 8004302:	3501      	adds	r5, #1
 8004304:	68e3      	ldr	r3, [r4, #12]
 8004306:	9a07      	ldr	r2, [sp, #28]
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	42ab      	cmp	r3, r5
 800430c:	dcf0      	bgt.n	80042f0 <_printf_i+0x194>
 800430e:	e7e9      	b.n	80042e4 <_printf_i+0x188>
 8004310:	2500      	movs	r5, #0
 8004312:	e7f7      	b.n	8004304 <_printf_i+0x1a8>
 8004314:	2800      	cmp	r0, #0
 8004316:	d0ad      	beq.n	8004274 <_printf_i+0x118>
 8004318:	9d02      	ldr	r5, [sp, #8]
 800431a:	0039      	movs	r1, r7
 800431c:	f7fb ff82 	bl	8000224 <__aeabi_uidivmod>
 8004320:	5c73      	ldrb	r3, [r6, r1]
 8004322:	3d01      	subs	r5, #1
 8004324:	702b      	strb	r3, [r5, #0]
 8004326:	2800      	cmp	r0, #0
 8004328:	d1f7      	bne.n	800431a <_printf_i+0x1be>
 800432a:	2f08      	cmp	r7, #8
 800432c:	d109      	bne.n	8004342 <_printf_i+0x1e6>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	07db      	lsls	r3, r3, #31
 8004332:	d506      	bpl.n	8004342 <_printf_i+0x1e6>
 8004334:	6863      	ldr	r3, [r4, #4]
 8004336:	6922      	ldr	r2, [r4, #16]
 8004338:	4293      	cmp	r3, r2
 800433a:	dc02      	bgt.n	8004342 <_printf_i+0x1e6>
 800433c:	2330      	movs	r3, #48	; 0x30
 800433e:	3d01      	subs	r5, #1
 8004340:	702b      	strb	r3, [r5, #0]
 8004342:	9b02      	ldr	r3, [sp, #8]
 8004344:	1b5b      	subs	r3, r3, r5
 8004346:	6123      	str	r3, [r4, #16]
 8004348:	9b05      	ldr	r3, [sp, #20]
 800434a:	aa07      	add	r2, sp, #28
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	0021      	movs	r1, r4
 8004350:	9b04      	ldr	r3, [sp, #16]
 8004352:	9803      	ldr	r0, [sp, #12]
 8004354:	f7ff fe94 	bl	8004080 <_printf_common>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d1b8      	bne.n	80042ce <_printf_i+0x172>
 800435c:	2001      	movs	r0, #1
 800435e:	4240      	negs	r0, r0
 8004360:	b009      	add	sp, #36	; 0x24
 8004362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004364:	08004631 	.word	0x08004631
 8004368:	08004642 	.word	0x08004642

0800436c <memchr>:
 800436c:	b2c9      	uxtb	r1, r1
 800436e:	1882      	adds	r2, r0, r2
 8004370:	4290      	cmp	r0, r2
 8004372:	d101      	bne.n	8004378 <memchr+0xc>
 8004374:	2000      	movs	r0, #0
 8004376:	4770      	bx	lr
 8004378:	7803      	ldrb	r3, [r0, #0]
 800437a:	428b      	cmp	r3, r1
 800437c:	d0fb      	beq.n	8004376 <memchr+0xa>
 800437e:	3001      	adds	r0, #1
 8004380:	e7f6      	b.n	8004370 <memchr+0x4>

08004382 <memcpy>:
 8004382:	2300      	movs	r3, #0
 8004384:	b510      	push	{r4, lr}
 8004386:	429a      	cmp	r2, r3
 8004388:	d100      	bne.n	800438c <memcpy+0xa>
 800438a:	bd10      	pop	{r4, pc}
 800438c:	5ccc      	ldrb	r4, [r1, r3]
 800438e:	54c4      	strb	r4, [r0, r3]
 8004390:	3301      	adds	r3, #1
 8004392:	e7f8      	b.n	8004386 <memcpy+0x4>

08004394 <memmove>:
 8004394:	b510      	push	{r4, lr}
 8004396:	4288      	cmp	r0, r1
 8004398:	d902      	bls.n	80043a0 <memmove+0xc>
 800439a:	188b      	adds	r3, r1, r2
 800439c:	4298      	cmp	r0, r3
 800439e:	d303      	bcc.n	80043a8 <memmove+0x14>
 80043a0:	2300      	movs	r3, #0
 80043a2:	e007      	b.n	80043b4 <memmove+0x20>
 80043a4:	5c8b      	ldrb	r3, [r1, r2]
 80043a6:	5483      	strb	r3, [r0, r2]
 80043a8:	3a01      	subs	r2, #1
 80043aa:	d2fb      	bcs.n	80043a4 <memmove+0x10>
 80043ac:	bd10      	pop	{r4, pc}
 80043ae:	5ccc      	ldrb	r4, [r1, r3]
 80043b0:	54c4      	strb	r4, [r0, r3]
 80043b2:	3301      	adds	r3, #1
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1fa      	bne.n	80043ae <memmove+0x1a>
 80043b8:	e7f8      	b.n	80043ac <memmove+0x18>
	...

080043bc <_free_r>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	0005      	movs	r5, r0
 80043c0:	2900      	cmp	r1, #0
 80043c2:	d010      	beq.n	80043e6 <_free_r+0x2a>
 80043c4:	1f0c      	subs	r4, r1, #4
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	da00      	bge.n	80043ce <_free_r+0x12>
 80043cc:	18e4      	adds	r4, r4, r3
 80043ce:	0028      	movs	r0, r5
 80043d0:	f000 f8d4 	bl	800457c <__malloc_lock>
 80043d4:	4a1d      	ldr	r2, [pc, #116]	; (800444c <_free_r+0x90>)
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d105      	bne.n	80043e8 <_free_r+0x2c>
 80043dc:	6063      	str	r3, [r4, #4]
 80043de:	6014      	str	r4, [r2, #0]
 80043e0:	0028      	movs	r0, r5
 80043e2:	f000 f8cc 	bl	800457e <__malloc_unlock>
 80043e6:	bd70      	pop	{r4, r5, r6, pc}
 80043e8:	42a3      	cmp	r3, r4
 80043ea:	d909      	bls.n	8004400 <_free_r+0x44>
 80043ec:	6821      	ldr	r1, [r4, #0]
 80043ee:	1860      	adds	r0, r4, r1
 80043f0:	4283      	cmp	r3, r0
 80043f2:	d1f3      	bne.n	80043dc <_free_r+0x20>
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	1841      	adds	r1, r0, r1
 80043fa:	6021      	str	r1, [r4, #0]
 80043fc:	e7ee      	b.n	80043dc <_free_r+0x20>
 80043fe:	0013      	movs	r3, r2
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	2a00      	cmp	r2, #0
 8004404:	d001      	beq.n	800440a <_free_r+0x4e>
 8004406:	42a2      	cmp	r2, r4
 8004408:	d9f9      	bls.n	80043fe <_free_r+0x42>
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	1858      	adds	r0, r3, r1
 800440e:	42a0      	cmp	r0, r4
 8004410:	d10b      	bne.n	800442a <_free_r+0x6e>
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	1809      	adds	r1, r1, r0
 8004416:	1858      	adds	r0, r3, r1
 8004418:	6019      	str	r1, [r3, #0]
 800441a:	4282      	cmp	r2, r0
 800441c:	d1e0      	bne.n	80043e0 <_free_r+0x24>
 800441e:	6810      	ldr	r0, [r2, #0]
 8004420:	6852      	ldr	r2, [r2, #4]
 8004422:	1841      	adds	r1, r0, r1
 8004424:	6019      	str	r1, [r3, #0]
 8004426:	605a      	str	r2, [r3, #4]
 8004428:	e7da      	b.n	80043e0 <_free_r+0x24>
 800442a:	42a0      	cmp	r0, r4
 800442c:	d902      	bls.n	8004434 <_free_r+0x78>
 800442e:	230c      	movs	r3, #12
 8004430:	602b      	str	r3, [r5, #0]
 8004432:	e7d5      	b.n	80043e0 <_free_r+0x24>
 8004434:	6821      	ldr	r1, [r4, #0]
 8004436:	1860      	adds	r0, r4, r1
 8004438:	4282      	cmp	r2, r0
 800443a:	d103      	bne.n	8004444 <_free_r+0x88>
 800443c:	6810      	ldr	r0, [r2, #0]
 800443e:	6852      	ldr	r2, [r2, #4]
 8004440:	1841      	adds	r1, r0, r1
 8004442:	6021      	str	r1, [r4, #0]
 8004444:	6062      	str	r2, [r4, #4]
 8004446:	605c      	str	r4, [r3, #4]
 8004448:	e7ca      	b.n	80043e0 <_free_r+0x24>
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	20000094 	.word	0x20000094

08004450 <_malloc_r>:
 8004450:	2303      	movs	r3, #3
 8004452:	b570      	push	{r4, r5, r6, lr}
 8004454:	1ccd      	adds	r5, r1, #3
 8004456:	439d      	bics	r5, r3
 8004458:	3508      	adds	r5, #8
 800445a:	0006      	movs	r6, r0
 800445c:	2d0c      	cmp	r5, #12
 800445e:	d21e      	bcs.n	800449e <_malloc_r+0x4e>
 8004460:	250c      	movs	r5, #12
 8004462:	42a9      	cmp	r1, r5
 8004464:	d81d      	bhi.n	80044a2 <_malloc_r+0x52>
 8004466:	0030      	movs	r0, r6
 8004468:	f000 f888 	bl	800457c <__malloc_lock>
 800446c:	4a25      	ldr	r2, [pc, #148]	; (8004504 <_malloc_r+0xb4>)
 800446e:	6814      	ldr	r4, [r2, #0]
 8004470:	0021      	movs	r1, r4
 8004472:	2900      	cmp	r1, #0
 8004474:	d119      	bne.n	80044aa <_malloc_r+0x5a>
 8004476:	4c24      	ldr	r4, [pc, #144]	; (8004508 <_malloc_r+0xb8>)
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <_malloc_r+0x36>
 800447e:	0030      	movs	r0, r6
 8004480:	f000 f86a 	bl	8004558 <_sbrk_r>
 8004484:	6020      	str	r0, [r4, #0]
 8004486:	0029      	movs	r1, r5
 8004488:	0030      	movs	r0, r6
 800448a:	f000 f865 	bl	8004558 <_sbrk_r>
 800448e:	1c43      	adds	r3, r0, #1
 8004490:	d12b      	bne.n	80044ea <_malloc_r+0x9a>
 8004492:	230c      	movs	r3, #12
 8004494:	0030      	movs	r0, r6
 8004496:	6033      	str	r3, [r6, #0]
 8004498:	f000 f871 	bl	800457e <__malloc_unlock>
 800449c:	e003      	b.n	80044a6 <_malloc_r+0x56>
 800449e:	2d00      	cmp	r5, #0
 80044a0:	dadf      	bge.n	8004462 <_malloc_r+0x12>
 80044a2:	230c      	movs	r3, #12
 80044a4:	6033      	str	r3, [r6, #0]
 80044a6:	2000      	movs	r0, #0
 80044a8:	bd70      	pop	{r4, r5, r6, pc}
 80044aa:	680b      	ldr	r3, [r1, #0]
 80044ac:	1b5b      	subs	r3, r3, r5
 80044ae:	d419      	bmi.n	80044e4 <_malloc_r+0x94>
 80044b0:	2b0b      	cmp	r3, #11
 80044b2:	d903      	bls.n	80044bc <_malloc_r+0x6c>
 80044b4:	600b      	str	r3, [r1, #0]
 80044b6:	18cc      	adds	r4, r1, r3
 80044b8:	6025      	str	r5, [r4, #0]
 80044ba:	e003      	b.n	80044c4 <_malloc_r+0x74>
 80044bc:	684b      	ldr	r3, [r1, #4]
 80044be:	428c      	cmp	r4, r1
 80044c0:	d10d      	bne.n	80044de <_malloc_r+0x8e>
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	0030      	movs	r0, r6
 80044c6:	f000 f85a 	bl	800457e <__malloc_unlock>
 80044ca:	0020      	movs	r0, r4
 80044cc:	2207      	movs	r2, #7
 80044ce:	300b      	adds	r0, #11
 80044d0:	1d23      	adds	r3, r4, #4
 80044d2:	4390      	bics	r0, r2
 80044d4:	1ac3      	subs	r3, r0, r3
 80044d6:	d0e7      	beq.n	80044a8 <_malloc_r+0x58>
 80044d8:	425a      	negs	r2, r3
 80044da:	50e2      	str	r2, [r4, r3]
 80044dc:	e7e4      	b.n	80044a8 <_malloc_r+0x58>
 80044de:	6063      	str	r3, [r4, #4]
 80044e0:	000c      	movs	r4, r1
 80044e2:	e7ef      	b.n	80044c4 <_malloc_r+0x74>
 80044e4:	000c      	movs	r4, r1
 80044e6:	6849      	ldr	r1, [r1, #4]
 80044e8:	e7c3      	b.n	8004472 <_malloc_r+0x22>
 80044ea:	2303      	movs	r3, #3
 80044ec:	1cc4      	adds	r4, r0, #3
 80044ee:	439c      	bics	r4, r3
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d0e1      	beq.n	80044b8 <_malloc_r+0x68>
 80044f4:	1a21      	subs	r1, r4, r0
 80044f6:	0030      	movs	r0, r6
 80044f8:	f000 f82e 	bl	8004558 <_sbrk_r>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d1db      	bne.n	80044b8 <_malloc_r+0x68>
 8004500:	e7c7      	b.n	8004492 <_malloc_r+0x42>
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	20000094 	.word	0x20000094
 8004508:	20000098 	.word	0x20000098

0800450c <_realloc_r>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	0007      	movs	r7, r0
 8004510:	000d      	movs	r5, r1
 8004512:	0016      	movs	r6, r2
 8004514:	2900      	cmp	r1, #0
 8004516:	d105      	bne.n	8004524 <_realloc_r+0x18>
 8004518:	0011      	movs	r1, r2
 800451a:	f7ff ff99 	bl	8004450 <_malloc_r>
 800451e:	0004      	movs	r4, r0
 8004520:	0020      	movs	r0, r4
 8004522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004524:	2a00      	cmp	r2, #0
 8004526:	d103      	bne.n	8004530 <_realloc_r+0x24>
 8004528:	f7ff ff48 	bl	80043bc <_free_r>
 800452c:	0034      	movs	r4, r6
 800452e:	e7f7      	b.n	8004520 <_realloc_r+0x14>
 8004530:	f000 f826 	bl	8004580 <_malloc_usable_size_r>
 8004534:	002c      	movs	r4, r5
 8004536:	42b0      	cmp	r0, r6
 8004538:	d2f2      	bcs.n	8004520 <_realloc_r+0x14>
 800453a:	0031      	movs	r1, r6
 800453c:	0038      	movs	r0, r7
 800453e:	f7ff ff87 	bl	8004450 <_malloc_r>
 8004542:	1e04      	subs	r4, r0, #0
 8004544:	d0ec      	beq.n	8004520 <_realloc_r+0x14>
 8004546:	0029      	movs	r1, r5
 8004548:	0032      	movs	r2, r6
 800454a:	f7ff ff1a 	bl	8004382 <memcpy>
 800454e:	0029      	movs	r1, r5
 8004550:	0038      	movs	r0, r7
 8004552:	f7ff ff33 	bl	80043bc <_free_r>
 8004556:	e7e3      	b.n	8004520 <_realloc_r+0x14>

08004558 <_sbrk_r>:
 8004558:	2300      	movs	r3, #0
 800455a:	b570      	push	{r4, r5, r6, lr}
 800455c:	4c06      	ldr	r4, [pc, #24]	; (8004578 <_sbrk_r+0x20>)
 800455e:	0005      	movs	r5, r0
 8004560:	0008      	movs	r0, r1
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	f7fc fc34 	bl	8000dd0 <_sbrk>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	d103      	bne.n	8004574 <_sbrk_r+0x1c>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d000      	beq.n	8004574 <_sbrk_r+0x1c>
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	bd70      	pop	{r4, r5, r6, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	20000280 	.word	0x20000280

0800457c <__malloc_lock>:
 800457c:	4770      	bx	lr

0800457e <__malloc_unlock>:
 800457e:	4770      	bx	lr

08004580 <_malloc_usable_size_r>:
 8004580:	1f0b      	subs	r3, r1, #4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	1f18      	subs	r0, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	da01      	bge.n	800458e <_malloc_usable_size_r+0xe>
 800458a:	580b      	ldr	r3, [r1, r0]
 800458c:	18c0      	adds	r0, r0, r3
 800458e:	4770      	bx	lr

08004590 <_init>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004596:	bc08      	pop	{r3}
 8004598:	469e      	mov	lr, r3
 800459a:	4770      	bx	lr

0800459c <_fini>:
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a2:	bc08      	pop	{r3}
 80045a4:	469e      	mov	lr, r3
 80045a6:	4770      	bx	lr
